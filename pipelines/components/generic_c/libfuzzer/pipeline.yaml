repo_classes:
  targets_with_sources: FilesystemRepository
  cp_image_ready: MetadataRepository
  fuzz_requests_seeds: FilesystemRepository

  fuzz_requests: MetadataRepository

  crashes: BlobRepository
  crashes_meta: MetadataRepository
  benign_harness_inputs: BlobRepository
  benign_harness_inputs_meta: MetadataRepository
  libfuzzer_harness_infos:
    cls: MetadataRepository

  libfuzzer_reaching_functions_dicts: BlobRepository
  libfuzzer_reaching_files_dicts: BlobRepository

  #################### INTERMEDIATES #########################
  libfuzzer_built_targets:
    cls: FilesystemRepository
    required: false
  libfuzzer_minimized_seeds:
    cls: FilesystemRepository
    required: false

tasks:
  libfuzzer_build:
    links:
      target_id:
        repo: targets_with_sources
        kind: InputId
      target_image_id:
        repo: cp_image_ready
        kind: InputId
      target:
        repo: targets_with_sources
        kind: InputFilepath
      libfuzzer_built_target:
        repo: libfuzzer_built_targets
        kind: OutputFilepath

    executable:
      cls: Container
      args:
        image: aixcc-libfuzzer

        host_mounts:
          "/var/run/docker.sock": "/var/run/docker.sock"
          "/shared/": "/shared/"
        template: |
          set -x
          set -e

          export TARGET_ID={{target_id | shquote}}
          export BUILD_NAME=default
          export TARGET_DIR={{target | shquote}}
          export DOCKERFILE_PATH=/shellphish/libfuzzer/Dockerfile.libfuzzer
          export DOCKER_ENV_PATH=/shellphish/libfuzzer/.env.docker.libfuzzer
          export PROJECT_ENV_PATH=""
          export RESULTS_DIR={{libfuzzer_built_target | shquote}}

          /shellphish/libfuzzer/libfuzzer_build.sh

  libfuzzer_corpus_minimize:
    links:
      fuzzing_request:
        repo: fuzz_requests
        kind: InputMetadata
      fuzz_request_seeds_dir:
        repo: fuzz_requests_seeds
        kind: InputFilepath
      harness_info:
        repo: libfuzzer_harness_infos
        kind: InputMetadata
        key: fuzzing_request.harness_id
      built_target:
        repo: libfuzzer_built_targets
        kind: InputFilepath
        key: fuzzing_request.target_id

      output_minimized_seeds_dir:
        repo: libfuzzer_minimized_seeds
        kind: OutputFilepath

    executable:
      cls: Container
      args:
        image: aixcc-libfuzzer

        host_mounts:
          "/shared/": "/shared/"
          "/var/run/docker.sock": "/var/run/docker.sock"
        template: |
          set -x
          set -e

          mkdir -p /shared/libfuzzer/minimize/
          TEMP_DIR=$(mktemp -d -p /shared/libfuzzer/minimize/)

          rsync -raz {{built_target | shquote}}/ ${TEMP_DIR}/
          cd "${TEMP_DIR}"

          REL_BIN_PATH=$(yq '.harnesses.{{harness_info.cp_harness_id}}.binary' ./project.yaml)
          DOCKER_INTERNAL_BASE_DIR=/
          WORKDIR=/work/
          HARNESS_BINARY="${DOCKER_INTERNAL_BASE_DIR}${REL_BIN_PATH}"
          SEEDS_DIR="${WORKDIR}/seeds"
          MINIMIZED_SEEDS_DIR="${WORKDIR}/minimized_seeds"

          mkdir -p "./work/seeds" "./work/minimized_seeds"
          rsync -raz {{fuzz_request_seeds_dir | shquote}} ./work/seeds/

          cp /shellphish/libfuzzer/shellphish_libfuzzer_minimize.sh ./work/shellphish_libfuzzer_minimize.sh
          ./run.sh custom /work/shellphish_libfuzzer_minimize.sh "${HARNESS_BINARY}" "${MINIMIZED_SEEDS_DIR}" "${SEEDS_DIR}" "${SEEDS_DIR}"

          rsync -raz ./work/minimized_seeds/ {{output_minimized_seeds_dir | shquote}}/

  libfuzzer_fuzz:
    # first, the component interface
    links:
      fuzzing_request:
        repo: fuzz_requests
        kind: InputMetadata
      fuzz_request_seeds_dir:
        repo: libfuzzer_minimized_seeds
        kind: InputFilepath

      harness_info:
        repo: libfuzzer_harness_infos
        kind: InputMetadata
        key: fuzzing_request.harness_id
      built_target:
        repo: libfuzzer_built_targets
        kind: InputFilepath
        key: fuzzing_request.target_id

      libfuzzer_reaching_functions_dict_path:
        repo: libfuzzer_reaching_functions_dicts
        kind: InputFilepath
        key: fuzzing_request.reachability_request_id
      libfuzzer_reaching_files_dict_path:
        repo: libfuzzer_reaching_files_dicts
        kind: InputFilepath
        key: fuzzing_request.reachability_request_id
      
      benigns_dir:
        repo: benign_harness_inputs
        kind: StreamingOutputFilepath
        cokeyed:
          meta: benign_harness_inputs_meta
        auto_meta: meta
        auto_values:
          harness_info_id: "{{ fuzzing_request.harness_id }}"
          target_id: "{{ harness_info.target_id }}"
          cp_harness_id: "{{ harness_info.cp_harness_id }}"
          cp_harness_name: "{{ harness_info.cp_harness_name }}"
          cp_harness_source_path: "{{ harness_info.cp_harness_source_path }}"
          cp_harness_binary_path: "{{ harness_info.cp_harness_binary_path }}"
          fuzzer: libfuzzer
      crashes:
        repo: crashes
        kind: StreamingOutputFilepath
        cokeyed:
          meta: crashes_meta
        auto_meta: meta
        auto_values:
          harness_info_id: "{{ fuzzing_request.harness_id }}"
          target_id: "{{ harness_info.target_id }}"
          cp_harness_id: "{{ harness_info.cp_harness_id }}"
          cp_harness_name: "{{ harness_info.cp_harness_name }}"
          cp_harness_source_path: "{{ harness_info.cp_harness_source_path }}"
          cp_harness_binary_path: "{{ harness_info.cp_harness_binary_path }}"
          fuzzer: libfuzzer

    annotations:
      maturity: fullyIntegrated
      authors:
        - honululu
      doc: |
        # libFuzzer Fuzzing Task
        This task implements libFuzzer fuzzing.

        ## pydatatask
        This task does not implement / is awaiting the following features:
          - the auto-scaling tokens to decide how many instances to spin up/maintain
          - seed syncing from/to other fuzzers?

    long_running: true
    # replicable: true
    # job_quota:
    #   cpu: 8
    #   mem: "32Gi"
  
    timeout:
      minutes: 240

    executable:
      cls: Container
      args:
        image: aixcc-libfuzzer

        host_mounts:
          "/shared/": "/shared/"
          "/var/run/docker.sock": "/var/run/docker.sock"
        template: |
          set -x
          set -e

          mkdir -p /shared/libfuzzer/fuzz/
          TEMP_DIR=$(mktemp -d -p /shared/libfuzzer/fuzz/)

          rsync -raz {{built_target | shquote}}/ ${TEMP_DIR}/
          cd "${TEMP_DIR}"

          CP_NAME=$(yq '.cp_name' ./project.yaml | sed 's/"//g' | sed 's/[^a-zA-Z0-9]/_/g' | tr '[:upper:]' '[:lower:]')
          # export DOCKER_IMAGE_NAME="aixcc-libfuzzer-${CP_NAME}-{{fuzzing_request.target_id}}"
          # docker build --build-arg="BASE_IMAGE=${BASE_IMAGE}" -t "${DOCKER_IMAGE_NAME}" -f /shellphish/libfuzzer/Dockerfile.libfuzzer .
          # export DOCKER_IMAGE_NAME=$(yq '.docker_image' ./project.yaml)

          REL_BIN_PATH=$(yq '.harnesses.{{harness_info.cp_harness_id}}.binary' ./project.yaml)
          DOCKER_INTERNAL_BASE_DIR=/
          WORKDIR=/work/
          HARNESS_BINARY="${DOCKER_INTERNAL_BASE_DIR}${REL_BIN_PATH}"
          CRASH_DIR="${WORKDIR}/crashes"
          CORPUS_DIR="${WORKDIR}/corpus"

          mkdir -p ./work/corpus ./work/crashes ./work/initial_corpus
          mkdir -p "/shared/corpus/${CP_NAME}/seeds"
          mkdir -p "/shared/corpus/${CP_NAME}/crashes"

          rsync -raz {{fuzz_request_seeds_dir | shquote}}/ ./work/initial_corpus/
          rsync -raz /shared/corpus/${CP_NAME}/seeds/ ./work/initial_corpus/
          rsync -raz /shared/corpus/${CP_NAME}/crashes/ ./work/initial_corpus/

          python3 \
            /shellphish/libfuzzer/crashmon.py \
            ./work/crashes \
            {{ crashes.main_dir | shquote }} \
            {{ crashes.cokeyed_dirs.meta | shquote }} \
            {{ crashes.lock_dir | shquote }} \
            "{{harness_info.cp_harness_id}}" &
          
          cp /shellphish/libfuzzer/* ./work/

          cp {{libfuzzer_reaching_functions_dict_path | shquote}} ./work/reaching_functions.dict
          cp {{libfuzzer_reaching_files_dict_path | shquote}} ./work/reaching_files.dict

          rsync -raz ./work/initial_corpus/ ./work/corpus/
          
          set +e
          ./run.sh custom /work/shellphish_libfuzzer_fuzz.sh "-reduce_inputs=0" "${HARNESS_BINARY}" "${CRASH_DIR}" "${CORPUS_DIR}" /work/initial_corpus/ &
          ./run.sh custom /work/shellphish_libfuzzer_fuzz.sh "-reduce_inputs=1" "${HARNESS_BINARY}" "${CRASH_DIR}" "${CORPUS_DIR}" /work/initial_corpus/ &
          ./run.sh custom /work/shellphish_libfuzzer_fuzz.sh "-reduce_inputs=0 -only_ascii=1" "${HARNESS_BINARY}" "${CRASH_DIR}" "${CORPUS_DIR}" /work/initial_corpus/ &
          ./run.sh custom /work/shellphish_libfuzzer_fuzz.sh "-reduce_inputs=0 -dict=/work/reaching_functions.dict" "${HARNESS_BINARY}" "${CRASH_DIR}" "${CORPUS_DIR}" /work/initial_corpus/ &
          ./run.sh custom /work/shellphish_libfuzzer_fuzz.sh "-reduce_inputs=0 -dict=/work/reaching_files.dict" "${HARNESS_BINARY}" "${CRASH_DIR}" "${CORPUS_DIR}" /work/initial_corpus/ &
          
          for i in $(seq 1 50); do
            ./run.sh custom /work/shellphish_libfuzzer_fuzz.sh "-reduce_inputs=0 -dict=/work/reaching_files.dict" "${HARNESS_BINARY}" "${CRASH_DIR}" "${CORPUS_DIR}" /work/initial_corpus/ &
          done
          
          while true; do
            rsync -raz ./work/crashes/ {{crashes | shquote}}/
            rsync -raz ./work/corpus/ {{benigns_dir | shquote}}/
            rsync -raz ./work/corpus/ "/shared/corpus/${CP_NAME}/seeds"
            rsync -raz ./work/crashes/ "/shared/corpus/${CP_NAME}/crashes"
            sleep 30
          done
