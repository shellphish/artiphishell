// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ast_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ast_2eproto;
class BuildAst;
class BuildAstDefaultTypeInternal;
extern BuildAstDefaultTypeInternal _BuildAst_default_instance_;
class BuildAst_BinaryOp;
class BuildAst_BinaryOpDefaultTypeInternal;
extern BuildAst_BinaryOpDefaultTypeInternal _BuildAst_BinaryOp_default_instance_;
class BuildAst_BinaryPredicate;
class BuildAst_BinaryPredicateDefaultTypeInternal;
extern BuildAst_BinaryPredicateDefaultTypeInternal _BuildAst_BinaryPredicate_default_instance_;
class BuildAst_Concat;
class BuildAst_ConcatDefaultTypeInternal;
extern BuildAst_ConcatDefaultTypeInternal _BuildAst_Concat_default_instance_;
class BuildAst_Constant;
class BuildAst_ConstantDefaultTypeInternal;
extern BuildAst_ConstantDefaultTypeInternal _BuildAst_Constant_default_instance_;
class BuildAst_Extract;
class BuildAst_ExtractDefaultTypeInternal;
extern BuildAst_ExtractDefaultTypeInternal _BuildAst_Extract_default_instance_;
class BuildAst_SignExt;
class BuildAst_SignExtDefaultTypeInternal;
extern BuildAst_SignExtDefaultTypeInternal _BuildAst_SignExt_default_instance_;
class BuildAst_SymbolicInput;
class BuildAst_SymbolicInputDefaultTypeInternal;
extern BuildAst_SymbolicInputDefaultTypeInternal _BuildAst_SymbolicInput_default_instance_;
class BuildAst_UnaryOp;
class BuildAst_UnaryOpDefaultTypeInternal;
extern BuildAst_UnaryOpDefaultTypeInternal _BuildAst_UnaryOp_default_instance_;
class BuildAst_UnaryPredicate;
class BuildAst_UnaryPredicateDefaultTypeInternal;
extern BuildAst_UnaryPredicateDefaultTypeInternal _BuildAst_UnaryPredicate_default_instance_;
class BuildAst_ZeroExt;
class BuildAst_ZeroExtDefaultTypeInternal;
extern BuildAst_ZeroExtDefaultTypeInternal _BuildAst_ZeroExt_default_instance_;
class NodeId;
class NodeIdDefaultTypeInternal;
extern NodeIdDefaultTypeInternal _NodeId_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BuildAst* Arena::CreateMaybeMessage<::BuildAst>(Arena*);
template<> ::BuildAst_BinaryOp* Arena::CreateMaybeMessage<::BuildAst_BinaryOp>(Arena*);
template<> ::BuildAst_BinaryPredicate* Arena::CreateMaybeMessage<::BuildAst_BinaryPredicate>(Arena*);
template<> ::BuildAst_Concat* Arena::CreateMaybeMessage<::BuildAst_Concat>(Arena*);
template<> ::BuildAst_Constant* Arena::CreateMaybeMessage<::BuildAst_Constant>(Arena*);
template<> ::BuildAst_Extract* Arena::CreateMaybeMessage<::BuildAst_Extract>(Arena*);
template<> ::BuildAst_SignExt* Arena::CreateMaybeMessage<::BuildAst_SignExt>(Arena*);
template<> ::BuildAst_SymbolicInput* Arena::CreateMaybeMessage<::BuildAst_SymbolicInput>(Arena*);
template<> ::BuildAst_UnaryOp* Arena::CreateMaybeMessage<::BuildAst_UnaryOp>(Arena*);
template<> ::BuildAst_UnaryPredicate* Arena::CreateMaybeMessage<::BuildAst_UnaryPredicate>(Arena*);
template<> ::BuildAst_ZeroExt* Arena::CreateMaybeMessage<::BuildAst_ZeroExt>(Arena*);
template<> ::NodeId* Arena::CreateMaybeMessage<::NodeId>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum UnOp : int {
  Not = 0,
  Neg = 1,
  Reversed = 2,
  UnOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UnOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UnOp_IsValid(int value);
constexpr UnOp UnOp_MIN = Not;
constexpr UnOp UnOp_MAX = Reversed;
constexpr int UnOp_ARRAYSIZE = UnOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnOp_descriptor();
template<typename T>
inline const std::string& UnOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnOp_descriptor(), enum_t_value);
}
inline bool UnOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnOp>(
    UnOp_descriptor(), name, value);
}
enum BinOp : int {
  Add = 0,
  Sub = 1,
  Mul = 2,
  Div = 3,
  SDiv = 4,
  And = 5,
  Or = 6,
  Xor = 7,
  BinOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BinOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BinOp_IsValid(int value);
constexpr BinOp BinOp_MIN = Add;
constexpr BinOp BinOp_MAX = Xor;
constexpr int BinOp_ARRAYSIZE = BinOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BinOp_descriptor();
template<typename T>
inline const std::string& BinOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BinOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BinOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BinOp_descriptor(), enum_t_value);
}
inline bool BinOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BinOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BinOp>(
    BinOp_descriptor(), name, value);
}
enum CmpUnOp : int {
  IsZero = 0,
  IsSigned = 1,
  CmpUnOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmpUnOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmpUnOp_IsValid(int value);
constexpr CmpUnOp CmpUnOp_MIN = IsZero;
constexpr CmpUnOp CmpUnOp_MAX = IsSigned;
constexpr int CmpUnOp_ARRAYSIZE = CmpUnOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmpUnOp_descriptor();
template<typename T>
inline const std::string& CmpUnOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmpUnOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmpUnOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmpUnOp_descriptor(), enum_t_value);
}
inline bool CmpUnOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmpUnOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmpUnOp>(
    CmpUnOp_descriptor(), name, value);
}
enum CmpBinOp : int {
  Eq = 0,
  Ne = 1,
  Le = 2,
  Lt = 3,
  Ge = 4,
  Gt = 5,
  CmpBinOp_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CmpBinOp_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CmpBinOp_IsValid(int value);
constexpr CmpBinOp CmpBinOp_MIN = Eq;
constexpr CmpBinOp CmpBinOp_MAX = Gt;
constexpr int CmpBinOp_ARRAYSIZE = CmpBinOp_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmpBinOp_descriptor();
template<typename T>
inline const std::string& CmpBinOp_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmpBinOp>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmpBinOp_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmpBinOp_descriptor(), enum_t_value);
}
inline bool CmpBinOp_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CmpBinOp* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmpBinOp>(
    CmpBinOp_descriptor(), name, value);
}
// ===================================================================

class NodeId PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NodeId) */ {
 public:
  inline NodeId() : NodeId(nullptr) {}
  virtual ~NodeId();

  NodeId(const NodeId& from);
  NodeId(NodeId&& from) noexcept
    : NodeId() {
    *this = ::std::move(from);
  }

  inline NodeId& operator=(const NodeId& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeId& operator=(NodeId&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeId& default_instance();

  static inline const NodeId* internal_default_instance() {
    return reinterpret_cast<const NodeId*>(
               &_NodeId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NodeId& a, NodeId& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeId* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeId* New() const final {
    return CreateMaybeMessage<NodeId>(nullptr);
  }

  NodeId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeId& from);
  void MergeFrom(const NodeId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NodeId";
  }
  protected:
  explicit NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:NodeId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_UnaryOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.UnaryOp) */ {
 public:
  inline BuildAst_UnaryOp() : BuildAst_UnaryOp(nullptr) {}
  virtual ~BuildAst_UnaryOp();

  BuildAst_UnaryOp(const BuildAst_UnaryOp& from);
  BuildAst_UnaryOp(BuildAst_UnaryOp&& from) noexcept
    : BuildAst_UnaryOp() {
    *this = ::std::move(from);
  }

  inline BuildAst_UnaryOp& operator=(const BuildAst_UnaryOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_UnaryOp& operator=(BuildAst_UnaryOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_UnaryOp& default_instance();

  static inline const BuildAst_UnaryOp* internal_default_instance() {
    return reinterpret_cast<const BuildAst_UnaryOp*>(
               &_BuildAst_UnaryOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BuildAst_UnaryOp& a, BuildAst_UnaryOp& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_UnaryOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_UnaryOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_UnaryOp* New() const final {
    return CreateMaybeMessage<BuildAst_UnaryOp>(nullptr);
  }

  BuildAst_UnaryOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_UnaryOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_UnaryOp& from);
  void MergeFrom(const BuildAst_UnaryOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_UnaryOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.UnaryOp";
  }
  protected:
  explicit BuildAst_UnaryOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // .NodeId arg = 2;
  bool has_arg() const;
  private:
  bool _internal_has_arg() const;
  public:
  void clear_arg();
  const ::NodeId& arg() const;
  ::NodeId* release_arg();
  ::NodeId* mutable_arg();
  void set_allocated_arg(::NodeId* arg);
  private:
  const ::NodeId& _internal_arg() const;
  ::NodeId* _internal_mutable_arg();
  public:
  void unsafe_arena_set_allocated_arg(
      ::NodeId* arg);
  ::NodeId* unsafe_arena_release_arg();

  // .UnOp op = 1;
  void clear_op();
  ::UnOp op() const;
  void set_op(::UnOp value);
  private:
  ::UnOp _internal_op() const;
  void _internal_set_op(::UnOp value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.UnaryOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* arg_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_BinaryOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.BinaryOp) */ {
 public:
  inline BuildAst_BinaryOp() : BuildAst_BinaryOp(nullptr) {}
  virtual ~BuildAst_BinaryOp();

  BuildAst_BinaryOp(const BuildAst_BinaryOp& from);
  BuildAst_BinaryOp(BuildAst_BinaryOp&& from) noexcept
    : BuildAst_BinaryOp() {
    *this = ::std::move(from);
  }

  inline BuildAst_BinaryOp& operator=(const BuildAst_BinaryOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_BinaryOp& operator=(BuildAst_BinaryOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_BinaryOp& default_instance();

  static inline const BuildAst_BinaryOp* internal_default_instance() {
    return reinterpret_cast<const BuildAst_BinaryOp*>(
               &_BuildAst_BinaryOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuildAst_BinaryOp& a, BuildAst_BinaryOp& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_BinaryOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_BinaryOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_BinaryOp* New() const final {
    return CreateMaybeMessage<BuildAst_BinaryOp>(nullptr);
  }

  BuildAst_BinaryOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_BinaryOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_BinaryOp& from);
  void MergeFrom(const BuildAst_BinaryOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_BinaryOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.BinaryOp";
  }
  protected:
  explicit BuildAst_BinaryOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // .NodeId left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::NodeId& left() const;
  ::NodeId* release_left();
  ::NodeId* mutable_left();
  void set_allocated_left(::NodeId* left);
  private:
  const ::NodeId& _internal_left() const;
  ::NodeId* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::NodeId* left);
  ::NodeId* unsafe_arena_release_left();

  // .NodeId right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::NodeId& right() const;
  ::NodeId* release_right();
  ::NodeId* mutable_right();
  void set_allocated_right(::NodeId* right);
  private:
  const ::NodeId& _internal_right() const;
  ::NodeId* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::NodeId* right);
  ::NodeId* unsafe_arena_release_right();

  // .BinOp op = 1;
  void clear_op();
  ::BinOp op() const;
  void set_op(::BinOp value);
  private:
  ::BinOp _internal_op() const;
  void _internal_set_op(::BinOp value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.BinaryOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* left_;
  ::NodeId* right_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_BinaryPredicate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.BinaryPredicate) */ {
 public:
  inline BuildAst_BinaryPredicate() : BuildAst_BinaryPredicate(nullptr) {}
  virtual ~BuildAst_BinaryPredicate();

  BuildAst_BinaryPredicate(const BuildAst_BinaryPredicate& from);
  BuildAst_BinaryPredicate(BuildAst_BinaryPredicate&& from) noexcept
    : BuildAst_BinaryPredicate() {
    *this = ::std::move(from);
  }

  inline BuildAst_BinaryPredicate& operator=(const BuildAst_BinaryPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_BinaryPredicate& operator=(BuildAst_BinaryPredicate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_BinaryPredicate& default_instance();

  static inline const BuildAst_BinaryPredicate* internal_default_instance() {
    return reinterpret_cast<const BuildAst_BinaryPredicate*>(
               &_BuildAst_BinaryPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BuildAst_BinaryPredicate& a, BuildAst_BinaryPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_BinaryPredicate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_BinaryPredicate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_BinaryPredicate* New() const final {
    return CreateMaybeMessage<BuildAst_BinaryPredicate>(nullptr);
  }

  BuildAst_BinaryPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_BinaryPredicate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_BinaryPredicate& from);
  void MergeFrom(const BuildAst_BinaryPredicate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_BinaryPredicate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.BinaryPredicate";
  }
  protected:
  explicit BuildAst_BinaryPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 2,
    kRightFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // .NodeId left = 2;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const ::NodeId& left() const;
  ::NodeId* release_left();
  ::NodeId* mutable_left();
  void set_allocated_left(::NodeId* left);
  private:
  const ::NodeId& _internal_left() const;
  ::NodeId* _internal_mutable_left();
  public:
  void unsafe_arena_set_allocated_left(
      ::NodeId* left);
  ::NodeId* unsafe_arena_release_left();

  // .NodeId right = 3;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const ::NodeId& right() const;
  ::NodeId* release_right();
  ::NodeId* mutable_right();
  void set_allocated_right(::NodeId* right);
  private:
  const ::NodeId& _internal_right() const;
  ::NodeId* _internal_mutable_right();
  public:
  void unsafe_arena_set_allocated_right(
      ::NodeId* right);
  ::NodeId* unsafe_arena_release_right();

  // .CmpBinOp op = 1;
  void clear_op();
  ::CmpBinOp op() const;
  void set_op(::CmpBinOp value);
  private:
  ::CmpBinOp _internal_op() const;
  void _internal_set_op(::CmpBinOp value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.BinaryPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* left_;
  ::NodeId* right_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_UnaryPredicate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.UnaryPredicate) */ {
 public:
  inline BuildAst_UnaryPredicate() : BuildAst_UnaryPredicate(nullptr) {}
  virtual ~BuildAst_UnaryPredicate();

  BuildAst_UnaryPredicate(const BuildAst_UnaryPredicate& from);
  BuildAst_UnaryPredicate(BuildAst_UnaryPredicate&& from) noexcept
    : BuildAst_UnaryPredicate() {
    *this = ::std::move(from);
  }

  inline BuildAst_UnaryPredicate& operator=(const BuildAst_UnaryPredicate& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_UnaryPredicate& operator=(BuildAst_UnaryPredicate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_UnaryPredicate& default_instance();

  static inline const BuildAst_UnaryPredicate* internal_default_instance() {
    return reinterpret_cast<const BuildAst_UnaryPredicate*>(
               &_BuildAst_UnaryPredicate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BuildAst_UnaryPredicate& a, BuildAst_UnaryPredicate& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_UnaryPredicate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_UnaryPredicate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_UnaryPredicate* New() const final {
    return CreateMaybeMessage<BuildAst_UnaryPredicate>(nullptr);
  }

  BuildAst_UnaryPredicate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_UnaryPredicate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_UnaryPredicate& from);
  void MergeFrom(const BuildAst_UnaryPredicate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_UnaryPredicate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.UnaryPredicate";
  }
  protected:
  explicit BuildAst_UnaryPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 2,
    kOpFieldNumber = 1,
  };
  // .NodeId arg = 2;
  bool has_arg() const;
  private:
  bool _internal_has_arg() const;
  public:
  void clear_arg();
  const ::NodeId& arg() const;
  ::NodeId* release_arg();
  ::NodeId* mutable_arg();
  void set_allocated_arg(::NodeId* arg);
  private:
  const ::NodeId& _internal_arg() const;
  ::NodeId* _internal_mutable_arg();
  public:
  void unsafe_arena_set_allocated_arg(
      ::NodeId* arg);
  ::NodeId* unsafe_arena_release_arg();

  // .CmpUnOp op = 1;
  void clear_op();
  ::CmpUnOp op() const;
  void set_op(::CmpUnOp value);
  private:
  ::CmpUnOp _internal_op() const;
  void _internal_set_op(::CmpUnOp value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.UnaryPredicate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* arg_;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_Extract PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.Extract) */ {
 public:
  inline BuildAst_Extract() : BuildAst_Extract(nullptr) {}
  virtual ~BuildAst_Extract();

  BuildAst_Extract(const BuildAst_Extract& from);
  BuildAst_Extract(BuildAst_Extract&& from) noexcept
    : BuildAst_Extract() {
    *this = ::std::move(from);
  }

  inline BuildAst_Extract& operator=(const BuildAst_Extract& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_Extract& operator=(BuildAst_Extract&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_Extract& default_instance();

  static inline const BuildAst_Extract* internal_default_instance() {
    return reinterpret_cast<const BuildAst_Extract*>(
               &_BuildAst_Extract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BuildAst_Extract& a, BuildAst_Extract& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_Extract* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_Extract* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_Extract* New() const final {
    return CreateMaybeMessage<BuildAst_Extract>(nullptr);
  }

  BuildAst_Extract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_Extract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_Extract& from);
  void MergeFrom(const BuildAst_Extract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_Extract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.Extract";
  }
  protected:
  explicit BuildAst_Extract(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerFieldNumber = 1,
    kStartFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // .NodeId inner = 1;
  bool has_inner() const;
  private:
  bool _internal_has_inner() const;
  public:
  void clear_inner();
  const ::NodeId& inner() const;
  ::NodeId* release_inner();
  ::NodeId* mutable_inner();
  void set_allocated_inner(::NodeId* inner);
  private:
  const ::NodeId& _internal_inner() const;
  ::NodeId* _internal_mutable_inner();
  public:
  void unsafe_arena_set_allocated_inner(
      ::NodeId* inner);
  ::NodeId* unsafe_arena_release_inner();

  // uint64 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 size = 3;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.Extract)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* inner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_Concat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.Concat) */ {
 public:
  inline BuildAst_Concat() : BuildAst_Concat(nullptr) {}
  virtual ~BuildAst_Concat();

  BuildAst_Concat(const BuildAst_Concat& from);
  BuildAst_Concat(BuildAst_Concat&& from) noexcept
    : BuildAst_Concat() {
    *this = ::std::move(from);
  }

  inline BuildAst_Concat& operator=(const BuildAst_Concat& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_Concat& operator=(BuildAst_Concat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_Concat& default_instance();

  static inline const BuildAst_Concat* internal_default_instance() {
    return reinterpret_cast<const BuildAst_Concat*>(
               &_BuildAst_Concat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BuildAst_Concat& a, BuildAst_Concat& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_Concat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_Concat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_Concat* New() const final {
    return CreateMaybeMessage<BuildAst_Concat>(nullptr);
  }

  BuildAst_Concat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_Concat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_Concat& from);
  void MergeFrom(const BuildAst_Concat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_Concat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.Concat";
  }
  protected:
  explicit BuildAst_Concat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialIdsFieldNumber = 1,
  };
  // repeated .NodeId partial_ids = 1;
  int partial_ids_size() const;
  private:
  int _internal_partial_ids_size() const;
  public:
  void clear_partial_ids();
  ::NodeId* mutable_partial_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeId >*
      mutable_partial_ids();
  private:
  const ::NodeId& _internal_partial_ids(int index) const;
  ::NodeId* _internal_add_partial_ids();
  public:
  const ::NodeId& partial_ids(int index) const;
  ::NodeId* add_partial_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeId >&
      partial_ids() const;

  // @@protoc_insertion_point(class_scope:BuildAst.Concat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeId > partial_ids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_ZeroExt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.ZeroExt) */ {
 public:
  inline BuildAst_ZeroExt() : BuildAst_ZeroExt(nullptr) {}
  virtual ~BuildAst_ZeroExt();

  BuildAst_ZeroExt(const BuildAst_ZeroExt& from);
  BuildAst_ZeroExt(BuildAst_ZeroExt&& from) noexcept
    : BuildAst_ZeroExt() {
    *this = ::std::move(from);
  }

  inline BuildAst_ZeroExt& operator=(const BuildAst_ZeroExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_ZeroExt& operator=(BuildAst_ZeroExt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_ZeroExt& default_instance();

  static inline const BuildAst_ZeroExt* internal_default_instance() {
    return reinterpret_cast<const BuildAst_ZeroExt*>(
               &_BuildAst_ZeroExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BuildAst_ZeroExt& a, BuildAst_ZeroExt& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_ZeroExt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_ZeroExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_ZeroExt* New() const final {
    return CreateMaybeMessage<BuildAst_ZeroExt>(nullptr);
  }

  BuildAst_ZeroExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_ZeroExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_ZeroExt& from);
  void MergeFrom(const BuildAst_ZeroExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_ZeroExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.ZeroExt";
  }
  protected:
  explicit BuildAst_ZeroExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerFieldNumber = 1,
    kByBitsFieldNumber = 2,
  };
  // .NodeId inner = 1;
  bool has_inner() const;
  private:
  bool _internal_has_inner() const;
  public:
  void clear_inner();
  const ::NodeId& inner() const;
  ::NodeId* release_inner();
  ::NodeId* mutable_inner();
  void set_allocated_inner(::NodeId* inner);
  private:
  const ::NodeId& _internal_inner() const;
  ::NodeId* _internal_mutable_inner();
  public:
  void unsafe_arena_set_allocated_inner(
      ::NodeId* inner);
  ::NodeId* unsafe_arena_release_inner();

  // uint64 by_bits = 2;
  void clear_by_bits();
  ::PROTOBUF_NAMESPACE_ID::uint64 by_bits() const;
  void set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_by_bits() const;
  void _internal_set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.ZeroExt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* inner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 by_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_SignExt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.SignExt) */ {
 public:
  inline BuildAst_SignExt() : BuildAst_SignExt(nullptr) {}
  virtual ~BuildAst_SignExt();

  BuildAst_SignExt(const BuildAst_SignExt& from);
  BuildAst_SignExt(BuildAst_SignExt&& from) noexcept
    : BuildAst_SignExt() {
    *this = ::std::move(from);
  }

  inline BuildAst_SignExt& operator=(const BuildAst_SignExt& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_SignExt& operator=(BuildAst_SignExt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_SignExt& default_instance();

  static inline const BuildAst_SignExt* internal_default_instance() {
    return reinterpret_cast<const BuildAst_SignExt*>(
               &_BuildAst_SignExt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BuildAst_SignExt& a, BuildAst_SignExt& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_SignExt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_SignExt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_SignExt* New() const final {
    return CreateMaybeMessage<BuildAst_SignExt>(nullptr);
  }

  BuildAst_SignExt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_SignExt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_SignExt& from);
  void MergeFrom(const BuildAst_SignExt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_SignExt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.SignExt";
  }
  protected:
  explicit BuildAst_SignExt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerFieldNumber = 1,
    kByBitsFieldNumber = 2,
  };
  // .NodeId inner = 1;
  bool has_inner() const;
  private:
  bool _internal_has_inner() const;
  public:
  void clear_inner();
  const ::NodeId& inner() const;
  ::NodeId* release_inner();
  ::NodeId* mutable_inner();
  void set_allocated_inner(::NodeId* inner);
  private:
  const ::NodeId& _internal_inner() const;
  ::NodeId* _internal_mutable_inner();
  public:
  void unsafe_arena_set_allocated_inner(
      ::NodeId* inner);
  ::NodeId* unsafe_arena_release_inner();

  // uint64 by_bits = 2;
  void clear_by_bits();
  ::PROTOBUF_NAMESPACE_ID::uint64 by_bits() const;
  void set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_by_bits() const;
  void _internal_set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.SignExt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::NodeId* inner_;
  ::PROTOBUF_NAMESPACE_ID::uint64 by_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_SymbolicInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.SymbolicInput) */ {
 public:
  inline BuildAst_SymbolicInput() : BuildAst_SymbolicInput(nullptr) {}
  virtual ~BuildAst_SymbolicInput();

  BuildAst_SymbolicInput(const BuildAst_SymbolicInput& from);
  BuildAst_SymbolicInput(BuildAst_SymbolicInput&& from) noexcept
    : BuildAst_SymbolicInput() {
    *this = ::std::move(from);
  }

  inline BuildAst_SymbolicInput& operator=(const BuildAst_SymbolicInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_SymbolicInput& operator=(BuildAst_SymbolicInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_SymbolicInput& default_instance();

  static inline const BuildAst_SymbolicInput* internal_default_instance() {
    return reinterpret_cast<const BuildAst_SymbolicInput*>(
               &_BuildAst_SymbolicInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BuildAst_SymbolicInput& a, BuildAst_SymbolicInput& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_SymbolicInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_SymbolicInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_SymbolicInput* New() const final {
    return CreateMaybeMessage<BuildAst_SymbolicInput>(nullptr);
  }

  BuildAst_SymbolicInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_SymbolicInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_SymbolicInput& from);
  void MergeFrom(const BuildAst_SymbolicInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_SymbolicInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.SymbolicInput";
  }
  protected:
  explicit BuildAst_SymbolicInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kBitsFieldNumber = 2,
    kByteOffsetFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 bits = 2;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint64 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 byte_offset = 3;
  void clear_byte_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 byte_offset() const;
  void set_byte_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_byte_offset() const;
  void _internal_set_byte_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.SymbolicInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bits_;
  ::PROTOBUF_NAMESPACE_ID::uint64 byte_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst_Constant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst.Constant) */ {
 public:
  inline BuildAst_Constant() : BuildAst_Constant(nullptr) {}
  virtual ~BuildAst_Constant();

  BuildAst_Constant(const BuildAst_Constant& from);
  BuildAst_Constant(BuildAst_Constant&& from) noexcept
    : BuildAst_Constant() {
    *this = ::std::move(from);
  }

  inline BuildAst_Constant& operator=(const BuildAst_Constant& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst_Constant& operator=(BuildAst_Constant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst_Constant& default_instance();

  static inline const BuildAst_Constant* internal_default_instance() {
    return reinterpret_cast<const BuildAst_Constant*>(
               &_BuildAst_Constant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BuildAst_Constant& a, BuildAst_Constant& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst_Constant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst_Constant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst_Constant* New() const final {
    return CreateMaybeMessage<BuildAst_Constant>(nullptr);
  }

  BuildAst_Constant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst_Constant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst_Constant& from);
  void MergeFrom(const BuildAst_Constant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst_Constant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst.Constant";
  }
  protected:
  explicit BuildAst_Constant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kBitsFieldNumber = 2,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bits = 2;
  void clear_bits();
  ::PROTOBUF_NAMESPACE_ID::uint64 bits() const;
  void set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bits() const;
  void _internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:BuildAst.Constant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ast_2eproto;
};
// -------------------------------------------------------------------

class BuildAst PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BuildAst) */ {
 public:
  inline BuildAst() : BuildAst(nullptr) {}
  virtual ~BuildAst();

  BuildAst(const BuildAst& from);
  BuildAst(BuildAst&& from) noexcept
    : BuildAst() {
    *this = ::std::move(from);
  }

  inline BuildAst& operator=(const BuildAst& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildAst& operator=(BuildAst&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildAst& default_instance();

  enum MessageCase {
    kConstant = 1,
    kSymInput = 2,
    kOpUnary = 3,
    kOpBinary = 4,
    kPredUnary = 5,
    kPredBinary = 6,
    kExtract = 7,
    kConcat = 8,
    kZeroExt = 9,
    kSignExt = 10,
    MESSAGE_NOT_SET = 0,
  };

  static inline const BuildAst* internal_default_instance() {
    return reinterpret_cast<const BuildAst*>(
               &_BuildAst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BuildAst& a, BuildAst& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildAst* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BuildAst* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildAst* New() const final {
    return CreateMaybeMessage<BuildAst>(nullptr);
  }

  BuildAst* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildAst>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildAst& from);
  void MergeFrom(const BuildAst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildAst* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BuildAst";
  }
  protected:
  explicit BuildAst(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ast_2eproto);
    return ::descriptor_table_ast_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BuildAst_UnaryOp UnaryOp;
  typedef BuildAst_BinaryOp BinaryOp;
  typedef BuildAst_BinaryPredicate BinaryPredicate;
  typedef BuildAst_UnaryPredicate UnaryPredicate;
  typedef BuildAst_Extract Extract;
  typedef BuildAst_Concat Concat;
  typedef BuildAst_ZeroExt ZeroExt;
  typedef BuildAst_SignExt SignExt;
  typedef BuildAst_SymbolicInput SymbolicInput;
  typedef BuildAst_Constant Constant;

  // accessors -------------------------------------------------------

  enum : int {
    kConstantFieldNumber = 1,
    kSymInputFieldNumber = 2,
    kOpUnaryFieldNumber = 3,
    kOpBinaryFieldNumber = 4,
    kPredUnaryFieldNumber = 5,
    kPredBinaryFieldNumber = 6,
    kExtractFieldNumber = 7,
    kConcatFieldNumber = 8,
    kZeroExtFieldNumber = 9,
    kSignExtFieldNumber = 10,
  };
  // .BuildAst.Constant constant = 1;
  bool has_constant() const;
  private:
  bool _internal_has_constant() const;
  public:
  void clear_constant();
  const ::BuildAst_Constant& constant() const;
  ::BuildAst_Constant* release_constant();
  ::BuildAst_Constant* mutable_constant();
  void set_allocated_constant(::BuildAst_Constant* constant);
  private:
  const ::BuildAst_Constant& _internal_constant() const;
  ::BuildAst_Constant* _internal_mutable_constant();
  public:
  void unsafe_arena_set_allocated_constant(
      ::BuildAst_Constant* constant);
  ::BuildAst_Constant* unsafe_arena_release_constant();

  // .BuildAst.SymbolicInput sym_input = 2;
  bool has_sym_input() const;
  private:
  bool _internal_has_sym_input() const;
  public:
  void clear_sym_input();
  const ::BuildAst_SymbolicInput& sym_input() const;
  ::BuildAst_SymbolicInput* release_sym_input();
  ::BuildAst_SymbolicInput* mutable_sym_input();
  void set_allocated_sym_input(::BuildAst_SymbolicInput* sym_input);
  private:
  const ::BuildAst_SymbolicInput& _internal_sym_input() const;
  ::BuildAst_SymbolicInput* _internal_mutable_sym_input();
  public:
  void unsafe_arena_set_allocated_sym_input(
      ::BuildAst_SymbolicInput* sym_input);
  ::BuildAst_SymbolicInput* unsafe_arena_release_sym_input();

  // .BuildAst.UnaryOp op_unary = 3;
  bool has_op_unary() const;
  private:
  bool _internal_has_op_unary() const;
  public:
  void clear_op_unary();
  const ::BuildAst_UnaryOp& op_unary() const;
  ::BuildAst_UnaryOp* release_op_unary();
  ::BuildAst_UnaryOp* mutable_op_unary();
  void set_allocated_op_unary(::BuildAst_UnaryOp* op_unary);
  private:
  const ::BuildAst_UnaryOp& _internal_op_unary() const;
  ::BuildAst_UnaryOp* _internal_mutable_op_unary();
  public:
  void unsafe_arena_set_allocated_op_unary(
      ::BuildAst_UnaryOp* op_unary);
  ::BuildAst_UnaryOp* unsafe_arena_release_op_unary();

  // .BuildAst.BinaryOp op_binary = 4;
  bool has_op_binary() const;
  private:
  bool _internal_has_op_binary() const;
  public:
  void clear_op_binary();
  const ::BuildAst_BinaryOp& op_binary() const;
  ::BuildAst_BinaryOp* release_op_binary();
  ::BuildAst_BinaryOp* mutable_op_binary();
  void set_allocated_op_binary(::BuildAst_BinaryOp* op_binary);
  private:
  const ::BuildAst_BinaryOp& _internal_op_binary() const;
  ::BuildAst_BinaryOp* _internal_mutable_op_binary();
  public:
  void unsafe_arena_set_allocated_op_binary(
      ::BuildAst_BinaryOp* op_binary);
  ::BuildAst_BinaryOp* unsafe_arena_release_op_binary();

  // .BuildAst.UnaryPredicate pred_unary = 5;
  bool has_pred_unary() const;
  private:
  bool _internal_has_pred_unary() const;
  public:
  void clear_pred_unary();
  const ::BuildAst_UnaryPredicate& pred_unary() const;
  ::BuildAst_UnaryPredicate* release_pred_unary();
  ::BuildAst_UnaryPredicate* mutable_pred_unary();
  void set_allocated_pred_unary(::BuildAst_UnaryPredicate* pred_unary);
  private:
  const ::BuildAst_UnaryPredicate& _internal_pred_unary() const;
  ::BuildAst_UnaryPredicate* _internal_mutable_pred_unary();
  public:
  void unsafe_arena_set_allocated_pred_unary(
      ::BuildAst_UnaryPredicate* pred_unary);
  ::BuildAst_UnaryPredicate* unsafe_arena_release_pred_unary();

  // .BuildAst.BinaryPredicate pred_binary = 6;
  bool has_pred_binary() const;
  private:
  bool _internal_has_pred_binary() const;
  public:
  void clear_pred_binary();
  const ::BuildAst_BinaryPredicate& pred_binary() const;
  ::BuildAst_BinaryPredicate* release_pred_binary();
  ::BuildAst_BinaryPredicate* mutable_pred_binary();
  void set_allocated_pred_binary(::BuildAst_BinaryPredicate* pred_binary);
  private:
  const ::BuildAst_BinaryPredicate& _internal_pred_binary() const;
  ::BuildAst_BinaryPredicate* _internal_mutable_pred_binary();
  public:
  void unsafe_arena_set_allocated_pred_binary(
      ::BuildAst_BinaryPredicate* pred_binary);
  ::BuildAst_BinaryPredicate* unsafe_arena_release_pred_binary();

  // .BuildAst.Extract extract = 7;
  bool has_extract() const;
  private:
  bool _internal_has_extract() const;
  public:
  void clear_extract();
  const ::BuildAst_Extract& extract() const;
  ::BuildAst_Extract* release_extract();
  ::BuildAst_Extract* mutable_extract();
  void set_allocated_extract(::BuildAst_Extract* extract);
  private:
  const ::BuildAst_Extract& _internal_extract() const;
  ::BuildAst_Extract* _internal_mutable_extract();
  public:
  void unsafe_arena_set_allocated_extract(
      ::BuildAst_Extract* extract);
  ::BuildAst_Extract* unsafe_arena_release_extract();

  // .BuildAst.Concat concat = 8;
  bool has_concat() const;
  private:
  bool _internal_has_concat() const;
  public:
  void clear_concat();
  const ::BuildAst_Concat& concat() const;
  ::BuildAst_Concat* release_concat();
  ::BuildAst_Concat* mutable_concat();
  void set_allocated_concat(::BuildAst_Concat* concat);
  private:
  const ::BuildAst_Concat& _internal_concat() const;
  ::BuildAst_Concat* _internal_mutable_concat();
  public:
  void unsafe_arena_set_allocated_concat(
      ::BuildAst_Concat* concat);
  ::BuildAst_Concat* unsafe_arena_release_concat();

  // .BuildAst.ZeroExt zero_ext = 9;
  bool has_zero_ext() const;
  private:
  bool _internal_has_zero_ext() const;
  public:
  void clear_zero_ext();
  const ::BuildAst_ZeroExt& zero_ext() const;
  ::BuildAst_ZeroExt* release_zero_ext();
  ::BuildAst_ZeroExt* mutable_zero_ext();
  void set_allocated_zero_ext(::BuildAst_ZeroExt* zero_ext);
  private:
  const ::BuildAst_ZeroExt& _internal_zero_ext() const;
  ::BuildAst_ZeroExt* _internal_mutable_zero_ext();
  public:
  void unsafe_arena_set_allocated_zero_ext(
      ::BuildAst_ZeroExt* zero_ext);
  ::BuildAst_ZeroExt* unsafe_arena_release_zero_ext();

  // .BuildAst.SignExt sign_ext = 10;
  bool has_sign_ext() const;
  private:
  bool _internal_has_sign_ext() const;
  public:
  void clear_sign_ext();
  const ::BuildAst_SignExt& sign_ext() const;
  ::BuildAst_SignExt* release_sign_ext();
  ::BuildAst_SignExt* mutable_sign_ext();
  void set_allocated_sign_ext(::BuildAst_SignExt* sign_ext);
  private:
  const ::BuildAst_SignExt& _internal_sign_ext() const;
  ::BuildAst_SignExt* _internal_mutable_sign_ext();
  public:
  void unsafe_arena_set_allocated_sign_ext(
      ::BuildAst_SignExt* sign_ext);
  ::BuildAst_SignExt* unsafe_arena_release_sign_ext();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:BuildAst)
 private:
  class _Internal;
  void set_has_constant();
  void set_has_sym_input();
  void set_has_op_unary();
  void set_has_op_binary();
  void set_has_pred_unary();
  void set_has_pred_binary();
  void set_has_extract();
  void set_has_concat();
  void set_has_zero_ext();
  void set_has_sign_ext();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::BuildAst_Constant* constant_;
    ::BuildAst_SymbolicInput* sym_input_;
    ::BuildAst_UnaryOp* op_unary_;
    ::BuildAst_BinaryOp* op_binary_;
    ::BuildAst_UnaryPredicate* pred_unary_;
    ::BuildAst_BinaryPredicate* pred_binary_;
    ::BuildAst_Extract* extract_;
    ::BuildAst_Concat* concat_;
    ::BuildAst_ZeroExt* zero_ext_;
    ::BuildAst_SignExt* sign_ext_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeId

// uint64 id = 1;
inline void NodeId::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeId::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NodeId::id() const {
  // @@protoc_insertion_point(field_get:NodeId.id)
  return _internal_id();
}
inline void NodeId::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void NodeId::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NodeId.id)
}

// -------------------------------------------------------------------

// BuildAst_UnaryOp

// .UnOp op = 1;
inline void BuildAst_UnaryOp::clear_op() {
  op_ = 0;
}
inline ::UnOp BuildAst_UnaryOp::_internal_op() const {
  return static_cast< ::UnOp >(op_);
}
inline ::UnOp BuildAst_UnaryOp::op() const {
  // @@protoc_insertion_point(field_get:BuildAst.UnaryOp.op)
  return _internal_op();
}
inline void BuildAst_UnaryOp::_internal_set_op(::UnOp value) {
  
  op_ = value;
}
inline void BuildAst_UnaryOp::set_op(::UnOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:BuildAst.UnaryOp.op)
}

// .NodeId arg = 2;
inline bool BuildAst_UnaryOp::_internal_has_arg() const {
  return this != internal_default_instance() && arg_ != nullptr;
}
inline bool BuildAst_UnaryOp::has_arg() const {
  return _internal_has_arg();
}
inline void BuildAst_UnaryOp::clear_arg() {
  if (GetArena() == nullptr && arg_ != nullptr) {
    delete arg_;
  }
  arg_ = nullptr;
}
inline const ::NodeId& BuildAst_UnaryOp::_internal_arg() const {
  const ::NodeId* p = arg_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_UnaryOp::arg() const {
  // @@protoc_insertion_point(field_get:BuildAst.UnaryOp.arg)
  return _internal_arg();
}
inline void BuildAst_UnaryOp::unsafe_arena_set_allocated_arg(
    ::NodeId* arg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arg_);
  }
  arg_ = arg;
  if (arg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.UnaryOp.arg)
}
inline ::NodeId* BuildAst_UnaryOp::release_arg() {
  
  ::NodeId* temp = arg_;
  arg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_UnaryOp::unsafe_arena_release_arg() {
  // @@protoc_insertion_point(field_release:BuildAst.UnaryOp.arg)
  
  ::NodeId* temp = arg_;
  arg_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_UnaryOp::_internal_mutable_arg() {
  
  if (arg_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    arg_ = p;
  }
  return arg_;
}
inline ::NodeId* BuildAst_UnaryOp::mutable_arg() {
  // @@protoc_insertion_point(field_mutable:BuildAst.UnaryOp.arg)
  return _internal_mutable_arg();
}
inline void BuildAst_UnaryOp::set_allocated_arg(::NodeId* arg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete arg_;
  }
  if (arg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arg);
    if (message_arena != submessage_arena) {
      arg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arg, submessage_arena);
    }
    
  } else {
    
  }
  arg_ = arg;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.UnaryOp.arg)
}

// -------------------------------------------------------------------

// BuildAst_BinaryOp

// .BinOp op = 1;
inline void BuildAst_BinaryOp::clear_op() {
  op_ = 0;
}
inline ::BinOp BuildAst_BinaryOp::_internal_op() const {
  return static_cast< ::BinOp >(op_);
}
inline ::BinOp BuildAst_BinaryOp::op() const {
  // @@protoc_insertion_point(field_get:BuildAst.BinaryOp.op)
  return _internal_op();
}
inline void BuildAst_BinaryOp::_internal_set_op(::BinOp value) {
  
  op_ = value;
}
inline void BuildAst_BinaryOp::set_op(::BinOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:BuildAst.BinaryOp.op)
}

// .NodeId left = 2;
inline bool BuildAst_BinaryOp::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool BuildAst_BinaryOp::has_left() const {
  return _internal_has_left();
}
inline void BuildAst_BinaryOp::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::NodeId& BuildAst_BinaryOp::_internal_left() const {
  const ::NodeId* p = left_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_BinaryOp::left() const {
  // @@protoc_insertion_point(field_get:BuildAst.BinaryOp.left)
  return _internal_left();
}
inline void BuildAst_BinaryOp::unsafe_arena_set_allocated_left(
    ::NodeId* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.BinaryOp.left)
}
inline ::NodeId* BuildAst_BinaryOp::release_left() {
  
  ::NodeId* temp = left_;
  left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_BinaryOp::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:BuildAst.BinaryOp.left)
  
  ::NodeId* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_BinaryOp::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::NodeId* BuildAst_BinaryOp::mutable_left() {
  // @@protoc_insertion_point(field_mutable:BuildAst.BinaryOp.left)
  return _internal_mutable_left();
}
inline void BuildAst_BinaryOp::set_allocated_left(::NodeId* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.BinaryOp.left)
}

// .NodeId right = 3;
inline bool BuildAst_BinaryOp::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool BuildAst_BinaryOp::has_right() const {
  return _internal_has_right();
}
inline void BuildAst_BinaryOp::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::NodeId& BuildAst_BinaryOp::_internal_right() const {
  const ::NodeId* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_BinaryOp::right() const {
  // @@protoc_insertion_point(field_get:BuildAst.BinaryOp.right)
  return _internal_right();
}
inline void BuildAst_BinaryOp::unsafe_arena_set_allocated_right(
    ::NodeId* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.BinaryOp.right)
}
inline ::NodeId* BuildAst_BinaryOp::release_right() {
  
  ::NodeId* temp = right_;
  right_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_BinaryOp::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:BuildAst.BinaryOp.right)
  
  ::NodeId* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_BinaryOp::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::NodeId* BuildAst_BinaryOp::mutable_right() {
  // @@protoc_insertion_point(field_mutable:BuildAst.BinaryOp.right)
  return _internal_mutable_right();
}
inline void BuildAst_BinaryOp::set_allocated_right(::NodeId* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.BinaryOp.right)
}

// -------------------------------------------------------------------

// BuildAst_BinaryPredicate

// .CmpBinOp op = 1;
inline void BuildAst_BinaryPredicate::clear_op() {
  op_ = 0;
}
inline ::CmpBinOp BuildAst_BinaryPredicate::_internal_op() const {
  return static_cast< ::CmpBinOp >(op_);
}
inline ::CmpBinOp BuildAst_BinaryPredicate::op() const {
  // @@protoc_insertion_point(field_get:BuildAst.BinaryPredicate.op)
  return _internal_op();
}
inline void BuildAst_BinaryPredicate::_internal_set_op(::CmpBinOp value) {
  
  op_ = value;
}
inline void BuildAst_BinaryPredicate::set_op(::CmpBinOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:BuildAst.BinaryPredicate.op)
}

// .NodeId left = 2;
inline bool BuildAst_BinaryPredicate::_internal_has_left() const {
  return this != internal_default_instance() && left_ != nullptr;
}
inline bool BuildAst_BinaryPredicate::has_left() const {
  return _internal_has_left();
}
inline void BuildAst_BinaryPredicate::clear_left() {
  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
}
inline const ::NodeId& BuildAst_BinaryPredicate::_internal_left() const {
  const ::NodeId* p = left_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_BinaryPredicate::left() const {
  // @@protoc_insertion_point(field_get:BuildAst.BinaryPredicate.left)
  return _internal_left();
}
inline void BuildAst_BinaryPredicate::unsafe_arena_set_allocated_left(
    ::NodeId* left) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(left_);
  }
  left_ = left;
  if (left) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.BinaryPredicate.left)
}
inline ::NodeId* BuildAst_BinaryPredicate::release_left() {
  
  ::NodeId* temp = left_;
  left_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_BinaryPredicate::unsafe_arena_release_left() {
  // @@protoc_insertion_point(field_release:BuildAst.BinaryPredicate.left)
  
  ::NodeId* temp = left_;
  left_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_BinaryPredicate::_internal_mutable_left() {
  
  if (left_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    left_ = p;
  }
  return left_;
}
inline ::NodeId* BuildAst_BinaryPredicate::mutable_left() {
  // @@protoc_insertion_point(field_mutable:BuildAst.BinaryPredicate.left)
  return _internal_mutable_left();
}
inline void BuildAst_BinaryPredicate::set_allocated_left(::NodeId* left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete left_;
  }
  if (left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(left);
    if (message_arena != submessage_arena) {
      left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, left, submessage_arena);
    }
    
  } else {
    
  }
  left_ = left;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.BinaryPredicate.left)
}

// .NodeId right = 3;
inline bool BuildAst_BinaryPredicate::_internal_has_right() const {
  return this != internal_default_instance() && right_ != nullptr;
}
inline bool BuildAst_BinaryPredicate::has_right() const {
  return _internal_has_right();
}
inline void BuildAst_BinaryPredicate::clear_right() {
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
}
inline const ::NodeId& BuildAst_BinaryPredicate::_internal_right() const {
  const ::NodeId* p = right_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_BinaryPredicate::right() const {
  // @@protoc_insertion_point(field_get:BuildAst.BinaryPredicate.right)
  return _internal_right();
}
inline void BuildAst_BinaryPredicate::unsafe_arena_set_allocated_right(
    ::NodeId* right) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(right_);
  }
  right_ = right;
  if (right) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.BinaryPredicate.right)
}
inline ::NodeId* BuildAst_BinaryPredicate::release_right() {
  
  ::NodeId* temp = right_;
  right_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_BinaryPredicate::unsafe_arena_release_right() {
  // @@protoc_insertion_point(field_release:BuildAst.BinaryPredicate.right)
  
  ::NodeId* temp = right_;
  right_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_BinaryPredicate::_internal_mutable_right() {
  
  if (right_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    right_ = p;
  }
  return right_;
}
inline ::NodeId* BuildAst_BinaryPredicate::mutable_right() {
  // @@protoc_insertion_point(field_mutable:BuildAst.BinaryPredicate.right)
  return _internal_mutable_right();
}
inline void BuildAst_BinaryPredicate::set_allocated_right(::NodeId* right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete right_;
  }
  if (right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(right);
    if (message_arena != submessage_arena) {
      right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, right, submessage_arena);
    }
    
  } else {
    
  }
  right_ = right;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.BinaryPredicate.right)
}

// -------------------------------------------------------------------

// BuildAst_UnaryPredicate

// .CmpUnOp op = 1;
inline void BuildAst_UnaryPredicate::clear_op() {
  op_ = 0;
}
inline ::CmpUnOp BuildAst_UnaryPredicate::_internal_op() const {
  return static_cast< ::CmpUnOp >(op_);
}
inline ::CmpUnOp BuildAst_UnaryPredicate::op() const {
  // @@protoc_insertion_point(field_get:BuildAst.UnaryPredicate.op)
  return _internal_op();
}
inline void BuildAst_UnaryPredicate::_internal_set_op(::CmpUnOp value) {
  
  op_ = value;
}
inline void BuildAst_UnaryPredicate::set_op(::CmpUnOp value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:BuildAst.UnaryPredicate.op)
}

// .NodeId arg = 2;
inline bool BuildAst_UnaryPredicate::_internal_has_arg() const {
  return this != internal_default_instance() && arg_ != nullptr;
}
inline bool BuildAst_UnaryPredicate::has_arg() const {
  return _internal_has_arg();
}
inline void BuildAst_UnaryPredicate::clear_arg() {
  if (GetArena() == nullptr && arg_ != nullptr) {
    delete arg_;
  }
  arg_ = nullptr;
}
inline const ::NodeId& BuildAst_UnaryPredicate::_internal_arg() const {
  const ::NodeId* p = arg_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_UnaryPredicate::arg() const {
  // @@protoc_insertion_point(field_get:BuildAst.UnaryPredicate.arg)
  return _internal_arg();
}
inline void BuildAst_UnaryPredicate::unsafe_arena_set_allocated_arg(
    ::NodeId* arg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(arg_);
  }
  arg_ = arg;
  if (arg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.UnaryPredicate.arg)
}
inline ::NodeId* BuildAst_UnaryPredicate::release_arg() {
  
  ::NodeId* temp = arg_;
  arg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_UnaryPredicate::unsafe_arena_release_arg() {
  // @@protoc_insertion_point(field_release:BuildAst.UnaryPredicate.arg)
  
  ::NodeId* temp = arg_;
  arg_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_UnaryPredicate::_internal_mutable_arg() {
  
  if (arg_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    arg_ = p;
  }
  return arg_;
}
inline ::NodeId* BuildAst_UnaryPredicate::mutable_arg() {
  // @@protoc_insertion_point(field_mutable:BuildAst.UnaryPredicate.arg)
  return _internal_mutable_arg();
}
inline void BuildAst_UnaryPredicate::set_allocated_arg(::NodeId* arg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete arg_;
  }
  if (arg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(arg);
    if (message_arena != submessage_arena) {
      arg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arg, submessage_arena);
    }
    
  } else {
    
  }
  arg_ = arg;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.UnaryPredicate.arg)
}

// -------------------------------------------------------------------

// BuildAst_Extract

// .NodeId inner = 1;
inline bool BuildAst_Extract::_internal_has_inner() const {
  return this != internal_default_instance() && inner_ != nullptr;
}
inline bool BuildAst_Extract::has_inner() const {
  return _internal_has_inner();
}
inline void BuildAst_Extract::clear_inner() {
  if (GetArena() == nullptr && inner_ != nullptr) {
    delete inner_;
  }
  inner_ = nullptr;
}
inline const ::NodeId& BuildAst_Extract::_internal_inner() const {
  const ::NodeId* p = inner_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_Extract::inner() const {
  // @@protoc_insertion_point(field_get:BuildAst.Extract.inner)
  return _internal_inner();
}
inline void BuildAst_Extract::unsafe_arena_set_allocated_inner(
    ::NodeId* inner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_);
  }
  inner_ = inner;
  if (inner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.Extract.inner)
}
inline ::NodeId* BuildAst_Extract::release_inner() {
  
  ::NodeId* temp = inner_;
  inner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_Extract::unsafe_arena_release_inner() {
  // @@protoc_insertion_point(field_release:BuildAst.Extract.inner)
  
  ::NodeId* temp = inner_;
  inner_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_Extract::_internal_mutable_inner() {
  
  if (inner_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    inner_ = p;
  }
  return inner_;
}
inline ::NodeId* BuildAst_Extract::mutable_inner() {
  // @@protoc_insertion_point(field_mutable:BuildAst.Extract.inner)
  return _internal_mutable_inner();
}
inline void BuildAst_Extract::set_allocated_inner(::NodeId* inner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inner_;
  }
  if (inner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inner);
    if (message_arena != submessage_arena) {
      inner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner, submessage_arena);
    }
    
  } else {
    
  }
  inner_ = inner;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.Extract.inner)
}

// uint64 start = 2;
inline void BuildAst_Extract::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Extract::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Extract::start() const {
  // @@protoc_insertion_point(field_get:BuildAst.Extract.start)
  return _internal_start();
}
inline void BuildAst_Extract::_internal_set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_ = value;
}
inline void BuildAst_Extract::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:BuildAst.Extract.start)
}

// uint64 size = 3;
inline void BuildAst_Extract::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Extract::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Extract::size() const {
  // @@protoc_insertion_point(field_get:BuildAst.Extract.size)
  return _internal_size();
}
inline void BuildAst_Extract::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void BuildAst_Extract::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:BuildAst.Extract.size)
}

// -------------------------------------------------------------------

// BuildAst_Concat

// repeated .NodeId partial_ids = 1;
inline int BuildAst_Concat::_internal_partial_ids_size() const {
  return partial_ids_.size();
}
inline int BuildAst_Concat::partial_ids_size() const {
  return _internal_partial_ids_size();
}
inline void BuildAst_Concat::clear_partial_ids() {
  partial_ids_.Clear();
}
inline ::NodeId* BuildAst_Concat::mutable_partial_ids(int index) {
  // @@protoc_insertion_point(field_mutable:BuildAst.Concat.partial_ids)
  return partial_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeId >*
BuildAst_Concat::mutable_partial_ids() {
  // @@protoc_insertion_point(field_mutable_list:BuildAst.Concat.partial_ids)
  return &partial_ids_;
}
inline const ::NodeId& BuildAst_Concat::_internal_partial_ids(int index) const {
  return partial_ids_.Get(index);
}
inline const ::NodeId& BuildAst_Concat::partial_ids(int index) const {
  // @@protoc_insertion_point(field_get:BuildAst.Concat.partial_ids)
  return _internal_partial_ids(index);
}
inline ::NodeId* BuildAst_Concat::_internal_add_partial_ids() {
  return partial_ids_.Add();
}
inline ::NodeId* BuildAst_Concat::add_partial_ids() {
  // @@protoc_insertion_point(field_add:BuildAst.Concat.partial_ids)
  return _internal_add_partial_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NodeId >&
BuildAst_Concat::partial_ids() const {
  // @@protoc_insertion_point(field_list:BuildAst.Concat.partial_ids)
  return partial_ids_;
}

// -------------------------------------------------------------------

// BuildAst_ZeroExt

// .NodeId inner = 1;
inline bool BuildAst_ZeroExt::_internal_has_inner() const {
  return this != internal_default_instance() && inner_ != nullptr;
}
inline bool BuildAst_ZeroExt::has_inner() const {
  return _internal_has_inner();
}
inline void BuildAst_ZeroExt::clear_inner() {
  if (GetArena() == nullptr && inner_ != nullptr) {
    delete inner_;
  }
  inner_ = nullptr;
}
inline const ::NodeId& BuildAst_ZeroExt::_internal_inner() const {
  const ::NodeId* p = inner_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_ZeroExt::inner() const {
  // @@protoc_insertion_point(field_get:BuildAst.ZeroExt.inner)
  return _internal_inner();
}
inline void BuildAst_ZeroExt::unsafe_arena_set_allocated_inner(
    ::NodeId* inner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_);
  }
  inner_ = inner;
  if (inner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.ZeroExt.inner)
}
inline ::NodeId* BuildAst_ZeroExt::release_inner() {
  
  ::NodeId* temp = inner_;
  inner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_ZeroExt::unsafe_arena_release_inner() {
  // @@protoc_insertion_point(field_release:BuildAst.ZeroExt.inner)
  
  ::NodeId* temp = inner_;
  inner_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_ZeroExt::_internal_mutable_inner() {
  
  if (inner_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    inner_ = p;
  }
  return inner_;
}
inline ::NodeId* BuildAst_ZeroExt::mutable_inner() {
  // @@protoc_insertion_point(field_mutable:BuildAst.ZeroExt.inner)
  return _internal_mutable_inner();
}
inline void BuildAst_ZeroExt::set_allocated_inner(::NodeId* inner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inner_;
  }
  if (inner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inner);
    if (message_arena != submessage_arena) {
      inner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner, submessage_arena);
    }
    
  } else {
    
  }
  inner_ = inner;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.ZeroExt.inner)
}

// uint64 by_bits = 2;
inline void BuildAst_ZeroExt::clear_by_bits() {
  by_bits_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_ZeroExt::_internal_by_bits() const {
  return by_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_ZeroExt::by_bits() const {
  // @@protoc_insertion_point(field_get:BuildAst.ZeroExt.by_bits)
  return _internal_by_bits();
}
inline void BuildAst_ZeroExt::_internal_set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  by_bits_ = value;
}
inline void BuildAst_ZeroExt::set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_by_bits(value);
  // @@protoc_insertion_point(field_set:BuildAst.ZeroExt.by_bits)
}

// -------------------------------------------------------------------

// BuildAst_SignExt

// .NodeId inner = 1;
inline bool BuildAst_SignExt::_internal_has_inner() const {
  return this != internal_default_instance() && inner_ != nullptr;
}
inline bool BuildAst_SignExt::has_inner() const {
  return _internal_has_inner();
}
inline void BuildAst_SignExt::clear_inner() {
  if (GetArena() == nullptr && inner_ != nullptr) {
    delete inner_;
  }
  inner_ = nullptr;
}
inline const ::NodeId& BuildAst_SignExt::_internal_inner() const {
  const ::NodeId* p = inner_;
  return p != nullptr ? *p : reinterpret_cast<const ::NodeId&>(
      ::_NodeId_default_instance_);
}
inline const ::NodeId& BuildAst_SignExt::inner() const {
  // @@protoc_insertion_point(field_get:BuildAst.SignExt.inner)
  return _internal_inner();
}
inline void BuildAst_SignExt::unsafe_arena_set_allocated_inner(
    ::NodeId* inner) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inner_);
  }
  inner_ = inner;
  if (inner) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.SignExt.inner)
}
inline ::NodeId* BuildAst_SignExt::release_inner() {
  
  ::NodeId* temp = inner_;
  inner_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::NodeId* BuildAst_SignExt::unsafe_arena_release_inner() {
  // @@protoc_insertion_point(field_release:BuildAst.SignExt.inner)
  
  ::NodeId* temp = inner_;
  inner_ = nullptr;
  return temp;
}
inline ::NodeId* BuildAst_SignExt::_internal_mutable_inner() {
  
  if (inner_ == nullptr) {
    auto* p = CreateMaybeMessage<::NodeId>(GetArena());
    inner_ = p;
  }
  return inner_;
}
inline ::NodeId* BuildAst_SignExt::mutable_inner() {
  // @@protoc_insertion_point(field_mutable:BuildAst.SignExt.inner)
  return _internal_mutable_inner();
}
inline void BuildAst_SignExt::set_allocated_inner(::NodeId* inner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete inner_;
  }
  if (inner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(inner);
    if (message_arena != submessage_arena) {
      inner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner, submessage_arena);
    }
    
  } else {
    
  }
  inner_ = inner;
  // @@protoc_insertion_point(field_set_allocated:BuildAst.SignExt.inner)
}

// uint64 by_bits = 2;
inline void BuildAst_SignExt::clear_by_bits() {
  by_bits_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_SignExt::_internal_by_bits() const {
  return by_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_SignExt::by_bits() const {
  // @@protoc_insertion_point(field_get:BuildAst.SignExt.by_bits)
  return _internal_by_bits();
}
inline void BuildAst_SignExt::_internal_set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  by_bits_ = value;
}
inline void BuildAst_SignExt::set_by_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_by_bits(value);
  // @@protoc_insertion_point(field_set:BuildAst.SignExt.by_bits)
}

// -------------------------------------------------------------------

// BuildAst_SymbolicInput

// string name = 1;
inline void BuildAst_SymbolicInput::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BuildAst_SymbolicInput::name() const {
  // @@protoc_insertion_point(field_get:BuildAst.SymbolicInput.name)
  return _internal_name();
}
inline void BuildAst_SymbolicInput::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:BuildAst.SymbolicInput.name)
}
inline std::string* BuildAst_SymbolicInput::mutable_name() {
  // @@protoc_insertion_point(field_mutable:BuildAst.SymbolicInput.name)
  return _internal_mutable_name();
}
inline const std::string& BuildAst_SymbolicInput::_internal_name() const {
  return name_.Get();
}
inline void BuildAst_SymbolicInput::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BuildAst_SymbolicInput::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:BuildAst.SymbolicInput.name)
}
inline void BuildAst_SymbolicInput::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:BuildAst.SymbolicInput.name)
}
inline void BuildAst_SymbolicInput::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:BuildAst.SymbolicInput.name)
}
inline std::string* BuildAst_SymbolicInput::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BuildAst_SymbolicInput::release_name() {
  // @@protoc_insertion_point(field_release:BuildAst.SymbolicInput.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BuildAst_SymbolicInput::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:BuildAst.SymbolicInput.name)
}

// uint64 bits = 2;
inline void BuildAst_SymbolicInput::clear_bits() {
  bits_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_SymbolicInput::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_SymbolicInput::bits() const {
  // @@protoc_insertion_point(field_get:BuildAst.SymbolicInput.bits)
  return _internal_bits();
}
inline void BuildAst_SymbolicInput::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bits_ = value;
}
inline void BuildAst_SymbolicInput::set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:BuildAst.SymbolicInput.bits)
}

// uint64 byte_offset = 3;
inline void BuildAst_SymbolicInput::clear_byte_offset() {
  byte_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_SymbolicInput::_internal_byte_offset() const {
  return byte_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_SymbolicInput::byte_offset() const {
  // @@protoc_insertion_point(field_get:BuildAst.SymbolicInput.byte_offset)
  return _internal_byte_offset();
}
inline void BuildAst_SymbolicInput::_internal_set_byte_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  byte_offset_ = value;
}
inline void BuildAst_SymbolicInput::set_byte_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_byte_offset(value);
  // @@protoc_insertion_point(field_set:BuildAst.SymbolicInput.byte_offset)
}

// -------------------------------------------------------------------

// BuildAst_Constant

// uint64 value = 1;
inline void BuildAst_Constant::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Constant::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Constant::value() const {
  // @@protoc_insertion_point(field_get:BuildAst.Constant.value)
  return _internal_value();
}
inline void BuildAst_Constant::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void BuildAst_Constant::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:BuildAst.Constant.value)
}

// uint64 bits = 2;
inline void BuildAst_Constant::clear_bits() {
  bits_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Constant::_internal_bits() const {
  return bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildAst_Constant::bits() const {
  // @@protoc_insertion_point(field_get:BuildAst.Constant.bits)
  return _internal_bits();
}
inline void BuildAst_Constant::_internal_set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bits_ = value;
}
inline void BuildAst_Constant::set_bits(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bits(value);
  // @@protoc_insertion_point(field_set:BuildAst.Constant.bits)
}

// -------------------------------------------------------------------

// BuildAst

// .BuildAst.Constant constant = 1;
inline bool BuildAst::_internal_has_constant() const {
  return message_case() == kConstant;
}
inline bool BuildAst::has_constant() const {
  return _internal_has_constant();
}
inline void BuildAst::set_has_constant() {
  _oneof_case_[0] = kConstant;
}
inline void BuildAst::clear_constant() {
  if (_internal_has_constant()) {
    if (GetArena() == nullptr) {
      delete message_.constant_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_Constant* BuildAst::release_constant() {
  // @@protoc_insertion_point(field_release:BuildAst.constant)
  if (_internal_has_constant()) {
    clear_has_message();
      ::BuildAst_Constant* temp = message_.constant_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_Constant& BuildAst::_internal_constant() const {
  return _internal_has_constant()
      ? *message_.constant_
      : reinterpret_cast< ::BuildAst_Constant&>(::_BuildAst_Constant_default_instance_);
}
inline const ::BuildAst_Constant& BuildAst::constant() const {
  // @@protoc_insertion_point(field_get:BuildAst.constant)
  return _internal_constant();
}
inline ::BuildAst_Constant* BuildAst::unsafe_arena_release_constant() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.constant)
  if (_internal_has_constant()) {
    clear_has_message();
    ::BuildAst_Constant* temp = message_.constant_;
    message_.constant_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_constant(::BuildAst_Constant* constant) {
  clear_message();
  if (constant) {
    set_has_constant();
    message_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.constant)
}
inline ::BuildAst_Constant* BuildAst::_internal_mutable_constant() {
  if (!_internal_has_constant()) {
    clear_message();
    set_has_constant();
    message_.constant_ = CreateMaybeMessage< ::BuildAst_Constant >(GetArena());
  }
  return message_.constant_;
}
inline ::BuildAst_Constant* BuildAst::mutable_constant() {
  // @@protoc_insertion_point(field_mutable:BuildAst.constant)
  return _internal_mutable_constant();
}

// .BuildAst.SymbolicInput sym_input = 2;
inline bool BuildAst::_internal_has_sym_input() const {
  return message_case() == kSymInput;
}
inline bool BuildAst::has_sym_input() const {
  return _internal_has_sym_input();
}
inline void BuildAst::set_has_sym_input() {
  _oneof_case_[0] = kSymInput;
}
inline void BuildAst::clear_sym_input() {
  if (_internal_has_sym_input()) {
    if (GetArena() == nullptr) {
      delete message_.sym_input_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_SymbolicInput* BuildAst::release_sym_input() {
  // @@protoc_insertion_point(field_release:BuildAst.sym_input)
  if (_internal_has_sym_input()) {
    clear_has_message();
      ::BuildAst_SymbolicInput* temp = message_.sym_input_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.sym_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_SymbolicInput& BuildAst::_internal_sym_input() const {
  return _internal_has_sym_input()
      ? *message_.sym_input_
      : reinterpret_cast< ::BuildAst_SymbolicInput&>(::_BuildAst_SymbolicInput_default_instance_);
}
inline const ::BuildAst_SymbolicInput& BuildAst::sym_input() const {
  // @@protoc_insertion_point(field_get:BuildAst.sym_input)
  return _internal_sym_input();
}
inline ::BuildAst_SymbolicInput* BuildAst::unsafe_arena_release_sym_input() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.sym_input)
  if (_internal_has_sym_input()) {
    clear_has_message();
    ::BuildAst_SymbolicInput* temp = message_.sym_input_;
    message_.sym_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_sym_input(::BuildAst_SymbolicInput* sym_input) {
  clear_message();
  if (sym_input) {
    set_has_sym_input();
    message_.sym_input_ = sym_input;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.sym_input)
}
inline ::BuildAst_SymbolicInput* BuildAst::_internal_mutable_sym_input() {
  if (!_internal_has_sym_input()) {
    clear_message();
    set_has_sym_input();
    message_.sym_input_ = CreateMaybeMessage< ::BuildAst_SymbolicInput >(GetArena());
  }
  return message_.sym_input_;
}
inline ::BuildAst_SymbolicInput* BuildAst::mutable_sym_input() {
  // @@protoc_insertion_point(field_mutable:BuildAst.sym_input)
  return _internal_mutable_sym_input();
}

// .BuildAst.UnaryOp op_unary = 3;
inline bool BuildAst::_internal_has_op_unary() const {
  return message_case() == kOpUnary;
}
inline bool BuildAst::has_op_unary() const {
  return _internal_has_op_unary();
}
inline void BuildAst::set_has_op_unary() {
  _oneof_case_[0] = kOpUnary;
}
inline void BuildAst::clear_op_unary() {
  if (_internal_has_op_unary()) {
    if (GetArena() == nullptr) {
      delete message_.op_unary_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_UnaryOp* BuildAst::release_op_unary() {
  // @@protoc_insertion_point(field_release:BuildAst.op_unary)
  if (_internal_has_op_unary()) {
    clear_has_message();
      ::BuildAst_UnaryOp* temp = message_.op_unary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.op_unary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_UnaryOp& BuildAst::_internal_op_unary() const {
  return _internal_has_op_unary()
      ? *message_.op_unary_
      : reinterpret_cast< ::BuildAst_UnaryOp&>(::_BuildAst_UnaryOp_default_instance_);
}
inline const ::BuildAst_UnaryOp& BuildAst::op_unary() const {
  // @@protoc_insertion_point(field_get:BuildAst.op_unary)
  return _internal_op_unary();
}
inline ::BuildAst_UnaryOp* BuildAst::unsafe_arena_release_op_unary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.op_unary)
  if (_internal_has_op_unary()) {
    clear_has_message();
    ::BuildAst_UnaryOp* temp = message_.op_unary_;
    message_.op_unary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_op_unary(::BuildAst_UnaryOp* op_unary) {
  clear_message();
  if (op_unary) {
    set_has_op_unary();
    message_.op_unary_ = op_unary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.op_unary)
}
inline ::BuildAst_UnaryOp* BuildAst::_internal_mutable_op_unary() {
  if (!_internal_has_op_unary()) {
    clear_message();
    set_has_op_unary();
    message_.op_unary_ = CreateMaybeMessage< ::BuildAst_UnaryOp >(GetArena());
  }
  return message_.op_unary_;
}
inline ::BuildAst_UnaryOp* BuildAst::mutable_op_unary() {
  // @@protoc_insertion_point(field_mutable:BuildAst.op_unary)
  return _internal_mutable_op_unary();
}

// .BuildAst.BinaryOp op_binary = 4;
inline bool BuildAst::_internal_has_op_binary() const {
  return message_case() == kOpBinary;
}
inline bool BuildAst::has_op_binary() const {
  return _internal_has_op_binary();
}
inline void BuildAst::set_has_op_binary() {
  _oneof_case_[0] = kOpBinary;
}
inline void BuildAst::clear_op_binary() {
  if (_internal_has_op_binary()) {
    if (GetArena() == nullptr) {
      delete message_.op_binary_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_BinaryOp* BuildAst::release_op_binary() {
  // @@protoc_insertion_point(field_release:BuildAst.op_binary)
  if (_internal_has_op_binary()) {
    clear_has_message();
      ::BuildAst_BinaryOp* temp = message_.op_binary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.op_binary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_BinaryOp& BuildAst::_internal_op_binary() const {
  return _internal_has_op_binary()
      ? *message_.op_binary_
      : reinterpret_cast< ::BuildAst_BinaryOp&>(::_BuildAst_BinaryOp_default_instance_);
}
inline const ::BuildAst_BinaryOp& BuildAst::op_binary() const {
  // @@protoc_insertion_point(field_get:BuildAst.op_binary)
  return _internal_op_binary();
}
inline ::BuildAst_BinaryOp* BuildAst::unsafe_arena_release_op_binary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.op_binary)
  if (_internal_has_op_binary()) {
    clear_has_message();
    ::BuildAst_BinaryOp* temp = message_.op_binary_;
    message_.op_binary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_op_binary(::BuildAst_BinaryOp* op_binary) {
  clear_message();
  if (op_binary) {
    set_has_op_binary();
    message_.op_binary_ = op_binary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.op_binary)
}
inline ::BuildAst_BinaryOp* BuildAst::_internal_mutable_op_binary() {
  if (!_internal_has_op_binary()) {
    clear_message();
    set_has_op_binary();
    message_.op_binary_ = CreateMaybeMessage< ::BuildAst_BinaryOp >(GetArena());
  }
  return message_.op_binary_;
}
inline ::BuildAst_BinaryOp* BuildAst::mutable_op_binary() {
  // @@protoc_insertion_point(field_mutable:BuildAst.op_binary)
  return _internal_mutable_op_binary();
}

// .BuildAst.UnaryPredicate pred_unary = 5;
inline bool BuildAst::_internal_has_pred_unary() const {
  return message_case() == kPredUnary;
}
inline bool BuildAst::has_pred_unary() const {
  return _internal_has_pred_unary();
}
inline void BuildAst::set_has_pred_unary() {
  _oneof_case_[0] = kPredUnary;
}
inline void BuildAst::clear_pred_unary() {
  if (_internal_has_pred_unary()) {
    if (GetArena() == nullptr) {
      delete message_.pred_unary_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_UnaryPredicate* BuildAst::release_pred_unary() {
  // @@protoc_insertion_point(field_release:BuildAst.pred_unary)
  if (_internal_has_pred_unary()) {
    clear_has_message();
      ::BuildAst_UnaryPredicate* temp = message_.pred_unary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.pred_unary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_UnaryPredicate& BuildAst::_internal_pred_unary() const {
  return _internal_has_pred_unary()
      ? *message_.pred_unary_
      : reinterpret_cast< ::BuildAst_UnaryPredicate&>(::_BuildAst_UnaryPredicate_default_instance_);
}
inline const ::BuildAst_UnaryPredicate& BuildAst::pred_unary() const {
  // @@protoc_insertion_point(field_get:BuildAst.pred_unary)
  return _internal_pred_unary();
}
inline ::BuildAst_UnaryPredicate* BuildAst::unsafe_arena_release_pred_unary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.pred_unary)
  if (_internal_has_pred_unary()) {
    clear_has_message();
    ::BuildAst_UnaryPredicate* temp = message_.pred_unary_;
    message_.pred_unary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_pred_unary(::BuildAst_UnaryPredicate* pred_unary) {
  clear_message();
  if (pred_unary) {
    set_has_pred_unary();
    message_.pred_unary_ = pred_unary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.pred_unary)
}
inline ::BuildAst_UnaryPredicate* BuildAst::_internal_mutable_pred_unary() {
  if (!_internal_has_pred_unary()) {
    clear_message();
    set_has_pred_unary();
    message_.pred_unary_ = CreateMaybeMessage< ::BuildAst_UnaryPredicate >(GetArena());
  }
  return message_.pred_unary_;
}
inline ::BuildAst_UnaryPredicate* BuildAst::mutable_pred_unary() {
  // @@protoc_insertion_point(field_mutable:BuildAst.pred_unary)
  return _internal_mutable_pred_unary();
}

// .BuildAst.BinaryPredicate pred_binary = 6;
inline bool BuildAst::_internal_has_pred_binary() const {
  return message_case() == kPredBinary;
}
inline bool BuildAst::has_pred_binary() const {
  return _internal_has_pred_binary();
}
inline void BuildAst::set_has_pred_binary() {
  _oneof_case_[0] = kPredBinary;
}
inline void BuildAst::clear_pred_binary() {
  if (_internal_has_pred_binary()) {
    if (GetArena() == nullptr) {
      delete message_.pred_binary_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_BinaryPredicate* BuildAst::release_pred_binary() {
  // @@protoc_insertion_point(field_release:BuildAst.pred_binary)
  if (_internal_has_pred_binary()) {
    clear_has_message();
      ::BuildAst_BinaryPredicate* temp = message_.pred_binary_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.pred_binary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_BinaryPredicate& BuildAst::_internal_pred_binary() const {
  return _internal_has_pred_binary()
      ? *message_.pred_binary_
      : reinterpret_cast< ::BuildAst_BinaryPredicate&>(::_BuildAst_BinaryPredicate_default_instance_);
}
inline const ::BuildAst_BinaryPredicate& BuildAst::pred_binary() const {
  // @@protoc_insertion_point(field_get:BuildAst.pred_binary)
  return _internal_pred_binary();
}
inline ::BuildAst_BinaryPredicate* BuildAst::unsafe_arena_release_pred_binary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.pred_binary)
  if (_internal_has_pred_binary()) {
    clear_has_message();
    ::BuildAst_BinaryPredicate* temp = message_.pred_binary_;
    message_.pred_binary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_pred_binary(::BuildAst_BinaryPredicate* pred_binary) {
  clear_message();
  if (pred_binary) {
    set_has_pred_binary();
    message_.pred_binary_ = pred_binary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.pred_binary)
}
inline ::BuildAst_BinaryPredicate* BuildAst::_internal_mutable_pred_binary() {
  if (!_internal_has_pred_binary()) {
    clear_message();
    set_has_pred_binary();
    message_.pred_binary_ = CreateMaybeMessage< ::BuildAst_BinaryPredicate >(GetArena());
  }
  return message_.pred_binary_;
}
inline ::BuildAst_BinaryPredicate* BuildAst::mutable_pred_binary() {
  // @@protoc_insertion_point(field_mutable:BuildAst.pred_binary)
  return _internal_mutable_pred_binary();
}

// .BuildAst.Extract extract = 7;
inline bool BuildAst::_internal_has_extract() const {
  return message_case() == kExtract;
}
inline bool BuildAst::has_extract() const {
  return _internal_has_extract();
}
inline void BuildAst::set_has_extract() {
  _oneof_case_[0] = kExtract;
}
inline void BuildAst::clear_extract() {
  if (_internal_has_extract()) {
    if (GetArena() == nullptr) {
      delete message_.extract_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_Extract* BuildAst::release_extract() {
  // @@protoc_insertion_point(field_release:BuildAst.extract)
  if (_internal_has_extract()) {
    clear_has_message();
      ::BuildAst_Extract* temp = message_.extract_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.extract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_Extract& BuildAst::_internal_extract() const {
  return _internal_has_extract()
      ? *message_.extract_
      : reinterpret_cast< ::BuildAst_Extract&>(::_BuildAst_Extract_default_instance_);
}
inline const ::BuildAst_Extract& BuildAst::extract() const {
  // @@protoc_insertion_point(field_get:BuildAst.extract)
  return _internal_extract();
}
inline ::BuildAst_Extract* BuildAst::unsafe_arena_release_extract() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.extract)
  if (_internal_has_extract()) {
    clear_has_message();
    ::BuildAst_Extract* temp = message_.extract_;
    message_.extract_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_extract(::BuildAst_Extract* extract) {
  clear_message();
  if (extract) {
    set_has_extract();
    message_.extract_ = extract;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.extract)
}
inline ::BuildAst_Extract* BuildAst::_internal_mutable_extract() {
  if (!_internal_has_extract()) {
    clear_message();
    set_has_extract();
    message_.extract_ = CreateMaybeMessage< ::BuildAst_Extract >(GetArena());
  }
  return message_.extract_;
}
inline ::BuildAst_Extract* BuildAst::mutable_extract() {
  // @@protoc_insertion_point(field_mutable:BuildAst.extract)
  return _internal_mutable_extract();
}

// .BuildAst.Concat concat = 8;
inline bool BuildAst::_internal_has_concat() const {
  return message_case() == kConcat;
}
inline bool BuildAst::has_concat() const {
  return _internal_has_concat();
}
inline void BuildAst::set_has_concat() {
  _oneof_case_[0] = kConcat;
}
inline void BuildAst::clear_concat() {
  if (_internal_has_concat()) {
    if (GetArena() == nullptr) {
      delete message_.concat_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_Concat* BuildAst::release_concat() {
  // @@protoc_insertion_point(field_release:BuildAst.concat)
  if (_internal_has_concat()) {
    clear_has_message();
      ::BuildAst_Concat* temp = message_.concat_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.concat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_Concat& BuildAst::_internal_concat() const {
  return _internal_has_concat()
      ? *message_.concat_
      : reinterpret_cast< ::BuildAst_Concat&>(::_BuildAst_Concat_default_instance_);
}
inline const ::BuildAst_Concat& BuildAst::concat() const {
  // @@protoc_insertion_point(field_get:BuildAst.concat)
  return _internal_concat();
}
inline ::BuildAst_Concat* BuildAst::unsafe_arena_release_concat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.concat)
  if (_internal_has_concat()) {
    clear_has_message();
    ::BuildAst_Concat* temp = message_.concat_;
    message_.concat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_concat(::BuildAst_Concat* concat) {
  clear_message();
  if (concat) {
    set_has_concat();
    message_.concat_ = concat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.concat)
}
inline ::BuildAst_Concat* BuildAst::_internal_mutable_concat() {
  if (!_internal_has_concat()) {
    clear_message();
    set_has_concat();
    message_.concat_ = CreateMaybeMessage< ::BuildAst_Concat >(GetArena());
  }
  return message_.concat_;
}
inline ::BuildAst_Concat* BuildAst::mutable_concat() {
  // @@protoc_insertion_point(field_mutable:BuildAst.concat)
  return _internal_mutable_concat();
}

// .BuildAst.ZeroExt zero_ext = 9;
inline bool BuildAst::_internal_has_zero_ext() const {
  return message_case() == kZeroExt;
}
inline bool BuildAst::has_zero_ext() const {
  return _internal_has_zero_ext();
}
inline void BuildAst::set_has_zero_ext() {
  _oneof_case_[0] = kZeroExt;
}
inline void BuildAst::clear_zero_ext() {
  if (_internal_has_zero_ext()) {
    if (GetArena() == nullptr) {
      delete message_.zero_ext_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_ZeroExt* BuildAst::release_zero_ext() {
  // @@protoc_insertion_point(field_release:BuildAst.zero_ext)
  if (_internal_has_zero_ext()) {
    clear_has_message();
      ::BuildAst_ZeroExt* temp = message_.zero_ext_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.zero_ext_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_ZeroExt& BuildAst::_internal_zero_ext() const {
  return _internal_has_zero_ext()
      ? *message_.zero_ext_
      : reinterpret_cast< ::BuildAst_ZeroExt&>(::_BuildAst_ZeroExt_default_instance_);
}
inline const ::BuildAst_ZeroExt& BuildAst::zero_ext() const {
  // @@protoc_insertion_point(field_get:BuildAst.zero_ext)
  return _internal_zero_ext();
}
inline ::BuildAst_ZeroExt* BuildAst::unsafe_arena_release_zero_ext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.zero_ext)
  if (_internal_has_zero_ext()) {
    clear_has_message();
    ::BuildAst_ZeroExt* temp = message_.zero_ext_;
    message_.zero_ext_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_zero_ext(::BuildAst_ZeroExt* zero_ext) {
  clear_message();
  if (zero_ext) {
    set_has_zero_ext();
    message_.zero_ext_ = zero_ext;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.zero_ext)
}
inline ::BuildAst_ZeroExt* BuildAst::_internal_mutable_zero_ext() {
  if (!_internal_has_zero_ext()) {
    clear_message();
    set_has_zero_ext();
    message_.zero_ext_ = CreateMaybeMessage< ::BuildAst_ZeroExt >(GetArena());
  }
  return message_.zero_ext_;
}
inline ::BuildAst_ZeroExt* BuildAst::mutable_zero_ext() {
  // @@protoc_insertion_point(field_mutable:BuildAst.zero_ext)
  return _internal_mutable_zero_ext();
}

// .BuildAst.SignExt sign_ext = 10;
inline bool BuildAst::_internal_has_sign_ext() const {
  return message_case() == kSignExt;
}
inline bool BuildAst::has_sign_ext() const {
  return _internal_has_sign_ext();
}
inline void BuildAst::set_has_sign_ext() {
  _oneof_case_[0] = kSignExt;
}
inline void BuildAst::clear_sign_ext() {
  if (_internal_has_sign_ext()) {
    if (GetArena() == nullptr) {
      delete message_.sign_ext_;
    }
    clear_has_message();
  }
}
inline ::BuildAst_SignExt* BuildAst::release_sign_ext() {
  // @@protoc_insertion_point(field_release:BuildAst.sign_ext)
  if (_internal_has_sign_ext()) {
    clear_has_message();
      ::BuildAst_SignExt* temp = message_.sign_ext_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.sign_ext_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::BuildAst_SignExt& BuildAst::_internal_sign_ext() const {
  return _internal_has_sign_ext()
      ? *message_.sign_ext_
      : reinterpret_cast< ::BuildAst_SignExt&>(::_BuildAst_SignExt_default_instance_);
}
inline const ::BuildAst_SignExt& BuildAst::sign_ext() const {
  // @@protoc_insertion_point(field_get:BuildAst.sign_ext)
  return _internal_sign_ext();
}
inline ::BuildAst_SignExt* BuildAst::unsafe_arena_release_sign_ext() {
  // @@protoc_insertion_point(field_unsafe_arena_release:BuildAst.sign_ext)
  if (_internal_has_sign_ext()) {
    clear_has_message();
    ::BuildAst_SignExt* temp = message_.sign_ext_;
    message_.sign_ext_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BuildAst::unsafe_arena_set_allocated_sign_ext(::BuildAst_SignExt* sign_ext) {
  clear_message();
  if (sign_ext) {
    set_has_sign_ext();
    message_.sign_ext_ = sign_ext;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:BuildAst.sign_ext)
}
inline ::BuildAst_SignExt* BuildAst::_internal_mutable_sign_ext() {
  if (!_internal_has_sign_ext()) {
    clear_message();
    set_has_sign_ext();
    message_.sign_ext_ = CreateMaybeMessage< ::BuildAst_SignExt >(GetArena());
  }
  return message_.sign_ext_;
}
inline ::BuildAst_SignExt* BuildAst::mutable_sign_ext() {
  // @@protoc_insertion_point(field_mutable:BuildAst.sign_ext)
  return _internal_mutable_sign_ext();
}

inline bool BuildAst::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void BuildAst::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline BuildAst::MessageCase BuildAst::message_case() const {
  return BuildAst::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::UnOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UnOp>() {
  return ::UnOp_descriptor();
}
template <> struct is_proto_enum< ::BinOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BinOp>() {
  return ::BinOp_descriptor();
}
template <> struct is_proto_enum< ::CmpUnOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CmpUnOp>() {
  return ::CmpUnOp_descriptor();
}
template <> struct is_proto_enum< ::CmpBinOp> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CmpBinOp>() {
  return ::CmpBinOp_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ast_2eproto
