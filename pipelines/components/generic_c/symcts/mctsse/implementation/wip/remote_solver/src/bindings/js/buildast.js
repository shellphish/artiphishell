// source: ast.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

goog.provide('proto.BuildAst');
goog.provide('proto.BuildAst.BinaryOp');
goog.provide('proto.BuildAst.BinaryPredicate');
goog.provide('proto.BuildAst.Concat');
goog.provide('proto.BuildAst.Constant');
goog.provide('proto.BuildAst.Extract');
goog.provide('proto.BuildAst.MessageCase');
goog.provide('proto.BuildAst.SignExt');
goog.provide('proto.BuildAst.SymbolicInput');
goog.provide('proto.BuildAst.UnaryOp');
goog.provide('proto.BuildAst.UnaryPredicate');
goog.provide('proto.BuildAst.ZeroExt');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');
goog.require('proto.NodeId');

goog.forwardDeclare('proto.BinOp');
goog.forwardDeclare('proto.CmpBinOp');
goog.forwardDeclare('proto.CmpUnOp');
goog.forwardDeclare('proto.UnOp');
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.BuildAst.oneofGroups_);
};
goog.inherits(proto.BuildAst, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.displayName = 'proto.BuildAst';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.UnaryOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.UnaryOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.UnaryOp.displayName = 'proto.BuildAst.UnaryOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.BinaryOp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.BinaryOp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.BinaryOp.displayName = 'proto.BuildAst.BinaryOp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.BinaryPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.BinaryPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.BinaryPredicate.displayName = 'proto.BuildAst.BinaryPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.UnaryPredicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.UnaryPredicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.UnaryPredicate.displayName = 'proto.BuildAst.UnaryPredicate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.Extract = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.Extract, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.Extract.displayName = 'proto.BuildAst.Extract';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.Concat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BuildAst.Concat.repeatedFields_, null);
};
goog.inherits(proto.BuildAst.Concat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.Concat.displayName = 'proto.BuildAst.Concat';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.ZeroExt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.ZeroExt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.ZeroExt.displayName = 'proto.BuildAst.ZeroExt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.SignExt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.SignExt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.SignExt.displayName = 'proto.BuildAst.SignExt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.SymbolicInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.SymbolicInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.SymbolicInput.displayName = 'proto.BuildAst.SymbolicInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BuildAst.Constant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BuildAst.Constant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BuildAst.Constant.displayName = 'proto.BuildAst.Constant';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.BuildAst.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10]];

/**
 * @enum {number}
 */
proto.BuildAst.MessageCase = {
  MESSAGE_NOT_SET: 0,
  CONSTANT: 1,
  SYM_INPUT: 2,
  OP_UNARY: 3,
  OP_BINARY: 4,
  PRED_UNARY: 5,
  PRED_BINARY: 6,
  EXTRACT: 7,
  CONCAT: 8,
  ZERO_EXT: 9,
  SIGN_EXT: 10
};

/**
 * @return {proto.BuildAst.MessageCase}
 */
proto.BuildAst.prototype.getMessageCase = function() {
  return /** @type {proto.BuildAst.MessageCase} */(jspb.Message.computeOneofCase(this, proto.BuildAst.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.toObject = function(includeInstance, msg) {
  var f, obj = {
    constant: (f = msg.getConstant()) && proto.BuildAst.Constant.toObject(includeInstance, f),
    symInput: (f = msg.getSymInput()) && proto.BuildAst.SymbolicInput.toObject(includeInstance, f),
    opUnary: (f = msg.getOpUnary()) && proto.BuildAst.UnaryOp.toObject(includeInstance, f),
    opBinary: (f = msg.getOpBinary()) && proto.BuildAst.BinaryOp.toObject(includeInstance, f),
    predUnary: (f = msg.getPredUnary()) && proto.BuildAst.UnaryPredicate.toObject(includeInstance, f),
    predBinary: (f = msg.getPredBinary()) && proto.BuildAst.BinaryPredicate.toObject(includeInstance, f),
    extract: (f = msg.getExtract()) && proto.BuildAst.Extract.toObject(includeInstance, f),
    concat: (f = msg.getConcat()) && proto.BuildAst.Concat.toObject(includeInstance, f),
    zeroExt: (f = msg.getZeroExt()) && proto.BuildAst.ZeroExt.toObject(includeInstance, f),
    signExt: (f = msg.getSignExt()) && proto.BuildAst.SignExt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst}
 */
proto.BuildAst.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst;
  return proto.BuildAst.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst}
 */
proto.BuildAst.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BuildAst.Constant;
      reader.readMessage(value,proto.BuildAst.Constant.deserializeBinaryFromReader);
      msg.setConstant(value);
      break;
    case 2:
      var value = new proto.BuildAst.SymbolicInput;
      reader.readMessage(value,proto.BuildAst.SymbolicInput.deserializeBinaryFromReader);
      msg.setSymInput(value);
      break;
    case 3:
      var value = new proto.BuildAst.UnaryOp;
      reader.readMessage(value,proto.BuildAst.UnaryOp.deserializeBinaryFromReader);
      msg.setOpUnary(value);
      break;
    case 4:
      var value = new proto.BuildAst.BinaryOp;
      reader.readMessage(value,proto.BuildAst.BinaryOp.deserializeBinaryFromReader);
      msg.setOpBinary(value);
      break;
    case 5:
      var value = new proto.BuildAst.UnaryPredicate;
      reader.readMessage(value,proto.BuildAst.UnaryPredicate.deserializeBinaryFromReader);
      msg.setPredUnary(value);
      break;
    case 6:
      var value = new proto.BuildAst.BinaryPredicate;
      reader.readMessage(value,proto.BuildAst.BinaryPredicate.deserializeBinaryFromReader);
      msg.setPredBinary(value);
      break;
    case 7:
      var value = new proto.BuildAst.Extract;
      reader.readMessage(value,proto.BuildAst.Extract.deserializeBinaryFromReader);
      msg.setExtract(value);
      break;
    case 8:
      var value = new proto.BuildAst.Concat;
      reader.readMessage(value,proto.BuildAst.Concat.deserializeBinaryFromReader);
      msg.setConcat(value);
      break;
    case 9:
      var value = new proto.BuildAst.ZeroExt;
      reader.readMessage(value,proto.BuildAst.ZeroExt.deserializeBinaryFromReader);
      msg.setZeroExt(value);
      break;
    case 10:
      var value = new proto.BuildAst.SignExt;
      reader.readMessage(value,proto.BuildAst.SignExt.deserializeBinaryFromReader);
      msg.setSignExt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.BuildAst.Constant.serializeBinaryToWriter
    );
  }
  f = message.getSymInput();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.BuildAst.SymbolicInput.serializeBinaryToWriter
    );
  }
  f = message.getOpUnary();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.BuildAst.UnaryOp.serializeBinaryToWriter
    );
  }
  f = message.getOpBinary();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.BuildAst.BinaryOp.serializeBinaryToWriter
    );
  }
  f = message.getPredUnary();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.BuildAst.UnaryPredicate.serializeBinaryToWriter
    );
  }
  f = message.getPredBinary();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.BuildAst.BinaryPredicate.serializeBinaryToWriter
    );
  }
  f = message.getExtract();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.BuildAst.Extract.serializeBinaryToWriter
    );
  }
  f = message.getConcat();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.BuildAst.Concat.serializeBinaryToWriter
    );
  }
  f = message.getZeroExt();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.BuildAst.ZeroExt.serializeBinaryToWriter
    );
  }
  f = message.getSignExt();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.BuildAst.SignExt.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.UnaryOp.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.UnaryOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.UnaryOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.UnaryOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arg: (f = msg.getArg()) && proto.NodeId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.UnaryOp}
 */
proto.BuildAst.UnaryOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.UnaryOp;
  return proto.BuildAst.UnaryOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.UnaryOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.UnaryOp}
 */
proto.BuildAst.UnaryOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.UnOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setArg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.UnaryOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.UnaryOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.UnaryOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.UnaryOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
};


/**
 * optional UnOp op = 1;
 * @return {!proto.UnOp}
 */
proto.BuildAst.UnaryOp.prototype.getOp = function() {
  return /** @type {!proto.UnOp} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.UnOp} value
 * @return {!proto.BuildAst.UnaryOp} returns this
 */
proto.BuildAst.UnaryOp.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NodeId arg = 2;
 * @return {?proto.NodeId}
 */
proto.BuildAst.UnaryOp.prototype.getArg = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 2));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.UnaryOp} returns this
*/
proto.BuildAst.UnaryOp.prototype.setArg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.UnaryOp} returns this
 */
proto.BuildAst.UnaryOp.prototype.clearArg = function() {
  return this.setArg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.UnaryOp.prototype.hasArg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.BinaryOp.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.BinaryOp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.BinaryOp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.BinaryOp.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    left: (f = msg.getLeft()) && proto.NodeId.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.NodeId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.BinaryOp}
 */
proto.BuildAst.BinaryOp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.BinaryOp;
  return proto.BuildAst.BinaryOp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.BinaryOp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.BinaryOp}
 */
proto.BuildAst.BinaryOp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.BinOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 3:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.BinaryOp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.BinaryOp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.BinaryOp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.BinaryOp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
};


/**
 * optional BinOp op = 1;
 * @return {!proto.BinOp}
 */
proto.BuildAst.BinaryOp.prototype.getOp = function() {
  return /** @type {!proto.BinOp} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.BinOp} value
 * @return {!proto.BuildAst.BinaryOp} returns this
 */
proto.BuildAst.BinaryOp.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NodeId left = 2;
 * @return {?proto.NodeId}
 */
proto.BuildAst.BinaryOp.prototype.getLeft = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 2));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.BinaryOp} returns this
*/
proto.BuildAst.BinaryOp.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.BinaryOp} returns this
 */
proto.BuildAst.BinaryOp.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.BinaryOp.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NodeId right = 3;
 * @return {?proto.NodeId}
 */
proto.BuildAst.BinaryOp.prototype.getRight = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 3));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.BinaryOp} returns this
*/
proto.BuildAst.BinaryOp.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.BinaryOp} returns this
 */
proto.BuildAst.BinaryOp.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.BinaryOp.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.BinaryPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.BinaryPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.BinaryPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.BinaryPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    left: (f = msg.getLeft()) && proto.NodeId.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.NodeId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.BinaryPredicate}
 */
proto.BuildAst.BinaryPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.BinaryPredicate;
  return proto.BuildAst.BinaryPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.BinaryPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.BinaryPredicate}
 */
proto.BuildAst.BinaryPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CmpBinOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 3:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.BinaryPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.BinaryPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.BinaryPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.BinaryPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
};


/**
 * optional CmpBinOp op = 1;
 * @return {!proto.CmpBinOp}
 */
proto.BuildAst.BinaryPredicate.prototype.getOp = function() {
  return /** @type {!proto.CmpBinOp} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.CmpBinOp} value
 * @return {!proto.BuildAst.BinaryPredicate} returns this
 */
proto.BuildAst.BinaryPredicate.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NodeId left = 2;
 * @return {?proto.NodeId}
 */
proto.BuildAst.BinaryPredicate.prototype.getLeft = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 2));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.BinaryPredicate} returns this
*/
proto.BuildAst.BinaryPredicate.prototype.setLeft = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.BinaryPredicate} returns this
 */
proto.BuildAst.BinaryPredicate.prototype.clearLeft = function() {
  return this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.BinaryPredicate.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional NodeId right = 3;
 * @return {?proto.NodeId}
 */
proto.BuildAst.BinaryPredicate.prototype.getRight = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 3));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.BinaryPredicate} returns this
*/
proto.BuildAst.BinaryPredicate.prototype.setRight = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.BinaryPredicate} returns this
 */
proto.BuildAst.BinaryPredicate.prototype.clearRight = function() {
  return this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.BinaryPredicate.prototype.hasRight = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.UnaryPredicate.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.UnaryPredicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.UnaryPredicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.UnaryPredicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    op: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arg: (f = msg.getArg()) && proto.NodeId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.UnaryPredicate}
 */
proto.BuildAst.UnaryPredicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.UnaryPredicate;
  return proto.BuildAst.UnaryPredicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.UnaryPredicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.UnaryPredicate}
 */
proto.BuildAst.UnaryPredicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CmpUnOp} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 2:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setArg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.UnaryPredicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.UnaryPredicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.UnaryPredicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.UnaryPredicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getArg();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
};


/**
 * optional CmpUnOp op = 1;
 * @return {!proto.CmpUnOp}
 */
proto.BuildAst.UnaryPredicate.prototype.getOp = function() {
  return /** @type {!proto.CmpUnOp} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.CmpUnOp} value
 * @return {!proto.BuildAst.UnaryPredicate} returns this
 */
proto.BuildAst.UnaryPredicate.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional NodeId arg = 2;
 * @return {?proto.NodeId}
 */
proto.BuildAst.UnaryPredicate.prototype.getArg = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 2));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.UnaryPredicate} returns this
*/
proto.BuildAst.UnaryPredicate.prototype.setArg = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.UnaryPredicate} returns this
 */
proto.BuildAst.UnaryPredicate.prototype.clearArg = function() {
  return this.setArg(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.UnaryPredicate.prototype.hasArg = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.Extract.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.Extract.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.Extract} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.Extract.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: (f = msg.getInner()) && proto.NodeId.toObject(includeInstance, f),
    start: jspb.Message.getFieldWithDefault(msg, 2, 0),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.Extract}
 */
proto.BuildAst.Extract.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.Extract;
  return proto.BuildAst.Extract.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.Extract} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.Extract}
 */
proto.BuildAst.Extract.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.Extract.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.Extract.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.Extract} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.Extract.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
  f = message.getStart();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional NodeId inner = 1;
 * @return {?proto.NodeId}
 */
proto.BuildAst.Extract.prototype.getInner = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 1));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.Extract} returns this
*/
proto.BuildAst.Extract.prototype.setInner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.Extract} returns this
 */
proto.BuildAst.Extract.prototype.clearInner = function() {
  return this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.Extract.prototype.hasInner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 start = 2;
 * @return {number}
 */
proto.BuildAst.Extract.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.Extract} returns this
 */
proto.BuildAst.Extract.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.BuildAst.Extract.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.Extract} returns this
 */
proto.BuildAst.Extract.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BuildAst.Concat.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.Concat.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.Concat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.Concat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.Concat.toObject = function(includeInstance, msg) {
  var f, obj = {
    partialIdsList: jspb.Message.toObjectList(msg.getPartialIdsList(),
    proto.NodeId.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.Concat}
 */
proto.BuildAst.Concat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.Concat;
  return proto.BuildAst.Concat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.Concat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.Concat}
 */
proto.BuildAst.Concat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.addPartialIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.Concat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.Concat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.Concat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.Concat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPartialIdsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeId partial_ids = 1;
 * @return {!Array<!proto.NodeId>}
 */
proto.BuildAst.Concat.prototype.getPartialIdsList = function() {
  return /** @type{!Array<!proto.NodeId>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.NodeId, 1));
};


/**
 * @param {!Array<!proto.NodeId>} value
 * @return {!proto.BuildAst.Concat} returns this
*/
proto.BuildAst.Concat.prototype.setPartialIdsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.NodeId=} opt_value
 * @param {number=} opt_index
 * @return {!proto.NodeId}
 */
proto.BuildAst.Concat.prototype.addPartialIds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.NodeId, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BuildAst.Concat} returns this
 */
proto.BuildAst.Concat.prototype.clearPartialIdsList = function() {
  return this.setPartialIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.ZeroExt.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.ZeroExt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.ZeroExt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.ZeroExt.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: (f = msg.getInner()) && proto.NodeId.toObject(includeInstance, f),
    byBits: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.ZeroExt}
 */
proto.BuildAst.ZeroExt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.ZeroExt;
  return proto.BuildAst.ZeroExt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.ZeroExt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.ZeroExt}
 */
proto.BuildAst.ZeroExt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setByBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.ZeroExt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.ZeroExt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.ZeroExt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.ZeroExt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
  f = message.getByBits();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional NodeId inner = 1;
 * @return {?proto.NodeId}
 */
proto.BuildAst.ZeroExt.prototype.getInner = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 1));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.ZeroExt} returns this
*/
proto.BuildAst.ZeroExt.prototype.setInner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.ZeroExt} returns this
 */
proto.BuildAst.ZeroExt.prototype.clearInner = function() {
  return this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.ZeroExt.prototype.hasInner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 by_bits = 2;
 * @return {number}
 */
proto.BuildAst.ZeroExt.prototype.getByBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.ZeroExt} returns this
 */
proto.BuildAst.ZeroExt.prototype.setByBits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.SignExt.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.SignExt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.SignExt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.SignExt.toObject = function(includeInstance, msg) {
  var f, obj = {
    inner: (f = msg.getInner()) && proto.NodeId.toObject(includeInstance, f),
    byBits: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.SignExt}
 */
proto.BuildAst.SignExt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.SignExt;
  return proto.BuildAst.SignExt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.SignExt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.SignExt}
 */
proto.BuildAst.SignExt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NodeId;
      reader.readMessage(value,proto.NodeId.deserializeBinaryFromReader);
      msg.setInner(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setByBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.SignExt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.SignExt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.SignExt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.SignExt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInner();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NodeId.serializeBinaryToWriter
    );
  }
  f = message.getByBits();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional NodeId inner = 1;
 * @return {?proto.NodeId}
 */
proto.BuildAst.SignExt.prototype.getInner = function() {
  return /** @type{?proto.NodeId} */ (
    jspb.Message.getWrapperField(this, proto.NodeId, 1));
};


/**
 * @param {?proto.NodeId|undefined} value
 * @return {!proto.BuildAst.SignExt} returns this
*/
proto.BuildAst.SignExt.prototype.setInner = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst.SignExt} returns this
 */
proto.BuildAst.SignExt.prototype.clearInner = function() {
  return this.setInner(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.SignExt.prototype.hasInner = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 by_bits = 2;
 * @return {number}
 */
proto.BuildAst.SignExt.prototype.getByBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.SignExt} returns this
 */
proto.BuildAst.SignExt.prototype.setByBits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.SymbolicInput.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.SymbolicInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.SymbolicInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.SymbolicInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bits: jspb.Message.getFieldWithDefault(msg, 2, 0),
    byteOffset: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.SymbolicInput}
 */
proto.BuildAst.SymbolicInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.SymbolicInput;
  return proto.BuildAst.SymbolicInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.SymbolicInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.SymbolicInput}
 */
proto.BuildAst.SymbolicInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setByteOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.SymbolicInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.SymbolicInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.SymbolicInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.SymbolicInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBits();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getByteOffset();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.BuildAst.SymbolicInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.BuildAst.SymbolicInput} returns this
 */
proto.BuildAst.SymbolicInput.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 bits = 2;
 * @return {number}
 */
proto.BuildAst.SymbolicInput.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.SymbolicInput} returns this
 */
proto.BuildAst.SymbolicInput.prototype.setBits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 byte_offset = 3;
 * @return {number}
 */
proto.BuildAst.SymbolicInput.prototype.getByteOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.SymbolicInput} returns this
 */
proto.BuildAst.SymbolicInput.prototype.setByteOffset = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BuildAst.Constant.prototype.toObject = function(opt_includeInstance) {
  return proto.BuildAst.Constant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BuildAst.Constant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.Constant.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bits: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BuildAst.Constant}
 */
proto.BuildAst.Constant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BuildAst.Constant;
  return proto.BuildAst.Constant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BuildAst.Constant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BuildAst.Constant}
 */
proto.BuildAst.Constant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BuildAst.Constant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BuildAst.Constant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BuildAst.Constant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BuildAst.Constant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBits();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 value = 1;
 * @return {number}
 */
proto.BuildAst.Constant.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.Constant} returns this
 */
proto.BuildAst.Constant.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 bits = 2;
 * @return {number}
 */
proto.BuildAst.Constant.prototype.getBits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.BuildAst.Constant} returns this
 */
proto.BuildAst.Constant.prototype.setBits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Constant constant = 1;
 * @return {?proto.BuildAst.Constant}
 */
proto.BuildAst.prototype.getConstant = function() {
  return /** @type{?proto.BuildAst.Constant} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.Constant, 1));
};


/**
 * @param {?proto.BuildAst.Constant|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setConstant = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearConstant = function() {
  return this.setConstant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasConstant = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SymbolicInput sym_input = 2;
 * @return {?proto.BuildAst.SymbolicInput}
 */
proto.BuildAst.prototype.getSymInput = function() {
  return /** @type{?proto.BuildAst.SymbolicInput} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.SymbolicInput, 2));
};


/**
 * @param {?proto.BuildAst.SymbolicInput|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setSymInput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearSymInput = function() {
  return this.setSymInput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasSymInput = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UnaryOp op_unary = 3;
 * @return {?proto.BuildAst.UnaryOp}
 */
proto.BuildAst.prototype.getOpUnary = function() {
  return /** @type{?proto.BuildAst.UnaryOp} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.UnaryOp, 3));
};


/**
 * @param {?proto.BuildAst.UnaryOp|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setOpUnary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearOpUnary = function() {
  return this.setOpUnary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasOpUnary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BinaryOp op_binary = 4;
 * @return {?proto.BuildAst.BinaryOp}
 */
proto.BuildAst.prototype.getOpBinary = function() {
  return /** @type{?proto.BuildAst.BinaryOp} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.BinaryOp, 4));
};


/**
 * @param {?proto.BuildAst.BinaryOp|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setOpBinary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearOpBinary = function() {
  return this.setOpBinary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasOpBinary = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UnaryPredicate pred_unary = 5;
 * @return {?proto.BuildAst.UnaryPredicate}
 */
proto.BuildAst.prototype.getPredUnary = function() {
  return /** @type{?proto.BuildAst.UnaryPredicate} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.UnaryPredicate, 5));
};


/**
 * @param {?proto.BuildAst.UnaryPredicate|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setPredUnary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearPredUnary = function() {
  return this.setPredUnary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasPredUnary = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional BinaryPredicate pred_binary = 6;
 * @return {?proto.BuildAst.BinaryPredicate}
 */
proto.BuildAst.prototype.getPredBinary = function() {
  return /** @type{?proto.BuildAst.BinaryPredicate} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.BinaryPredicate, 6));
};


/**
 * @param {?proto.BuildAst.BinaryPredicate|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setPredBinary = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearPredBinary = function() {
  return this.setPredBinary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasPredBinary = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Extract extract = 7;
 * @return {?proto.BuildAst.Extract}
 */
proto.BuildAst.prototype.getExtract = function() {
  return /** @type{?proto.BuildAst.Extract} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.Extract, 7));
};


/**
 * @param {?proto.BuildAst.Extract|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setExtract = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearExtract = function() {
  return this.setExtract(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasExtract = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Concat concat = 8;
 * @return {?proto.BuildAst.Concat}
 */
proto.BuildAst.prototype.getConcat = function() {
  return /** @type{?proto.BuildAst.Concat} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.Concat, 8));
};


/**
 * @param {?proto.BuildAst.Concat|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setConcat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearConcat = function() {
  return this.setConcat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasConcat = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ZeroExt zero_ext = 9;
 * @return {?proto.BuildAst.ZeroExt}
 */
proto.BuildAst.prototype.getZeroExt = function() {
  return /** @type{?proto.BuildAst.ZeroExt} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.ZeroExt, 9));
};


/**
 * @param {?proto.BuildAst.ZeroExt|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setZeroExt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearZeroExt = function() {
  return this.setZeroExt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasZeroExt = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional SignExt sign_ext = 10;
 * @return {?proto.BuildAst.SignExt}
 */
proto.BuildAst.prototype.getSignExt = function() {
  return /** @type{?proto.BuildAst.SignExt} */ (
    jspb.Message.getWrapperField(this, proto.BuildAst.SignExt, 10));
};


/**
 * @param {?proto.BuildAst.SignExt|undefined} value
 * @return {!proto.BuildAst} returns this
*/
proto.BuildAst.prototype.setSignExt = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.BuildAst.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BuildAst} returns this
 */
proto.BuildAst.prototype.clearSignExt = function() {
  return this.setSignExt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BuildAst.prototype.hasSignExt = function() {
  return jspb.Message.getField(this, 10) != null;
};


