// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ast.proto

#include "ast.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_BinaryOp_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_BinaryPredicate_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_Concat_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildAst_Constant_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_Extract_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_SignExt_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildAst_SymbolicInput_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_UnaryOp_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_UnaryPredicate_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_ZeroExt_ast_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ast_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeId_ast_2eproto;
class NodeIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeId> _instance;
} _NodeId_default_instance_;
class BuildAst_UnaryOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_UnaryOp> _instance;
} _BuildAst_UnaryOp_default_instance_;
class BuildAst_BinaryOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_BinaryOp> _instance;
} _BuildAst_BinaryOp_default_instance_;
class BuildAst_BinaryPredicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_BinaryPredicate> _instance;
} _BuildAst_BinaryPredicate_default_instance_;
class BuildAst_UnaryPredicateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_UnaryPredicate> _instance;
} _BuildAst_UnaryPredicate_default_instance_;
class BuildAst_ExtractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_Extract> _instance;
} _BuildAst_Extract_default_instance_;
class BuildAst_ConcatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_Concat> _instance;
} _BuildAst_Concat_default_instance_;
class BuildAst_ZeroExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_ZeroExt> _instance;
} _BuildAst_ZeroExt_default_instance_;
class BuildAst_SignExtDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_SignExt> _instance;
} _BuildAst_SignExt_default_instance_;
class BuildAst_SymbolicInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_SymbolicInput> _instance;
} _BuildAst_SymbolicInput_default_instance_;
class BuildAst_ConstantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst_Constant> _instance;
} _BuildAst_Constant_default_instance_;
class BuildAstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildAst> _instance;
} _BuildAst_default_instance_;
static void InitDefaultsscc_info_BuildAst_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_default_instance_;
    new (ptr) ::BuildAst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_BuildAst_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_BuildAst_ast_2eproto}, {
      &scc_info_BuildAst_Constant_ast_2eproto.base,
      &scc_info_BuildAst_SymbolicInput_ast_2eproto.base,
      &scc_info_BuildAst_UnaryOp_ast_2eproto.base,
      &scc_info_BuildAst_BinaryOp_ast_2eproto.base,
      &scc_info_BuildAst_UnaryPredicate_ast_2eproto.base,
      &scc_info_BuildAst_BinaryPredicate_ast_2eproto.base,
      &scc_info_BuildAst_Extract_ast_2eproto.base,
      &scc_info_BuildAst_Concat_ast_2eproto.base,
      &scc_info_BuildAst_ZeroExt_ast_2eproto.base,
      &scc_info_BuildAst_SignExt_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_BinaryOp_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_BinaryOp_default_instance_;
    new (ptr) ::BuildAst_BinaryOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_BinaryOp_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_BinaryOp_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_BinaryPredicate_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_BinaryPredicate_default_instance_;
    new (ptr) ::BuildAst_BinaryPredicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_BinaryPredicate_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_BinaryPredicate_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_Concat_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_Concat_default_instance_;
    new (ptr) ::BuildAst_Concat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_Concat_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_Concat_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_Constant_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_Constant_default_instance_;
    new (ptr) ::BuildAst_Constant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildAst_Constant_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildAst_Constant_ast_2eproto}, {}};

static void InitDefaultsscc_info_BuildAst_Extract_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_Extract_default_instance_;
    new (ptr) ::BuildAst_Extract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_Extract_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_Extract_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_SignExt_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_SignExt_default_instance_;
    new (ptr) ::BuildAst_SignExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_SignExt_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_SignExt_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_SymbolicInput_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_SymbolicInput_default_instance_;
    new (ptr) ::BuildAst_SymbolicInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildAst_SymbolicInput_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildAst_SymbolicInput_ast_2eproto}, {}};

static void InitDefaultsscc_info_BuildAst_UnaryOp_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_UnaryOp_default_instance_;
    new (ptr) ::BuildAst_UnaryOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_UnaryOp_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_UnaryOp_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_UnaryPredicate_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_UnaryPredicate_default_instance_;
    new (ptr) ::BuildAst_UnaryPredicate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_UnaryPredicate_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_UnaryPredicate_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_BuildAst_ZeroExt_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BuildAst_ZeroExt_default_instance_;
    new (ptr) ::BuildAst_ZeroExt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildAst_ZeroExt_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildAst_ZeroExt_ast_2eproto}, {
      &scc_info_NodeId_ast_2eproto.base,}};

static void InitDefaultsscc_info_NodeId_ast_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NodeId_default_instance_;
    new (ptr) ::NodeId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeId_ast_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeId_ast_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ast_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ast_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ast_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ast_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NodeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NodeId, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_UnaryOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_UnaryOp, op_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_UnaryOp, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryOp, op_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryOp, left_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryOp, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryPredicate, op_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryPredicate, left_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_BinaryPredicate, right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_UnaryPredicate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_UnaryPredicate, op_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_UnaryPredicate, arg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_Extract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_Extract, inner_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_Extract, start_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_Extract, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_Concat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_Concat, partial_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_ZeroExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_ZeroExt, inner_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_ZeroExt, by_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_SignExt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_SignExt, inner_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_SignExt, by_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_SymbolicInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_SymbolicInput, name_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_SymbolicInput, bits_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_SymbolicInput, byte_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst_Constant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BuildAst_Constant, value_),
  PROTOBUF_FIELD_OFFSET(::BuildAst_Constant, bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BuildAst, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::BuildAst, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::BuildAst, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NodeId)},
  { 6, -1, sizeof(::BuildAst_UnaryOp)},
  { 13, -1, sizeof(::BuildAst_BinaryOp)},
  { 21, -1, sizeof(::BuildAst_BinaryPredicate)},
  { 29, -1, sizeof(::BuildAst_UnaryPredicate)},
  { 36, -1, sizeof(::BuildAst_Extract)},
  { 44, -1, sizeof(::BuildAst_Concat)},
  { 50, -1, sizeof(::BuildAst_ZeroExt)},
  { 57, -1, sizeof(::BuildAst_SignExt)},
  { 64, -1, sizeof(::BuildAst_SymbolicInput)},
  { 72, -1, sizeof(::BuildAst_Constant)},
  { 79, -1, sizeof(::BuildAst)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NodeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_UnaryOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_BinaryOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_BinaryPredicate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_UnaryPredicate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_Extract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_Concat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_ZeroExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_SignExt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_SymbolicInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_Constant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BuildAst_default_instance_),
};

const char descriptor_table_protodef_ast_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tast.proto\"\024\n\006NodeId\022\n\n\002id\030\001 \001(\004\"\212\010\n\010Bu"
  "ildAst\022&\n\010constant\030\001 \001(\0132\022.BuildAst.Cons"
  "tantH\000\022,\n\tsym_input\030\002 \001(\0132\027.BuildAst.Sym"
  "bolicInputH\000\022%\n\010op_unary\030\003 \001(\0132\021.BuildAs"
  "t.UnaryOpH\000\022\'\n\top_binary\030\004 \001(\0132\022.BuildAs"
  "t.BinaryOpH\000\022.\n\npred_unary\030\005 \001(\0132\030.Build"
  "Ast.UnaryPredicateH\000\0220\n\013pred_binary\030\006 \001("
  "\0132\031.BuildAst.BinaryPredicateH\000\022$\n\007extrac"
  "t\030\007 \001(\0132\021.BuildAst.ExtractH\000\022\"\n\006concat\030\010"
  " \001(\0132\020.BuildAst.ConcatH\000\022%\n\010zero_ext\030\t \001"
  "(\0132\021.BuildAst.ZeroExtH\000\022%\n\010sign_ext\030\n \001("
  "\0132\021.BuildAst.SignExtH\000\0322\n\007UnaryOp\022\021\n\002op\030"
  "\001 \001(\0162\005.UnOp\022\024\n\003arg\030\002 \001(\0132\007.NodeId\032M\n\010Bi"
  "naryOp\022\022\n\002op\030\001 \001(\0162\006.BinOp\022\025\n\004left\030\002 \001(\013"
  "2\007.NodeId\022\026\n\005right\030\003 \001(\0132\007.NodeId\032W\n\017Bin"
  "aryPredicate\022\025\n\002op\030\001 \001(\0162\t.CmpBinOp\022\025\n\004l"
  "eft\030\002 \001(\0132\007.NodeId\022\026\n\005right\030\003 \001(\0132\007.Node"
  "Id\032<\n\016UnaryPredicate\022\024\n\002op\030\001 \001(\0162\010.CmpUn"
  "Op\022\024\n\003arg\030\002 \001(\0132\007.NodeId\032>\n\007Extract\022\026\n\005i"
  "nner\030\001 \001(\0132\007.NodeId\022\r\n\005start\030\002 \001(\004\022\014\n\004si"
  "ze\030\003 \001(\004\032&\n\006Concat\022\034\n\013partial_ids\030\001 \003(\0132"
  "\007.NodeId\0322\n\007ZeroExt\022\026\n\005inner\030\001 \001(\0132\007.Nod"
  "eId\022\017\n\007by_bits\030\002 \001(\004\0322\n\007SignExt\022\026\n\005inner"
  "\030\001 \001(\0132\007.NodeId\022\017\n\007by_bits\030\002 \001(\004\032@\n\rSymb"
  "olicInput\022\014\n\004name\030\001 \001(\t\022\014\n\004bits\030\002 \001(\004\022\023\n"
  "\013byte_offset\030\003 \001(\004\032\'\n\010Constant\022\r\n\005value\030"
  "\001 \001(\004\022\014\n\004bits\030\002 \001(\004B\t\n\007message*&\n\004UnOp\022\007"
  "\n\003Not\020\000\022\007\n\003Neg\020\001\022\014\n\010Reversed\020\002*O\n\005BinOp\022"
  "\007\n\003Add\020\000\022\007\n\003Sub\020\001\022\007\n\003Mul\020\002\022\007\n\003Div\020\003\022\010\n\004S"
  "Div\020\004\022\007\n\003And\020\005\022\006\n\002Or\020\006\022\007\n\003Xor\020\007*#\n\007CmpUn"
  "Op\022\n\n\006IsZero\020\000\022\014\n\010IsSigned\020\001*:\n\010CmpBinOp"
  "\022\006\n\002Eq\020\000\022\006\n\002Ne\020\001\022\006\n\002Le\020\002\022\006\n\002Lt\020\003\022\006\n\002Ge\020\004"
  "\022\006\n\002Gt\020\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ast_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ast_2eproto_sccs[12] = {
  &scc_info_BuildAst_ast_2eproto.base,
  &scc_info_BuildAst_BinaryOp_ast_2eproto.base,
  &scc_info_BuildAst_BinaryPredicate_ast_2eproto.base,
  &scc_info_BuildAst_Concat_ast_2eproto.base,
  &scc_info_BuildAst_Constant_ast_2eproto.base,
  &scc_info_BuildAst_Extract_ast_2eproto.base,
  &scc_info_BuildAst_SignExt_ast_2eproto.base,
  &scc_info_BuildAst_SymbolicInput_ast_2eproto.base,
  &scc_info_BuildAst_UnaryOp_ast_2eproto.base,
  &scc_info_BuildAst_UnaryPredicate_ast_2eproto.base,
  &scc_info_BuildAst_ZeroExt_ast_2eproto.base,
  &scc_info_NodeId_ast_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ast_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ast_2eproto = {
  false, false, descriptor_table_protodef_ast_2eproto, "ast.proto", 1296,
  &descriptor_table_ast_2eproto_once, descriptor_table_ast_2eproto_sccs, descriptor_table_ast_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_ast_2eproto::offsets,
  file_level_metadata_ast_2eproto, 12, file_level_enum_descriptors_ast_2eproto, file_level_service_descriptors_ast_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ast_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ast_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ast_2eproto);
  return file_level_enum_descriptors_ast_2eproto[0];
}
bool UnOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BinOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ast_2eproto);
  return file_level_enum_descriptors_ast_2eproto[1];
}
bool BinOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmpUnOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ast_2eproto);
  return file_level_enum_descriptors_ast_2eproto[2];
}
bool CmpUnOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmpBinOp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ast_2eproto);
  return file_level_enum_descriptors_ast_2eproto[3];
}
bool CmpBinOp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class NodeId::_Internal {
 public:
};

NodeId::NodeId(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NodeId)
}
NodeId::NodeId(const NodeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:NodeId)
}

void NodeId::SharedCtor() {
  id_ = PROTOBUF_ULONGLONG(0);
}

NodeId::~NodeId() {
  // @@protoc_insertion_point(destructor:NodeId)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NodeId::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NodeId::ArenaDtor(void* object) {
  NodeId* _this = reinterpret_cast< NodeId* >(object);
  (void)_this;
}
void NodeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NodeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeId& NodeId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeId_ast_2eproto.base);
  return *internal_default_instance();
}


void NodeId::Clear() {
// @@protoc_insertion_point(message_clear_start:NodeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NodeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeId)
  return target;
}

size_t NodeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NodeId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NodeId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NodeId)
    MergeFrom(*source);
  }
}

void NodeId::MergeFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NodeId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void NodeId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeId::CopyFrom(const NodeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NodeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeId::IsInitialized() const {
  return true;
}

void NodeId::InternalSwap(NodeId* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_UnaryOp::_Internal {
 public:
  static const ::NodeId& arg(const BuildAst_UnaryOp* msg);
};

const ::NodeId&
BuildAst_UnaryOp::_Internal::arg(const BuildAst_UnaryOp* msg) {
  return *msg->arg_;
}
BuildAst_UnaryOp::BuildAst_UnaryOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.UnaryOp)
}
BuildAst_UnaryOp::BuildAst_UnaryOp(const BuildAst_UnaryOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arg()) {
    arg_ = new ::NodeId(*from.arg_);
  } else {
    arg_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:BuildAst.UnaryOp)
}

void BuildAst_UnaryOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_UnaryOp_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&arg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&arg_)) + sizeof(op_));
}

BuildAst_UnaryOp::~BuildAst_UnaryOp() {
  // @@protoc_insertion_point(destructor:BuildAst.UnaryOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_UnaryOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete arg_;
}

void BuildAst_UnaryOp::ArenaDtor(void* object) {
  BuildAst_UnaryOp* _this = reinterpret_cast< BuildAst_UnaryOp* >(object);
  (void)_this;
}
void BuildAst_UnaryOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_UnaryOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_UnaryOp& BuildAst_UnaryOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_UnaryOp_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_UnaryOp::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.UnaryOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && arg_ != nullptr) {
    delete arg_;
  }
  arg_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_UnaryOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .UnOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::UnOp>(val));
        } else goto handle_unusual;
        continue;
      // .NodeId arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_UnaryOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.UnaryOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .UnOp op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .NodeId arg = 2;
  if (this->has_arg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.UnaryOp)
  return target;
}

size_t BuildAst_UnaryOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.UnaryOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId arg = 2;
  if (this->has_arg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arg_);
  }

  // .UnOp op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_UnaryOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.UnaryOp)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_UnaryOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_UnaryOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.UnaryOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.UnaryOp)
    MergeFrom(*source);
  }
}

void BuildAst_UnaryOp::MergeFrom(const BuildAst_UnaryOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.UnaryOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arg()) {
    _internal_mutable_arg()->::NodeId::MergeFrom(from._internal_arg());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BuildAst_UnaryOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.UnaryOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_UnaryOp::CopyFrom(const BuildAst_UnaryOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.UnaryOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_UnaryOp::IsInitialized() const {
  return true;
}

void BuildAst_UnaryOp::InternalSwap(BuildAst_UnaryOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_UnaryOp, op_)
      + sizeof(BuildAst_UnaryOp::op_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_UnaryOp, arg_)>(
          reinterpret_cast<char*>(&arg_),
          reinterpret_cast<char*>(&other->arg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_UnaryOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_BinaryOp::_Internal {
 public:
  static const ::NodeId& left(const BuildAst_BinaryOp* msg);
  static const ::NodeId& right(const BuildAst_BinaryOp* msg);
};

const ::NodeId&
BuildAst_BinaryOp::_Internal::left(const BuildAst_BinaryOp* msg) {
  return *msg->left_;
}
const ::NodeId&
BuildAst_BinaryOp::_Internal::right(const BuildAst_BinaryOp* msg) {
  return *msg->right_;
}
BuildAst_BinaryOp::BuildAst_BinaryOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.BinaryOp)
}
BuildAst_BinaryOp::BuildAst_BinaryOp(const BuildAst_BinaryOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::NodeId(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::NodeId(*from.right_);
  } else {
    right_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:BuildAst.BinaryOp)
}

void BuildAst_BinaryOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_BinaryOp_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&left_)) + sizeof(op_));
}

BuildAst_BinaryOp::~BuildAst_BinaryOp() {
  // @@protoc_insertion_point(destructor:BuildAst.BinaryOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_BinaryOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void BuildAst_BinaryOp::ArenaDtor(void* object) {
  BuildAst_BinaryOp* _this = reinterpret_cast< BuildAst_BinaryOp* >(object);
  (void)_this;
}
void BuildAst_BinaryOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_BinaryOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_BinaryOp& BuildAst_BinaryOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_BinaryOp_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_BinaryOp::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.BinaryOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_BinaryOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BinOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::BinOp>(val));
        } else goto handle_unusual;
        continue;
      // .NodeId left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NodeId right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_BinaryOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.BinaryOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BinOp op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .NodeId left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .NodeId right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.BinaryOp)
  return target;
}

size_t BuildAst_BinaryOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.BinaryOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .NodeId right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .BinOp op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_BinaryOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.BinaryOp)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_BinaryOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_BinaryOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.BinaryOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.BinaryOp)
    MergeFrom(*source);
  }
}

void BuildAst_BinaryOp::MergeFrom(const BuildAst_BinaryOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.BinaryOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::NodeId::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::NodeId::MergeFrom(from._internal_right());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BuildAst_BinaryOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.BinaryOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_BinaryOp::CopyFrom(const BuildAst_BinaryOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.BinaryOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_BinaryOp::IsInitialized() const {
  return true;
}

void BuildAst_BinaryOp::InternalSwap(BuildAst_BinaryOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_BinaryOp, op_)
      + sizeof(BuildAst_BinaryOp::op_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_BinaryOp, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_BinaryOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_BinaryPredicate::_Internal {
 public:
  static const ::NodeId& left(const BuildAst_BinaryPredicate* msg);
  static const ::NodeId& right(const BuildAst_BinaryPredicate* msg);
};

const ::NodeId&
BuildAst_BinaryPredicate::_Internal::left(const BuildAst_BinaryPredicate* msg) {
  return *msg->left_;
}
const ::NodeId&
BuildAst_BinaryPredicate::_Internal::right(const BuildAst_BinaryPredicate* msg) {
  return *msg->right_;
}
BuildAst_BinaryPredicate::BuildAst_BinaryPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.BinaryPredicate)
}
BuildAst_BinaryPredicate::BuildAst_BinaryPredicate(const BuildAst_BinaryPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left()) {
    left_ = new ::NodeId(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::NodeId(*from.right_);
  } else {
    right_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:BuildAst.BinaryPredicate)
}

void BuildAst_BinaryPredicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_BinaryPredicate_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&left_)) + sizeof(op_));
}

BuildAst_BinaryPredicate::~BuildAst_BinaryPredicate() {
  // @@protoc_insertion_point(destructor:BuildAst.BinaryPredicate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_BinaryPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void BuildAst_BinaryPredicate::ArenaDtor(void* object) {
  BuildAst_BinaryPredicate* _this = reinterpret_cast< BuildAst_BinaryPredicate* >(object);
  (void)_this;
}
void BuildAst_BinaryPredicate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_BinaryPredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_BinaryPredicate& BuildAst_BinaryPredicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_BinaryPredicate_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_BinaryPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.BinaryPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArena() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_BinaryPredicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CmpBinOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::CmpBinOp>(val));
        } else goto handle_unusual;
        continue;
      // .NodeId left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .NodeId right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_BinaryPredicate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.BinaryPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CmpBinOp op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .NodeId left = 2;
  if (this->has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::left(this), target, stream);
  }

  // .NodeId right = 3;
  if (this->has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.BinaryPredicate)
  return target;
}

size_t BuildAst_BinaryPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.BinaryPredicate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId left = 2;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .NodeId right = 3;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .CmpBinOp op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_BinaryPredicate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.BinaryPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_BinaryPredicate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_BinaryPredicate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.BinaryPredicate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.BinaryPredicate)
    MergeFrom(*source);
  }
}

void BuildAst_BinaryPredicate::MergeFrom(const BuildAst_BinaryPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.BinaryPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_left()) {
    _internal_mutable_left()->::NodeId::MergeFrom(from._internal_left());
  }
  if (from.has_right()) {
    _internal_mutable_right()->::NodeId::MergeFrom(from._internal_right());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BuildAst_BinaryPredicate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.BinaryPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_BinaryPredicate::CopyFrom(const BuildAst_BinaryPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.BinaryPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_BinaryPredicate::IsInitialized() const {
  return true;
}

void BuildAst_BinaryPredicate::InternalSwap(BuildAst_BinaryPredicate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_BinaryPredicate, op_)
      + sizeof(BuildAst_BinaryPredicate::op_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_BinaryPredicate, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_BinaryPredicate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_UnaryPredicate::_Internal {
 public:
  static const ::NodeId& arg(const BuildAst_UnaryPredicate* msg);
};

const ::NodeId&
BuildAst_UnaryPredicate::_Internal::arg(const BuildAst_UnaryPredicate* msg) {
  return *msg->arg_;
}
BuildAst_UnaryPredicate::BuildAst_UnaryPredicate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.UnaryPredicate)
}
BuildAst_UnaryPredicate::BuildAst_UnaryPredicate(const BuildAst_UnaryPredicate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arg()) {
    arg_ = new ::NodeId(*from.arg_);
  } else {
    arg_ = nullptr;
  }
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:BuildAst.UnaryPredicate)
}

void BuildAst_UnaryPredicate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_UnaryPredicate_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&arg_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_) -
      reinterpret_cast<char*>(&arg_)) + sizeof(op_));
}

BuildAst_UnaryPredicate::~BuildAst_UnaryPredicate() {
  // @@protoc_insertion_point(destructor:BuildAst.UnaryPredicate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_UnaryPredicate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete arg_;
}

void BuildAst_UnaryPredicate::ArenaDtor(void* object) {
  BuildAst_UnaryPredicate* _this = reinterpret_cast< BuildAst_UnaryPredicate* >(object);
  (void)_this;
}
void BuildAst_UnaryPredicate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_UnaryPredicate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_UnaryPredicate& BuildAst_UnaryPredicate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_UnaryPredicate_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_UnaryPredicate::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.UnaryPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && arg_ != nullptr) {
    delete arg_;
  }
  arg_ = nullptr;
  op_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_UnaryPredicate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .CmpUnOp op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::CmpUnOp>(val));
        } else goto handle_unusual;
        continue;
      // .NodeId arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_UnaryPredicate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.UnaryPredicate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .CmpUnOp op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // .NodeId arg = 2;
  if (this->has_arg()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::arg(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.UnaryPredicate)
  return target;
}

size_t BuildAst_UnaryPredicate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.UnaryPredicate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId arg = 2;
  if (this->has_arg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arg_);
  }

  // .CmpUnOp op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_UnaryPredicate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.UnaryPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_UnaryPredicate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_UnaryPredicate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.UnaryPredicate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.UnaryPredicate)
    MergeFrom(*source);
  }
}

void BuildAst_UnaryPredicate::MergeFrom(const BuildAst_UnaryPredicate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.UnaryPredicate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arg()) {
    _internal_mutable_arg()->::NodeId::MergeFrom(from._internal_arg());
  }
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void BuildAst_UnaryPredicate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.UnaryPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_UnaryPredicate::CopyFrom(const BuildAst_UnaryPredicate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.UnaryPredicate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_UnaryPredicate::IsInitialized() const {
  return true;
}

void BuildAst_UnaryPredicate::InternalSwap(BuildAst_UnaryPredicate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_UnaryPredicate, op_)
      + sizeof(BuildAst_UnaryPredicate::op_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_UnaryPredicate, arg_)>(
          reinterpret_cast<char*>(&arg_),
          reinterpret_cast<char*>(&other->arg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_UnaryPredicate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_Extract::_Internal {
 public:
  static const ::NodeId& inner(const BuildAst_Extract* msg);
};

const ::NodeId&
BuildAst_Extract::_Internal::inner(const BuildAst_Extract* msg) {
  return *msg->inner_;
}
BuildAst_Extract::BuildAst_Extract(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.Extract)
}
BuildAst_Extract::BuildAst_Extract(const BuildAst_Extract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inner()) {
    inner_ = new ::NodeId(*from.inner_);
  } else {
    inner_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&start_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:BuildAst.Extract)
}

void BuildAst_Extract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_Extract_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&inner_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&inner_)) + sizeof(size_));
}

BuildAst_Extract::~BuildAst_Extract() {
  // @@protoc_insertion_point(destructor:BuildAst.Extract)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_Extract::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete inner_;
}

void BuildAst_Extract::ArenaDtor(void* object) {
  BuildAst_Extract* _this = reinterpret_cast< BuildAst_Extract* >(object);
  (void)_this;
}
void BuildAst_Extract::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_Extract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_Extract& BuildAst_Extract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_Extract_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_Extract::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.Extract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && inner_ != nullptr) {
    delete inner_;
  }
  inner_ = nullptr;
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&start_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_Extract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NodeId inner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_Extract::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.Extract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NodeId inner = 1;
  if (this->has_inner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inner(this), target, stream);
  }

  // uint64 start = 2;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_start(), target);
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.Extract)
  return target;
}

size_t BuildAst_Extract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.Extract)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId inner = 1;
  if (this->has_inner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inner_);
  }

  // uint64 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start());
  }

  // uint64 size = 3;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_Extract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.Extract)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_Extract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_Extract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.Extract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.Extract)
    MergeFrom(*source);
  }
}

void BuildAst_Extract::MergeFrom(const BuildAst_Extract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.Extract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inner()) {
    _internal_mutable_inner()->::NodeId::MergeFrom(from._internal_inner());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void BuildAst_Extract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.Extract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_Extract::CopyFrom(const BuildAst_Extract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.Extract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_Extract::IsInitialized() const {
  return true;
}

void BuildAst_Extract::InternalSwap(BuildAst_Extract* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_Extract, size_)
      + sizeof(BuildAst_Extract::size_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_Extract, inner_)>(
          reinterpret_cast<char*>(&inner_),
          reinterpret_cast<char*>(&other->inner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_Extract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_Concat::_Internal {
 public:
};

BuildAst_Concat::BuildAst_Concat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  partial_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.Concat)
}
BuildAst_Concat::BuildAst_Concat(const BuildAst_Concat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      partial_ids_(from.partial_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BuildAst.Concat)
}

void BuildAst_Concat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_Concat_ast_2eproto.base);
}

BuildAst_Concat::~BuildAst_Concat() {
  // @@protoc_insertion_point(destructor:BuildAst.Concat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_Concat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BuildAst_Concat::ArenaDtor(void* object) {
  BuildAst_Concat* _this = reinterpret_cast< BuildAst_Concat* >(object);
  (void)_this;
}
void BuildAst_Concat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_Concat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_Concat& BuildAst_Concat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_Concat_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_Concat::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.Concat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partial_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_Concat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .NodeId partial_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_partial_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_Concat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.Concat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .NodeId partial_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_partial_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_partial_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.Concat)
  return target;
}

size_t BuildAst_Concat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.Concat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .NodeId partial_ids = 1;
  total_size += 1UL * this->_internal_partial_ids_size();
  for (const auto& msg : this->partial_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_Concat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.Concat)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_Concat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_Concat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.Concat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.Concat)
    MergeFrom(*source);
  }
}

void BuildAst_Concat::MergeFrom(const BuildAst_Concat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.Concat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partial_ids_.MergeFrom(from.partial_ids_);
}

void BuildAst_Concat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.Concat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_Concat::CopyFrom(const BuildAst_Concat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.Concat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_Concat::IsInitialized() const {
  return true;
}

void BuildAst_Concat::InternalSwap(BuildAst_Concat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  partial_ids_.InternalSwap(&other->partial_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_Concat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_ZeroExt::_Internal {
 public:
  static const ::NodeId& inner(const BuildAst_ZeroExt* msg);
};

const ::NodeId&
BuildAst_ZeroExt::_Internal::inner(const BuildAst_ZeroExt* msg) {
  return *msg->inner_;
}
BuildAst_ZeroExt::BuildAst_ZeroExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.ZeroExt)
}
BuildAst_ZeroExt::BuildAst_ZeroExt(const BuildAst_ZeroExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inner()) {
    inner_ = new ::NodeId(*from.inner_);
  } else {
    inner_ = nullptr;
  }
  by_bits_ = from.by_bits_;
  // @@protoc_insertion_point(copy_constructor:BuildAst.ZeroExt)
}

void BuildAst_ZeroExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_ZeroExt_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&inner_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&by_bits_) -
      reinterpret_cast<char*>(&inner_)) + sizeof(by_bits_));
}

BuildAst_ZeroExt::~BuildAst_ZeroExt() {
  // @@protoc_insertion_point(destructor:BuildAst.ZeroExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_ZeroExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete inner_;
}

void BuildAst_ZeroExt::ArenaDtor(void* object) {
  BuildAst_ZeroExt* _this = reinterpret_cast< BuildAst_ZeroExt* >(object);
  (void)_this;
}
void BuildAst_ZeroExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_ZeroExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_ZeroExt& BuildAst_ZeroExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_ZeroExt_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_ZeroExt::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.ZeroExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && inner_ != nullptr) {
    delete inner_;
  }
  inner_ = nullptr;
  by_bits_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_ZeroExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NodeId inner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 by_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          by_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_ZeroExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.ZeroExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NodeId inner = 1;
  if (this->has_inner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inner(this), target, stream);
  }

  // uint64 by_bits = 2;
  if (this->by_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_by_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.ZeroExt)
  return target;
}

size_t BuildAst_ZeroExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.ZeroExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId inner = 1;
  if (this->has_inner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inner_);
  }

  // uint64 by_bits = 2;
  if (this->by_bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_by_bits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_ZeroExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.ZeroExt)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_ZeroExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_ZeroExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.ZeroExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.ZeroExt)
    MergeFrom(*source);
  }
}

void BuildAst_ZeroExt::MergeFrom(const BuildAst_ZeroExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.ZeroExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inner()) {
    _internal_mutable_inner()->::NodeId::MergeFrom(from._internal_inner());
  }
  if (from.by_bits() != 0) {
    _internal_set_by_bits(from._internal_by_bits());
  }
}

void BuildAst_ZeroExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.ZeroExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_ZeroExt::CopyFrom(const BuildAst_ZeroExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.ZeroExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_ZeroExt::IsInitialized() const {
  return true;
}

void BuildAst_ZeroExt::InternalSwap(BuildAst_ZeroExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_ZeroExt, by_bits_)
      + sizeof(BuildAst_ZeroExt::by_bits_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_ZeroExt, inner_)>(
          reinterpret_cast<char*>(&inner_),
          reinterpret_cast<char*>(&other->inner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_ZeroExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_SignExt::_Internal {
 public:
  static const ::NodeId& inner(const BuildAst_SignExt* msg);
};

const ::NodeId&
BuildAst_SignExt::_Internal::inner(const BuildAst_SignExt* msg) {
  return *msg->inner_;
}
BuildAst_SignExt::BuildAst_SignExt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.SignExt)
}
BuildAst_SignExt::BuildAst_SignExt(const BuildAst_SignExt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_inner()) {
    inner_ = new ::NodeId(*from.inner_);
  } else {
    inner_ = nullptr;
  }
  by_bits_ = from.by_bits_;
  // @@protoc_insertion_point(copy_constructor:BuildAst.SignExt)
}

void BuildAst_SignExt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_SignExt_ast_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&inner_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&by_bits_) -
      reinterpret_cast<char*>(&inner_)) + sizeof(by_bits_));
}

BuildAst_SignExt::~BuildAst_SignExt() {
  // @@protoc_insertion_point(destructor:BuildAst.SignExt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_SignExt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete inner_;
}

void BuildAst_SignExt::ArenaDtor(void* object) {
  BuildAst_SignExt* _this = reinterpret_cast< BuildAst_SignExt* >(object);
  (void)_this;
}
void BuildAst_SignExt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_SignExt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_SignExt& BuildAst_SignExt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_SignExt_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_SignExt::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.SignExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && inner_ != nullptr) {
    delete inner_;
  }
  inner_ = nullptr;
  by_bits_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_SignExt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .NodeId inner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 by_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          by_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_SignExt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.SignExt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .NodeId inner = 1;
  if (this->has_inner()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::inner(this), target, stream);
  }

  // uint64 by_bits = 2;
  if (this->by_bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_by_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.SignExt)
  return target;
}

size_t BuildAst_SignExt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.SignExt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .NodeId inner = 1;
  if (this->has_inner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inner_);
  }

  // uint64 by_bits = 2;
  if (this->by_bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_by_bits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_SignExt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.SignExt)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_SignExt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_SignExt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.SignExt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.SignExt)
    MergeFrom(*source);
  }
}

void BuildAst_SignExt::MergeFrom(const BuildAst_SignExt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.SignExt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_inner()) {
    _internal_mutable_inner()->::NodeId::MergeFrom(from._internal_inner());
  }
  if (from.by_bits() != 0) {
    _internal_set_by_bits(from._internal_by_bits());
  }
}

void BuildAst_SignExt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.SignExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_SignExt::CopyFrom(const BuildAst_SignExt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.SignExt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_SignExt::IsInitialized() const {
  return true;
}

void BuildAst_SignExt::InternalSwap(BuildAst_SignExt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_SignExt, by_bits_)
      + sizeof(BuildAst_SignExt::by_bits_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_SignExt, inner_)>(
          reinterpret_cast<char*>(&inner_),
          reinterpret_cast<char*>(&other->inner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_SignExt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_SymbolicInput::_Internal {
 public:
};

BuildAst_SymbolicInput::BuildAst_SymbolicInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.SymbolicInput)
}
BuildAst_SymbolicInput::BuildAst_SymbolicInput(const BuildAst_SymbolicInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&bits_, &from.bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&byte_offset_) -
    reinterpret_cast<char*>(&bits_)) + sizeof(byte_offset_));
  // @@protoc_insertion_point(copy_constructor:BuildAst.SymbolicInput)
}

void BuildAst_SymbolicInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_SymbolicInput_ast_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&bits_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&byte_offset_) -
      reinterpret_cast<char*>(&bits_)) + sizeof(byte_offset_));
}

BuildAst_SymbolicInput::~BuildAst_SymbolicInput() {
  // @@protoc_insertion_point(destructor:BuildAst.SymbolicInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_SymbolicInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BuildAst_SymbolicInput::ArenaDtor(void* object) {
  BuildAst_SymbolicInput* _this = reinterpret_cast< BuildAst_SymbolicInput* >(object);
  (void)_this;
}
void BuildAst_SymbolicInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_SymbolicInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_SymbolicInput& BuildAst_SymbolicInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_SymbolicInput_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_SymbolicInput::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.SymbolicInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&byte_offset_) -
      reinterpret_cast<char*>(&bits_)) + sizeof(byte_offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_SymbolicInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "BuildAst.SymbolicInput.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 byte_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          byte_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_SymbolicInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.SymbolicInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BuildAst.SymbolicInput.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // uint64 bits = 2;
  if (this->bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bits(), target);
  }

  // uint64 byte_offset = 3;
  if (this->byte_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_byte_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.SymbolicInput)
  return target;
}

size_t BuildAst_SymbolicInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.SymbolicInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 bits = 2;
  if (this->bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bits());
  }

  // uint64 byte_offset = 3;
  if (this->byte_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_byte_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_SymbolicInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.SymbolicInput)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_SymbolicInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_SymbolicInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.SymbolicInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.SymbolicInput)
    MergeFrom(*source);
  }
}

void BuildAst_SymbolicInput::MergeFrom(const BuildAst_SymbolicInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.SymbolicInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.bits() != 0) {
    _internal_set_bits(from._internal_bits());
  }
  if (from.byte_offset() != 0) {
    _internal_set_byte_offset(from._internal_byte_offset());
  }
}

void BuildAst_SymbolicInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.SymbolicInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_SymbolicInput::CopyFrom(const BuildAst_SymbolicInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.SymbolicInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_SymbolicInput::IsInitialized() const {
  return true;
}

void BuildAst_SymbolicInput::InternalSwap(BuildAst_SymbolicInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_SymbolicInput, byte_offset_)
      + sizeof(BuildAst_SymbolicInput::byte_offset_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_SymbolicInput, bits_)>(
          reinterpret_cast<char*>(&bits_),
          reinterpret_cast<char*>(&other->bits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_SymbolicInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst_Constant::_Internal {
 public:
};

BuildAst_Constant::BuildAst_Constant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst.Constant)
}
BuildAst_Constant::BuildAst_Constant(const BuildAst_Constant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&bits_) -
    reinterpret_cast<char*>(&value_)) + sizeof(bits_));
  // @@protoc_insertion_point(copy_constructor:BuildAst.Constant)
}

void BuildAst_Constant::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bits_) -
      reinterpret_cast<char*>(&value_)) + sizeof(bits_));
}

BuildAst_Constant::~BuildAst_Constant() {
  // @@protoc_insertion_point(destructor:BuildAst.Constant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst_Constant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BuildAst_Constant::ArenaDtor(void* object) {
  BuildAst_Constant* _this = reinterpret_cast< BuildAst_Constant* >(object);
  (void)_this;
}
void BuildAst_Constant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst_Constant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst_Constant& BuildAst_Constant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_Constant_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst_Constant::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst.Constant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bits_) -
      reinterpret_cast<char*>(&value_)) + sizeof(bits_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst_Constant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst_Constant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst.Constant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // uint64 bits = 2;
  if (this->bits() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst.Constant)
  return target;
}

size_t BuildAst_Constant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst.Constant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_value());
  }

  // uint64 bits = 2;
  if (this->bits() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bits());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst_Constant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst.Constant)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst_Constant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst_Constant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst.Constant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst.Constant)
    MergeFrom(*source);
  }
}

void BuildAst_Constant::MergeFrom(const BuildAst_Constant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst.Constant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.bits() != 0) {
    _internal_set_bits(from._internal_bits());
  }
}

void BuildAst_Constant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst.Constant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst_Constant::CopyFrom(const BuildAst_Constant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst.Constant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst_Constant::IsInitialized() const {
  return true;
}

void BuildAst_Constant::InternalSwap(BuildAst_Constant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BuildAst_Constant, bits_)
      + sizeof(BuildAst_Constant::bits_)
      - PROTOBUF_FIELD_OFFSET(BuildAst_Constant, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst_Constant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BuildAst::_Internal {
 public:
  static const ::BuildAst_Constant& constant(const BuildAst* msg);
  static const ::BuildAst_SymbolicInput& sym_input(const BuildAst* msg);
  static const ::BuildAst_UnaryOp& op_unary(const BuildAst* msg);
  static const ::BuildAst_BinaryOp& op_binary(const BuildAst* msg);
  static const ::BuildAst_UnaryPredicate& pred_unary(const BuildAst* msg);
  static const ::BuildAst_BinaryPredicate& pred_binary(const BuildAst* msg);
  static const ::BuildAst_Extract& extract(const BuildAst* msg);
  static const ::BuildAst_Concat& concat(const BuildAst* msg);
  static const ::BuildAst_ZeroExt& zero_ext(const BuildAst* msg);
  static const ::BuildAst_SignExt& sign_ext(const BuildAst* msg);
};

const ::BuildAst_Constant&
BuildAst::_Internal::constant(const BuildAst* msg) {
  return *msg->message_.constant_;
}
const ::BuildAst_SymbolicInput&
BuildAst::_Internal::sym_input(const BuildAst* msg) {
  return *msg->message_.sym_input_;
}
const ::BuildAst_UnaryOp&
BuildAst::_Internal::op_unary(const BuildAst* msg) {
  return *msg->message_.op_unary_;
}
const ::BuildAst_BinaryOp&
BuildAst::_Internal::op_binary(const BuildAst* msg) {
  return *msg->message_.op_binary_;
}
const ::BuildAst_UnaryPredicate&
BuildAst::_Internal::pred_unary(const BuildAst* msg) {
  return *msg->message_.pred_unary_;
}
const ::BuildAst_BinaryPredicate&
BuildAst::_Internal::pred_binary(const BuildAst* msg) {
  return *msg->message_.pred_binary_;
}
const ::BuildAst_Extract&
BuildAst::_Internal::extract(const BuildAst* msg) {
  return *msg->message_.extract_;
}
const ::BuildAst_Concat&
BuildAst::_Internal::concat(const BuildAst* msg) {
  return *msg->message_.concat_;
}
const ::BuildAst_ZeroExt&
BuildAst::_Internal::zero_ext(const BuildAst* msg) {
  return *msg->message_.zero_ext_;
}
const ::BuildAst_SignExt&
BuildAst::_Internal::sign_ext(const BuildAst* msg) {
  return *msg->message_.sign_ext_;
}
void BuildAst::set_allocated_constant(::BuildAst_Constant* constant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (constant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(constant);
    if (message_arena != submessage_arena) {
      constant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, constant, submessage_arena);
    }
    set_has_constant();
    message_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.constant)
}
void BuildAst::set_allocated_sym_input(::BuildAst_SymbolicInput* sym_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (sym_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sym_input);
    if (message_arena != submessage_arena) {
      sym_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sym_input, submessage_arena);
    }
    set_has_sym_input();
    message_.sym_input_ = sym_input;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.sym_input)
}
void BuildAst::set_allocated_op_unary(::BuildAst_UnaryOp* op_unary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (op_unary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_unary);
    if (message_arena != submessage_arena) {
      op_unary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_unary, submessage_arena);
    }
    set_has_op_unary();
    message_.op_unary_ = op_unary;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.op_unary)
}
void BuildAst::set_allocated_op_binary(::BuildAst_BinaryOp* op_binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (op_binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_binary);
    if (message_arena != submessage_arena) {
      op_binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_binary, submessage_arena);
    }
    set_has_op_binary();
    message_.op_binary_ = op_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.op_binary)
}
void BuildAst::set_allocated_pred_unary(::BuildAst_UnaryPredicate* pred_unary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (pred_unary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pred_unary);
    if (message_arena != submessage_arena) {
      pred_unary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pred_unary, submessage_arena);
    }
    set_has_pred_unary();
    message_.pred_unary_ = pred_unary;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.pred_unary)
}
void BuildAst::set_allocated_pred_binary(::BuildAst_BinaryPredicate* pred_binary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (pred_binary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pred_binary);
    if (message_arena != submessage_arena) {
      pred_binary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pred_binary, submessage_arena);
    }
    set_has_pred_binary();
    message_.pred_binary_ = pred_binary;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.pred_binary)
}
void BuildAst::set_allocated_extract(::BuildAst_Extract* extract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (extract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(extract);
    if (message_arena != submessage_arena) {
      extract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extract, submessage_arena);
    }
    set_has_extract();
    message_.extract_ = extract;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.extract)
}
void BuildAst::set_allocated_concat(::BuildAst_Concat* concat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (concat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(concat);
    if (message_arena != submessage_arena) {
      concat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, concat, submessage_arena);
    }
    set_has_concat();
    message_.concat_ = concat;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.concat)
}
void BuildAst::set_allocated_zero_ext(::BuildAst_ZeroExt* zero_ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (zero_ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zero_ext);
    if (message_arena != submessage_arena) {
      zero_ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zero_ext, submessage_arena);
    }
    set_has_zero_ext();
    message_.zero_ext_ = zero_ext;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.zero_ext)
}
void BuildAst::set_allocated_sign_ext(::BuildAst_SignExt* sign_ext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (sign_ext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sign_ext);
    if (message_arena != submessage_arena) {
      sign_ext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sign_ext, submessage_arena);
    }
    set_has_sign_ext();
    message_.sign_ext_ = sign_ext;
  }
  // @@protoc_insertion_point(field_set_allocated:BuildAst.sign_ext)
}
BuildAst::BuildAst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:BuildAst)
}
BuildAst::BuildAst(const BuildAst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kConstant: {
      _internal_mutable_constant()->::BuildAst_Constant::MergeFrom(from._internal_constant());
      break;
    }
    case kSymInput: {
      _internal_mutable_sym_input()->::BuildAst_SymbolicInput::MergeFrom(from._internal_sym_input());
      break;
    }
    case kOpUnary: {
      _internal_mutable_op_unary()->::BuildAst_UnaryOp::MergeFrom(from._internal_op_unary());
      break;
    }
    case kOpBinary: {
      _internal_mutable_op_binary()->::BuildAst_BinaryOp::MergeFrom(from._internal_op_binary());
      break;
    }
    case kPredUnary: {
      _internal_mutable_pred_unary()->::BuildAst_UnaryPredicate::MergeFrom(from._internal_pred_unary());
      break;
    }
    case kPredBinary: {
      _internal_mutable_pred_binary()->::BuildAst_BinaryPredicate::MergeFrom(from._internal_pred_binary());
      break;
    }
    case kExtract: {
      _internal_mutable_extract()->::BuildAst_Extract::MergeFrom(from._internal_extract());
      break;
    }
    case kConcat: {
      _internal_mutable_concat()->::BuildAst_Concat::MergeFrom(from._internal_concat());
      break;
    }
    case kZeroExt: {
      _internal_mutable_zero_ext()->::BuildAst_ZeroExt::MergeFrom(from._internal_zero_ext());
      break;
    }
    case kSignExt: {
      _internal_mutable_sign_ext()->::BuildAst_SignExt::MergeFrom(from._internal_sign_ext());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:BuildAst)
}

void BuildAst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildAst_ast_2eproto.base);
  clear_has_message();
}

BuildAst::~BuildAst() {
  // @@protoc_insertion_point(destructor:BuildAst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BuildAst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void BuildAst::ArenaDtor(void* object) {
  BuildAst* _this = reinterpret_cast< BuildAst* >(object);
  (void)_this;
}
void BuildAst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BuildAst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildAst& BuildAst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildAst_ast_2eproto.base);
  return *internal_default_instance();
}


void BuildAst::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:BuildAst)
  switch (message_case()) {
    case kConstant: {
      if (GetArena() == nullptr) {
        delete message_.constant_;
      }
      break;
    }
    case kSymInput: {
      if (GetArena() == nullptr) {
        delete message_.sym_input_;
      }
      break;
    }
    case kOpUnary: {
      if (GetArena() == nullptr) {
        delete message_.op_unary_;
      }
      break;
    }
    case kOpBinary: {
      if (GetArena() == nullptr) {
        delete message_.op_binary_;
      }
      break;
    }
    case kPredUnary: {
      if (GetArena() == nullptr) {
        delete message_.pred_unary_;
      }
      break;
    }
    case kPredBinary: {
      if (GetArena() == nullptr) {
        delete message_.pred_binary_;
      }
      break;
    }
    case kExtract: {
      if (GetArena() == nullptr) {
        delete message_.extract_;
      }
      break;
    }
    case kConcat: {
      if (GetArena() == nullptr) {
        delete message_.concat_;
      }
      break;
    }
    case kZeroExt: {
      if (GetArena() == nullptr) {
        delete message_.zero_ext_;
      }
      break;
    }
    case kSignExt: {
      if (GetArena() == nullptr) {
        delete message_.sign_ext_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void BuildAst::Clear() {
// @@protoc_insertion_point(message_clear_start:BuildAst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildAst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BuildAst.Constant constant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_constant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.SymbolicInput sym_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sym_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.UnaryOp op_unary = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_unary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.BinaryOp op_binary = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.UnaryPredicate pred_unary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pred_unary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.BinaryPredicate pred_binary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pred_binary(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.Extract extract = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_extract(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.Concat concat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_concat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.ZeroExt zero_ext = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_zero_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BuildAst.SignExt sign_ext = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_sign_ext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildAst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BuildAst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BuildAst.Constant constant = 1;
  if (_internal_has_constant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::constant(this), target, stream);
  }

  // .BuildAst.SymbolicInput sym_input = 2;
  if (_internal_has_sym_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sym_input(this), target, stream);
  }

  // .BuildAst.UnaryOp op_unary = 3;
  if (_internal_has_op_unary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::op_unary(this), target, stream);
  }

  // .BuildAst.BinaryOp op_binary = 4;
  if (_internal_has_op_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::op_binary(this), target, stream);
  }

  // .BuildAst.UnaryPredicate pred_unary = 5;
  if (_internal_has_pred_unary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pred_unary(this), target, stream);
  }

  // .BuildAst.BinaryPredicate pred_binary = 6;
  if (_internal_has_pred_binary()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pred_binary(this), target, stream);
  }

  // .BuildAst.Extract extract = 7;
  if (_internal_has_extract()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::extract(this), target, stream);
  }

  // .BuildAst.Concat concat = 8;
  if (_internal_has_concat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::concat(this), target, stream);
  }

  // .BuildAst.ZeroExt zero_ext = 9;
  if (_internal_has_zero_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::zero_ext(this), target, stream);
  }

  // .BuildAst.SignExt sign_ext = 10;
  if (_internal_has_sign_ext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::sign_ext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BuildAst)
  return target;
}

size_t BuildAst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BuildAst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .BuildAst.Constant constant = 1;
    case kConstant: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.constant_);
      break;
    }
    // .BuildAst.SymbolicInput sym_input = 2;
    case kSymInput: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.sym_input_);
      break;
    }
    // .BuildAst.UnaryOp op_unary = 3;
    case kOpUnary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.op_unary_);
      break;
    }
    // .BuildAst.BinaryOp op_binary = 4;
    case kOpBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.op_binary_);
      break;
    }
    // .BuildAst.UnaryPredicate pred_unary = 5;
    case kPredUnary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.pred_unary_);
      break;
    }
    // .BuildAst.BinaryPredicate pred_binary = 6;
    case kPredBinary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.pred_binary_);
      break;
    }
    // .BuildAst.Extract extract = 7;
    case kExtract: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.extract_);
      break;
    }
    // .BuildAst.Concat concat = 8;
    case kConcat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.concat_);
      break;
    }
    // .BuildAst.ZeroExt zero_ext = 9;
    case kZeroExt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.zero_ext_);
      break;
    }
    // .BuildAst.SignExt sign_ext = 10;
    case kSignExt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.sign_ext_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildAst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BuildAst)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildAst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildAst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BuildAst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BuildAst)
    MergeFrom(*source);
  }
}

void BuildAst::MergeFrom(const BuildAst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BuildAst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kConstant: {
      _internal_mutable_constant()->::BuildAst_Constant::MergeFrom(from._internal_constant());
      break;
    }
    case kSymInput: {
      _internal_mutable_sym_input()->::BuildAst_SymbolicInput::MergeFrom(from._internal_sym_input());
      break;
    }
    case kOpUnary: {
      _internal_mutable_op_unary()->::BuildAst_UnaryOp::MergeFrom(from._internal_op_unary());
      break;
    }
    case kOpBinary: {
      _internal_mutable_op_binary()->::BuildAst_BinaryOp::MergeFrom(from._internal_op_binary());
      break;
    }
    case kPredUnary: {
      _internal_mutable_pred_unary()->::BuildAst_UnaryPredicate::MergeFrom(from._internal_pred_unary());
      break;
    }
    case kPredBinary: {
      _internal_mutable_pred_binary()->::BuildAst_BinaryPredicate::MergeFrom(from._internal_pred_binary());
      break;
    }
    case kExtract: {
      _internal_mutable_extract()->::BuildAst_Extract::MergeFrom(from._internal_extract());
      break;
    }
    case kConcat: {
      _internal_mutable_concat()->::BuildAst_Concat::MergeFrom(from._internal_concat());
      break;
    }
    case kZeroExt: {
      _internal_mutable_zero_ext()->::BuildAst_ZeroExt::MergeFrom(from._internal_zero_ext());
      break;
    }
    case kSignExt: {
      _internal_mutable_sign_ext()->::BuildAst_SignExt::MergeFrom(from._internal_sign_ext());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void BuildAst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BuildAst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildAst::CopyFrom(const BuildAst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BuildAst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildAst::IsInitialized() const {
  return true;
}

void BuildAst::InternalSwap(BuildAst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildAst::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::NodeId* Arena::CreateMaybeMessage< ::NodeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NodeId >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_UnaryOp* Arena::CreateMaybeMessage< ::BuildAst_UnaryOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_UnaryOp >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_BinaryOp* Arena::CreateMaybeMessage< ::BuildAst_BinaryOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_BinaryOp >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_BinaryPredicate* Arena::CreateMaybeMessage< ::BuildAst_BinaryPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_BinaryPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_UnaryPredicate* Arena::CreateMaybeMessage< ::BuildAst_UnaryPredicate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_UnaryPredicate >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_Extract* Arena::CreateMaybeMessage< ::BuildAst_Extract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_Extract >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_Concat* Arena::CreateMaybeMessage< ::BuildAst_Concat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_Concat >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_ZeroExt* Arena::CreateMaybeMessage< ::BuildAst_ZeroExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_ZeroExt >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_SignExt* Arena::CreateMaybeMessage< ::BuildAst_SignExt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_SignExt >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_SymbolicInput* Arena::CreateMaybeMessage< ::BuildAst_SymbolicInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_SymbolicInput >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst_Constant* Arena::CreateMaybeMessage< ::BuildAst_Constant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst_Constant >(arena);
}
template<> PROTOBUF_NOINLINE ::BuildAst* Arena::CreateMaybeMessage< ::BuildAst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::BuildAst >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
