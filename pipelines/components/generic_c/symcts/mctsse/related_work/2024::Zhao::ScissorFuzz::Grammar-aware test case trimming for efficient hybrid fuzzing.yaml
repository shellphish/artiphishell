
TITLE: "Grammar-aware test case trimming for efficient hybrid fuzzing"
PUBLISHED_AT: "Journal of King Saud University - Computer and Information Sciences"
PUBLICATION_TYPE: Journal
YEAR: 2024
AUTHORS:
- FIRSTNAME: "Yiru"
  LASTNAME: "Zhao"
  EMAIL: "zhaoyiru@whu.edu.cn"
  AFFILIATION:
    COUNTRY: China
    INSTITUTION: Wuhan University
    CITY: Wuhan
    SCHOOL: School of Cyber Science and Engineering
- FIRSTNAME: "Long"
  LASTNAME: "Gao"
  EMAIL: "longgao@whu.edu.cn"
  AFFILIATION:
    COUNTRY: China
    INSTITUTION: Wuhan University
    CITY: Wuhan
    SCHOOL: School of Cyber Science and Engineering
- FIRSTNAME: "Qihan"
  LASTNAME: "Wan"
  EMAIL: "wanqihan@whu.edu.cn"
  AFFILIATION:
    COUNTRY: China
    INSTITUTION: Wuhan University
    CITY: Wuhan
    SCHOOL: School of Cyber Science and Engineering
- FIRSTNAME: "Lei"
  LASTNAME: "Zhao"
  EMAIL: "leizhao@whu.edu.cn"
  AFFILIATION:
    COUNTRY: China
    INSTITUTION: Wuhan University
    CITY: Wuhan
    SCHOOL: School of Cyber Science and Engineering

TOOL_NAME: ScissorFuzz
TOOL_ARTIFACTS:
  - TYPE: github
    URL: https://github.com/zzyyrr/ScissorFuzz
    STATE: PRESENT
    # MIRRORED_URL:

BENCHMARKS:
  - Name: UniFuzz
    Subset: 6

COMPARES_AGAINST:
  - tool: QSYM
  - tool: DigFuzz

PDF: files/ScissorFuzz.pdf

LINKS:
  - URL: "https://www.sciencedirect.com/science/article/pii/S1319157824000090"
    TYPE: ScienceDirect

BIBTEX:
  - |
    @article{ZHAO2024101920,
      title = {Grammar-aware test case trimming for efficient hybrid fuzzing},
      journal = {Journal of King Saud University - Computer and Information Sciences},
      volume = {36},
      number = {1},
      pages = {101920},
      year = {2024},
      issn = {1319-1578},
      doi = {https://doi.org/10.1016/j.jksuci.2024.101920},
      url = {https://www.sciencedirect.com/science/article/pii/S1319157824000090},
      author = {Yiru Zhao and Long Gao and Qihan Wan and Lei Zhao},
      keywords = {Hybrid fuzzing, Fuzzing, Concolic execution, Delta debugging},
      abstract = {In recent years, hybrid fuzzing has garnered significant attention by combining the benefits of both fuzzing and concolic execution. However, existing hybrid fuzzing techniques face problems such as the performance overhead of concolic execution and low code coverage in real-world programs. In this study, we observed that concolic execution often falls into repetitive loop structures when analyzing inputs generated by fuzzing, leading to the construction of redundant constraint expressions, which severely impacts its efficiency. Based on this observation, we design a test case trimming approach to remove input fields related to repetitive loop structures. We propose a lightweight taint analysis technique to infer input’s grammatical structure and construct a hierarchical grammar tree. Then, through delta debugging, we identify nodes that do not affect the code coverage and remove the corresponding input fields. We implement a prototype ScissorFuzz. Experimental results show that our approach brings an average of 8.2% improvement in code coverage and triggers 115 more crashes compared to the state-of-the-art hybrid fuzzing technique QSYM. By eliminating redundant fields, our approach reduces the resource and time overhead associated with concolic execution during input processing, thereby enhancing the efficiency of hybrid fuzzing.}
    }

ABSTRACT: |
  In recent years, hybrid fuzzing has garnered significant attention by combining the benefits of both fuzzing
  and concolic execution. However, existing hybrid fuzzing techniques face problems such as the performance
  overhead of concolic execution and low code coverage in real-world programs. In this study, we observed
  that concolic execution often falls into repetitive loop structures when analyzing inputs generated by fuzzing,
  leading to the construction of redundant constraint expressions, which severely impacts its efficiency. Based
  on this observation, we design a test case trimming approach to remove input fields related to repetitive
  loop structures. We propose a lightweight taint analysis technique to infer input’s grammatical structure and
  construct a hierarchical grammar tree. Then, through delta debugging, we identify nodes that do not affect the
  code coverage and remove the corresponding input fields. We implement a prototype ScissorFuzz. Experimental
  results show that our approach brings an average of 8.2% improvement in code coverage and triggers 115 more
  crashes compared to the state-of-the-art hybrid fuzzing technique QSYM. By eliminating redundant fields, our
  approach reduces the resource and time overhead associated with concolic execution during input processing,
  thereby enhancing the efficiency of hybrid fuzzing.

NOTES:
  SYMCTS:
    - "I don't buy that this is a good idea at all"
    - "Minimizes test-cases for concolic execution????? WTF, that does not make sense"