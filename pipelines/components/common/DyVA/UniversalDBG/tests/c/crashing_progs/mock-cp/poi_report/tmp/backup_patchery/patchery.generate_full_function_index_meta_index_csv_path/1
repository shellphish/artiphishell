func_name,function_signature,filename,filepath,start_line,end_line,start_column,end_column,start_offset,end_offset,line_map
func_b,src/samples/mock_vp.c:20:1::void func_b(),mock_vp.c,src/samples/mock_vp.c,20,28,1,2,319,512,"[(20, 'void func_b(){'), (21, '    char *buff;'), (22, '    printf(""done adding items\\n"");'), (23, '    int j;'), (24, '    printf(""display item #:"");'), (25, '    scanf(""%d"", &j);'), (26, '    buff = &items[j][0];'), (27, '    printf(""item %d: %s\\n"", j, buff);'), (28, '}'), (29, '')]"
setup_pipe_data,"src/test/filein_harness.c:12:1::int setup_pipe_data(const uint8_t *, size_t)",filein_harness.c,src/test/filein_harness.c,12,48,1,2,241,972,"[(12, 'int setup_pipe_data(const uint8_t *data, size_t size)'), (13, '{'), (14, '  ssize_t numBytes;'), (15, '  int flags;'), (16, ''), (17, '  if (pipe(pipefd) == -1) {'), (18, '    perror(""pipe"");'), (19, '    exit(-1);'), (20, '  }'), (21, ''), (22, '  // Write the data'), (23, '  numBytes = write(pipefd[1], data, size);'), (24, '  if (numBytes == -1) {'), (25, '    perror(""write"");'), (26, '    exit(-1);'), (27, '  }'), (28, ''), (29, '  // Set the read end of the pipe to non-blocking'), (30, '  flags = fcntl(pipefd[0], F_GETFL, 0);'), (31, '  if (flags == -1) {'), (32, '      perror(""fcntl F_GETFL"");'), (33, '      exit(-1);'), (34, '  }'), (35, ''), (36, '  if (fcntl(pipefd[0], F_SETFL, flags | O_NONBLOCK) == -1) {'), (37, '      perror(""fcntl F_SETFL"");'), (38, '      exit(-1);'), (39, '  }'), (40, ''), (41, '  // Dup the read end of the pipe over the client fd'), (42, '  if (dup2(pipefd[0], STDIN_FILENO) == -1) {'), (43, '        perror(""dup2"");'), (44, '        return (EXIT_FAILURE);'), (45, '  }'), (46, ''), (47, '  return 0;'), (48, '}'), (49, '')]"
main,src/samples/mock_vp.c:31:1::int main(),mock_vp.c,src/samples/mock_vp.c,31,40,1,2,533,593,"[(31, 'int main()'), (32, '{'), (33, ''), (34, '    func_a();'), (35, ''), (36, '    func_b();'), (37, ''), (38, ''), (39, '    return 0;'), (40, '}'), (41, '')]"
LLVMFuzzerTestOneInput,"src/test/filein_harness.c:50:1::int LLVMFuzzerTestOneInput(const uint8_t *, size_t)",filein_harness.c,src/test/filein_harness.c,50,62,1,2,974,1172,"[(50, 'int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)'), (51, '{'), (52, '  setup_pipe_data(data, size);'), (53, ''), (54, '  func_a();'), (55, '  func_b();'), (56, ''), (57, '  // Clean up the pipes'), (58, '  close(pipefd[0]);'), (59, '  close(pipefd[1]);'), (60, ''), (61, '  return 0;'), (62, '}'), (63, '')]"
func_a,src/samples/mock_vp.c:7:1::void func_a(),mock_vp.c,src/samples/mock_vp.c,7,18,1,2,80,317,"[(7, 'void func_a(){'), (8, '    char* buff;'), (9, '    int i = 0;'), (10, '    do{'), (11, '        printf(""input item:"");'), (12, '        buff = &items[i][0];'), (13, '        i++;'), (14, '        fgets(buff, 40, stdin);'), (15, '        buff[strcspn(buff, ""\\n"")] = 0;'), (16, '    }while(strlen(buff)!=0);'), (17, '    i--;'), (18, '}'), (19, '')]"
