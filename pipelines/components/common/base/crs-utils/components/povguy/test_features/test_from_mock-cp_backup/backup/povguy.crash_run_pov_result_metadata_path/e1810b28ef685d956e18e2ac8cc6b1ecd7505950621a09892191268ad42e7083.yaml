cp_harness_binary_path: out/filein_harness
cp_harness_id: id_1
cp_harness_name: filein_harness
cp_harness_source_path: src/test/filein_harness.c
crash_report_id: 71273f8aaeafa26da1438a9ae13ee30da64e54b6cbfb972e2a2148db4537745d
fuzzer: aflplusplus
harness_info_id: 6266084036248297570
original_crash_id: e1810b28ef685d956e18e2ac8cc6b1ecd7505950621a09892191268ad42e7083
run_pov_result:
  cid: 5d1eb022ed6ff02e3b92ff20a09d3744bc0958f8ea69680116a30dd5deac32df
  exitcode: 0
  pov:
    reports:
    - error_line: 'ERROR: AddressSanitizer: global-buffer-overflow on address 0x<REDACTED>
        at pc 0x<REDACTED> bp 0x<REDACTED> sp 0x<REDACTED>'
      report: "\n READ of size <REDACTED> at 0x<REDACTED> thread T0\n     #0 0x<REDACTED>\
        \ in printf_common(void*, char const*, __va_list_tag*) /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc:563:9\n\
        \     #1 0x<REDACTED> in vprintf /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1641:1\n\
        \     #2 0x<REDACTED> in printf /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:1699:1\n\
        \     #3 0x<REDACTED> in func_b (/out/filein_harness+0x1a713d)\n     #4 0x<REDACTED>\
        \ in LLVMFuzzerTestOneInput (/out/filein_harness+0x1a7776)\n     #5 0x<REDACTED>\
        \ in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long)\
        \ /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13\n     #6\
        \ 0x<REDACTED> in fuzzer::Fuzzer::TryDetectingAMemoryLeak(unsigned char const*,\
        \ unsigned long, bool) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:690:3\n\
        \     #7 0x<REDACTED> in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*,\
        \ unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:332:8\n\
        \     #8 0x<REDACTED> in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned\
        \ char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9\n\
        \     #9 0x<REDACTED> in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\n\
        \     #10 0x<REDACTED> in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082)\
        \ (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)\n     #11 0x<REDACTED>\
        \ in _start (/out/filein_harness+0x3c6fd)\n \n 0x<REDACTED> is located <REDACTED>\
        \ bytes before global variable 'pipefd' defined in 'filein_harness.c' (0x<REDACTED>)\
        \ of size <REDACTED>\n 0x<REDACTED> is located <REDACTED> bytes after global\
        \ variable 'items' defined in 'filein_harness.c' (0x<REDACTED>) of size <REDACTED>\n\
        \ SUMMARY: AddressSanitizer: global-buffer-overflow /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors_format.inc:563:9\
        \ in printf_common(void*, char const*, __va_list_tag*)\n Shadow bytes around\
        \ the buggy address:\n   0x<REDACTED>: 00 00 00 00 00 00 00 00 00 00 00 00\
        \ 00 00 00 00\n   0x<REDACTED>: 00 00 00 00 00 00 00 00 00 00 00 00 00 00\
        \ 00 00\n   0x<REDACTED>: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n\
        \   0x<REDACTED>: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n   0x<REDACTED>:\
        \ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n =>0x<REDACTED>: 00 00\
        \ 00 00 00 00 00[06]f9 f9 f9 f9 00 f9 f9 f9\n   0x<REDACTED>: 00 00 00 00\
        \ 00 00 00 00 00 00 00 00 00 00 00 00\n   0x<REDACTED>: 00 00 00 00 00 00\
        \ 00 00 00 00 00 00 00 00 00 00\n   0x<REDACTED>: 00 00 00 00 00 00 00 00\
        \ 00 00 00 00 00 00 00 00\n   0x<REDACTED>: 00 00 00 00 00 00 00 00 00 00\
        \ 00 00 00 00 00 00\n   0x<REDACTED>: 00 00 00 00 00 00 00 00 00 00 00 00\
        \ 00 00 00 00\n Shadow byte legend (one shadow byte represents 8 application\
        \ bytes):\n   Addressable:           00\n   Partially addressable: 01 02 03\
        \ 04 05 06 07 \n   Heap left redzone:       fa\n   Freed heap region:    \
        \   fd\n   Stack left redzone:      f1\n   Stack mid redzone:       f2\n \
        \  Stack right redzone:     f3\n   Stack after return:      f5\n   Stack use\
        \ after scope:   f8\n   Global redzone:          f9\n   Global init order:\
        \       f6\n   Poisoned by user:        f7\n   Container overflow:      fc\n\
        \   Array cookie:            ac\n   Intra object redzone:    bb\n   ASan internal:\
        \           fe\n   Left alloca redzone:     ca\n   Right alloca redzone: \
        \   cb\n <MARKER>ABORTING"
      stacktraces:
      - depth: 0
        func_name: printf_common
        line: 563
        signature: printf_common(void*, char const*, __va_list_tag*)
        src_file: llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors_format.inc
        src_loc: llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors_format.inc:563
        type: source
      - depth: 1
        func_name: vprintf
        line: 1641
        signature: vprintf
        src_file: llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc
        src_loc: llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:1641
        type: source
      - depth: 2
        func_name: printf
        line: 1699
        signature: printf
        src_file: llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc
        src_loc: llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:1699
        type: source
      - binary: ../(/out/filein_harness+0x1a713d)
        depth: 3
        func_name: func_b
        signature: func_b
        type: maybe_asan_interceptor
      - binary: ../(/out/filein_harness+0x1a7776)
        depth: 4
        func_name: LLVMFuzzerTestOneInput
        signature: LLVMFuzzerTestOneInput
        type: maybe_asan_interceptor
      - depth: 5
        func_name: fuzzer::Fuzzer::ExecuteCallback
        line: 614
        signature: fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned
          long)
        src_file: llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp
        src_loc: llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614
        type: source
      - depth: 6
        func_name: fuzzer::Fuzzer::TryDetectingAMemoryLeak
        line: 690
        signature: fuzzer::Fuzzer::TryDetectingAMemoryLeak(unsigned char const*, unsigned
          long, bool)
        src_file: llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp
        src_loc: llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:690
        type: source
      - depth: 7
        func_name: fuzzer::RunOneTest
        line: 332
        signature: fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
        src_file: llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp
        src_loc: llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:332
        type: source
      - depth: 8
        func_name: fuzzer::FuzzerDriver
        line: 862
        signature: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*,
          unsigned long))
        src_file: llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp
        src_loc: llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862
        type: source
      - depth: 9
        func_name: main
        line: 20
        signature: main
        src_file: llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp
        src_loc: llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20
        type: source
      - binary: ../lib/x86_64-linux-gnu/libc.so.6
        build_id: 0702430aef5fa3dda43986563e9ffcc47efbd75e
        depth: 10
        func_name: __libc_start_main
        offset: 147586
        signature: __libc_start_main
        type: binary
      - binary: ../(/out/filein_harness+0x3c6fd)
        depth: 11
        func_name: _start
        signature: _start
        type: maybe_asan_interceptor
      triggered_sanitizers:
      - id_1
    triggered_sanitizers: !!set
      id_1: null
  stderr: !!binary |
    IElORk86IFJ1bm5pbmcgd2l0aCBlbnRyb3BpYyBwb3dlciBzY2hlZHVsZSAoMHhGRiwgMTAwKS4K
    IElORk86IFNlZWQ6IDEwMTAwOTc1NgogSU5GTzogTG9hZGVkIDEgbW9kdWxlcyAgICg2OSBpbmxp
    bmUgOC1iaXQgY291bnRlcnMpOiA2OSBbMHg1NTU1NTU3NWUyYzAsIDB4NTU1NTU1NzVlMzA1KSwg
    CiBJTkZPOiBMb2FkZWQgMSBQQyB0YWJsZXMgKDY5IFBDcyk6IDY5IFsweDU1NTU1NTc1ZTMwOCww
    eDU1NTU1NTc1ZTc1OCksIAogL291dC9maWxlaW5faGFybmVzczogUnVubmluZyAxIGlucHV0cyAx
    IHRpbWUocykgZWFjaC4KIFJ1bm5pbmc6IC93b3JrL3RtcF9ibG9iCiA9PT09PT09PT09PT09PT09
    PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogPT0xND09
    RVJST1I6IEFkZHJlc3NTYW5pdGl6ZXI6IGdsb2JhbC1idWZmZXItb3ZlcmZsb3cgb24gYWRkcmVz
    cyAweDU1NTU1NjBlNzliZSBhdCBwYyAweDU1NTU1NTY0NjlmOCBicCAweDdmZmZmZmZmZTBkMCBz
    cCAweDdmZmZmZmZmZDg2MAogUkVBRCBvZiBzaXplIDIxIGF0IDB4NTU1NTU2MGU3OWJlIHRocmVh
    ZCBUMAogICAgICMwIDB4NTU1NTU1NjQ2OWY3IGluIHByaW50Zl9jb21tb24odm9pZCosIGNoYXIg
    Y29uc3QqLCBfX3ZhX2xpc3RfdGFnKikgL3NyYy9sbHZtLXByb2plY3QvY29tcGlsZXItcnQvbGli
    L2FzYW4vLi4vc2FuaXRpemVyX2NvbW1vbi9zYW5pdGl6ZXJfY29tbW9uX2ludGVyY2VwdG9yc19m
    b3JtYXQuaW5jOjU2Mzo5CiAgICAgIzEgMHg1NTU1NTU2NDg0ZGEgaW4gdnByaW50ZiAvc3JjL2xs
    dm0tcHJvamVjdC9jb21waWxlci1ydC9saWIvYXNhbi8uLi9zYW5pdGl6ZXJfY29tbW9uL3Nhbml0
    aXplcl9jb21tb25faW50ZXJjZXB0b3JzLmluYzoxNjQxOjEKICAgICAjMiAweDU1NTU1NTY0ODRk
    YSBpbiBwcmludGYgL3NyYy9sbHZtLXByb2plY3QvY29tcGlsZXItcnQvbGliL2FzYW4vLi4vc2Fu
    aXRpemVyX2NvbW1vbi9zYW5pdGl6ZXJfY29tbW9uX2ludGVyY2VwdG9ycy5pbmM6MTY5OToxCiAg
    ICAgIzMgMHg1NTU1NTU2ZmIxM2QgaW4gZnVuY19iICgvb3V0L2ZpbGVpbl9oYXJuZXNzKzB4MWE3
    MTNkKQogICAgICM0IDB4NTU1NTU1NmZiNzc2IGluIExMVk1GdXp6ZXJUZXN0T25lSW5wdXQgKC9v
    dXQvZmlsZWluX2hhcm5lc3MrMHgxYTc3NzYpCiAgICAgIzUgMHg1NTU1NTU1YWY0OTAgaW4gZnV6
    emVyOjpGdXp6ZXI6OkV4ZWN1dGVDYWxsYmFjayh1bnNpZ25lZCBjaGFyIGNvbnN0KiwgdW5zaWdu
    ZWQgbG9uZykgL3NyYy9sbHZtLXByb2plY3QvY29tcGlsZXItcnQvbGliL2Z1enplci9GdXp6ZXJM
    b29wLmNwcDo2MTQ6MTMKICAgICAjNiAweDU1NTU1NTViMDBmNSBpbiBmdXp6ZXI6OkZ1enplcjo6
    VHJ5RGV0ZWN0aW5nQU1lbW9yeUxlYWsodW5zaWduZWQgY2hhciBjb25zdCosIHVuc2lnbmVkIGxv
    bmcsIGJvb2wpIC9zcmMvbGx2bS1wcm9qZWN0L2NvbXBpbGVyLXJ0L2xpYi9mdXp6ZXIvRnV6emVy
    TG9vcC5jcHA6NjkwOjMKICAgICAjNyAweDU1NTU1NTU5OWM3MCBpbiBmdXp6ZXI6OlJ1bk9uZVRl
    c3QoZnV6emVyOjpGdXp6ZXIqLCBjaGFyIGNvbnN0KiwgdW5zaWduZWQgbG9uZykgL3NyYy9sbHZt
    LXByb2plY3QvY29tcGlsZXItcnQvbGliL2Z1enplci9GdXp6ZXJEcml2ZXIuY3BwOjMzMjo4CiAg
    ICAgIzggMHg1NTU1NTU1OWY2YmEgaW4gZnV6emVyOjpGdXp6ZXJEcml2ZXIoaW50KiwgY2hhcioq
    KiwgaW50ICgqKSh1bnNpZ25lZCBjaGFyIGNvbnN0KiwgdW5zaWduZWQgbG9uZykpIC9zcmMvbGx2
    bS1wcm9qZWN0L2NvbXBpbGVyLXJ0L2xpYi9mdXp6ZXIvRnV6emVyRHJpdmVyLmNwcDo4NjI6OQog
    ICAgICM5IDB4NTU1NTU1NWNiYWIyIGluIG1haW4gL3NyYy9sbHZtLXByb2plY3QvY29tcGlsZXIt
    cnQvbGliL2Z1enplci9GdXp6ZXJNYWluLmNwcDoyMDoxMAogICAgICMxMCAweDdmZmZmN2E1OTA4
    MiBpbiBfX2xpYmNfc3RhcnRfbWFpbiAoL2xpYi94ODZfNjQtbGludXgtZ251L2xpYmMuc28uNisw
    eDI0MDgyKSAoQnVpbGRJZDogMDcwMjQzMGFlZjVmYTNkZGE0Mzk4NjU2M2U5ZmZjYzQ3ZWZiZDc1
    ZSkKICAgICAjMTEgMHg1NTU1NTU1OTA2ZmQgaW4gX3N0YXJ0ICgvb3V0L2ZpbGVpbl9oYXJuZXNz
    KzB4M2M2ZmQpCiAKIDB4NTU1NTU2MGU3OWJlIGlzIGxvY2F0ZWQgMzQgYnl0ZXMgYmVmb3JlIGds
    b2JhbCB2YXJpYWJsZSAncGlwZWZkJyBkZWZpbmVkIGluICdmaWxlaW5faGFybmVzcy5jJyAoMHg1
    NTU1NTYwZTc5ZTApIG9mIHNpemUgOAogMHg1NTU1NTYwZTc5YmUgaXMgbG9jYXRlZCAwIGJ5dGVz
    IGFmdGVyIGdsb2JhbCB2YXJpYWJsZSAnaXRlbXMnIGRlZmluZWQgaW4gJ2ZpbGVpbl9oYXJuZXNz
    LmMnICgweDU1NTU1NjBlNzlhMCkgb2Ygc2l6ZSAzMAogU1VNTUFSWTogQWRkcmVzc1Nhbml0aXpl
    cjogZ2xvYmFsLWJ1ZmZlci1vdmVyZmxvdyAvc3JjL2xsdm0tcHJvamVjdC9jb21waWxlci1ydC9s
    aWIvYXNhbi8uLi9zYW5pdGl6ZXJfY29tbW9uL3Nhbml0aXplcl9jb21tb25faW50ZXJjZXB0b3Jz
    X2Zvcm1hdC5pbmM6NTYzOjkgaW4gcHJpbnRmX2NvbW1vbih2b2lkKiwgY2hhciBjb25zdCosIF9f
    dmFfbGlzdF90YWcqKQogU2hhZG93IGJ5dGVzIGFyb3VuZCB0aGUgYnVnZ3kgYWRkcmVzczoKICAg
    MHg1NTU1NTYwZTc3MDA6IDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAw
    IDAwIDAwCiAgIDB4NTU1NTU2MGU3NzgwOiAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAw
    MCAwMCAwMCAwMCAwMCAwMAogICAweDU1NTU1NjBlNzgwMDogMDAgMDAgMDAgMDAgMDAgMDAgMDAg
    MDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAKICAgMHg1NTU1NTYwZTc4ODA6IDAwIDAwIDAwIDAw
    IDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwCiAgIDB4NTU1NTU2MGU3OTAwOiAw
    MCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMAogPT4weDU1NTU1
    NjBlNzk4MDogMDAgMDAgMDAgMDAgMDAgMDAgMDBbMDZdZjkgZjkgZjkgZjkgMDAgZjkgZjkgZjkK
    ICAgMHg1NTU1NTYwZTdhMDA6IDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAw
    IDAwIDAwIDAwCiAgIDB4NTU1NTU2MGU3YTgwOiAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAw
    MCAwMCAwMCAwMCAwMCAwMCAwMAogICAweDU1NTU1NjBlN2IwMDogMDAgMDAgMDAgMDAgMDAgMDAg
    MDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAgMDAKICAgMHg1NTU1NTYwZTdiODA6IDAwIDAwIDAw
    IDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwIDAwCiAgIDB4NTU1NTU2MGU3YzAw
    OiAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMCAwMAogU2hhZG93
    IGJ5dGUgbGVnZW5kIChvbmUgc2hhZG93IGJ5dGUgcmVwcmVzZW50cyA4IGFwcGxpY2F0aW9uIGJ5
    dGVzKToKICAgQWRkcmVzc2FibGU6ICAgICAgICAgICAwMAogICBQYXJ0aWFsbHkgYWRkcmVzc2Fi
    bGU6IDAxIDAyIDAzIDA0IDA1IDA2IDA3IAogICBIZWFwIGxlZnQgcmVkem9uZTogICAgICAgZmEK
    ICAgRnJlZWQgaGVhcCByZWdpb246ICAgICAgIGZkCiAgIFN0YWNrIGxlZnQgcmVkem9uZTogICAg
    ICBmMQogICBTdGFjayBtaWQgcmVkem9uZTogICAgICAgZjIKICAgU3RhY2sgcmlnaHQgcmVkem9u
    ZTogICAgIGYzCiAgIFN0YWNrIGFmdGVyIHJldHVybjogICAgICBmNQogICBTdGFjayB1c2UgYWZ0
    ZXIgc2NvcGU6ICAgZjgKICAgR2xvYmFsIHJlZHpvbmU6ICAgICAgICAgIGY5CiAgIEdsb2JhbCBp
    bml0IG9yZGVyOiAgICAgICBmNgogICBQb2lzb25lZCBieSB1c2VyOiAgICAgICAgZjcKICAgQ29u
    dGFpbmVyIG92ZXJmbG93OiAgICAgIGZjCiAgIEFycmF5IGNvb2tpZTogICAgICAgICAgICBhYwog
    ICBJbnRyYSBvYmplY3QgcmVkem9uZTogICAgYmIKICAgQVNhbiBpbnRlcm5hbDogICAgICAgICAg
    IGZlCiAgIExlZnQgYWxsb2NhIHJlZHpvbmU6ICAgICBjYQogICBSaWdodCBhbGxvY2EgcmVkem9u
    ZTogICAgY2IKID09MTQ9PUFCT1JUSU5HCg==
  stdout: !!binary |
    IGxpYmZ1enplciBleGl0PTEK
  time_end: 1720061489.6877646
  time_start: 1720061485.981571
  time_taken: 3.706193685531616
target_id: 1
