[{"className":"benchmarks.BenchmarkTest","methodSignature":"benchmarks.BenchmarkTest.runSampleBenchmark:void()","methodSource":"@Test\n    public void runSampleBenchmark() throws Exception {\n        // run the minimum possible number of iterations\n        ChainedOptionsBuilder options \u003d new OptionsBuilder()\n                                            .mode(Mode.AverageTime)\n                                            .forks(1)\n                                            .result(\"jmh-report.json\")\n                                            .resultFormat(ResultFormatType.JSON)\n                                            .operationsPerInvocation(1)\n                                            .threads(1)\n                                            .warmupForks(0)\n                                            .warmupIterations(0)\n                                            .measurementBatchSize(1)\n                                            .measurementIterations(1)\n                                            .timeUnit(TimeUnit.MICROSECONDS)\n                                            .shouldFailOnError(true)\n                                            // just run the SampleBenchmark, not other benchmarks\n                                            .include(SampleBenchmark.class.getName() + \".*\");\n        new Runner(options.build()).run();\n        assertTrue(Files.exists(Paths.get(\"jmh-report.json\")));\n    }"},{"className":"hudson.AboutJenkinsTest","methodSignature":"hudson.AboutJenkinsTest.onlyAdminOrManageOrSystemReadCanReadAbout:void()","methodSource":"@Test\n    @Issue(\"SECURITY-771\")\n    public void onlyAdminOrManageOrSystemReadCanReadAbout() throws Exception {\n        final String ADMIN \u003d \"admin\";\n        final String USER \u003d \"user\";\n        final String MANAGER \u003d \"manager\";\n        final String READONLY \u003d \"readonly\";\n        final String MANAGER_READONLY \u003d \"manager-readonly\";\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                // full access\n                .grant(Jenkins.ADMINISTER).everywhere().to(ADMIN)\n\n                // Read access\n                .grant(Jenkins.READ).everywhere().to(USER)\n\n                // Read and Manage\n                .grant(Jenkins.READ).everywhere().to(MANAGER)\n                .grant(Jenkins.MANAGE).everywhere().to(MANAGER)\n\n                // Read and System read\n                .grant(Jenkins.READ).everywhere().to(READONLY)\n                .grant(Jenkins.SYSTEM_READ).everywhere().to(READONLY)\n\n                // Read, Manage and System read\n                .grant(Jenkins.READ).everywhere().to(MANAGER_READONLY)\n                .grant(Jenkins.MANAGE).everywhere().to(MANAGER_READONLY)\n                .grant(Jenkins.SYSTEM_READ).everywhere().to(MANAGER_READONLY)\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        { // user cannot see it\n            wc.login(USER);\n            HtmlPage page \u003d wc.goTo(\"about/\");\n            assertEquals(HttpURLConnection.HTTP_FORBIDDEN, page.getWebResponse().getStatusCode());\n        }\n\n        { // admin can access it\n            wc.login(ADMIN);\n            HtmlPage page \u003d wc.goTo(\"about/\");\n            assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"Mavenized dependencies\"));\n        }\n\n        { // manager can access it\n            wc.login(MANAGER);\n            HtmlPage page \u003d wc.goTo(\"about/\");\n            assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n        }\n\n        { // readonly can access it\n            wc.login(READONLY);\n            HtmlPage page \u003d wc.goTo(\"about/\");\n            assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n        }\n\n        { // manager-readonly can access it\n            wc.login(MANAGER_READONLY);\n            HtmlPage page \u003d wc.goTo(\"about/\");\n            assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n        }\n    }","advisory":"SECURITY-771"},{"className":"hudson.AbstractItemSecurity1114Test","methodSignature":"hudson.AbstractItemSecurity1114Test.testAccess:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1114\")\n    @For(AbstractItem.class)\n    public void testAccess() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy authorizationStrategy \u003d new MockAuthorizationStrategy();\n        authorizationStrategy.grant(Jenkins.READ).onRoot().toEveryone();\n        authorizationStrategy.grant(Item.DISCOVER).everywhere().to(\"alice\");\n        authorizationStrategy.grant(Item.READ).everywhere().to(\"bob\");\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        j.createFreeStyleProject(\"myproject\");\n\n        // alice can discover project\n        JenkinsRule.WebClient alice \u003d j.createWebClient().login(\"alice\");\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e alice.goTo(\"bypass/myproject\"));\n        Assert.assertEquals(\"alice can discover\", 403, e.getStatusCode());\n\n        // bob can read project\n        JenkinsRule.WebClient bob \u003d j.createWebClient().login(\"bob\");\n        bob.goTo(\"bypass/myproject\"); // success\n\n\n        // carol has no permissions\n        JenkinsRule.WebClient carol \u003d j.createWebClient().login(\"carol\");\n        e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e carol.goTo(\"bypass/nonexisting\"));\n        Assert.assertEquals(\"carol gets 404 for nonexisting project\", 404, e.getStatusCode());\n        e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e carol.goTo(\"bypass/myproject\"));\n        Assert.assertEquals(\"carol gets 404 for invisible project\", 404, e.getStatusCode());\n    }","advisory":"SECURITY-1114"},{"className":"hudson.bugs.DateConversionTest","methodSignature":"hudson.bugs.DateConversionTest.test:void()","methodSource":"@Test\n    public void test() throws Exception {\n        final DateConverter dc \u003d new DateConverter();\n        ExecutorService es \u003d Executors.newFixedThreadPool(10);\n\n        List\u003cFuture\u003e futures \u003d new ArrayList\u003c\u003e();\n        for (int i \u003d 0; i \u003c 10; i++) {\n            futures.add(es.submit(() -\u003e {\n                for (int i1 \u003d 0; i1 \u003c 10000; i1++)\n                    dc.fromString(\"2008-08-26 15:40:14.568 GMT-03:00\");\n                return null;\n            }));\n        }\n\n        for (Future f : futures) {\n            f.get();\n        }\n        es.shutdown();\n    }"},{"className":"hudson.bugs.JnlpAccessWithSecuredHudsonTest","methodSignature":"hudson.bugs.JnlpAccessWithSecuredHudsonTest.anonymousCanAlwaysLoadJARs:void()","methodSource":"@PresetData(DataSet.NO_ANONYMOUS_READACCESS)\n    @Email(\"http://markmail.org/message/on4wkjdaldwi2atx\")\n    @Test\n    public void anonymousCanAlwaysLoadJARs() throws Exception {\n        inboundAgents.createAgent(r, InboundAgentRule.Options.newBuilder().name(\"test\").skipStart().build());\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        HtmlPage p \u003d wc.withBasicApiToken(User.getById(\"alice\", true)).goTo(\"computer/test/\");\n\n        // this fresh WebClient doesn\u0027t have a login cookie and represent JNLP launcher\n        JenkinsRule.WebClient jnlpAgent \u003d r.createWebClient();\n\n        // parse the JNLP page into DOM to list up the jars.\n        XmlPage jnlp \u003d (XmlPage) wc.goTo(\"computer/test/jenkins-agent.jnlp\", \"application/x-java-jnlp-file\");\n        URL baseUrl \u003d jnlp.getUrl();\n        Document dom \u003d new DOMReader().read(jnlp.getXmlDocument());\n        for (Object jar : dom.selectNodes(\"//jar\")) {\n            URL url \u003d new URL(baseUrl, ((Element) jar).attributeValue(\"href\"));\n            System.out.println(url);\n\n            // now make sure that these URLs are unprotected\n            Page jarResource \u003d jnlpAgent.getPage(url);\n            assertTrue(jarResource.getWebResponse().getContentType().toLowerCase(Locale.ENGLISH).startsWith(\"application/\"));\n        }\n    }"},{"className":"hudson.bugs.JnlpAccessWithSecuredHudsonTest","methodSignature":"hudson.bugs.JnlpAccessWithSecuredHudsonTest.anonymousCannotGetSecrets:void()","methodSource":"@PresetData(DataSet.ANONYMOUS_READONLY)\n    @Test\n    public void anonymousCannotGetSecrets() throws Exception {\n        inboundAgents.createAgent(r, InboundAgentRule.Options.newBuilder().name(\"test\").skipStart().build());\n        r.createWebClient().assertFails(\"computer/test/jenkins-agent.jnlp\", HttpURLConnection.HTTP_FORBIDDEN);\n    }"},{"className":"hudson.bugs.JnlpAccessWithSecuredHudsonTest","methodSignature":"hudson.bugs.JnlpAccessWithSecuredHudsonTest.serviceUsingDirectSecret:void()","methodSource":"@PresetData(DataSet.NO_ANONYMOUS_READACCESS)\n    @Test\n    public void serviceUsingDirectSecret() throws Exception {\n        Slave slave \u003d inboundAgents.createAgent(r, InboundAgentRule.Options.newBuilder().name(\"test\").secret().build());\n        try {\n            r.createWebClient().goTo(\"computer/test/jenkins-agent.jnlp?encrypt\u003dtrue\", \"application/octet-stream\");\n            Channel channel \u003d slave.getComputer().getChannel();\n            assertFalse(\"SECURITY-206\", channel.isRemoteClassLoadingAllowed());\n            r.jenkins.getExtensionList(AdminWhitelistRule.class).get(AdminWhitelistRule.class).setMasterKillSwitch(false);\n            final File f \u003d new File(r.jenkins.getRootDir(), \"config.xml\");\n            assertTrue(f.exists());\n        } finally {\n            inboundAgents.stop(r, slave.getNodeName());\n        }\n    }"},{"className":"hudson.bugs.LoginRedirectTest","methodSignature":"hudson.bugs.LoginRedirectTest.redirect1:void()","methodSource":"@PresetData(DataSet.NO_ANONYMOUS_READACCESS)\n    @Test\n    public void redirect1() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        HtmlPage loginPage \u003d wc.goTo(\"\");\n        assertEquals(HttpURLConnection.HTTP_OK, loginPage.getWebResponse().getStatusCode());\n        assertEquals(j.contextPath + \"/login\", loginPage.getUrl().getPath());\n\n        HtmlForm form \u003d loginPage.getFormByName(\"login\");\n        form.getInputByName(\"j_username\").setValue(\"alice\");\n        form.getInputByName(\"j_password\").setValue(\"alice\");\n        HtmlPage mainPage \u003d j.submit(form);\n        assertEquals(j.contextPath + \"/\", mainPage.getUrl().getPath());\n    }"},{"className":"hudson.bugs.LoginRedirectTest","methodSignature":"hudson.bugs.LoginRedirectTest.redirect2:void()","methodSource":"@PresetData(DataSet.NO_ANONYMOUS_READACCESS)\n    @Test\n    public void redirect2() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n        wc.assertFails(\"\", HttpURLConnection.HTTP_FORBIDDEN);\n    }"},{"className":"hudson.ClassicPluginStrategyTest","methodSignature":"hudson.ClassicPluginStrategyTest.testDependencyClassLoader:void()","methodSource":"@LocalData\n    @Test\n    public void testDependencyClassLoader() throws Exception {\n        // Test data has: foo3 depends on foo2,foo1; foo2 depends on foo1\n        // (thus findResources from foo3 can find foo1 resources via 2 dependency paths)\n        PluginWrapper p \u003d j.jenkins.getPluginManager().getPlugin(\"foo3\");\n        String res;\n\n        // In the current impl, the dependencies are the parent ClassLoader so resources\n        // are found there before checking the plugin itself.  Adjust the expected results\n        // below if this is ever changed to check the plugin first.\n        Enumeration\u003cURL\u003e en \u003d p.classLoader.getResources(\"test-resource\");\n        for (int i \u003d 0; en.hasMoreElements(); i++) {\n            res \u003d en.nextElement().toString();\n            if (i \u003c 2)\n                assertTrue(\"In current impl, \" + res + \"should be foo1 or foo2\",\n                           res.contains(\"/foo1/\") || res.contains(\"/foo2/\"));\n            else\n                assertTrue(\"In current impl, \" + res + \"should be foo3\", res.contains(\"/foo3/\"));\n        }\n        res \u003d p.classLoader.getResource(\"test-resource\").toString();\n        assertTrue(\"In current impl, \" + res + \" should be foo1 or foo2\",\n                   res.contains(\"/foo1/\") || res.contains(\"/foo2/\"));\n    }"},{"className":"hudson.ClassicPluginStrategyTest","methodSignature":"hudson.ClassicPluginStrategyTest.testDisabledDependencyClassLoader:void()","methodSource":"@LocalData\n    @Issue(\"JENKINS-18654\")\n    @Test\n    public void testDisabledDependencyClassLoader() throws Exception {\n        PluginWrapper p \u003d j.jenkins.getPluginManager().getPlugin(\"foo4\");\n\n        Enumeration\u003cURL\u003e en \u003d p.classLoader.getResources(\"test-resource\");\n        for (int i \u003d 0; en.hasMoreElements(); i++) {\n            String res \u003d en.nextElement().toString();\n            if (i \u003d\u003d 0)\n                assertTrue(\"expected foo4, found \" + res, res.contains(\"/foo4/\"));\n            else\n                fail(\"disabled dependency should not be included\");\n        }\n    }","advisory":"JENKINS-18654"},{"className":"hudson.ClassicPluginStrategyTest","methodSignature":"hudson.ClassicPluginStrategyTest.testMaskResourceClassLoader:void()","methodSource":"@LocalData\n    @Issue(\"JENKINS-27289\")\n    @Test\n    public void testMaskResourceClassLoader() throws Exception {\n        PluginWrapper pw \u003d j.jenkins.getPluginManager().getPlugin(\"foo1\");\n        Class\u003c?\u003e clazz \u003d pw.classLoader.loadClass(\"org.apache.http.impl.io.SocketInputBuffer\");\n        ClassLoader cl \u003d clazz.getClassLoader();\n        URL url \u003d cl.getResource(\"org/apache/http/impl/io/SocketInputBuffer.class\");\n        assertNotNull(url);\n        assertTrue(\"expected to find the class from foo1 plugin\", url.toString().contains(\"plugins/foo1\"));\n    }","advisory":"JENKINS-27289"},{"className":"hudson.cli.AddJobToViewCommandTest","methodSignature":"hudson.cli.AddJobToViewCommandTest.addJobShouldSucceed:void()","methodSource":"@Test public void addJobShouldSucceed() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(true));\n    }"},{"className":"hudson.cli.AddJobToViewCommandTest","methodSignature":"hudson.cli.AddJobToViewCommandTest.addJobShouldSucceedEvenAlreadyAdded:void()","methodSource":"@Test public void addJobShouldSucceedEvenAlreadyAdded() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        ((DirectlyModifiableView) j.jenkins.getView(\"aView\")).add(project);\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(true));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(true));\n    }"},{"className":"hudson.cli.AddJobToViewCommandTest","methodSignature":"hudson.cli.AddJobToViewCommandTest.addJobManyShouldSucceed:void()","methodSource":"@Test public void addJobManyShouldSucceed() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject1\", \"aProject2\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(2));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(true));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(true));\n    }"},{"className":"hudson.cli.AddJobToViewCommandTest","methodSignature":"hudson.cli.AddJobToViewCommandTest.addJobManyShouldSucceedEvenAJobIsSpecifiedTwice:void()","methodSource":"@Test public void addJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\", \"aProject\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(true));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.async:void()","methodSource":"@Test\n    public void async() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        OneShotEvent started \u003d new OneShotEvent();\n        OneShotEvent completed \u003d new OneShotEvent();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                started.signal();\n                completed.block();\n                return true;\n            }\n        });\n\n        assertThat(new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(p.getName()), CLICommandInvoker.Matcher.succeeded());\n        started.block();\n        assertTrue(p.getBuildByNumber(1).isBuilding());\n        completed.signal();\n        j.waitForCompletion(p.getBuildByNumber(1));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.sync:void()","methodSource":"@Test\n    @Category(SmokeTest.class)\n    public void sync() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"ping 127.0.0.1\") : new Shell(\"sleep 3\"));\n\n        assertThat(new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(\"-s\", p.getName()), CLICommandInvoker.Matcher.succeeded());\n        assertFalse(p.getBuildByNumber(1).isBuilding());\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.syncWOutputStreaming:void()","methodSource":"@Test\n    public void syncWOutputStreaming() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"ping 127.0.0.1\") : new Shell(\"sleep 3\"));\n\n        assertThat(new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(\"-s\", \"-v\", \"-r\", \"5\", p.getName()), CLICommandInvoker.Matcher.succeeded());\n        assertFalse(p.getBuildByNumber(1).isBuilding());\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.parameters:void()","methodSource":"@Test\n    public void parameters() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"key\", null)));\n\n        assertThat(new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(\"-s\", \"-p\", \"key\u003dfoobar\", p.getName()), CLICommandInvoker.Matcher.succeeded());\n        FreeStyleBuild b \u003d j.assertBuildStatusSuccess(p.getBuildByNumber(1));\n        assertEquals(\"foobar\", b.getAction(ParametersAction.class).getParameter(\"key\").getValue());\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.defaultParameters:void()","methodSource":"@Test\n    public void defaultParameters() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"key\", \"default\"), new StringParameterDefinition(\"key2\", \"default2\")));\n\n        assertThat(new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(\"-s\", \"-p\", \"key\u003dfoobar\", p.getName()), CLICommandInvoker.Matcher.succeeded());\n        FreeStyleBuild b \u003d j.assertBuildStatusSuccess(p.getBuildByNumber(1));\n        assertEquals(\"foobar\", b.getAction(ParametersAction.class).getParameter(\"key\").getValue());\n        assertEquals(\"default2\", b.getAction(ParametersAction.class).getParameter(\"key2\").getValue());\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.consoleOutput:void()","methodSource":"@Test\n    public void consoleOutput() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        CLICommandInvoker.Result r \u003d new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(\"-s\", \"-v\", p.getName());\n        assertThat(r, CLICommandInvoker.Matcher.succeeded());\n        j.assertBuildStatusSuccess(p.getBuildByNumber(1));\n        assertThat(r.stdout(), allOf(containsString(\"Started from command line by anonymous\"), containsString(\"Finished: SUCCESS\")));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.consoleOutputWhenBuildSchedulingRefused:void()","methodSource":"@Test\n    public void consoleOutputWhenBuildSchedulingRefused() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        CLICommandInvoker.Result r \u003d new CLICommandInvoker(j, new BuildCommand()).invokeWithArgs(\"-s\", \"-v\", p.getName());\n        assertThat(r, CLICommandInvoker.Matcher.failedWith(4));\n        assertThat(r.stderr(), containsString(BuildCommand.BUILD_SCHEDULING_REFUSED));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.refuseToBuildDisabledProject:void()","methodSource":"@Test\n    public void refuseToBuildDisabledProject() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"the-project\");\n        project.disable();\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(j, new BuildCommand());\n        CLICommandInvoker.Result result \u003d invoker.invokeWithArgs(\"the-project\");\n\n        assertThat(result, failedWith(4));\n        assertThat(result.stderr(), containsString(\"ERROR: Cannot build the-project because it is disabled.\"));\n        assertNull(\"Project should not be built\", project.getBuildByNumber(1));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.refuseToBuildNewlyCopiedProject:void()","methodSource":"@Test\n    public void refuseToBuildNewlyCopiedProject() throws Exception {\n        FreeStyleProject original \u003d j.createFreeStyleProject(\"original\");\n        FreeStyleProject newOne \u003d (FreeStyleProject) j.jenkins.\u003cTopLevelItem\u003ecopy(original, \"new-one\");\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(j, new BuildCommand());\n        CLICommandInvoker.Result result \u003d invoker.invokeWithArgs(\"new-one\");\n\n        assertThat(result, failedWith(4));\n        assertThat(result.stderr(), containsString(\"ERROR: Cannot build new-one because its configuration has not been saved.\"));\n        assertNull(\"Project should not be built\", newOne.getBuildByNumber(1));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.correctlyParseMapValuesContainingEqualsSign:void()","methodSource":"@Test\n    public void correctlyParseMapValuesContainingEqualsSign() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"the-project\");\n        project.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"expr\", null)));\n\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(j, new BuildCommand());\n        CLICommandInvoker.Result result \u003d invoker.invokeWithArgs(\"the-project\", \"-p\", \"expr\u003da\u003db\", \"-s\");\n\n        assertThat(result, succeeded());\n        assertEquals(\"a\u003db\", project.getBuildByNumber(1).getBuildVariables().get(\"expr\"));\n    }"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.executorsAliveOnParameterWithNullDefaultValue:void()","methodSource":"@Issue(\"JENKINS-15094\")\n    @Test\n    public void executorsAliveOnParameterWithNullDefaultValue() throws Exception {\n        DumbSlave slave \u003d j.createSlave();\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"foo\");\n        project.setAssignedNode(slave);\n\n        // Create test parameter with Null default value\n        NullDefaultValueParameterDefinition nullDefaultDefinition \u003d new NullDefaultValueParameterDefinition();\n        ParametersDefinitionProperty pdp \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"string\", \"defaultValue\", \"description\"),\n                nullDefaultDefinition);\n        project.addProperty(pdp);\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        // Warmup\n        j.buildAndAssertSuccess(project);\n\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e slave.toComputer().getExecutors().stream().map(Executor::isActive).allMatch(Boolean::valueOf));\n\n        // Create CLI \u0026 run command\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(j, new BuildCommand());\n        CLICommandInvoker.Result result \u003d invoker.invokeWithArgs(\"foo\", \"-p\", \"string\u003dvalue\");\n        assertThat(result, failedWith(2));\n        assertThat(result.stderr(), containsString(\"ERROR: No default value for the parameter \u0027FOO\u0027.\"));\n\n        Thread.sleep(5000); // Give the job 5 seconds to be submitted\n        assertNull(\"Build should not be scheduled\", j.jenkins.getQueue().getItem(project));\n        assertNull(\"Build should not be scheduled\", project.getBuildByNumber(2));\n\n        // Check executors health after a timeout\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e slave.toComputer().getExecutors().stream().map(Executor::isActive).allMatch(Boolean::valueOf));\n    }","advisory":"JENKINS-15094"},{"className":"hudson.cli.BuildCommandTest","methodSignature":"hudson.cli.BuildCommandTest.fileParameter:void()","methodSource":"@Issue(\"JENKINS-41745\")\n    @Test\n    public void fileParameter() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"myjob\");\n        p.addProperty(new ParametersDefinitionProperty(new FileParameterDefinition(\"file\", null)));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                listener.getLogger().println(\"Found in my workspace: \" + build.getWorkspace().child(\"file\").readToString());\n                return true;\n            }\n        });\n        assertThat(new CLICommandInvoker(j, \"build\").\n                withStdin(new ByteArrayInputStream(\"uploaded content here\".getBytes(Charset.defaultCharset()))).\n                invokeWithArgs(\"-f\", \"-p\", \"file\u003d\", \"myjob\"),\n            CLICommandInvoker.Matcher.succeeded());\n        FreeStyleBuild b \u003d p.getBuildByNumber(1);\n        assertNotNull(b);\n        j.assertLogContains(\"uploaded content here\", b);\n    }","advisory":"JENKINS-41745"},{"className":"hudson.cli.CancelQuietDownCommandTest","methodSignature":"hudson.cli.CancelQuietDownCommandTest.cancelQuietDownShouldFailWithoutAdministerPermission:void()","methodSource":"@Test\n    public void cancelQuietDownShouldFailWithoutAdministerPermission() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invoke();\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Overall/Administer permission\"));\n    }"},{"className":"hudson.cli.CancelQuietDownCommandTest","methodSignature":"hudson.cli.CancelQuietDownCommandTest.cancelQuietDownShouldSuccessOnNoQuietDownedJenkins:void()","methodSource":"@Test\n    public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkins() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }"},{"className":"hudson.cli.CancelQuietDownCommandTest","methodSignature":"hudson.cli.CancelQuietDownCommandTest.cancelQuietDownShouldSuccessOnQuietDownedJenkins:void()","methodSource":"@Test\n    public void cancelQuietDownShouldSuccessOnQuietDownedJenkins() {\n        j.jenkins.doQuietDown();\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }"},{"className":"hudson.cli.CancelQuietDownCommandTest","methodSignature":"hudson.cli.CancelQuietDownCommandTest.cancelQuietDownShouldResetQuietReason:void()","methodSource":"@Test\n    public void cancelQuietDownShouldResetQuietReason() throws Exception {\n        final String testReason \u003d \"reason\";\n        Jenkins.get().doQuietDown(false, 0, testReason, false);\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n        assertThat(j.jenkins.getQuietDownReason(), equalTo(testReason));\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        assertThat(j.jenkins.getQuietDownReason(), nullValue());\n    }"},{"className":"hudson.cli.CancelQuietDownCommandTest","methodSignature":"hudson.cli.CancelQuietDownCommandTest.cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor:void()","methodSource":"@Test\n    public void cancelQuietDownShouldSuccessOnNoQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        OneShotEvent finish \u003d new OneShotEvent();\n        FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish \u003d new OneShotEvent();\n        build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(build.isBuilding(), equalTo(true));\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }"},{"className":"hudson.cli.CancelQuietDownCommandTest","methodSignature":"hudson.cli.CancelQuietDownCommandTest.cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor:void()","methodSource":"@Test\n    public void cancelQuietDownShouldSuccessOnQuietDownedJenkinsAndRunningExecutor() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        OneShotEvent finish \u003d new OneShotEvent();\n        FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(build.isBuilding(), equalTo(true));\n        j.jenkins.doQuietDown();\n        QuietDownCommandTest.assertJenkinsInQuietMode(j);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n                .invoke();\n        assertThat(result, succeededSilently());\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n        finish \u003d new OneShotEvent();\n        build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(build.isBuilding(), equalTo(true));\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        QuietDownCommandTest.assertJenkinsNotInQuietMode(j);\n    }"},{"className":"hudson.cli.ClearQueueCommandTest","methodSignature":"hudson.cli.ClearQueueCommandTest.clearQueueShouldFailWithoutAdministerPermission:void()","methodSource":"@Test public void clearQueueShouldFailWithoutAdministerPermission() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ).invoke();\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"user is missing the Overall/Administer permission\"));\n    }"},{"className":"hudson.cli.ClearQueueCommandTest","methodSignature":"hudson.cli.ClearQueueCommandTest.clearQueueShouldSucceedOnEmptyQueue:void()","methodSource":"@Test\n    public void clearQueueShouldSucceedOnEmptyQueue() {\n        assertThat(j.jenkins.getQueue().isEmpty(), equalTo(true));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER).invoke();\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getQueue().isEmpty(), equalTo(true));\n    }"},{"className":"hudson.cli.ClearQueueCommandTest","methodSignature":"hudson.cli.ClearQueueCommandTest.clearQueueShouldSucceed:void()","methodSource":"@Test\n    public void clearQueueShouldSucceed() throws Exception {\n        assertThat(j.jenkins.getQueue().isEmpty(), equalTo(true));\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n        project.scheduleBuild2(0);\n\n        assertThat(j.jenkins.getQueue().isEmpty(), equalTo(false));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER).invoke();\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getQueue().isEmpty(), equalTo(true));\n    }"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.serveCliActionToAnonymousUserWithoutPermissions:void()","methodSource":"@Test\n    @Issue(\"SECURITY-192\")\n    public void serveCliActionToAnonymousUserWithoutPermissions() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        // The behavior changed due to SECURITY-192. index page is no longer accessible to anonymous\n        wc.assertFails(\"cli\", HttpURLConnection.HTTP_FORBIDDEN);\n    }","advisory":"SECURITY-192"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.serveCliActionToAnonymousUserWithAnonymousUserWithPermissions:void()","methodSource":"@Test\n    public void serveCliActionToAnonymousUserWithAnonymousUserWithPermissions() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.goTo(\"cli\");\n    }"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.authentication:void()","methodSource":"@Issue({\"JENKINS-12543\", \"JENKINS-41745\"})\n    @Test\n    public void authentication() throws Exception {\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setTokenGenerationOnCreationEnabled(true);\n\n        logging.record(PlainCLIProtocol.class, Level.FINE);\n        File jar \u003d tmp.newFile(\"jenkins-cli.jar\");\n        FileUtils.copyURLToFile(j.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN));\n        j.createFreeStyleProject(\"p\");\n        // CLICommand with @Argument:\n        assertExitCode(6, false, jar, \"get-job\", \"p\"); // SECURITY-754 requires Overall/Read for nearly all CLICommands.\n        assertExitCode(0, true, jar, \"get-job\", \"p\"); // but API tokens do work under HTTP protocol\n        // @CLIMethod:\n        assertExitCode(6, false, jar, \"disable-job\", \"p\"); // AccessDeniedException from CLIRegisterer?\n        assertExitCode(0, true, jar, \"disable-job\", \"p\");\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN).grant(Jenkins.READ, Item.READ).everywhere().toEveryone());\n        assertExitCode(6, false, jar, \"get-job\", \"p\"); // AccessDeniedException from AbstractItem.writeConfigDotXml\n        assertExitCode(0, true, jar, \"get-job\", \"p\"); // works with API tokens\n        assertExitCode(6, false, jar, \"disable-job\", \"p\"); // AccessDeniedException from AbstractProject.doDisable\n        assertExitCode(0, true, jar, \"disable-job\", \"p\");\n    }"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.encodingAndLocale:void()","methodSource":"@Issue(\"JENKINS-41745\")\n    @Test\n    public void encodingAndLocale() throws Exception {\n        File jar \u003d tmp.newFile(\"jenkins-cli.jar\");\n        FileUtils.copyURLToFile(j.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        assertEquals(0, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n            \"java\", \"-Dfile.encoding\u003dISO-8859-2\", \"-Duser.language\u003dcs\", \"-Duser.country\u003dCZ\", \"-jar\", jar.getAbsolutePath(),\n                \"-s\", j.getURL().toString()./* just checking */replaceFirst(\"/$\", \"\"), \"test-diagnostic\").\n            stdout(baos).stderr(System.err).join());\n        assertEquals(\"encoding\u003dISO-8859-2 locale\u003dcs_CZ\", baos.toString(Charset.forName(\"ISO-8859-2\")).trim());\n        // TODO test that stdout/stderr are in expected encoding (not true of -remoting mode!)\n        // -ssh mode does not pass client locale or encoding\n    }","advisory":"JENKINS-41745"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.interleavedStdio:void()","methodSource":"@Issue(\"JENKINS-41745\")\n    @Test\n    public void interleavedStdio() throws Exception {\n        logging.record(PlainCLIProtocol.class, Level.FINE).record(FullDuplexHttpService.class, Level.FINE);\n        File jar \u003d tmp.newFile(\"jenkins-cli.jar\");\n        FileUtils.copyURLToFile(j.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        PipedInputStream pis \u003d new PipedInputStream();\n        PipedOutputStream pos \u003d new PipedOutputStream(pis);\n        PrintWriter pw \u003d new PrintWriter(new OutputStreamWriter(new TeeOutputStream(pos, System.err), Charset.defaultCharset()), true);\n        Proc proc \u003d new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n            \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", j.getURL().toString(),\n                \"groovysh\").\n            stdout(new TeeOutputStream(baos, System.out)).stderr(System.err).stdin(pis).start();\n        while (!baos.toString(Charset.defaultCharset()).contains(\"000\")) { // cannot just search for, say, \"groovy:000\u003e \" since there are ANSI escapes there (cf. StringEscapeUtils.escapeJava)\n            Thread.sleep(100);\n        }\n        pw.println(\"11 * 11\");\n        while (!baos.toString(Charset.defaultCharset()).contains(\"121\")) { // ditto not \"\u003d\u003d\u003d\u003e 121\"\n            Thread.sleep(100);\n        }\n        pw.println(\"11 * 11 * 11\");\n        while (!baos.toString(Charset.defaultCharset()).contains(\"1331\")) {\n            Thread.sleep(100);\n        }\n        pw.println(\":q\");\n        assertEquals(0, proc.join());\n    }","advisory":"JENKINS-41745"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.noPreAuthOptionHandlerInfoLeak:void()","methodSource":"@Issue(\"SECURITY-754\")\n    @Test\n    public void noPreAuthOptionHandlerInfoLeak() throws Exception {\n        File jar \u003d tmp.newFile(\"jenkins-cli.jar\");\n        FileUtils.copyURLToFile(j.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.addView(new AllView(\"v1\"));\n        j.jenkins.addNode(j.createSlave(\"n1\", null, null));\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN));\n        // No anonymous read access\n        assertExitCode(6, false, jar, \"get-view\", \"v1\");\n        assertExitCode(6, false, jar, \"get-view\", \"v2\"); // Error code 3 before SECURITY-754\n        assertExitCode(6, false, jar, \"get-node\", \"n1\");\n        assertExitCode(6, false, jar, \"get-node\", \"n2\"); // Error code 3 before SECURITY-754\n        // Authenticated with no read access\n        assertExitCode(6, false, jar, \"-auth\", \"user:user\", \"get-view\", \"v1\");\n        assertExitCode(6, false, jar, \"-auth\", \"user:user\", \"get-view\", \"v2\"); // Error code 3 before SECURITY-754\n        assertExitCode(6, false, jar, \"-auth\", \"user:user\", \"get-node\", \"n1\");\n        assertExitCode(6, false, jar, \"-auth\", \"user:user\", \"get-node\", \"n2\"); // Error code 3 before SECURITY-754\n        // Anonymous read access\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(ADMIN).grant(Jenkins.READ, Item.READ).everywhere().toEveryone());\n        assertExitCode(6, false, jar, \"get-view\", \"v1\");\n        assertExitCode(6, false, jar, \"get-view\", \"v2\"); // Error code 3 before SECURITY-754\n    }","advisory":"SECURITY-754"},{"className":"hudson.cli.CLIActionTest","methodSignature":"hudson.cli.CLIActionTest.largeTransferWebSocket:void()","methodSource":"@Issue(\"JENKINS-64294\")\n    @Test\n    public void largeTransferWebSocket() throws Exception {\n        logging.record(CLIAction.class, Level.FINE);\n        File jar \u003d tmp.newFile(\"jenkins-cli.jar\");\n        FileUtils.copyURLToFile(j.jenkins.getJnlpJars(\"jenkins-cli.jar\").getURL(), jar);\n        long size \u003d /*999_*/999_999;\n        try (OutputStream nos \u003d OutputStream.nullOutputStream(); CountingOutputStream cos \u003d new CountingOutputStream(nos)) {\n            // Download:\n            assertEquals(0, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                \"java\", \"-jar\", jar.getAbsolutePath(),\n                    \"-webSocket\",\n                    \"-s\", j.getURL().toString(),\n                    \"large-download\",\n                    \"-size\", Long.toString(size)).\n                stdout(cos).stderr(System.err).join());\n            assertEquals(size, cos.getByteCount());\n        }\n        // Upload:\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        assertEquals(0, new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n            \"java\", \"-jar\", jar.getAbsolutePath(),\n                \"-webSocket\",\n                \"-s\", j.getURL().toString(),\n                \"large-upload\").\n            stdin(new NullInputStream(size)).\n            stdout(baos).stderr(System.err).join());\n        assertEquals(\"received \" + size + \" bytes\", baos.toString(Charset.defaultCharset()).trim());\n    }","advisory":"JENKINS-64294"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testSOptionWithoutJENKINS_URL:void()","methodSource":"@Test\n    public void testSOptionWithoutJENKINS_URL() throws Exception {\n        assertEquals(0, launch(\"java\",\n                \"-Duser.home\u003d\" + home,\n                \"-jar\", jar.getAbsolutePath(),\n                \"-s\", r.getURL().toString(),\n                \"who-am-i\")\n        );\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testWithoutSOptionAndWithoutJENKINS_URL:void()","methodSource":"@Test\n    public void testWithoutSOptionAndWithoutJENKINS_URL() throws Exception {\n        Assume.assumeThat(System.getenv(\"JENKINS_URL\"), is(nullValue())); // TODO instead remove it from the process env?\n        assertNotEquals(0, launch(\"java\",\n                \"-Duser.home\u003d\" + home,\n                \"-jar\", jar.getAbsolutePath(),\n                \"who-am-i\")\n        );\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testJENKINS_URLWithoutSOption:void()","methodSource":"@Test\n    public void testJENKINS_URLWithoutSOption() throws Exception {\n        // Valid URL\n        Map\u003cString, String\u003e envars \u003d new HashMap\u003c\u003e();\n        envars.put(\"JENKINS_URL\", r.getURL().toString());\n        assertEquals(0, launch(envars,\n                \"java\",\n                \"-Duser.home\u003d\" + home,\n                \"-jar\", jar.getAbsolutePath(),\n                \"who-am-i\")\n        );\n\n        // Invalid URL\n        envars \u003d new HashMap\u003c\u003e();\n        envars.put(\"JENKINS_URL\", \"http://invalid-url\");\n        assertNotEquals(0, launch(envars,\n                \"java\",\n                \"-Duser.home\u003d\" + home,\n                \"-jar\", jar.getAbsolutePath(),\n                \"who-am-i\")\n        );\n\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testSOptionOverridesJENKINS_URL:void()","methodSource":"@Test\n    public void testSOptionOverridesJENKINS_URL() throws Exception {\n        Map\u003cString, String\u003e envars \u003d new HashMap\u003c\u003e();\n        envars.put(\"JENKINS_URL\", \"http://invalid-url\");\n        assertEquals(0, launch(envars,\n                \"java\",\n                \"-Duser.home\u003d\" + home,\n                \"-jar\", jar.getAbsolutePath(),\n                \"-s\", r.getURL().toString(),\n                \"who-am-i\")\n        );\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testAuthOptionWithoutEnvVars:void()","methodSource":"@Test\n    public void testAuthOptionWithoutEnvVars() throws Exception {\n        String token \u003d getToken();\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            assertEquals(0, launch(Collections.emptyMap(), baos, null,\n                    \"java\",\n                    \"-Duser.home\u003d\" + home,\n                    \"-jar\", jar.getAbsolutePath(),\n                    \"-s\", r.getURL().toString(),\n                    \"-auth\", String.format(\"%s:%s\", \"admin\", token),\n                    \"who-am-i\")\n            );\n            assertThat(baos.toString(Charset.defaultCharset()), containsString(\"Authenticated as: admin\"));\n        }\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testWithoutEnvVarsAndWithoutAuthOption:void()","methodSource":"@Test\n    public void testWithoutEnvVarsAndWithoutAuthOption() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(\"admin\"));\n\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            assertEquals(0, launch(Collections.emptyMap(), baos, null,\n                    \"java\",\n                    \"-Duser.home\u003d\" + home,\n                    \"-jar\", jar.getAbsolutePath(),\n                    \"-s\", r.getURL().toString(),\n                    \"who-am-i\")\n            );\n            assertThat(baos.toString(Charset.defaultCharset()), containsString(\"Authenticated as: anonymous\"));\n        }\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testEnvVarsWithoutAuthOption:void()","methodSource":"@Test\n    public void testEnvVarsWithoutAuthOption() throws Exception {\n        String token \u003d getToken();\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            Map\u003cString, String\u003e envars \u003d new HashMap\u003c\u003e();\n            envars.put(\"JENKINS_USER_ID\", \"admin\");\n            envars.put(\"JENKINS_API_TOKEN\", token);\n            assertEquals(0, launch(envars, baos, null,\n                    \"java\",\n                    \"-Duser.home\u003d\" + home,\n                    \"-jar\", jar.getAbsolutePath(),\n                    \"-s\", r.getURL().toString(),\n                    \"who-am-i\")\n            );\n            assertThat(baos.toString(Charset.defaultCharset()), containsString(\"Authenticated as: admin\"));\n        }\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testOnlyOneEnvVar:void()","methodSource":"@Test\n    public void testOnlyOneEnvVar() throws Exception {\n        String token \u003d getToken();\n\n        // only JENKINS_USER_ID\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            Map\u003cString, String\u003e envars \u003d new HashMap\u003c\u003e();\n            envars.put(\"JENKINS_USER_ID\", \"admin\");\n            assertNotEquals(0, launch(envars,\n                                      \"java\",\n                                      \"-Duser.home\u003d\" + home,\n                                      \"-jar\", jar.getAbsolutePath(),\n                                      \"-s\", r.getURL().toString(),\n                                      \"who-am-i\")\n            );\n        }\n\n        // only JENKINS_API_TOKEN\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            Map\u003cString, String\u003e envars \u003d new HashMap\u003c\u003e();\n            envars.put(\"JENKINS_API_TOKEN\", token);\n            assertNotEquals(0, launch(envars,\n                                      \"java\",\n                                      \"-Duser.home\u003d\" + home,\n                                      \"-jar\", jar.getAbsolutePath(),\n                                      \"-s\", r.getURL().toString(),\n                                      \"who-am-i\")\n            );\n        }\n    }"},{"className":"hudson.cli.CLIEnvVarTest","methodSignature":"hudson.cli.CLIEnvVarTest.testAuthOptionOverridesEnvVars:void()","methodSource":"@Test\n    public void testAuthOptionOverridesEnvVars() throws Exception {\n        String token \u003d getToken();\n\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            Map\u003cString, String\u003e envars \u003d new HashMap\u003c\u003e();\n            envars.put(\"JENKINS_USER_ID\", \"other-user\");\n            envars.put(\"JENKINS_API_TOKEN\", \"other-user\");\n            assertEquals(0, launch(envars, baos, null,\n                    \"java\",\n                    \"-Duser.home\u003d\" + home,\n                    \"-jar\", jar.getAbsolutePath(),\n                    \"-s\", r.getURL().toString(),\n                    \"-auth\", String.format(\"%s:%s\", \"admin\", token),\n                    \"who-am-i\")\n            );\n            assertThat(baos.toString(Charset.defaultCharset()), containsString(\"Authenticated as: admin\"));\n        }\n    }"},{"className":"hudson.cli.CLITest","methodSignature":"hudson.cli.CLITest.interrupt:void()","methodSource":"@Issue(\"JENKINS-41745\")\n    @Test\n    public void interrupt() throws Exception {\n        grabCliJar();\n\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(\"admin\"));\n        FreeStyleProject p \u003d r.createFreeStyleProject(\"p\");\n        p.getBuildersList().add(new SleepBuilder(Long.MAX_VALUE));\n        doInterrupt(p, \"-http\", \"-auth\", \"admin:admin\");\n        doInterrupt(p, \"-webSocket\", \"-auth\", \"admin:admin\");\n    }","advisory":"JENKINS-41745"},{"className":"hudson.cli.CLITest","methodSignature":"hudson.cli.CLITest.reportNotJenkins:void()","methodSource":"@Test @Issue(\"JENKINS-44361\")\n    public void reportNotJenkins() throws Exception {\n        grabCliJar();\n\n        String url \u003d r.getURL().toExternalForm() + \"not-jenkins/\";\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        int ret \u003d new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, \"-http\", \"-user\", \"asdf\", \"who-am-i\"\n        ).stdout(baos).stderr(baos).join();\n\n        assertThat(baos.toString(Charset.defaultCharset()), containsString(\"There\u0027s no Jenkins running at\"));\n        assertNotEquals(0, ret);\n        // TODO -webSocket currently produces a stack trace\n    }","advisory":"JENKINS-44361"},{"className":"hudson.cli.CLITest","methodSignature":"hudson.cli.CLITest.redirectToEndpointShouldBeFollowed:void()","methodSource":"@Test @Issue(\"JENKINS-44361\")\n    public void redirectToEndpointShouldBeFollowed() throws Exception {\n        grabCliJar();\n\n        // Sanity check\n        JenkinsRule.WebClient wc \u003d r.createWebClient()\n                .withRedirectEnabled(false)\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        WebResponse rsp \u003d wc.goTo(\"cli-proxy/\").getWebResponse();\n        assertEquals(rsp.getContentAsString(), HttpURLConnection.HTTP_MOVED_TEMP, rsp.getStatusCode());\n        assertNull(rsp.getContentAsString(), rsp.getResponseHeaderValue(\"X-Jenkins\"));\n\n        for (String transport : Arrays.asList(\"-http\", \"-webSocket\")) {\n\n            String url \u003d r.getURL().toString() + \"cli-proxy/\";\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            int ret \u003d new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\n                    \"java\", \"-jar\", jar.getAbsolutePath(), \"-s\", url, transport, \"-user\", \"asdf\", \"who-am-i\"\n            ).stdout(baos).stderr(baos).join();\n\n            //assertThat(baos.toString(), containsString(\"There\u0027s no Jenkins running at\"));\n            assertThat(baos.toString(Charset.defaultCharset()), containsString(\"Authenticated as: anonymous\"));\n            assertEquals(0, ret);\n        }\n    }","advisory":"JENKINS-44361"},{"className":"hudson.cli.CLITest","methodSignature":"hudson.cli.CLITest.readInputAtOnce:void()","methodSource":"@Ignore(\"TODO sometimes fails, in CI \u0026 locally\")\n    @Test\n    @Issue(\"JENKINS-54310\")\n    public void readInputAtOnce() throws Exception {\n        grabCliJar();\n\n        try (ByteArrayOutputStream baos \u003d new ByteArrayOutputStream()) {\n            int ret \u003d new Launcher.LocalLauncher(StreamTaskListener.fromStderr())\n                    .launch()\n                    .cmds(\"java\",\n                            \"-jar\", jar.getAbsolutePath(),\n                            \"-s\", r.getURL().toString(),\n                            \"list-plugins\") // This CLI Command needs -auth option, so when we omit it, the CLI stops before reading the input.\n                    .stdout(baos)\n                    .stderr(baos)\n                    .stdin(CLITest.class.getResourceAsStream(\"huge-stdin.txt\"))\n                    .join();\n            assertThat(baos.toString(Charset.defaultCharset()), not(containsString(\"java.io.IOException: Stream is closed\")));\n            assertEquals(0, ret);\n        }\n    }","advisory":"JENKINS-54310"},{"className":"hudson.cli.ComputerStateTest","methodSignature":"hudson.cli.ComputerStateTest.connect:void()","methodSource":"@Test\n    public void connect() throws Exception {\n        CLICommandInvoker command \u003d new CLICommandInvoker(j, \"connect-node\");\n\n        Slave slave \u003d j.createSlave();\n        assertTrue(slave.toComputer().isOffline());\n\n        Result result \u003d command.authorizedTo(Jenkins.READ, Computer.CONNECT)\n                .invokeWithArgs(slave.getNodeName())\n        ;\n\n        assertThat(result, succeededSilently());\n        slave.toComputer().waitUntilOnline();\n        assertTrue(slave.toComputer().isOnline());\n    }"},{"className":"hudson.cli.ComputerStateTest","methodSignature":"hudson.cli.ComputerStateTest.online:void()","methodSource":"@Test\n    public void online() throws Exception {\n        CLICommandInvoker command \u003d new CLICommandInvoker(j, \"online-node\");\n\n        Slave slave \u003d j.createSlave();\n        assertTrue(slave.toComputer().isOffline());\n\n        Result result \u003d command.authorizedTo(Jenkins.READ, Computer.CONNECT)\n                .invokeWithArgs(slave.getNodeName())\n        ;\n\n        assertThat(result, succeededSilently());\n        slave.toComputer().waitUntilOnline();\n        assertTrue(slave.toComputer().isOnline());\n    }"},{"className":"hudson.cli.ComputerStateTest","methodSignature":"hudson.cli.ComputerStateTest.disconnect:void()","methodSource":"@Test\n    public void disconnect() throws Exception {\n        CLICommandInvoker command \u003d new CLICommandInvoker(j, \"disconnect-node\");\n\n        Slave slave \u003d j.createOnlineSlave();\n        assertTrue(slave.toComputer().isOnline());\n\n        Result result \u003d command.authorizedTo(Jenkins.READ, Computer.DISCONNECT)\n                .invokeWithArgs(slave.getNodeName(), \"-m\", \"Custom cause message\")\n        ;\n\n        assertThat(result, succeededSilently());\n        assertTrue(slave.toComputer().isOffline());\n\n        OfflineCause.UserCause cause \u003d (OfflineCause.UserCause) slave.toComputer().getOfflineCause();\n        assertThat(cause.toString(), endsWith(\"Custom cause message\"));\n        assertThat(cause.getUser(), equalTo(command.user()));\n    }"},{"className":"hudson.cli.ComputerStateTest","methodSignature":"hudson.cli.ComputerStateTest.offline:void()","methodSource":"@Test\n    public void offline() throws Exception {\n        CLICommandInvoker command \u003d new CLICommandInvoker(j, \"offline-node\");\n\n        Slave slave \u003d j.createOnlineSlave();\n        assertTrue(slave.toComputer().isOnline());\n\n        Result result \u003d command.authorizedTo(Jenkins.READ, Computer.DISCONNECT)\n                .invokeWithArgs(slave.getNodeName(), \"-m\", \"Custom cause message\")\n        ;\n\n        assertThat(result, succeededSilently());\n        assertTrue(slave.toComputer().isOffline());\n\n        OfflineCause.UserCause cause \u003d (OfflineCause.UserCause) slave.toComputer().getOfflineCause();\n        assertThat(cause.toString(), endsWith(\"Custom cause message\"));\n        assertThat(cause.getUser(), equalTo(command.user()));\n    }"},{"className":"hudson.cli.ComputerStateTest","methodSignature":"hudson.cli.ComputerStateTest.testUiForConnected:void()","methodSource":"@Test\n    public void testUiForConnected() throws Exception {\n        DumbSlave slave \u003d j.createOnlineSlave();\n        Computer computer \u003d slave.toComputer();\n\n        WebClient wc \u003d j.createWebClient();\n        assertConnected(wc, slave);\n\n        computer.setTemporarilyOffline(true, null);\n        assertTrue(computer.isTemporarilyOffline());\n        assertConnected(wc, slave);\n\n        slave.toComputer().disconnect(null);\n\n        HtmlPage page \u003d wc.getPage(slave);\n\n        assertLinkDoesNotExist(page, \"Disconnect\");\n\n        assertLinkDoesNotExist(page, \"Script Console\");\n        HtmlPage script \u003d wc.getPage(slave, \"script\");\n        assertThat(script.getByXPath(\"//form[@action\u003d\u0027script\u0027]\"), empty());\n\n        assertLinkDoesNotExist(page, \"System Information\");\n        HtmlPage info \u003d wc.getPage(slave, \"systemInfo\");\n        assertThat(info.asNormalizedText(), not(containsString(\"Environment Variables\")));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeShouldFailWithoutComputerConnectPermission:void()","methodSource":"@Test public void connectNodeShouldFailWithoutComputerConnectPermission() throws Exception {\n        j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Connect permission\"));\n        assertThat(result.stderr(), not(containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test public void connectNodeShouldFailIfNodeDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such agent \\\"never_created\\\" exists.\"));\n        assertThat(result.stderr(), not(containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeShouldSucceed:void()","methodSource":"@Test public void connectNodeShouldSucceed() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n\n        result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n\n        slave.toComputer().disconnect();\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n\n        result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeShouldSucceedWithForce:void()","methodSource":"@Test public void connectNodeShouldSucceedWithForce() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().connect(false).get(); // avoid a race condition in the test\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"-f\", \"aNode\");\n        assertThat(slave.toComputer().getLog(), result, succeededSilently());\n        assertThat(slave.toComputer().getLog(), slave.toComputer().isOnline(), equalTo(true));\n\n        result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"-f\", \"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n\n        slave.toComputer().disconnect();\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n\n        result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"-f\", \"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeManyShouldSucceed:void()","methodSource":"@Test public void connectNodeManyShouldSucceed() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        DumbSlave slave3 \u003d j.createSlave(\"aNode3\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave3.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeManyShouldFailIfANodeDoesNotExist:void()","methodSource":"@Test public void connectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice:void()","methodSource":"@Test public void connectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode1\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.ConnectNodeCommandTest","methodSignature":"hudson.cli.ConnectNodeCommandTest.connectNodeShouldSucceedOnMaster:void()","methodSource":"@Test public void connectNodeShouldSucceedOnMaster() {\n        final Computer masterComputer \u003d j.jenkins.getComputer(\"\");\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"\");\n        assertThat(result, succeededSilently());\n        assertThat(masterComputer.isOnline(), equalTo(true));\n\n        result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"\");\n        assertThat(result, succeededSilently());\n        assertThat(masterComputer.isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldFailWithoutJobReadPermission:void()","methodSource":"@Test public void consoleShouldFailWithoutJobReadPermission() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027aProject\u0027\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldBeAccessibleForUserWithRead:void()","methodSource":"@Issue(\"JENKINS-52181\")\n    @Test public void consoleShouldBeAccessibleForUserWithRead() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\n    }","advisory":"JENKINS-52181"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldFailWhenProjectDoesNotExist:void()","methodSource":"@Test public void consoleShouldFailWhenProjectDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"never_created\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldFailWhenLastBuildDoesNotExist:void()","methodSource":"@Test public void consoleShouldFailWhenLastBuildDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(4));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Permalink lastBuild produced no build\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldFailWhenRequestedBuildDoesNotExist:void()","methodSource":"@Test public void consoleShouldFailWhenRequestedBuildDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldFailWhenRequestedInvalidBuildNumber:void()","methodSource":"@Test public void consoleShouldFailWhenRequestedInvalidBuildNumber() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1a\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Not sure what you meant by \\\"1a\\\"\"));\n\n        project.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo 1\") : new Shell(\"echo 1\"));\n        j.buildAndAssertSuccess(project);\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1a\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Not sure what you meant by \\\"1a\\\". Did you mean \\\"lastBuild\\\"?\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldSuccessWithLastBuild:void()","methodSource":"@Test public void consoleShouldSuccessWithLastBuild() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\"));\n        }\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 1\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldSuccessWithSpecifiedBuildNumber:void()","methodSource":"@Test public void consoleShouldSuccessWithSpecifiedBuildNumber() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo %BUILD_NUMBER%\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo ${BUILD_NUMBER}\"));\n        }\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project));\n        j.assertLogContains(\"echo 3\", j.buildAndAssertSuccess(project));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"2\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"echo 2\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldSuccessWithFollow:void()","methodSource":"@Test public void consoleShouldSuccessWithFollow() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        //TODO: do we really want to sleep for 10 seconds?\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo start - %BUILD_NUMBER%\\r\\n\"\n                    + \"ping -n 10 127.0.0.1 \u003enul\\r\\necho after sleep - %BUILD_NUMBER%\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo start - ${BUILD_NUMBER}\\nsleep 10\\n\"\n                    + \"echo after sleep - ${BUILD_NUMBER}\"));\n        }\n        FreeStyleBuild build \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"start - 1\", build);\n        j.assertLogContains(\"start - 1\", build);\n        j.assertLogNotContains(\"after sleep - 1\", build);\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"start - 1\"));\n        assertThat(result.stdout(), not(containsString(\"after sleep - 1\")));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\", \"-f\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"after sleep - 1\"));\n\n        j.assertBuildStatusSuccess(j.waitForCompletion(build));\n        j.assertLogContains(\"after sleep - 1\", build);\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldSuccessWithLastNLines:void()","methodSource":"@Test public void consoleShouldSuccessWithLastNLines() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo 1\\r\\necho 2\\r\\necho 3\\r\\necho 4\\r\\necho 5\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\\necho 2\\necho 3\\necho 4\\necho 5\"));\n        }\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        j.assertLogContains(\"echo 1\", build);\n        j.assertLogContains(\"echo 5\", build);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\", \"-n\", Functions.isWindows() ? \"5\" : \"4\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), not(containsString(\"echo 1\")));\n        assertThat(result.stdout(), containsString(\"echo 5\"));\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldSuccessWithLastNLinesAndFollow:void()","methodSource":"@Test public void consoleShouldSuccessWithLastNLinesAndFollow() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        //TODO: do we really want to sleep for 10 seconds?\n        if (Functions.isWindows()) {\n            // the ver \u003eNUL is to reset ERRORLEVEL so we don\u0027t fail (ping causes the error)\n            project.getBuildersList().add(new BatchFile(\"echo 1\\r\\necho 2\\r\\necho 3\\r\\necho 4\\r\\necho 5\\r\\n\"\n                    + \"ping -n 10 127.0.0.1 \u003enul\\r\\necho 6\\r\\necho 7\\r\\necho 8\\r\\necho 9\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo 1\\necho 2\\necho 3\\necho 4\\necho 5\\n\"\n                    + \"sleep 10\\n\"\n                    + \"echo 6\\necho 7\\necho 8\\necho 9\"));\n        }\n\n        FreeStyleBuild build \u003d project.scheduleBuild2(0).waitForStart();\n\n        j.waitForMessage(\"echo 5\", build);\n        j.assertLogContains(\"echo 5\", build);\n        j.assertLogNotContains(\"echo 6\", build);\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\", \"-f\", \"-n\", Functions.isWindows() ? \"5\" : \"4\");\n\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), not(containsString(\"echo 1\")));\n        assertThat(result.stdout(), containsString(\"echo 5\"));\n        assertThat(result.stdout(), containsString(\"echo 6\"));\n        assertThat(result.stdout(), containsString(\"echo 9\"));\n\n        j.assertBuildStatusSuccess(j.waitForCompletion(build));\n        j.assertLogContains(\"echo 9\", build);\n    }"},{"className":"hudson.cli.ConsoleCommandTest","methodSignature":"hudson.cli.ConsoleCommandTest.consoleShouldFailIfTheBuildIsStuckInTheQueue:void()","methodSource":"@Test public void consoleShouldFailIfTheBuildIsStuckInTheQueue() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\\nsleep 10\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n\n        assertNotNull(project.scheduleBuild2(0));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn\u0027t scheduled properly - it isn\u0027t in the queue\", project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn\u0027t scheduled properly - it is running on non-exist node\", project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Item.BUILD)\n                .invokeWithArgs(\"aProject\", \"1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #1\"));\n        assertTrue(j.jenkins.getQueue().cancel(project));\n    }"},{"className":"hudson.cli.CopyJobCommandTest","methodSignature":"hudson.cli.CopyJobCommandTest.copyBetweenFolders:void()","methodSource":"@Test public void copyBetweenFolders() throws Exception {\n        MockFolder dir1 \u003d j.createFolder(\"dir1\");\n        MockFolder dir2 \u003d j.createFolder(\"dir2\");\n        FreeStyleProject p \u003d dir1.createProject(FreeStyleProject.class, \"p1\");\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"dir1/p1\", \"dir2/p2\");\n\n        assertThat(result, succeededSilently());\n\n        assertNotNull(j.jenkins.getItemByFullName(\"dir2/p2\"));\n        // TODO test copying from/to root, or into nonexistent folder\n    }"},{"className":"hudson.cli.CopyJobCommandTest","methodSignature":"hudson.cli.CopyJobCommandTest.folderPermissions:void()","methodSource":"@Issue(\"JENKINS-22262\")\n    @Test public void folderPermissions() throws Exception {\n        final MockFolder d1 \u003d j.createFolder(\"d1\");\n        final FreeStyleProject p \u003d d1.createProject(FreeStyleProject.class, \"p\");\n        final MockFolder d2 \u003d j.createFolder(\"d2\");\n        // alice has no real permissions. bob has READ on everything but no more. charlie has CREATE on d2 but not EXTENDED_READ on p. debbie has both.\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.READ).everywhere().toAuthenticated(). // including alice\n            grant(Item.READ).onItems(d1, p, d2).to(\"bob\", \"charlie\", \"debbie\").\n            grant(Item.CREATE).onItems(d2).to(\"charlie\", \"debbie\").\n            grant(Item.EXTENDED_READ).onItems(p).to(\"debbie\"));\n        copyJobCommand.setTransportAuth2(User.getOrCreateByIdOrFullName(\"alice\").impersonate2());\n        assertThat(command.invokeWithArgs(\"d1/p\", \"d2/p\"), failedWith(3));\n        copyJobCommand.setTransportAuth2(User.getOrCreateByIdOrFullName(\"bob\").impersonate2());\n        assertThat(command.invokeWithArgs(\"d1/p\", \"d2/p\"), failedWith(6));\n        copyJobCommand.setTransportAuth2(User.getOrCreateByIdOrFullName(\"charlie\").impersonate2());\n        assertThat(command.invokeWithArgs(\"d1/p\", \"d2/p\"), failedWith(6));\n        copyJobCommand.setTransportAuth2(User.getOrCreateByIdOrFullName(\"debbie\").impersonate2());\n        assertThat(command.invokeWithArgs(\"d1/p\", \"d2/p\"), succeededSilently());\n        assertNotNull(d2.getItem(\"p\"));\n    }","advisory":"JENKINS-22262"},{"className":"hudson.cli.CopyJobCommandTest","methodSignature":"hudson.cli.CopyJobCommandTest.copiedJobIsBuildable:void()","methodSource":"@Test public void copiedJobIsBuildable() throws Exception {\n        FreeStyleProject p1 \u003d j.createFreeStyleProject();\n        String copiedProjectName \u003d \"p2\";\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(p1.getName(), copiedProjectName);\n\n        assertThat(result, succeededSilently());\n\n        FreeStyleProject p2 \u003d (FreeStyleProject) j.jenkins.getItem(copiedProjectName);\n\n        assertNotNull(p2);\n        assertTrue(p2.isBuildable());\n    }"},{"className":"hudson.cli.CopyJobCommandTest","methodSignature":"hudson.cli.CopyJobCommandTest.cannotCopyJobWithTrailingDot_regular:void()","methodSource":"@Issue(\"SECURITY-2424\")\n    @Test public void cannotCopyJobWithTrailingDot_regular() throws Exception {\n        assertThat(j.jenkins.getItems(), Matchers.hasSize(0));\n        j.createFreeStyleProject(\"job1\");\n        assertThat(j.jenkins.getItems(), Matchers.hasSize(1));\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"job1\", \"job1.\");\n        assertThat(result.stderr(), containsString(hudson.model.Messages.Hudson_TrailingDot()));\n        assertThat(result, failedWith(1));\n\n        assertThat(j.jenkins.getItems(), Matchers.hasSize(1));\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CopyJobCommandTest","methodSignature":"hudson.cli.CopyJobCommandTest.cannotCopyJobWithTrailingDot_exceptIfEscapeHatchIsSet:void()","methodSource":"@Issue(\"SECURITY-2424\")\n    @Test public void cannotCopyJobWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {\n        String propName \u003d Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;\n        String initialValue \u003d System.getProperty(propName);\n        System.setProperty(propName, \"false\");\n        try {\n            assertThat(j.jenkins.getItems(), Matchers.hasSize(0));\n            j.createFreeStyleProject(\"job1\");\n            assertThat(j.jenkins.getItems(), Matchers.hasSize(1));\n\n            CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"job1\", \"job1.\");\n            assertThat(result, succeededSilently());\n\n            assertThat(j.jenkins.getItems(), Matchers.hasSize(2));\n        }\n        finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(propName);\n            } else {\n                System.setProperty(propName, initialValue);\n            }\n        }\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateJobCommandTest","methodSignature":"hudson.cli.CreateJobCommandTest.folderPermissions:void()","methodSource":"@Issue(\"JENKINS-22262\")\n    @Test public void folderPermissions() throws Exception {\n        CLICommand cmd \u003d new CreateJobCommand();\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(r, cmd);\n        final MockFolder d \u003d r.createFolder(\"d\");\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.READ).everywhere().toAuthenticated().\n            grant(Item.READ).onItems(d).toAuthenticated(). // including alice\n            grant(Item.CREATE).onItems(d).to(\"bob\"));\n        cmd.setTransportAuth2(User.getOrCreateByIdOrFullName(\"alice\").impersonate2());\n        assertThat(invoker.withStdin(new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"d/p\"), failedWith(6));\n        cmd.setTransportAuth2(User.getOrCreateByIdOrFullName(\"bob\").impersonate2());\n        assertThat(invoker.withStdin(new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"d/p\"), succeededSilently());\n        assertNotNull(d.getItem(\"p\"));\n    }","advisory":"JENKINS-22262"},{"className":"hudson.cli.CreateJobCommandTest","methodSignature":"hudson.cli.CreateJobCommandTest.cannotCreateJobWithTrailingDot_withoutOtherJob:void()","methodSource":"@Issue(\"SECURITY-2424\")\n    @Test public void cannotCreateJobWithTrailingDot_withoutOtherJob() {\n        CLICommand cmd \u003d new CreateJobCommand();\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(r, cmd);\n        assertThat(r.jenkins.getItems(), Matchers.hasSize(0));\n\n        CLICommandInvoker.Result result \u003d invoker.withStdin(new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1.\");\n        assertThat(result.stderr(), containsString(hudson.model.Messages.Hudson_TrailingDot()));\n        assertThat(result, failedWith(1));\n\n        assertThat(r.jenkins.getItems(), Matchers.hasSize(0));\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateJobCommandTest","methodSignature":"hudson.cli.CreateJobCommandTest.cannotCreateJobWithTrailingDot_withExistingJob:void()","methodSource":"@Issue(\"SECURITY-2424\")\n    @Test public void cannotCreateJobWithTrailingDot_withExistingJob() {\n        CLICommand cmd \u003d new CreateJobCommand();\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(r, cmd);\n        assertThat(r.jenkins.getItems(), Matchers.hasSize(0));\n        assertThat(invoker.withStdin(new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1\"), succeededSilently());\n        assertThat(r.jenkins.getItems(), Matchers.hasSize(1));\n\n        CLICommandInvoker.Result result \u003d invoker.withStdin(new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1.\");\n        assertThat(result.stderr(), containsString(hudson.model.Messages.Hudson_TrailingDot()));\n        assertThat(result, failedWith(1));\n\n        assertThat(r.jenkins.getItems(), Matchers.hasSize(1));\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateJobCommandTest","methodSignature":"hudson.cli.CreateJobCommandTest.cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet:void()","methodSource":"@Issue(\"SECURITY-2424\")\n    @Test public void cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet() {\n        String propName \u003d Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;\n        String initialValue \u003d System.getProperty(propName);\n        System.setProperty(propName, \"false\");\n        try {\n            CLICommand cmd \u003d new CreateJobCommand();\n            CLICommandInvoker invoker \u003d new CLICommandInvoker(r, cmd);\n            assertThat(r.jenkins.getItems(), Matchers.hasSize(0));\n            assertThat(invoker.withStdin(new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"job1.\"), succeededSilently());\n            assertThat(r.jenkins.getItems(), Matchers.hasSize(1));\n        }\n        finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(propName);\n            } else {\n                System.setProperty(propName, initialValue);\n            }\n        }\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNodeShouldFailWithoutComputerCreatePermission:void()","methodSource":"@Test public void createNodeShouldFailWithoutComputerCreatePermission() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Create permission\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(6));\n    }"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNode:void()","methodSource":"@Test public void createNode() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final Slave updated \u003d (Slave) j.jenkins.getNode(\"AgentFromXML\");\n        assertThat(updated.getNodeName(), equalTo(\"AgentFromXML\"));\n        assertThat(updated.getNumExecutors(), equalTo(42));\n    }"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNodeSpecifyingNameExplicitly:void()","methodSource":"@Test public void createNodeSpecifyingNameExplicitly() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomAgentName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"An agent with original name should not exist\", j.jenkins.getNode(\"AgentFromXml\"), nullValue());\n\n        final Slave updated \u003d (Slave) j.jenkins.getNode(\"CustomAgentName\");\n        assertThat(updated.getNodeName(), equalTo(\"CustomAgentName\"));\n        assertThat(updated.getNumExecutors(), equalTo(42));\n    }"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNodeSpecifyingDifferentNameExplicitly:void()","methodSource":"@Test public void createNodeSpecifyingDifferentNameExplicitly() throws Exception {\n\n        final Node original \u003d j.createSlave(\"AgentFromXml\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"CustomAgentName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"An agent with original name should be left untouched\", j.jenkins.getNode(\"AgentFromXml\"), equalTo(original));\n\n        final Slave updated \u003d (Slave) j.jenkins.getNode(\"CustomAgentName\");\n        assertThat(updated.getNodeName(), equalTo(\"CustomAgentName\"));\n        assertThat(updated.getNumExecutors(), equalTo(42));\n    }"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNodeShouldFailIfNodeAlreadyExist:void()","methodSource":"@Test public void createNodeShouldFailIfNodeAlreadyExist() throws Exception {\n\n        j.createSlave(\"AgentFromXML\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node \u0027AgentFromXML\u0027 already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly:void()","methodSource":"@Test public void createNodeShouldFailIfNodeAlreadyExistWhenNameSpecifiedExplicitly() throws Exception {\n\n        j.createSlave(\"ExistingAgent\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"ExistingAgent\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Node \u0027ExistingAgent\u0027 already exists\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(4));\n    }"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.createNodeShouldFailIfNodeIsNotGood:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2021\")\n    public void createNodeShouldFailIfNodeIsNotGood() {\n        int nodeListSizeBefore \u003d j.jenkins.getNodes().size();\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CREATE, Jenkins.READ)\n                .withStdin(CreateNodeCommandTest.class.getResourceAsStream(\"node_sec2021.xml\"))\n                .invoke()\n                ;\n\n        assertThat(result.stderr(), containsString(Messages.Hudson_UnsafeChar(\u0027/\u0027)));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(1));\n\n        // ensure not side effects\n        assertEquals(nodeListSizeBefore, j.jenkins.getNodes().size());\n    }","advisory":"SECURITY-2021"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.cannotCreateNodeWithTrailingDot_withoutOtherNode:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateNodeWithTrailingDot_withoutOtherNode() {\n        int nodeListSizeBefore \u003d j.jenkins.getNodes().size();\n\n        CLICommandInvoker.Result result \u003d command\n                .withStdin(new ByteArrayInputStream(\"\u003cslave/\u003e\".getBytes(StandardCharsets.UTF_8)))\n                .invokeWithArgs(\"nodeA.\")\n                ;\n\n        assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(1));\n\n        // ensure not side effects\n        assertEquals(nodeListSizeBefore, j.jenkins.getNodes().size());\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.cannotCreateNodeWithTrailingDot_withExistingNode:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateNodeWithTrailingDot_withExistingNode() {\n        int nodeListSizeBefore \u003d j.jenkins.getNodes().size();\n\n        assertThat(command.withStdin(new ByteArrayInputStream(\"\u003cslave/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"nodeA\"), succeededSilently());\n        assertEquals(nodeListSizeBefore + 1, j.jenkins.getNodes().size());\n\n        CLICommandInvoker.Result result \u003d command\n                .withStdin(new ByteArrayInputStream(\"\u003cslave/\u003e\".getBytes(StandardCharsets.UTF_8)))\n                .invokeWithArgs(\"nodeA.\")\n                ;\n\n        assertThat(result.stderr(), containsString(Messages.Hudson_TrailingDot()));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(1));\n\n        // ensure not side effects\n        assertEquals(nodeListSizeBefore + 1, j.jenkins.getNodes().size());\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateNodeCommandTest","methodSignature":"hudson.cli.CreateNodeCommandTest.cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet() {\n        String propName \u003d Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;\n        String initialValue \u003d System.getProperty(propName);\n        System.setProperty(propName, \"false\");\n        try {\n            int nodeListSizeBefore \u003d j.jenkins.getNodes().size();\n\n            assertThat(command.withStdin(new ByteArrayInputStream(\"\u003cslave/\u003e\".getBytes(StandardCharsets.UTF_8))).invokeWithArgs(\"nodeA\"), succeededSilently());\n            assertEquals(nodeListSizeBefore + 1, j.jenkins.getNodes().size());\n\n            CLICommandInvoker.Result result \u003d command\n                    .withStdin(new ByteArrayInputStream(\"\u003cslave/\u003e\".getBytes(StandardCharsets.UTF_8)))\n                    .invokeWithArgs(\"nodeA.\")\n                    ;\n\n            assertThat(result, succeededSilently());\n\n            assertEquals(nodeListSizeBefore + 2, j.jenkins.getNodes().size());\n        }\n        finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(propName);\n            } else {\n                System.setProperty(propName, initialValue);\n            }\n        }\n    }","advisory":"SECURITY-2424"},{"className":"hudson.cli.CreateViewCommandTest","methodSignature":"hudson.cli.CreateViewCommandTest.createViewShouldFailWithoutViewCreatePermission:void()","methodSource":"@Test public void createViewShouldFailWithoutViewCreatePermission() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Create permission\"));\n    }"},{"className":"hudson.cli.CreateViewCommandTest","methodSignature":"hudson.cli.CreateViewCommandTest.createViewShouldSucceed:void()","methodSource":"@Test public void createViewShouldSucceed() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.CREATE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, succeededSilently());\n\n        final View updatedView \u003d j.jenkins.getView(\"ViewFromXML\");\n        assertThat(updatedView.getViewName(), equalTo(\"ViewFromXML\"));\n        assertThat(updatedView.isFilterExecutors(), equalTo(true));\n        assertThat(updatedView.isFilterQueue(), equalTo(false));\n    }"},{"className":"hudson.cli.CreateViewCommandTest","methodSignature":"hudson.cli.CreateViewCommandTest.createViewSpecifyingNameExplicitlyShouldSucceed:void()","methodSource":"@Test public void createViewSpecifyingNameExplicitlyShouldSucceed() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.CREATE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invokeWithArgs(\"CustomViewName\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"A view with original name should not exist\", j.jenkins.getView(\"ViewFromXML\"), nullValue());\n\n        final View updatedView \u003d j.jenkins.getView(\"CustomViewName\");\n        assertThat(updatedView.getViewName(), equalTo(\"CustomViewName\"));\n        assertThat(updatedView.isFilterExecutors(), equalTo(true));\n        assertThat(updatedView.isFilterQueue(), equalTo(false));\n    }"},{"className":"hudson.cli.CreateViewCommandTest","methodSignature":"hudson.cli.CreateViewCommandTest.createViewShouldFailIfViewAlreadyExists:void()","methodSource":"@Test public void createViewShouldFailIfViewAlreadyExists() throws IOException {\n\n        j.jenkins.addView(new ListView(\"ViewFromXML\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.CREATE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invoke()\n        ;\n\n        assertThat(result, failedWith(4));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: View \u0027ViewFromXML\u0027 already exists\"));\n    }"},{"className":"hudson.cli.CreateViewCommandTest","methodSignature":"hudson.cli.CreateViewCommandTest.createViewShouldFailUsingInvalidName:void()","methodSource":"@Test public void createViewShouldFailUsingInvalidName() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.CREATE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invokeWithArgs(\"..\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Invalid view name\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldFailWithoutJobReadPermission:void()","methodSource":"@Test public void deleteBuildsShouldFailWithoutJobReadPermission() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027aProject\u0027\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldFailWithoutRunDeletePermission:void()","methodSource":"@Test public void deleteBuildsShouldFailWithoutRunDeletePermission() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Run/Delete permission\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldFailIfJobDoesNotExist:void()","methodSource":"@Test public void deleteBuildsShouldFailIfJobDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"never_created\", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldFailIfJobNameIsEmpty:void()","methodSource":"@Test public void deleteBuildsShouldFailIfJobNameIsEmpty() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"\", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027\u0027; perhaps you meant \u0027aProject\u0027?\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldSuccess:void()","methodSource":"@Test public void deleteBuildsShouldSuccess() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldSuccessIfBuildDoesNotExist:void()","methodSource":"@Test public void deleteBuildsShouldSuccessIfBuildDoesNotExist() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 0 builds\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldSuccessIfBuildNumberZeroSpecified:void()","methodSource":"@Test public void deleteBuildsShouldSuccessIfBuildNumberZeroSpecified() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"0\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 0 builds\"));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldSuccessEvenTheBuildIsRunning:void()","methodSource":"@Test public void deleteBuildsShouldSuccessEvenTheBuildIsRunning() throws Exception {\n        assumeFalse(\"You can\u0027t delete files that are in use on Windows\", Functions.isWindows());\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        ExecutorTest.startBlockingBuild(project);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n        assertThat(project.isBuilding(), equalTo(false));\n        try {\n            project.delete();\n        } catch (IOException | InterruptedException x) {\n            throw new AssumptionViolatedException(\"Could not delete test project (race condition?)\", x);\n        }\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsShouldSuccessEvenTheBuildIsStuckInTheQueue:void()","methodSource":"@Test public void deleteBuildsShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n        assertNotNull(project.scheduleBuild2(0));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn\u0027t scheduled properly - it isn\u0027t in the queue\", project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn\u0027t scheduled properly - it is running on non-exist node\", project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 0 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).isBuilding(), equalTo(false));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).isInQueue(), equalTo(true));\n\n        Jenkins.get().getQueue().cancel(project);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).isBuilding(), equalTo(false));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).isInQueue(), equalTo(false));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsManyShouldSuccess:void()","methodSource":"@Test public void deleteBuildsManyShouldSuccess() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(5));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1,2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 2 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(3));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"3-5\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 3 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsManyShouldSuccessEvenABuildIsSpecifiedTwice:void()","methodSource":"@Test public void deleteBuildsManyShouldSuccessEvenABuildIsSpecifiedTwice() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1,1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1-1,1-2,2-2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsManyShouldSuccessEvenLastBuildDoesNotExist:void()","methodSource":"@Test public void deleteBuildsManyShouldSuccessEvenLastBuildDoesNotExist() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1,3\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"2-3\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsManyShouldSuccessEvenMiddleBuildDoesNotExist:void()","methodSource":"@Test public void deleteBuildsManyShouldSuccessEvenMiddleBuildDoesNotExist() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        project.getBuildByNumber(2).delete();\n        project.getBuildByNumber(5).delete();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(4));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1,2,3\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 2 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"4-6\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 2 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsManyShouldSuccessEvenFirstBuildDoesNotExist:void()","methodSource":"@Test public void deleteBuildsManyShouldSuccessEvenFirstBuildDoesNotExist() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        project.getBuildByNumber(1).delete();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1,2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"2-3\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteBuildsCommandTest","methodSignature":"hudson.cli.DeleteBuildsCommandTest.deleteBuildsManyShouldSuccessEvenTheFirstAndLastBuildDoesNotExist:void()","methodSource":"@Test public void deleteBuildsManyShouldSuccessEvenTheFirstAndLastBuildDoesNotExist() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project);\n        project.getBuildByNumber(1).delete();\n        project.getBuildByNumber(3).delete();\n        project.getBuildByNumber(5).delete();\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(2));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"1,2,3\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ, Run.DELETE)\n                .invokeWithArgs(\"aProject\", \"3-5\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Deleted 1 builds\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(0));\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobShouldFailWithoutJobDeletePermission:void()","methodSource":"@Test public void deleteJobShouldFailWithoutJobDeletePermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Job/Delete permission\"));\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobShouldFailWithoutJobReadPermission:void()","methodSource":"@Test public void deleteJobShouldFailWithoutJobReadPermission() throws IOException {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027aProject\u0027\"));\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobShouldSucceed:void()","methodSource":"@Test public void deleteJobShouldSucceed() throws Exception {\n\n        j.createFreeStyleProject(\"aProject\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobShouldFailIfJobDoesNotExist:void()","methodSource":"@Test public void deleteJobShouldFailIfJobDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobManyShouldSucceed:void()","methodSource":"@Test public void deleteJobManyShouldSucceed() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n        j.createFreeStyleProject(\"aProject3\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject3\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobManyShouldFailIfFirstJobDoesNotExist:void()","methodSource":"@Test public void deleteJobManyShouldFailIfFirstJobDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\", \"aProject1\", \"aProject2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such job \u0027never_created\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobManyShouldFailIfMiddleJobDoesNotExist:void()","methodSource":"@Test public void deleteJobManyShouldFailIfMiddleJobDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"never_created\", \"aProject2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such job \u0027never_created\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobManyShouldFailIfLastJobDoesNotExist:void()","methodSource":"@Test public void deleteJobManyShouldFailIfLastJobDoesNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"never_created\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such job \u0027never_created\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobManyShouldFailIfMoreJobsDoNotExist:void()","methodSource":"@Test public void deleteJobManyShouldFailIfMoreJobsDoNotExist() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"never_created1\", \"never_created2\", \"aProject2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created1: No such job \u0027never_created1\u0027\"));\n        assertThat(result.stderr(), containsString(\"never_created2: No such job \u0027never_created2\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n        assertThat(j.jenkins.getItem(\"never_created1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"never_created2\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteJobCommandTest","methodSignature":"hudson.cli.DeleteJobCommandTest.deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice:void()","methodSource":"@Test public void deleteJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.createFreeStyleProject(\"aProject1\");\n        j.createFreeStyleProject(\"aProject2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getItem(\"aProject1\"), nullValue());\n        assertThat(j.jenkins.getItem(\"aProject2\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeShouldFailWithoutNodeDeletePermission:void()","methodSource":"@Test public void deleteNodeShouldFailWithoutNodeDeletePermission() throws Exception {\n\n        j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\")\n        ;\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Delete permission\"));\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeShouldSucceed:void()","methodSource":"@Test public void deleteNodeShouldSucceed() throws Exception {\n\n        j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aNode\")\n        ;\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getNode(\"aNode\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test public void deleteNodeShouldFailIfNodeDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such node \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeManyShouldSucceed:void()","methodSource":"@Test public void deleteNodeManyShouldSucceed() throws Exception {\n\n        j.createSlave(\"aNode1\", \"\", null);\n        j.createSlave(\"aNode2\", \"\", null);\n        j.createSlave(\"aNode3\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aNode1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode2\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode3\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeManyShouldFailIfFirstNodeDoesNotExist:void()","methodSource":"@Test public void deleteNodeManyShouldFailIfFirstNodeDoesNotExist() throws Exception {\n\n        j.createSlave(\"aNode1\", \"\", null);\n        j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\", \"aNode1\", \"aNode2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such node \u0027never_created\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aNode1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeManyShouldFailIfMiddleNodeDoesNotExist:void()","methodSource":"@Test public void deleteNodeManyShouldFailIfMiddleNodeDoesNotExist() throws Exception {\n\n        j.createSlave(\"aNode1\", \"\", null);\n        j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"never_created\", \"aNode2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such node \u0027never_created\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aNode1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeManyShouldFailIfLastNodeDoesNotExist:void()","methodSource":"@Test public void deleteNodeManyShouldFailIfLastNodeDoesNotExist() throws Exception {\n\n        j.createSlave(\"aNode1\", \"\", null);\n        j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such node \u0027never_created\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aNode1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeManyShouldFailIfMoreNodesDoNotExist:void()","methodSource":"@Test public void deleteNodeManyShouldFailIfMoreNodesDoNotExist() throws Exception {\n\n        j.createSlave(\"aNode1\", \"\", null);\n        j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"never_created1\", \"never_created2\", \"aNode2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created1: No such node \u0027never_created1\u0027\"));\n        assertThat(result.stderr(), containsString(\"never_created2: No such node \u0027never_created2\u0027\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aNode1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created1\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created2\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteNodeCommandTest","methodSignature":"hudson.cli.DeleteNodeCommandTest.deleteNodeManyShouldSucceedEvenANodeIsSpecifiedTwice:void()","methodSource":"@Test public void deleteNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {\n\n        j.createSlave(\"aNode1\", \"\", null);\n        j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DELETE, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aNode1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aNode2\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldFailWithoutViewDeletePermission:void()","methodSource":"@Test public void deleteViewShouldFailWithoutViewDeletePermission() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\")\n        ;\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Delete permission\"));\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldFailWithoutViewReadPermission:void()","methodSource":"@Test public void deleteViewShouldFailWithoutViewReadPermission() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\")\n                ;\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldSucceed:void()","methodSource":"@Test public void deleteViewShouldSucceed() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\")\n        ;\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldFailIfViewDoesNotExist:void()","methodSource":"@Test public void deleteViewShouldFailIfViewDoesNotExist() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named never_created inside view Jenkins\"));\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldFailIfViewGroupDoesNotAllowDeletion:void()","methodSource":"@Test public void deleteViewShouldFailIfViewGroupDoesNotAllowDeletion() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(AllView.DEFAULT_VIEW_NAME)\n        ;\n\n        assertThat(result, failedWith(4));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(j.jenkins.getView(AllView.DEFAULT_VIEW_NAME), notNullValue());\n        assertThat(result.stderr(), containsString(\"ERROR: Jenkins does not allow to delete \u0027\" + AllView.DEFAULT_VIEW_NAME + \"\u0027 view\"));\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldFailIfViewNameIsEmpty:void()","methodSource":"@Test public void deleteViewShouldFailIfViewNameIsEmpty() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"\")\n                ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: View name is empty\"));\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewShouldFailIfViewNameIsSpace:void()","methodSource":"@Test public void deleteViewShouldFailIfViewNameIsSpace() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\" \")\n                ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named   inside view Jenkins\"));\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldSucceed:void()","methodSource":"@Test public void deleteViewManyShouldSucceed() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n        j.jenkins.addView(new ListView(\"aView3\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView1\", \"aView2\", \"aView3\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView3\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldFailIfFirstViewDoesNotExist:void()","methodSource":"@Test public void deleteViewManyShouldFailIfFirstViewDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"never_created\", \"aView1\", \"aView2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No view named never_created inside view Jenkins\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldFailIfMiddleViewDoesNotExist:void()","methodSource":"@Test public void deleteViewManyShouldFailIfMiddleViewDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView1\", \"never_created\", \"aView2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No view named never_created inside view Jenkins\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldFailIfLastViewDoesNotExist:void()","methodSource":"@Test public void deleteViewManyShouldFailIfLastViewDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView1\", \"aView2\", \"never_created\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No view named never_created inside view Jenkins\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldFailIfMoreViewsDoNotExist:void()","methodSource":"@Test public void deleteViewManyShouldFailIfMoreViewsDoNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView1\", \"never_created1\", \"never_created2\", \"aView2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created1: No view named never_created1 inside view Jenkins\"));\n        assertThat(result.stderr(), containsString(\"never_created2: No view named never_created2 inside view Jenkins\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created1\"), nullValue());\n        assertThat(j.jenkins.getView(\"never_created2\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldSucceedEvenAViewSpecifiedTwice:void()","methodSource":"@Test public void deleteViewManyShouldSucceedEvenAViewSpecifiedTwice() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView1\", \"aView2\", \"aView1\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n    }"},{"className":"hudson.cli.DeleteViewCommandTest","methodSignature":"hudson.cli.DeleteViewCommandTest.deleteViewManyShouldFailWithoutViewDeletePermissionButOthersShouldBeDeleted:void()","methodSource":"@Test public void deleteViewManyShouldFailWithoutViewDeletePermissionButOthersShouldBeDeleted() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView1\"));\n        j.jenkins.addView(new ListView(\"aView2\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.DELETE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView1\", \"aView2\", AllView.DEFAULT_VIEW_NAME);\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(AllView.DEFAULT_VIEW_NAME + \": Jenkins does not allow to delete \u0027\" + AllView.DEFAULT_VIEW_NAME + \"\u0027 view\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        assertThat(j.jenkins.getView(\"aView1\"), nullValue());\n        assertThat(j.jenkins.getView(\"aView2\"), nullValue());\n        assertThat(j.jenkins.getView(AllView.DEFAULT_VIEW_NAME), notNullValue());\n    }"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.canDisablePluginWithOptionalDependerStrategyNone:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void canDisablePluginWithOptionalDependerStrategyNone() {\n        assertThat(disablePluginsCLiCommand(\"-strategy\", \"NONE\", \"dependee\"), succeeded());\n        assertPluginDisabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.canDisablePluginWithDependentsDisabledStrategyNone:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\"})\n    public void canDisablePluginWithDependentsDisabledStrategyNone() throws IOException {\n        disablePlugin(\"mandatory-depender\");\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"-strategy\", \"NONE\", \"dependee\");\n\n        assertThat(result, succeeded());\n        assertEquals(\"Disabling only dependee\", 1, StringUtils.countMatches(result.stdout(), \"Disabling\"));\n        assertPluginDisabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.cannotDisablePluginWithMandatoryDependerStrategyNone:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"mandatory-depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void cannotDisablePluginWithMandatoryDependerStrategyNone() {\n        assertThat(disablePluginsCLiCommand(\"dependee\"), failedWith(RETURN_CODE_NOT_DISABLED_DEPENDANTS));\n        assertPluginEnabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.cannotDisableDependentPluginWrongOrderStrategyNone:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"mandatory-depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void cannotDisableDependentPluginWrongOrderStrategyNone() {\n        assertThat(disablePluginsCLiCommand(\"dependee\", \"mandatory-depender\"), failedWith(RETURN_CODE_NOT_DISABLED_DEPENDANTS));\n        assertPluginDisabled(\"mandatory-depender\");\n        assertPluginEnabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.canDisableDependentPluginWrongOrderStrategyAll:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"mandatory-depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void canDisableDependentPluginWrongOrderStrategyAll() {\n        assertThat(disablePluginsCLiCommand(\"dependee\", \"mandatory-depender\", \"-strategy\", \"all\"), succeeded());\n        assertPluginDisabled(\"mandatory-depender\");\n        assertPluginDisabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.canDisableDependentPluginsRightOrderStrategyNone:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"mandatory-depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void canDisableDependentPluginsRightOrderStrategyNone() {\n        assertThat(disablePluginsCLiCommand(\"mandatory-depender\", \"dependee\"), succeeded());\n        assertPluginDisabled(\"dependee\");\n        assertPluginDisabled(\"mandatory-depender\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.restartAfterDisable:void()","methodSource":"@Ignore(\"TODO calling restart seems to break Surefire\")\n    @Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin(\"dependee-0.0.2.hpi\")\n    public void restartAfterDisable() {\n        assumeNotWindows();\n        assertThat(disablePluginsCLiCommand(\"-restart\", \"dependee\"), succeeded());\n        assertPluginDisabled(\"dependee\");\n        assertJenkinsInQuietMode();\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.notRestartAfterDisablePluginWithoutArgumentRestart:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin(\"dependee-0.0.2.hpi\")\n    public void notRestartAfterDisablePluginWithoutArgumentRestart() throws Exception {\n        assertThat(disablePluginsCLiCommand(\"dependee\"), succeeded());\n        assertPluginDisabled(\"dependee\");\n        assertJenkinsNotInQuietMode();\n        j.waitUntilNoActivity();\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.returnCodeDisableInvalidPlugin:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin(\"dependee-0.0.2.hpi\")\n    public void returnCodeDisableInvalidPlugin() {\n        assertThat(disablePluginsCLiCommand(\"wrongname\"), failedWith(RETURN_CODE_NO_SUCH_PLUGIN));\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.disableAlreadyDisabledPluginNotRestart:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin(\"dependee-0.0.2.hpi\")\n    public void disableAlreadyDisabledPluginNotRestart() throws Exception {\n        // Disable before the command call\n        disablePlugin(\"dependee\");\n\n        assertPluginDisabled(\"dependee\");\n        assertThat(disablePluginsCLiCommand(\"-restart\", \"dependee\"), succeeded());\n        assertPluginDisabled(\"dependee\");\n        assertJenkinsNotInQuietMode();\n        j.waitUntilNoActivity();\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.restartAfterDisablePluginsAndErrors:void()","methodSource":"@Ignore(\"TODO calling restart seems to break Surefire\")\n    @Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"variant.hpi\", \"depender-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\", \"plugin-first.hpi\", \"dependee-0.0.2.hpi\"})\n    public void restartAfterDisablePluginsAndErrors() {\n        assumeNotWindows();\n        assertThat(disablePluginsCLiCommand(\"-restart\", \"variant\", \"dependee\", \"depender\", \"plugin-first\", \"mandatory-depender\"), failedWith(RETURN_CODE_NOT_DISABLED_DEPENDANTS));\n        assertPluginDisabled(\"variant\");\n        assertPluginEnabled(\"dependee\");\n        assertPluginDisabled(\"depender\");\n        assertPluginDisabled(\"plugin-first\");\n        assertPluginDisabled(\"mandatory-depender\");\n        assertJenkinsInQuietMode(); // some plugins were disabled, so it should be restarting\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.disablePluginsStrategyAll:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"variant.hpi\", \"depender-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\", \"plugin-first.hpi\", \"dependee-0.0.2.hpi\"})\n    public void disablePluginsStrategyAll() {\n        assertPluginEnabled(\"dependee\");\n        assertPluginEnabled(\"depender\");\n        assertPluginEnabled(\"mandatory-depender\");\n        assertThat(disablePluginsCLiCommand(\"-strategy\", \"all\", \"variant\", \"dependee\", \"plugin-first\"), succeeded());\n        assertPluginDisabled(\"variant\");\n        assertPluginDisabled(\"dependee\");\n        assertPluginDisabled(\"depender\");\n        assertPluginDisabled(\"plugin-first\");\n        assertPluginDisabled(\"mandatory-depender\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.disablePluginsStrategyMandatory:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"variant.hpi\", \"depender-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\", \"plugin-first.hpi\", \"dependee-0.0.2.hpi\"})\n    public void disablePluginsStrategyMandatory() {\n        assertThat(disablePluginsCLiCommand(\"-strategy\", \"mandatory\", \"variant\", \"dependee\", \"plugin-first\"), succeeded());\n        assertPluginDisabled(\"variant\");\n        assertPluginDisabled(\"dependee\");\n        assertPluginEnabled(\"depender\");\n        assertPluginDisabled(\"plugin-first\");\n        assertPluginDisabled(\"mandatory-depender\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.disablePluginsMessageAlreadyDisabled:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void disablePluginsMessageAlreadyDisabled() {\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"-strategy\", \"all\", \"dependee\", \"depender\");\n        assertThat(result, succeeded());\n\n        assertPluginDisabled(\"dependee\");\n        assertPluginDisabled(\"depender\");\n\n        assertTrue(\"An occurrence of the depender plugin in the log says it was successfully disabled\", checkResultWith(result, StringUtils::contains, \"depender\", PluginWrapper.PluginDisableStatus.DISABLED));\n        assertTrue(\"An occurrence of the depender plugin in the log says it was already disabled\", checkResultWith(result, StringUtils::contains, \"depender\", PluginWrapper.PluginDisableStatus.ALREADY_DISABLED));\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.returnCodeFirstErrorIsDependents:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"dependee-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\"})\n    public void returnCodeFirstErrorIsDependents() {\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"dependee\", \"badplugin\");\n        assertThat(result, failedWith(RETURN_CODE_NOT_DISABLED_DEPENDANTS));\n\n        assertPluginEnabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.returnCodeFirstErrorIsNoSuchPlugin:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"dependee-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\"})\n    public void returnCodeFirstErrorIsNoSuchPlugin() {\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"badplugin\", \"dependee\");\n        assertThat(result, failedWith(RETURN_CODE_NO_SUCH_PLUGIN));\n\n        assertPluginEnabled(\"dependee\");\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.quietModeEmptyOutputSucceed:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\"})\n    public void quietModeEmptyOutputSucceed() {\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"-strategy\", \"all\", \"-quiet\", \"dependee\");\n        assertThat(result, succeeded());\n\n        assertPluginDisabled(\"dependee\");\n        assertPluginDisabled(\"depender\");\n        assertPluginDisabled(\"mandatory-depender\");\n\n        assertThat(\"No log in quiet mode if all plugins disabled\", result.stdout(), is(emptyOrNullString()));\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.quietModeWithErrorNoSuch:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\"})\n    public void quietModeWithErrorNoSuch() {\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"-quiet\", \"-strategy\", \"all\", \"dependee\", \"badplugin\");\n        assertThat(result, failedWith(RETURN_CODE_NO_SUCH_PLUGIN));\n\n        assertPluginDisabled(\"dependee\");\n        assertPluginDisabled(\"depender\");\n        assertPluginDisabled(\"mandatory-depender\");\n\n        assertTrue(\"Only error NO_SUCH_PLUGIN in quiet mode\", checkResultWith(result, StringUtils::startsWith, \"badplugin\", PluginWrapper.PluginDisableStatus.NO_SUCH_PLUGIN));\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisablePluginCommandTest","methodSignature":"hudson.cli.DisablePluginCommandTest.quietModeWithErrorDependents:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27177\")\n    @WithPlugin({\"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\", \"mandatory-depender-0.0.2.hpi\"})\n    public void quietModeWithErrorDependents() {\n        CLICommandInvoker.Result result \u003d disablePluginsCLiCommand(\"-quiet\", \"-strategy\", \"none\", \"dependee\");\n        assertThat(result, failedWith(RETURN_CODE_NOT_DISABLED_DEPENDANTS));\n\n        assertPluginEnabled(\"dependee\");\n        assertPluginEnabled(\"depender\");\n        assertPluginEnabled(\"mandatory-depender\");\n\n        assertTrue(\"Only error NOT_DISABLED_DEPENDANTS in quiet mode\", checkResultWith(result, StringUtils::startsWith, \"dependee\", PluginWrapper.PluginDisableStatus.NOT_DISABLED_DEPENDANTS));\n    }","advisory":"JENKINS-27177"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeShouldFailWithoutComputerDisconnectPermission:void()","methodSource":"@Test\n    public void disconnectNodeShouldFailWithoutComputerDisconnectPermission() throws Exception {\n        j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Disconnect permission\"));\n        assertThat(result.stderr(), not(containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test\n    public void disconnectNodeShouldFailIfNodeDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such agent \\\"never_created\\\" exists.\"));\n        assertThat(result.stderr(), not(containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeShouldSucceed:void()","methodSource":"@Test\n    public void disconnectNodeShouldSucceed() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n\n        slave.toComputer().connect(true);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n\n        result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeShouldSucceedWithCause:void()","methodSource":"@Test\n    public void disconnectNodeShouldSucceedWithCause() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n\n        slave.toComputer().connect(true);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"anotherCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"anotherCause\"));\n\n        result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"yetAnotherCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"yetAnotherCause\"));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeManyShouldSucceed:void()","methodSource":"@Test\n    public void disconnectNodeManyShouldSucceed() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        DumbSlave slave3 \u003d j.createSlave(\"aNode3\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n        slave3.toComputer().waitUntilOnline();\n        assertThat(slave3.toComputer().isOnline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(slave3.toComputer().isOffline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave3.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeManyShouldSucceedWithCause:void()","methodSource":"@Test\n    public void disconnectNodeManyShouldSucceedWithCause() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        DumbSlave slave3 \u003d j.createSlave(\"aNode3\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n        slave3.toComputer().waitUntilOnline();\n        assertThat(slave3.toComputer().isOnline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave3.toComputer().isOffline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave3.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeManyShouldFailIfANodeDoesNotExist:void()","methodSource":"@Test\n    public void disconnectNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.DisconnectNodeCommandTest","methodSignature":"hudson.cli.DisconnectNodeCommandTest.disconnectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice:void()","methodSource":"@Test\n    public void disconnectNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode1\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.EnableJobCommandTest","methodSignature":"hudson.cli.EnableJobCommandTest.smokes:void()","methodSource":"@Test\n    public void smokes() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject(\"p\");\n        assertThat(new CLICommandInvoker(r, \"disable-job\").invokeWithArgs(\"p\"), CLICommandInvoker.Matcher.succeededSilently());\n        assertTrue(p.isDisabled());\n        assertThat(new CLICommandInvoker(r, \"enable-job\").invokeWithArgs(\"p\"), CLICommandInvoker.Matcher.succeededSilently());\n        assertFalse(p.isDisabled());\n    }"},{"className":"hudson.cli.EnablePluginCommandTest","methodSignature":"hudson.cli.EnablePluginCommandTest.enableSinglePlugin:void()","methodSource":"@Test\n    @Issue(\"JENKINS-52822\")\n    public void enableSinglePlugin() throws IOException {\n        String name \u003d \"token-macro\";\n        PluginManager m \u003d j.getPluginManager();\n        assertThat(m.getPlugin(name), is(nullValue()));\n        assertThat(installTestPlugin(name), succeeded());\n        assertPluginEnabled(name);\n        disablePlugin(name);\n        assertPluginDisabled(name);\n        assertThat(enablePlugins(name), succeeded());\n        assertPluginEnabled(name);\n        assertJenkinsNotInQuietMode();\n    }","advisory":"JENKINS-52822"},{"className":"hudson.cli.EnablePluginCommandTest","methodSignature":"hudson.cli.EnablePluginCommandTest.enableInvalidPluginFails:void()","methodSource":"@Test\n    @Issue(\"JENKINS-52822\")\n    public void enableInvalidPluginFails() {\n        assertThat(enablePlugins(\"foobar\"), failedWith(3));\n        assertJenkinsNotInQuietMode();\n    }","advisory":"JENKINS-52822"},{"className":"hudson.cli.EnablePluginCommandTest","methodSignature":"hudson.cli.EnablePluginCommandTest.enableDependerEnablesDependee:void()","methodSource":"@Test\n    @Issue(\"JENKINS-52822\")\n    public void enableDependerEnablesDependee() throws IOException {\n        installTestPlugin(\"dependee\");\n        installTestPlugin(\"depender\");\n        disablePlugin(\"depender\");\n        disablePlugin(\"dependee\");\n        assertThat(enablePlugins(\"depender\"), succeeded());\n        assertPluginEnabled(\"depender\");\n        assertPluginEnabled(\"dependee\");\n        assertJenkinsNotInQuietMode();\n    }","advisory":"JENKINS-52822"},{"className":"hudson.cli.EnablePluginCommandTest","methodSignature":"hudson.cli.EnablePluginCommandTest.enablePluginWithRestart:void()","methodSource":"@Ignore(\"TODO calling restart seems to break Surefire\")\n    @Test\n    @Issue(\"JENKINS-52950\")\n    public void enablePluginWithRestart() throws IOException {\n        assumeNotWindows();\n        String name \u003d \"credentials\";\n        assertThat(installTestPlugin(name), succeeded());\n        disablePlugin(name);\n        assertThat(enablePlugins(\"-restart\", name), succeeded());\n        assertJenkinsInQuietMode();\n    }","advisory":"JENKINS-52950"},{"className":"hudson.cli.EnablePluginCommandTest","methodSignature":"hudson.cli.EnablePluginCommandTest.enableNoPluginsWithRestartIsNoOp:void()","methodSource":"@Test\n    @Issue(\"JENKINS-52950\")\n    public void enableNoPluginsWithRestartIsNoOp() {\n        assumeNotWindows();\n        String name \u003d \"variant\";\n        assertThat(installTestPlugin(name), succeeded());\n        assertThat(enablePlugins(\"-restart\", name), succeeded());\n        assertJenkinsNotInQuietMode();\n    }","advisory":"JENKINS-52950"},{"className":"hudson.cli.GetJobCommandTest","methodSignature":"hudson.cli.GetJobCommandTest.withFolders:void()","methodSource":"@Issue(\"JENKINS-20236\")\n    @Test public void withFolders() throws Exception {\n        MockFolder d \u003d j.createFolder(\"d\");\n        FreeStyleProject p \u003d d.createProject(FreeStyleProject.class, \"p\");\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"d/p\");\n        assertThat(result.stdout(), equalTo(p.getConfigFile().asString()));\n        assertThat(result, hasNoErrorOutput());\n        assertThat(result, succeeded());\n\n        result \u003d command.invokeWithArgs(\"d\");\n        assertThat(result.stdout(), equalTo(d.getConfigFile().asString()));\n        assertThat(result, hasNoErrorOutput());\n        assertThat(result, succeeded());\n    }","advisory":"JENKINS-20236"},{"className":"hudson.cli.GetNodeCommandTest","methodSignature":"hudson.cli.GetNodeCommandTest.getNodeShouldFailWithoutComputerExtendedReadPermission:void()","methodSource":"@Test public void getNodeShouldFailWithoutComputerExtendedReadPermission() throws Exception {\n\n        // JENKINS-65578 workaround\n        Computer.EXTENDED_READ.enabled \u003d false;\n\n        j.createSlave(\"MyAgent\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"MyAgent\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Configure permission\"));\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n    }"},{"className":"hudson.cli.GetNodeCommandTest","methodSignature":"hudson.cli.GetNodeCommandTest.getNodeShouldYieldConfigXml:void()","methodSource":"@Test public void getNodeShouldYieldConfigXml() throws Exception {\n\n        j.createSlave(\"MyAgent\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.EXTENDED_READ, Jenkins.READ)\n                .invokeWithArgs(\"MyAgent\")\n        ;\n\n        assertThat(result.stdout(), startsWith(\"\u003c?xml version\u003d\\\"1.1\\\" encoding\u003d\\\"UTF-8\\\"?\u003e\"));\n        assertThat(result.stdout(), containsString(\"\u003cname\u003eMyAgent\u003c/name\u003e\"));\n        assertThat(result, hasNoErrorOutput());\n        assertThat(result, succeeded());\n    }"},{"className":"hudson.cli.GetNodeCommandTest","methodSignature":"hudson.cli.GetNodeCommandTest.getNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test public void getNodeShouldFailIfNodeDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.EXTENDED_READ, Jenkins.READ)\n                .invokeWithArgs(\"MyAgent\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: No such node \u0027MyAgent\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n    }"},{"className":"hudson.cli.GetNodeCommandTest","methodSignature":"hudson.cli.GetNodeCommandTest.getNodeShouldFailForBuiltInNode:void()","methodSource":"@Issue(\"SECURITY-281\")\n    @Test\n    public void getNodeShouldFailForBuiltInNode() {\n        CLICommandInvoker.Result result \u003d command.authorizedTo(Computer.EXTENDED_READ, Jenkins.READ).invokeWithArgs(\"\");\n        assertThat(result.stderr(), containsString(\"No such node \u0027\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n\n        // old name\n        result \u003d command.authorizedTo(Computer.EXTENDED_READ, Jenkins.READ).invokeWithArgs(\"(master)\");\n        assertThat(result.stderr(), containsString(\"No such node \u0027(master)\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n\n        // new name\n        result \u003d command.authorizedTo(Computer.EXTENDED_READ, Jenkins.READ).invokeWithArgs(\"(built-in)\");\n        assertThat(result.stderr(), containsString(\"No such node \u0027(built-in)\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n    }","advisory":"SECURITY-281"},{"className":"hudson.cli.GetViewCommandTest","methodSignature":"hudson.cli.GetViewCommandTest.getViewShouldFailWithoutViewReadPermission:void()","methodSource":"@Test public void getViewShouldFailWithoutViewReadPermission() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aView\")\n        ;\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }"},{"className":"hudson.cli.GetViewCommandTest","methodSignature":"hudson.cli.GetViewCommandTest.getViewShouldYieldConfigXml:void()","methodSource":"@Test public void getViewShouldYieldConfigXml() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(View.READ, Jenkins.READ)\n                .invokeWithArgs(\"aView\")\n        ;\n\n        assertThat(result, succeeded());\n        assertThat(result, hasNoErrorOutput());\n        assertThat(result.stdout(), startsWith(\"\u003c?xml version\u003d\\\"1.1\\\" encoding\u003d\\\"UTF-8\\\"?\u003e\"));\n        assertThat(result.stdout(), containsString(\"\u003cname\u003eaView\u003c/name\u003e\"));\n    }"},{"className":"hudson.cli.GetViewCommandTest","methodSignature":"hudson.cli.GetViewCommandTest.getViewShouldFailIfViewDoesNotExist:void()","methodSource":"@Test public void getViewShouldFailIfViewDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(View.READ, Jenkins.READ)\n                .invokeWithArgs(\"never_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named never_created inside view Jenkins\"));\n    }"},{"className":"hudson.cli.GroovyshCommandTest","methodSignature":"hudson.cli.GroovyshCommandTest.authentication:void()","methodSource":"@Issue(\"JENKINS-17929\")\n    @Test public void authentication() {\n        CLICommandInvoker.Result result \u003d new CLICommandInvoker(r, new GroovyshCommand())\n            .authorizedTo(Jenkins.READ, Jenkins.ADMINISTER)\n            .withStdin(new ByteArrayInputStream(\"println(jenkins.model.Jenkins.instance.getClass().name)\\n:quit\\n\".getBytes(Charset.defaultCharset())))\n            .invoke();\n        assertThat(result, succeeded());\n        assertThat(result, hasNoErrorOutput());\n        assertThat(result.stdout(), containsString(\"hudson.model.Hudson\"));\n    }","advisory":"JENKINS-17929"},{"className":"hudson.cli.HelpCommandTest","methodSignature":"hudson.cli.HelpCommandTest.getHelpRunningCommand:void()","methodSource":"@Test public void getHelpRunningCommand() {\n\n        CLICommandInvoker command \u003d new CLICommandInvoker(j, new HelpCommand());\n\n        String generalHelp \u003d command.invoke().stderr();\n\n        assertContainsOverviewOfClassCommand(generalHelp);\n        assertContainsOverviewOfMethodCommand(generalHelp);\n\n        Result result \u003d command.invokeWithArgs(ClassCommand.NAME);\n        assertThat(result, succeeded());\n        assertThat(result, hasNoStandardOutput());\n\n        assertContainsUsageOfClassCommand(result.stderr());\n\n        result \u003d command.invokeWithArgs(\"offline-node\");\n\n        assertThat(result, succeeded());\n        assertThat(result, hasNoStandardOutput());\n\n        assertContainsUsageOfMethodCommand(result.stderr());\n    }"},{"className":"hudson.cli.HelpCommandTest","methodSignature":"hudson.cli.HelpCommandTest.getHelpUsingJenkinsUI:void()","methodSource":"@Test public void getHelpUsingJenkinsUI() throws Exception {\n\n        WebClient wc \u003d j.createWebClient();\n        String generalHelp \u003d wc.goTo(\"cli\").asNormalizedText();\n\n        assertContainsOverviewOfClassCommand(generalHelp);\n        assertContainsOverviewOfMethodCommand(generalHelp);\n\n        assertContainsUsageOfClassCommand(wc.goTo(\"cli/command/class-command\").asNormalizedText());\n        assertContainsUsageOfMethodCommand(wc.goTo(\"cli/command/offline-node\").asNormalizedText());\n    }"},{"className":"hudson.cli.InstallPluginCommandTest","methodSignature":"hudson.cli.InstallPluginCommandTest.fromStdin:void()","methodSource":"@Issue(\"JENKINS-41745\")\n    @Test\n    public void fromStdin() {\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n        assertThat(new CLICommandInvoker(r, \"install-plugin\").\n                withStdin(InstallPluginCommandTest.class.getResourceAsStream(\"/plugins/token-macro.hpi\")).\n                invokeWithArgs(\"-deploy\", \"\u003d\"),\n            CLICommandInvoker.Matcher.succeeded());\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n    }","advisory":"JENKINS-41745"},{"className":"hudson.cli.ListJobsCommandTest","methodSignature":"hudson.cli.ListJobsCommandTest.getAllJobsFromView:void()","methodSource":"@Test public void getAllJobsFromView() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"Folder\");\n        MockFolder nestedFolder \u003d folder.createProject(MockFolder.class, \"NestedFolder\");\n        FreeStyleProject job \u003d folder.createProject(FreeStyleProject.class, \"job\");\n        FreeStyleProject nestedJob \u003d nestedFolder.createProject(FreeStyleProject.class, \"nestedJob\");\n\n        ListView view \u003d new ListView(\"OuterFolder\");\n        view.setRecurse(true);\n        j.jenkins.addView(view);\n\n        ((DirectlyModifiableView) j.jenkins.getView(\"OuterFolder\")).add(folder);\n        ((DirectlyModifiableView) j.jenkins.getView(\"OuterFolder\")).add(job);\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"OuterFolder\");\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n        assertThat(result.stdout(), containsString(\"Folder\"));\n        assertThat(result.stdout(), containsString(\"job\"));\n        assertThat(result.stdout(), not(containsString(\"nestedJob\")));\n    }"},{"className":"hudson.cli.ListJobsCommandTest","methodSignature":"hudson.cli.ListJobsCommandTest.getAllJobsFromFolder:void()","methodSource":"@Issue(\"JENKINS-48220\")\n    @Test public void getAllJobsFromFolder() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"Folder\");\n        MockFolder nestedFolder \u003d folder.createProject(MockFolder.class, \"NestedFolder\");\n\n        FreeStyleProject job \u003d folder.createProject(FreeStyleProject.class, \"job\");\n        FreeStyleProject nestedJob \u003d nestedFolder.createProject(FreeStyleProject.class, \"nestedJob\");\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"Folder\");\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n        assertThat(result.stdout(), containsString(\"job\"));\n        assertThat(result.stdout(), containsString(\"NestedFolder\"));\n        assertThat(result.stdout(), not(containsString(\"nestedJob\")));\n    }","advisory":"JENKINS-48220"},{"className":"hudson.cli.ListJobsCommandTest","methodSignature":"hudson.cli.ListJobsCommandTest.getAllJobsFromFolderWithMatrixProject:void()","methodSource":"@Issue(\"JENKINS-18393\")\n    @Test public void getAllJobsFromFolderWithMatrixProject() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"Folder\");\n\n        FreeStyleProject job1 \u003d folder.createProject(FreeStyleProject.class, \"job1\");\n        FreeStyleProject job2 \u003d folder.createProject(FreeStyleProject.class, \"job2\");\n        MatrixProject matrixProject \u003d folder.createProject(MatrixProject.class, \"mp\");\n\n        matrixProject.setDisplayName(\"downstream\");\n        matrixProject.setAxes(new AxisList(\n                new Axis(\"axis\", \"a\", \"b\")\n        ));\n\n        Label label \u003d Label.get(\"aws-linux-dummy\");\n        matrixProject.setAssignedLabel(label);\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"Folder\");\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n        assertThat(result.stdout(), containsString(\"job1\"));\n        assertThat(result.stdout(), containsString(\"job2\"));\n        assertThat(result.stdout(), containsString(\"mp\"));\n    }","advisory":"JENKINS-18393"},{"className":"hudson.cli.ListJobsCommandTest","methodSignature":"hudson.cli.ListJobsCommandTest.failForMatrixProject:void()","methodSource":"@Issue(\"JENKINS-18393\")\n    @Test public void failForMatrixProject() throws Exception {\n        MatrixProject matrixProject \u003d j.createProject(MatrixProject.class, \"mp\");\n\n        CLICommandInvoker.Result result \u003d command.invokeWithArgs(\"MatrixJob\");\n        assertThat(result, CLICommandInvoker.Matcher.failedWith(3));\n        assertThat(result.stdout(), is(emptyString()));\n        assertThat(result.stderr(), containsString(\"No view or item group with the given name \u0027MatrixJob\u0027 found.\"));\n    }","advisory":"JENKINS-18393"},{"className":"hudson.cli.ListPluginsCommandTest","methodSignature":"hudson.cli.ListPluginsCommandTest.listPluginsExpectedUsage:void()","methodSource":"@Test\n    public void listPluginsExpectedUsage() {\n        assertNull(j.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n        CLICommandInvoker.Result result \u003d new CLICommandInvoker(j, new ListPluginsCommand())\n                .invoke();\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n        assertThat(result, not(CLICommandInvoker.Matcher.hasNoStandardOutput()));\n        assertThat(result.stdout(), not(containsString(\"token-macro\")));\n\n        assertThat(new CLICommandInvoker(j, new InstallPluginCommand()).\n                        withStdin(ListPluginsCommandTest.class.getResourceAsStream(\"/plugins/token-macro.hpi\")).\n                        invokeWithArgs(\"-name\", \"token-macro\", \"-deploy\", \"\u003d\"),\n                CLICommandInvoker.Matcher.succeeded());\n        assertNotNull(j.jenkins.getPluginManager().getPlugin(\"token-macro\"));\n\n        result \u003d new CLICommandInvoker(j, new ListPluginsCommand())\n                .invoke()\n        ;\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n        assertThat(result.stdout(), containsString(\"token-macro\"));\n    }"},{"className":"hudson.cli.ListPluginsCommandTest","methodSignature":"hudson.cli.ListPluginsCommandTest.onlyAccessibleForAdmin:void()","methodSource":"@Test\n    @Issue(\"SECURITY-771\")\n    public void onlyAccessibleForAdmin() {\n        CLICommandInvoker.Result result \u003d new CLICommandInvoker(j, new ListPluginsCommand())\n                .authorizedTo(Jenkins.READ)\n                .invoke();\n        assertThat(result, CLICommandInvoker.Matcher.failedWith(6 /* not authorized */));\n\n        result \u003d new CLICommandInvoker(j, new ListPluginsCommand())\n                .authorizedTo(Jenkins.ADMINISTER)\n                .invoke()\n        ;\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n    }","advisory":"SECURITY-771"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldFailWithoutComputerDisconnectPermission:void()","methodSource":"@Test\n    public void offlineNodeShouldFailWithoutComputerDisconnectPermission() throws Exception {\n        j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Disconnect permission\"));\n        assertThat(result.stderr(), not(containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test\n    public void offlineNodeShouldFailIfNodeDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such agent \\\"never_created\\\" exists.\"));\n        assertThat(result.stderr(), not(containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT)));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnOnlineNode:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnOnlineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(false));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnOfflineNode:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnOfflineNode() throws Exception {\n        Slave slave \u003d inboundAgents.createAgent(j, InboundAgentRule.Options.newBuilder().name(\"aNode\").skipStart().build());\n        slave.toComputer().setTemporarilyOffline(true, null);\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnDisconnectedNode:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnDisconnectedNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n        slave.toComputer().disconnect();\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(false));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnOnlineNodeWithCause:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnOnlineNodeWithCause() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(false));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnOfflineNodeWithCause:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnOfflineNodeWithCause() throws Exception {\n        Slave slave \u003d inboundAgents.createAgent(j, InboundAgentRule.Options.newBuilder().name(\"aNode\").skipStart().build());\n        slave.toComputer().setTemporarilyOffline(true, null);\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnDisconnectedNodeWithCause:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnDisconnectedNodeWithCause() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), equalTo(null));\n        slave.toComputer().disconnect();\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(false));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnBuildingNode:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnBuildingNode() throws Exception {\n        final OneShotEvent finish \u003d new OneShotEvent();\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.setAssignedNode(slave);\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(build.isBuilding(), equalTo(true));\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnBuildingNodeWithCause:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnBuildingNodeWithCause() throws Exception {\n        final OneShotEvent finish \u003d new OneShotEvent();\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.setAssignedNode(slave);\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n        assertThat(slave.toComputer().isTemporarilyOffline(), equalTo(true));\n        assertThat(slave.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(build.isBuilding(), equalTo(true));\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeManyShouldSucceed:void()","methodSource":"@Test\n    public void offlineNodeManyShouldSucceed() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        DumbSlave slave3 \u003d j.createSlave(\"aNode3\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n        slave3.toComputer().waitUntilOnline();\n        assertThat(slave3.toComputer().isOnline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(slave3.toComputer().isOffline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave3.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeManyShouldSucceedWithCause:void()","methodSource":"@Test\n    public void offlineNodeManyShouldSucceedWithCause() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        DumbSlave slave3 \u003d j.createSlave(\"aNode3\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n        slave3.toComputer().waitUntilOnline();\n        assertThat(slave3.toComputer().isOnline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave3.toComputer().isOffline(), equalTo(true));\n        assertThat(slave3.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave3.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeManyShouldFailIfANodeDoesNotExist:void()","methodSource":"@Test\n    public void offlineNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeManyShouldFailIfANodeDoesNotExistWithCause:void()","methodSource":"@Test\n    public void offlineNodeManyShouldFailIfANodeDoesNotExistWithCause() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\", \"-m\", \"aCause\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwice:void()","methodSource":"@Test\n    public void offlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode1\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(null));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwiceWithCause:void()","methodSource":"@Test\n    public void offlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwiceWithCause() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        slave1.toComputer().waitUntilOnline();\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), equalTo(null));\n        slave2.toComputer().waitUntilOnline();\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), equalTo(null));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode1\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(slave1.toComputer().isOffline(), equalTo(true));\n        assertThat(slave1.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave1.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n        assertThat(slave2.toComputer().isOffline(), equalTo(true));\n        assertThat(slave2.toComputer().getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) slave2.toComputer().getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnMaster:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnMaster() {\n        final Computer masterComputer \u003d Jenkins.get().getComputer(\"\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"\");\n        assertThat(result, succeededSilently());\n        assertThat(masterComputer.isOffline(), equalTo(true));\n        assertThat(masterComputer.isTemporarilyOffline(), equalTo(true));\n        assertThat(masterComputer.getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) masterComputer.getOfflineCause()).message, equalTo(null));\n    }"},{"className":"hudson.cli.OfflineNodeCommandTest","methodSignature":"hudson.cli.OfflineNodeCommandTest.offlineNodeShouldSucceedOnMasterWithCause:void()","methodSource":"@Test\n    public void offlineNodeShouldSucceedOnMasterWithCause() {\n        final Computer masterComputer \u003d Jenkins.get().getComputer(\"\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.DISCONNECT, Jenkins.READ)\n                .invokeWithArgs(\"\", \"-m\", \"aCause\");\n        assertThat(result, succeededSilently());\n        assertThat(masterComputer.isOffline(), equalTo(true));\n        assertThat(masterComputer.isTemporarilyOffline(), equalTo(true));\n        assertThat(masterComputer.getOfflineCause(), instanceOf(OfflineCause.ByCLI.class));\n        assertThat(((OfflineCause.ByCLI) masterComputer.getOfflineCause()).message, equalTo(\"aCause\"));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldFailWithoutComputerConnectPermission:void()","methodSource":"@Test public void onlineNodeShouldFailWithoutComputerConnectPermission() throws Exception {\n        j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Connect permission\"));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test public void onlineNodeShouldFailIfNodeDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such agent \\\"never_created\\\" exists.\"));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceed:void()","methodSource":"@Test public void onlineNodeShouldSucceed() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceedOnOnlineNode:void()","methodSource":"@Test public void onlineNodeShouldSucceedOnOnlineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceedOnOfflineNode:void()","methodSource":"@Test public void onlineNodeShouldSucceedOnOfflineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        slave.toComputer().setTemporarilyOffline(true);\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceedOnDisconnectedNode:void()","methodSource":"@Test public void onlineNodeShouldSucceedOnDisconnectedNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        slave.toComputer().disconnect();\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceedOnDisconnectingNode:void()","methodSource":"@Test public void onlineNodeShouldSucceedOnDisconnectingNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        slave.toComputer().disconnect();\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(false));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceedOnBuildingOfflineNode:void()","methodSource":"@Test public void onlineNodeShouldSucceedOnBuildingOfflineNode() throws Exception {\n        final OneShotEvent finish \u003d new OneShotEvent();\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        if (!slave.toComputer().isOnline()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.setAssignedNode(slave);\n        final FreeStyleBuild build \u003d startBlockingAndFinishingBuild(project, finish);\n\n        slave.toComputer().setTemporarilyOffline(true);\n        slave.toComputer().waitUntilOffline();\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        if (slave.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until going online is in progress...\");\n            slave.toComputer().waitUntilOnline();\n        }\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n        assertThat(build.isBuilding(), equalTo(true));\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeManyShouldSucceed:void()","methodSource":"@Test public void onlineNodeManyShouldSucceed() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n        DumbSlave slave3 \u003d j.createSlave(\"aNode3\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode3\");\n        assertThat(result, succeededSilently());\n        if (slave1.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode1 going online is in progress...\");\n            slave1.toComputer().waitUntilOnline();\n        }\n        if (slave2.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode2 going online is in progress...\");\n            slave2.toComputer().waitUntilOnline();\n        }\n        if (slave3.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode3 going online is in progress...\");\n            slave3.toComputer().waitUntilOnline();\n        }\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n        assertThat(slave3.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeManyShouldFailIfANodeDoesNotExist:void()","methodSource":"@Test public void onlineNodeManyShouldFailIfANodeDoesNotExist() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"never_created\");\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such agent \\\"never_created\\\" exists. Did you mean \\\"aNode1\\\"?\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n        if (slave1.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode1 going online is in progress...\");\n            slave1.toComputer().waitUntilOnline();\n        }\n        if (slave2.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode2 going online is in progress...\");\n            slave2.toComputer().waitUntilOnline();\n        }\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwice:void()","methodSource":"@Test public void onlineNodeManyShouldSucceedEvenANodeIsSpecifiedTwice() throws Exception {\n        DumbSlave slave1 \u003d j.createSlave(\"aNode1\", \"\", null);\n        DumbSlave slave2 \u003d j.createSlave(\"aNode2\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"aNode1\", \"aNode2\", \"aNode1\");\n        assertThat(result, succeededSilently());\n        if (slave1.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode1 going online is in progress...\");\n            slave1.toComputer().waitUntilOnline();\n        }\n        if (slave2.toComputer().isConnecting()) {\n            System.out.println(\"Waiting until aNode2 going online is in progress...\");\n            slave2.toComputer().waitUntilOnline();\n        }\n        assertThat(slave1.toComputer().isOnline(), equalTo(true));\n        assertThat(slave2.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.OnlineNodeCommandTest","methodSignature":"hudson.cli.OnlineNodeCommandTest.onlineNodeShouldSucceedOnMaster:void()","methodSource":"@Test public void onlineNodeShouldSucceedOnMaster() {\n        final Computer masterComputer \u003d j.jenkins.getComputer(\"\");\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"\");\n        assertThat(result, succeededSilently());\n        assertThat(masterComputer.isOnline(), equalTo(true));\n\n        result \u003d command\n                .authorizedTo(Computer.CONNECT, Jenkins.READ)\n                .invokeWithArgs(\"\");\n        assertThat(result, succeededSilently());\n        assertThat(masterComputer.isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldFailWithoutAdministerPermission:void()","methodSource":"@Test\n    public void quietDownShouldFailWithoutAdministerPermission() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(VIEWER)\n                .invoke();\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \" + VIEWER + \" is missing the Overall/Administer permission\"));\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccess:void()","methodSource":"@Test\n    public void quietDownShouldSuccess() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invoke();\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlock:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlock() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-block\");\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithTimeout:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithTimeout() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-timeout\", \"0\");\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithReason:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithReason() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-reason\", TEST_REASON);\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n        assertThat(j.jenkins.getQuietDownReason(), equalTo(TEST_REASON));\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndTimeout:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndTimeout() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndTimeoutAndReason:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndTimeoutAndReason() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-block\", \"-timeout\", \"0\", \"-reason\", TEST_REASON);\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n        assertThat(j.jenkins.getQuietDownReason(), equalTo(TEST_REASON));\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldFailWithEmptyTimeout:void()","methodSource":"@Test\n    public void quietDownShouldFailWithEmptyTimeout() {\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-timeout\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Option \\\"-timeout\\\" takes an operand\"));\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessOnAlreadyQuietDownedJenkins:void()","methodSource":"@Test\n    public void quietDownShouldSuccessOnAlreadyQuietDownedJenkins() {\n        j.jenkins.doQuietDown();\n        assertJenkinsInQuietMode();\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invoke();\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockOnAlreadyQuietDownedJenkins() throws Exception {\n        j.jenkins.doQuietDown(true, 0, null, false);\n        assertJenkinsInQuietMode();\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-block\");\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndTimeoutOnAlreadyQuietDownedJenkins:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndTimeoutOnAlreadyQuietDownedJenkins() throws Exception {\n        j.jenkins.doQuietDown(true, 0, null, false);\n        assertJenkinsInQuietMode();\n        final long time_before \u003d System.currentTimeMillis();\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invokeWithArgs(\"-block\", \"-timeout\", \"20000\");\n        assertThat(result, succeededSilently());\n        assertThat(System.currentTimeMillis() \u003c time_before + 20000, equalTo(true));\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessAndRunningExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessAndRunningExecutor() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final CLICommandInvoker.Result result \u003d command\n                .asUser(ADMIN)\n                .invoke();\n        assertThat(result, succeededSilently());\n        assertJenkinsInQuietMode();\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndRunningExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndRunningExecutor() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool \u003d Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli \u003d new OneShotEvent();\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        boolean timeoutOccurred \u003d false;\n        final FutureTask exec_task \u003d new FutureTask(() -\u003e {\n            assertJenkinsNotInQuietMode();\n            beforeCli.signal();\n            final CLICommandInvoker.Result result \u003d command\n                    .asUser(ADMIN)\n                    .invokeWithArgs(\"-block\");\n            fail(\"Should never return from previous CLI call!\");\n            return null;\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        }\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndZeroTimeoutAndRunningExecutor() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool \u003d Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli \u003d new OneShotEvent();\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        boolean timeoutOccurred \u003d false;\n        final FutureTask exec_task \u003d new FutureTask(() -\u003e {\n            assertJenkinsNotInQuietMode();\n            beforeCli.signal();\n            final CLICommandInvoker.Result result \u003d command\n                    .asUser(ADMIN)\n                    .invokeWithArgs(\"-block\", \"-timeout\", \"0\");\n            fail(\"Should never return from previous CLI call!\");\n            return null;\n        });\n        try {\n            threadPool.submit(exec_task);\n            beforeCli.block();\n            assertJenkinsInQuietMode();\n            exec_task.get(10, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        }\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        exec_task.cancel(true);\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockPlusExpiredTimeoutAndRunningExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockPlusExpiredTimeoutAndRunningExecutor() throws Exception {\n        final int TIMEOUT \u003d 5000;\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool \u003d Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli \u003d new OneShotEvent();\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final FutureTask exec_task \u003d new FutureTask(() -\u003e {\n            assertJenkinsNotInQuietMode();\n            final long time_before \u003d System.currentTimeMillis();\n            beforeCli.signal();\n            final CLICommandInvoker.Result result \u003d command\n                    .asUser(ADMIN)\n                    .invokeWithArgs(\"-block\", \"-timeout\", Integer.toString(TIMEOUT));\n            assertThat(result, succeededSilently());\n            assertThat(System.currentTimeMillis() \u003e time_before + TIMEOUT, equalTo(true));\n            assertJenkinsInQuietMode();\n            return null;\n        });\n        threadPool.submit(exec_task);\n        beforeCli.block();\n        assertJenkinsInQuietMode();\n        try {\n            exec_task.get(2 * TIMEOUT, TimeUnit.MILLISECONDS);\n        } catch (TimeoutException e) {\n            throw new AssertionError(\"Blocking call didn\u0027t finish after timeout!\", e);\n        }\n        assertThat(exec_task.isDone(), equalTo(true));\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockPlusNonExpiredTimeoutAndRunningExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockPlusNonExpiredTimeoutAndRunningExecutor() throws Exception {\n        final int TIMEOUT \u003d 5000;\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool \u003d Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli \u003d new OneShotEvent();\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final FutureTask\u003cVoid\u003e exec_task \u003d new FutureTask\u003c\u003e(() -\u003e {\n            assertJenkinsNotInQuietMode();\n            beforeCli.signal();\n            final CLICommandInvoker.Result result \u003d command\n                    .asUser(ADMIN)\n                    .invokeWithArgs(\"-block\", \"-timeout\", Integer.toString(2 * TIMEOUT));\n            fail(\"Blocking call shouldn\u0027t finish, should be killed by called thread!\");\n            return null;\n        });\n        threadPool.submit(exec_task);\n        beforeCli.block();\n        assertJenkinsInQuietMode();\n        boolean timeoutOccurred \u003d false;\n        try {\n            exec_task.get(TIMEOUT, TimeUnit.MILLISECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        }\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        assertJenkinsInQuietMode();\n        logging.record(XmlFile.class, Level.FINEST);\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndFinishingExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndFinishingExecutor() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool \u003d Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli \u003d new OneShotEvent();\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds(), hasSize(1));\n\n        boolean timeoutOccurred \u003d false;\n        final FutureTask exec_task \u003d new FutureTask(() -\u003e {\n            assertJenkinsNotInQuietMode();\n            final long time_before \u003d System.currentTimeMillis();\n            beforeCli.signal();\n            final CLICommandInvoker.Result result \u003d command\n                    .asUser(ADMIN)\n                    .invokeWithArgs(\"-block\");\n            assertThat(result, succeededSilently());\n            assertThat(System.currentTimeMillis() \u003e time_before + 1000, equalTo(true));\n            assertJenkinsInQuietMode();\n            return null;\n        });\n        threadPool.submit(exec_task);\n        beforeCli.block();\n        assertJenkinsInQuietMode();\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        assertJenkinsInQuietMode();\n\n        get(exec_task);\n\n        assertJenkinsInQuietMode();\n    }"},{"className":"hudson.cli.QuietDownCommandTest","methodSignature":"hudson.cli.QuietDownCommandTest.quietDownShouldSuccessWithBlockAndNonExpiredTimeoutAndFinishingExecutor:void()","methodSource":"@Test\n    public void quietDownShouldSuccessWithBlockAndNonExpiredTimeoutAndFinishingExecutor() throws Exception {\n        final int TIMEOUT \u003d 5000;\n        final FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        final ExecutorService threadPool \u003d Executors.newSingleThreadExecutor();\n        final OneShotEvent beforeCli \u003d new OneShotEvent();\n        final OneShotEvent finish \u003d new OneShotEvent();\n        final FreeStyleBuild build \u003d OnlineNodeCommandTest.startBlockingAndFinishingBuild(project, finish);\n\n        final FutureTask exec_task \u003d new FutureTask(() -\u003e {\n            assertJenkinsNotInQuietMode();\n            final long time_before \u003d System.currentTimeMillis();\n            beforeCli.signal();\n            final CLICommandInvoker.Result result \u003d command\n                    .asUser(ADMIN)\n                    .invokeWithArgs(\"-block\", \"-timeout\", Integer.toString(TIMEOUT));\n            assertThat(result, succeededSilently());\n            assertThat(System.currentTimeMillis() \u003e time_before + 1000, equalTo(true));\n            assertThat(System.currentTimeMillis() \u003c time_before + TIMEOUT, equalTo(true));\n            assertJenkinsInQuietMode();\n            return null;\n        });\n        threadPool.submit(exec_task);\n        beforeCli.block();\n        assertJenkinsInQuietMode();\n\n        finish.signal();\n        j.waitForCompletion(build);\n        assertThat(build.isBuilding(), equalTo(false));\n        j.assertBuildStatusSuccess(build);\n        assertJenkinsInQuietMode();\n        get(exec_task);\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadConfigurationShouldFailWithoutAdministerPermission:void()","methodSource":"@Test\n    public void reloadConfigurationShouldFailWithoutAdministerPermission() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command.invoke();\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"user is missing the Overall/Administer permission\"));\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadMasterConfig:void()","methodSource":"@Test\n    public void reloadMasterConfig() throws Exception {\n        Node node \u003d j.jenkins;\n        node.setLabelString(\"oldLabel\");\n\n        modifyNode(node);\n\n        assertThat(node.getLabelString(), equalTo(\"newLabel\"));\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadSlaveConfig:void()","methodSource":"@Test\n    public void reloadSlaveConfig() throws Exception {\n        Node node \u003d j.createSlave(\"a_slave\", \"oldLabel\", null);\n\n        modifyNode(node);\n\n        node \u003d j.jenkins.getNode(\"a_slave\");\n        assertThat(node.getLabelString(), equalTo(\"newLabel\"));\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadUserConfig:void()","methodSource":"@Test\n    public void reloadUserConfig() throws Exception {\n        String originalName \u003d \"oldName\";\n        String temporaryName \u003d \"newName\";\n        {\n        User user \u003d User.get(\"some_user\", true, null);\n        user.setFullName(originalName);\n        user.save();\n        assertThat(user.getFullName(), equalTo(originalName));\n\n        user.setFullName(temporaryName);\n        assertThat(user.getFullName(), equalTo(temporaryName));\n        }\n        reloadJenkinsConfigurationViaCliAndWait();\n        {\n        User user \u003d User.getById(\"some_user\", false);\n        assertThat(user.getFullName(), equalTo(originalName));\n        }\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadJobConfig:void()","methodSource":"@Test\n    public void reloadJobConfig() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"a_project\");\n        project.setDescription(\"oldDescription\");\n\n        replace(\"jobs/a_project/config.xml\", \"oldDescription\", \"newDescription\");\n\n        assertThat(project.getDescription(), equalTo(\"oldDescription\"));\n\n        reloadJenkinsConfigurationViaCliAndWait();\n\n        project \u003d j.jenkins.getItem(\"a_project\", j.jenkins, FreeStyleProject.class);\n        assertThat(project.getDescription(), equalTo(\"newDescription\"));\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadViewConfig:void()","methodSource":"@Test\n    public void reloadViewConfig() throws Exception {\n        ListView view \u003d new ListView(\"a_view\");\n        j.jenkins.addView(view);\n\n        view.setIncludeRegex(\"oldIncludeRegex\");\n        view.save();\n\n        replace(\"config.xml\", \"oldIncludeRegex\", \"newIncludeRegex\");\n\n        assertThat(view.getIncludeRegex(), equalTo(\"oldIncludeRegex\"));\n\n        reloadJenkinsConfigurationViaCliAndWait();\n\n        view \u003d (ListView) j.jenkins.getView(\"a_view\");\n        assertThat(view.getIncludeRegex(), equalTo(\"newIncludeRegex\"));\n    }"},{"className":"hudson.cli.ReloadConfigurationCommandTest","methodSignature":"hudson.cli.ReloadConfigurationCommandTest.reloadDescriptorConfig:void()","methodSource":"@Ignore // Until fixed JENKINS-8217\n    @Test\n    public void reloadDescriptorConfig() throws Exception {\n        Mailer.DescriptorImpl desc \u003d j.jenkins.getExtensionList(Mailer.DescriptorImpl.class).get(0);\n        desc.setDefaultSuffix(\"@oldSuffix\");\n        desc.save();\n\n        replace(\"hudson.tasks.Mailer.xml\", \"@oldSuffix\", \"@newSuffix\");\n\n        assertThat(desc.getDefaultSuffix(), equalTo(\"@oldSuffix\"));\n\n        reloadJenkinsConfigurationViaCliAndWait();\n\n        assertThat(desc.getDefaultSuffix(), equalTo(\"@newSuffix\"));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobShouldFailWithoutJobConfigurePermission:void()","methodSource":"@Test public void reloadJobShouldFailWithoutJobConfigurePermission() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Job/Configure permission\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobShouldFailWithoutJobReadPermission:void()","methodSource":"@Test public void reloadJobShouldFailWithoutJobReadPermission() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such item ‘aProject’ exists.\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobShouldSucceed:void()","methodSource":"@Test public void reloadJobShouldSucceed() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        changeProjectOnTheDisc(project, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject\");\n\n        assertThat(result, succeededSilently());\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobShouldFailIfJobDoesNotExist:void()","methodSource":"@Test public void reloadJobShouldFailIfJobDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such item ‘never_created’ exists.\"));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobShouldFailIfJobDoesNotExistButNearExists:void()","methodSource":"@Test public void reloadJobShouldFailIfJobDoesNotExistButNearExists() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"never_created\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"never_created1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such item ‘never_created1’ exists. Perhaps you meant ‘never_created’?\"));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobManyShouldSucceed:void()","methodSource":"@Test public void reloadJobManyShouldSucceed() throws Exception {\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project3 \u003d j.createFreeStyleProject(\"aProject3\");\n        project3.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project2));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project3));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project3, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject3\");\n\n        assertThat(result, succeededSilently());\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project2));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project3));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobManyShouldFailIfFirstJobDoesNotExist:void()","methodSource":"@Test public void reloadJobManyShouldFailIfFirstJobDoesNotExist() throws Exception {\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project2));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"never_created\", \"aProject1\", \"aProject2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such item ‘never_created’ exists.\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project2));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobManyShouldFailIfMiddleJobDoesNotExist:void()","methodSource":"@Test public void reloadJobManyShouldFailIfMiddleJobDoesNotExist() throws Exception {\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project2));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"never_created\", \"aProject2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such item ‘never_created’ exists.\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project2));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobManyShouldFailIfLastJobDoesNotExist:void()","methodSource":"@Test public void reloadJobManyShouldFailIfLastJobDoesNotExist() throws Exception {\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project2));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"never_created\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created: No such item ‘never_created’ exists.\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project2));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobManyShouldFailIfMoreJobsDoNotExist:void()","methodSource":"@Test public void reloadJobManyShouldFailIfMoreJobsDoNotExist() throws Exception {\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project2));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"never_created1\", \"never_created2\", \"aProject2\");\n\n        assertThat(result, failedWith(5));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"never_created1: No such item ‘never_created1’ exists.\"));\n        assertThat(result.stderr(), containsString(\"never_created2: No such item ‘never_created2’ exists.\"));\n        assertThat(result.stderr(), containsString(\"ERROR: \" + CLICommand.CLI_LISTPARAM_SUMMARY_ERROR_TEXT));\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project2));\n    }"},{"className":"hudson.cli.ReloadJobCommandTest","methodSignature":"hudson.cli.ReloadJobCommandTest.reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice:void()","methodSource":"@Test public void reloadJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        project1.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        project2.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project2));\n\n        changeProjectOnTheDisc(project1, \"echo 1\", \"echo 2\");\n        changeProjectOnTheDisc(project2, \"echo 1\", \"echo 2\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Item.CONFIGURE, Jenkins.READ)\n                .invokeWithArgs(\"aProject1\", \"aProject2\", \"aProject1\");\n\n        assertThat(result, succeededSilently());\n\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project1));\n        j.assertLogContains(\"echo 2\", j.buildAndAssertSuccess(project2));\n    }"},{"className":"hudson.cli.RemoveJobFromViewCommandTest","methodSignature":"hudson.cli.RemoveJobFromViewCommandTest.removeJobShouldSucceed:void()","methodSource":"@Test public void removeJobShouldSucceed() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        ((DirectlyModifiableView) j.jenkins.getView(\"aView\")).add(project);\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(true));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(false));\n    }"},{"className":"hudson.cli.RemoveJobFromViewCommandTest","methodSignature":"hudson.cli.RemoveJobFromViewCommandTest.removeJobManyShouldSucceed:void()","methodSource":"@Test public void removeJobManyShouldSucceed() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n        ((DirectlyModifiableView) j.jenkins.getView(\"aView\")).add(project1);\n        ((DirectlyModifiableView) j.jenkins.getView(\"aView\")).add(project2);\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(2));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(true));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(true));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject1\", \"aProject2\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n    }"},{"className":"hudson.cli.RemoveJobFromViewCommandTest","methodSignature":"hudson.cli.RemoveJobFromViewCommandTest.removeJobManyShouldSucceedEvenAJobIsSpecifiedTwice:void()","methodSource":"@Test public void removeJobManyShouldSucceedEvenAJobIsSpecifiedTwice() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        ((DirectlyModifiableView) j.jenkins.getView(\"aView\")).add(project);\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(true));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\", \"aProject\");\n\n        assertThat(result, succeededSilently());\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(false));\n    }"},{"className":"hudson.cli.RunRangeCommand2Test","methodSignature":"hudson.cli.RunRangeCommand2Test.dummyRangeShouldFailIfJobNameIsEmptyOnEmptyJenkins:void()","methodSource":"@Test public void dummyRangeShouldFailIfJobNameIsEmptyOnEmptyJenkins() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds().size(), equalTo(1));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"\", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027\u0027\"));\n    }"},{"className":"hudson.cli.RunRangeCommand2Test","methodSignature":"hudson.cli.RunRangeCommand2Test.dummyRangeShouldFailIfJobNameIsSpaceOnEmptyJenkins:void()","methodSource":"@Test public void dummyRangeShouldFailIfJobNameIsSpaceOnEmptyJenkins() throws Exception {\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"aProject\"));\n        assertThat(((FreeStyleProject) j.jenkins.getItem(\"aProject\")).getBuilds().size(), equalTo(1));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\" \", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027 \u0027\"));\n    }"},{"className":"hudson.cli.RunRangeCommand2Test","methodSignature":"hudson.cli.RunRangeCommand2Test.dummyRangeShouldSuccessEvenTheBuildIsRunning:void()","methodSource":"@Test public void dummyRangeShouldSuccessEvenTheBuildIsRunning() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo 1\\r\\nping -n 10 127.0.0.1 \u003enul\") : new Shell(\"echo 1\\nsleep 10\"));\n        FreeStyleBuild build \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"echo 1\", build);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n        j.assertBuildStatusSuccess(j.waitForCompletion(build));\n    }"},{"className":"hudson.cli.RunRangeCommand2Test","methodSignature":"hudson.cli.RunRangeCommand2Test.dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue:void()","methodSource":"@Test public void dummyRangeShouldSuccessEvenTheBuildIsStuckInTheQueue() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(new Shell(\"echo 1\\nsleep 10\"));\n        project.setAssignedLabel(new LabelAtom(\"never_created\"));\n        assertNotNull(project.scheduleBuild2(0));\n        Thread.sleep(1000);\n        assertThat(\"Job wasn\u0027t scheduled properly - it isn\u0027t in the queue\",\n                project.isInQueue(), equalTo(true));\n        assertThat(\"Job wasn\u0027t scheduled properly - it is running on non-exist node\",\n                project.isBuilding(), equalTo(false));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"aProject\", \"1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n        assertTrue(j.jenkins.getQueue().cancel(project));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeShouldFailWithoutJobReadPermission:void()","methodSource":"@Test public void dummyRangeShouldFailWithoutJobReadPermission() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(),\n                containsString(String.format(\"ERROR: No such job \u0027%s\u0027\", PROJECT_NAME)));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeShouldFailIfJobDesNotExist:void()","methodSource":"@Test public void dummyRangeShouldFailIfJobDesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"never_created\", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeShouldFailIfJobNameIsEmpty:void()","methodSource":"@Test public void dummyRangeShouldFailIfJobNameIsEmpty() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\"\", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(),\n                containsString(String.format(\"ERROR: No such job \u0027\u0027; perhaps you meant \u0027%s\u0027?\", PROJECT_NAME)));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeShouldFailIfJobNameIsSpace:void()","methodSource":"@Test public void dummyRangeShouldFailIfJobNameIsSpace() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(\" \", \"1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(),\n                containsString(String.format(\"ERROR: No such job \u0027 \u0027; perhaps you meant \u0027%s\u0027?\", PROJECT_NAME)));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeShouldSuccessIfBuildDoesNotExist:void()","methodSource":"@Test public void dummyRangeShouldSuccessIfBuildDoesNotExist() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.valueOf(BUILDS + 1));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.valueOf(deleted[0]));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldSuccess:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldSuccess() {\n        // First\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n\n        // First with plus symbol \u0027+\u0027\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n\n        // In the middle\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"10\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 10\" + System.lineSeparator()));\n\n        // In the middle with plus symbol \u0027+\u0027\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+10\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 10\" + System.lineSeparator()));\n\n        // Last\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.valueOf(BUILDS));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(),\n                containsString(String.format(\"Builds: %s\" + System.lineSeparator(), BUILDS)));\n\n        // Last with the plus symbol \u0027+\u0027\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \u0027+\u0027 + String.valueOf(BUILDS));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(),\n                containsString(String.format(\"Builds: %s\" + System.lineSeparator(), BUILDS)));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldSuccessIfBuildNumberIsZero:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldSuccessIfBuildNumberIsZero() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+0\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldFailIfBuildNumberIsNegative:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsNegative() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldFailIfBuildNumberIsTooBig:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsTooBig() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2147483648\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272147483648\u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldFailIfBuildNumberIsInvalid:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsInvalid() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1a\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271a\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"aa\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027aa\u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldSuccessIfBuildNumberIsEmpty:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldSuccessIfBuildNumberIsEmpty() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldFailIfBuildNumberIsSpace:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsSpace() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \" \");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027 \u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldSuccessIfBuildNumberIsComma:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldSuccessIfBuildNumberIsComma() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \",\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberSingleShouldFailIfBuildNumberIsHyphen:void()","methodSource":"@Test public void dummyRangeNumberSingleShouldFailIfBuildNumberIsHyphen() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldSuccess:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldSuccess() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        // With plus symbol \u0027+\u0027\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,+2,4\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2,4\" + System.lineSeparator()));\n\n        // Build specified twice\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,1\" + System.lineSeparator()));\n\n        // Build with zero build number\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0,1,2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,0,2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,0\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldSuccessIfSomeBuildDoesNotExist:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldSuccessIfSomeBuildDoesNotExist() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,\" + deleted[0]);\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.format(\"1,%d,%d\", deleted[0], deleted[0] + 1));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(String.format(\"Builds: 1,%d\" + System.lineSeparator(), deleted[0] + 1)));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.format(\"%d,%d,%d\", deleted[0] - 1, deleted[0], deleted[0] + 1));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(String.format(\"Builds: %d,%d\" + System.lineSeparator(), deleted[0] - 1, deleted[0] + 1)));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsNegative:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsNegative() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1,2,3\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1,2,3\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,-2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,-2,3\u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,-3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,-3\u0027, expected string with a range M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsTooBig:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsTooBig() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2147483648,2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272147483648,2,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2147483648,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2147483648,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,2147483648\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,2147483648\u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsInvalid:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsInvalid() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1a,2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271a,2,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"aa,2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027aa,2,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2a,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2a,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,aa,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,aa,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,3a\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,3a\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,aa\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,aa\u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsEmpty() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \",2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027,2,3\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,,3\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,\u0027, expected correct notation M,N or M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsSpace:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsSpace() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \" ,2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027 ,2,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1, ,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271, ,3\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2, \");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2, \u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsComma:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsComma() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \",,2,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027,,2,3\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,,,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,,,3\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,,\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,,\u0027, expected correct notation M,N or M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen:void()","methodSource":"@Test public void dummyRangeNumberMultiShouldFailIfBuildNumberIsHyphen() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-,2,3\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-,2,3\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,-,3\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,-,3\u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1,2,-\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271,2,-\u0027, expected string with a range M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldSuccess:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldSuccess() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1-+2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1-+1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-\" + deleted[0]);\n        assertThat(result, succeeded());\n        String builds \u003d \"\";\n        boolean next \u003d false;\n        for (int i \u003d 1; i \u003c deleted[0]; i++) {\n            if (next)\n                builds +\u003d \",\";\n            builds +\u003d i;\n            next \u003d true;\n        }\n        assertThat(result.stdout(), containsString(\"Builds: \" + builds + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1-+\" + deleted[0]);\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + builds + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0-1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+0-+1\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0-2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+0-+2\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0-0\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+0-+0\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: \" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldSuccessIfSomeBuildDoesNotExist:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldSuccessIfSomeBuildDoesNotExist() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.format(\"%d-%d\", deleted[0], deleted[0] + 1));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(String.format(\"Builds: %d\" + System.lineSeparator(), deleted[0] + 1)));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.format(\"%d-%d\", deleted[0] - 1, deleted[0] + 1));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(String.format(\"Builds: %d,%d\" + System.lineSeparator(), deleted[0] - 1, deleted[0] + 1)));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, String.format(\"%d-%d\", deleted[0] - 1, deleted[0]));\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(String.format(\"Builds: %d\" + System.lineSeparator(), deleted[0] - 1)));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsZeroAndNegative:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsZeroAndNegative() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0--1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00270--1\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+0--1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027+0--1\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"0--2\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00270--2\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+0--2\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027+0--2\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-0\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-0\u0027, expected string with a range M-N where M\u003cN\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1-+0\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027+1-+0\u0027, expected string with a range M-N where M\u003cN\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2-0\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272-0\u0027, expected string with a range M-N where M\u003cN\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+2-+0\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027+2-+0\u0027, expected string with a range M-N where M\u003cN\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1-0\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1-0\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1-+0\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1-+0\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-2-0\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-2-0\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-2-+0\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-2-+0\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsANegativeNumber:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsANegativeNumber() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1-1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1-1\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1-+1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1-+1\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1-2\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1-2\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1-+2\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1-+2\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1--1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271--1\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1--1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027+1--1\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1--2\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271--2\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"+1--2\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027+1--2\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1--1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1--1\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-2--1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-2--1\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsTooBigNumber:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsTooBigNumber() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-2147483648\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-2147483648\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2147483648-1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272147483648-1\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2147483648-2147483648\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272147483648-2147483648\u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsInvalidNumber:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsInvalidNumber() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-2a\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-2a\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-aa\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-aa\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2a-2\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272a-2\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"aa-2\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027aa-2\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2a-2a\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272a-2a\u0027, expected number\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"aa-aa\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027aa-aa\u0027, expected number\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsEmptyNumber() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-\u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsSpace:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsSpace() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \" -1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027 -1\u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1- \");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271- \u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \" - \");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027 - \u0027, expected string with a range M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsComma:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsComma() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \",-1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027,-1\u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-,\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-,\u0027, expected string with a range M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \",-,\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u0027,-,\u0027, expected string with a range M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeContainsHyphen:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeContainsHyphen() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"--1\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"--1\\\" is not a valid option\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1--\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271--\u0027, expected correct notation M,N or M-N\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"---\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"---\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeIsInverse:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeIsInverse() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"2-1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00272-1\u0027, expected string with a range M-N where M\u003cN\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"10-1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u002710-1\u0027, expected string with a range M-N where M\u003cN\"));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"-1--2\");\n        assertThat(result, failedWith(2));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: \\\"-1--2\\\" is not a valid option\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid:void()","methodSource":"@Test public void dummyRangeRangeSingleShouldFailIfBuildRangeIsInvalid() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-3-\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: Unable to parse \u00271-3-\u0027, expected correct notation M,N or M-N\"));\n    }"},{"className":"hudson.cli.RunRangeCommandTest","methodSignature":"hudson.cli.RunRangeCommandTest.dummyRangeRangeMultiShouldSuccess:void()","methodSource":"@Test public void dummyRangeRangeMultiShouldSuccess() {\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-2,3-4\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2,3,4\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-3,3-4\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2,3,3,4\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-4,2-3\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2,3,4,2,3\" + System.lineSeparator()));\n\n        result \u003d command\n                .authorizedTo(Jenkins.READ, Item.READ)\n                .invokeWithArgs(PROJECT_NAME, \"1-2,4-5\");\n        assertThat(result, succeeded());\n        assertThat(result.stdout(), containsString(\"Builds: 1,2,4\" + System.lineSeparator()));\n    }"},{"className":"hudson.cli.Security3315Test","methodSignature":"hudson.cli.Security3315Test.test:void()","methodSource":"@Test\n    public void test() throws IOException {\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false)) {\n            // HTTP 400 is WebSocket \"success\" (HTMLUnit doesn\u0027t support it)\n            final URL jenkinsUrl \u003d j.getURL();\n            WebRequest request \u003d new WebRequest(new URL(jenkinsUrl.toString() + \"cli/ws\"), HttpMethod.GET);\n            Page page \u003d wc.getPage(request);\n            assertThat(page.getWebResponse().getStatusCode(), is(allowWs \u003d\u003d Boolean.TRUE ? 400 : 403)); // no Origin header\n\n            request.setAdditionalHeader(\"Origin\", jenkinsUrl.getProtocol() + \"://example.org:\" + jenkinsUrl.getPort());\n            page \u003d wc.getPage(request);\n            assertThat(page.getWebResponse().getStatusCode(), is(allowWs \u003d\u003d Boolean.TRUE ? 400 : 403)); // Wrong Origin host\n\n            request.setAdditionalHeader(\"Origin\", jenkinsUrl.getProtocol() + \"://\" + jenkinsUrl.getHost());\n            page \u003d wc.getPage(request);\n            assertThat(page.getWebResponse().getStatusCode(), is(allowWs \u003d\u003d Boolean.TRUE ? 400 : 403)); // Wrong Origin port\n\n            request.setAdditionalHeader(\"Origin\", jenkinsUrl.getProtocol() + \"://\" + jenkinsUrl.getHost() + \":\" + jenkinsUrl.getPort());\n            page \u003d wc.getPage(request);\n            assertThat(page.getWebResponse().getStatusCode(), is(allowWs \u003d\u003d Boolean.FALSE ? 403 : 400)); // Reject correct Origin if ALLOW_WS is explicitly false\n        }\n    }"},{"className":"hudson.cli.SetBuildDescriptionCommandTest","methodSignature":"hudson.cli.SetBuildDescriptionCommandTest.setBuildDescriptionShouldFailWithoutJobReadPermission:void()","methodSource":"@Test public void setBuildDescriptionShouldFailWithoutJobReadPermission() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"1\", \"test\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027aProject\u0027\"));\n    }"},{"className":"hudson.cli.SetBuildDescriptionCommandTest","methodSignature":"hudson.cli.SetBuildDescriptionCommandTest.setBuildDescriptionShouldFailWithoutRunUpdatePermission1:void()","methodSource":"@Test public void setBuildDescriptionShouldFailWithoutRunUpdatePermission1() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"1\", \"test\");\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Run/Update permission\"));\n    }"},{"className":"hudson.cli.SetBuildDescriptionCommandTest","methodSignature":"hudson.cli.SetBuildDescriptionCommandTest.setBuildDescriptionShouldSucceed:void()","methodSource":"@Test public void setBuildDescriptionShouldSucceed() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        j.assertLogContains(\"echo 1\", build);\n        assertThat(build.getDescription(), equalTo(null));\n\n        CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Run.UPDATE, Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"1\", \"test\");\n        assertThat(result, succeededSilently());\n        assertThat(build.getDescription(), equalTo(\"test\"));\n\n        result \u003d command\n                .authorizedTo(Run.UPDATE, Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"1\", \"\");\n        assertThat(result, succeededSilently());\n        assertThat(build.getDescription(), equalTo(\"\"));\n\n        result \u003d command\n                .authorizedTo(Run.UPDATE, Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"1\", \" \");\n        assertThat(result, succeededSilently());\n        assertThat(build.getDescription(), equalTo(\" \"));\n    }"},{"className":"hudson.cli.SetBuildDescriptionCommandTest","methodSignature":"hudson.cli.SetBuildDescriptionCommandTest.setBuildDescriptionShouldFailIfJobDoesNotExist:void()","methodSource":"@Test public void setBuildDescriptionShouldFailIfJobDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Run.UPDATE, Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.SetBuildDescriptionCommandTest","methodSignature":"hudson.cli.SetBuildDescriptionCommandTest.setBuildDescriptionShouldFailIfJobDoesNotExistButNearExists:void()","methodSource":"@Test public void setBuildDescriptionShouldFailIfJobDoesNotExistButNearExists() throws Exception {\n        j.createFreeStyleProject(\"never_created\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Run.UPDATE, Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"never_created1\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created1\u0027; perhaps you meant \u0027never_created\u0027?\"));\n    }"},{"className":"hudson.cli.SetBuildDescriptionCommandTest","methodSignature":"hudson.cli.SetBuildDescriptionCommandTest.setBuildDescriptionShouldFailIfBuildDoesNotExist:void()","methodSource":"@Test public void setBuildDescriptionShouldFailIfBuildDoesNotExist() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n        project.getBuildersList().add(createScriptBuilder(\"echo 1\"));\n        j.assertLogContains(\"echo 1\", j.buildAndAssertSuccess(project));\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Item.READ, Jenkins.READ)\n                .invokeWithArgs(\"aProject\", \"2\", \"test\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such build #2\"));\n    }"},{"className":"hudson.cli.SetBuildDisplayNameCommandTest","methodSignature":"hudson.cli.SetBuildDisplayNameCommandTest.referencingBuildThatDoesNotExistsShouldFail:void()","methodSource":"@Test public void referencingBuildThatDoesNotExistsShouldFail() throws Exception {\n\n        j.createFreeStyleProject(\"project\");\n\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"project\", \"42\", \"DisplayName\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: Build #42 does not exist\"));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(3));\n    }"},{"className":"hudson.cli.SetBuildDisplayNameCommandTest","methodSignature":"hudson.cli.SetBuildDisplayNameCommandTest.setDescriptionSuccessfully:void()","methodSource":"@Test public void setDescriptionSuccessfully() throws Exception {\n\n        FreeStyleProject job \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(job);\n\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"project\", \"1\", \"DisplayName\")\n        ;\n\n        assertThat(result, succeededSilently());\n        assertThat(build.getDisplayName(), equalTo(\"DisplayName\"));\n    }"},{"className":"hudson.cli.UpdateNodeCommandTest","methodSignature":"hudson.cli.UpdateNodeCommandTest.updateNodeShouldFailWithoutComputerConfigurePermission:void()","methodSource":"@Test public void updateNodeShouldFailWithoutComputerConfigurePermission() throws Exception {\n\n        j.createSlave(\"MyAgent\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"MyAgent\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the Agent/Configure permission\"));\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n    }"},{"className":"hudson.cli.UpdateNodeCommandTest","methodSignature":"hudson.cli.UpdateNodeCommandTest.updateNodeShouldModifyNodeConfiguration:void()","methodSource":"@Test public void updateNodeShouldModifyNodeConfiguration() throws Exception {\n\n        j.createSlave(\"MyAgent\", null, null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONFIGURE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"MyAgent\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"An agent with old name should not exist\", j.jenkins.getNode(\"MyAgent\"), nullValue());\n\n        final Node updatedSlave \u003d j.jenkins.getNode(\"AgentFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"AgentFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n    }"},{"className":"hudson.cli.UpdateNodeCommandTest","methodSignature":"hudson.cli.UpdateNodeCommandTest.updateNodeShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test public void updateNodeShouldFailIfNodeDoesNotExist() {\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONFIGURE, Jenkins.READ)\n                .withStdin(Computer.class.getResourceAsStream(\"node.xml\"))\n                .invokeWithArgs(\"MyAgent\")\n        ;\n\n        assertThat(result.stderr(), containsString(\"ERROR: No such node \u0027MyAgent\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n    }"},{"className":"hudson.cli.UpdateNodeCommandTest","methodSignature":"hudson.cli.UpdateNodeCommandTest.updateNodeShouldFailForMaster:void()","methodSource":"@Issue(\"SECURITY-281\")\n    @Test\n    public void updateNodeShouldFailForMaster() {\n        CLICommandInvoker.Result result \u003d command.authorizedTo(Computer.CONFIGURE, Jenkins.READ).withStdin(Computer.class.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"\");\n        assertThat(result.stderr(), containsString(\"No such node \u0027\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n\n        // old name\n        result \u003d command.authorizedTo(Computer.EXTENDED_READ, Jenkins.READ).withStdin(Computer.class.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"(master)\");\n        assertThat(result.stderr(), containsString(\"No such node \u0027(master)\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n\n        // new name\n        result \u003d command.authorizedTo(Computer.EXTENDED_READ, Jenkins.READ).withStdin(Computer.class.getResourceAsStream(\"node.xml\")).invokeWithArgs(\"(built-in)\");\n        assertThat(result.stderr(), containsString(\"No such node \u0027(built-in)\u0027\"));\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n    }","advisory":"SECURITY-281"},{"className":"hudson.cli.UpdateNodeCommandTest","methodSignature":"hudson.cli.UpdateNodeCommandTest.updateNodeShouldFailForDotDot:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2021\")\n    public void updateNodeShouldFailForDotDot() throws Exception {\n        String okName \u003d \"MyNode\";\n        Slave node \u003d j.createSlave(okName, null, null);\n        // currently \u003cdummy\u003e, but doing so will be a bit more future-proof\n        String defaultDescription \u003d node.getNodeDescription();\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Computer.CONFIGURE, Jenkins.READ)\n                .withStdin(UpdateNodeCommandTest.class.getResourceAsStream(\"node_sec2021.xml\"))\n                .invokeWithArgs(okName)\n                ;\n\n        assertThat(result.stderr(), containsString(Messages.Hudson_UnsafeChar(\u0027/\u0027)));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result, failedWith(1));\n\n        assertEquals(okName, node.getNodeName());\n        // ensure the other data were not saved\n        assertEquals(defaultDescription, node.getNodeDescription());\n    }","advisory":"SECURITY-2021"},{"className":"hudson.cli.UpdateViewCommandTest","methodSignature":"hudson.cli.UpdateViewCommandTest.updateViewShouldFailWithoutViewConfigurePermission:void()","methodSource":"@Test public void updateViewShouldFailWithoutViewConfigurePermission() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invokeWithArgs(\"aView\")\n        ;\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Configure permission\"));\n    }"},{"className":"hudson.cli.UpdateViewCommandTest","methodSignature":"hudson.cli.UpdateViewCommandTest.updateViewWithRenamedClass:void()","methodSource":"@Test public void updateViewWithRenamedClass() throws Exception {\n        ListView tv  \u003d new ListView(\"tView\");\n        j.jenkins.addView(tv);\n        Jenkins.XSTREAM2.addCompatibilityAlias(\"org.acme.old.Foo\", ListView.class);\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.CONFIGURE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/testview-foo.xml\"))\n                .invokeWithArgs(\"tView\");\n\n        assertThat(result, succeededSilently());\n    }"},{"className":"hudson.cli.UpdateViewCommandTest","methodSignature":"hudson.cli.UpdateViewCommandTest.updateViewWithWrongViewTypeShouldFail:void()","methodSource":"@Test public void updateViewWithWrongViewTypeShouldFail() throws Exception {\n        MyView myView \u003d new MyView(\"aView\");\n        j.jenkins.addView(myView);\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.CONFIGURE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invokeWithArgs(\"aView\")\n                ;\n\n        assertThat(result, failedWith(1));\n        assertThat(result.stderr(), containsString(\"Expecting view type: \" + myView.getClass()\n                + \" but got: class hudson.model.ListView instead.\"));\n    }"},{"className":"hudson.cli.UpdateViewCommandTest","methodSignature":"hudson.cli.UpdateViewCommandTest.updateViewShouldModifyViewConfiguration:void()","methodSource":"@Test public void updateViewShouldModifyViewConfiguration() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.CONFIGURE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invokeWithArgs(\"aView\")\n        ;\n\n        assertThat(result, succeededSilently());\n\n        assertThat(\"Update should not modify view name\", j.jenkins.getView(\"ViewFromXML\"), nullValue());\n\n        final View updatedView \u003d j.jenkins.getView(\"aView\");\n        assertThat(updatedView.getViewName(), equalTo(\"aView\"));\n        assertThat(updatedView.isFilterExecutors(), equalTo(true));\n        assertThat(updatedView.isFilterQueue(), equalTo(false));\n    }"},{"className":"hudson.cli.UpdateViewCommandTest","methodSignature":"hudson.cli.UpdateViewCommandTest.updateViewShouldFailIfViewDoesNotExist:void()","methodSource":"@Test public void updateViewShouldFailIfViewDoesNotExist() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(View.READ, View.CONFIGURE, Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .withStdin(this.getClass().getResourceAsStream(\"/hudson/cli/view.xml\"))\n                .invokeWithArgs(\"not_created\")\n        ;\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No view named not_created inside view Jenkins\"));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationShouldFailWithJenkinsReadPermissionOnly:void()","methodSource":"@Test public void jobViewManipulationShouldFailWithJenkinsReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Read permission\"));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationShouldFailWithViewReadPermissionOnly:void()","methodSource":"@Test public void jobViewManipulationShouldFailWithViewReadPermissionOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027aProject\u0027\"));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationShouldFailWithViewReadAndJobReadPermissionsOnly:void()","methodSource":"@Test public void jobViewManipulationShouldFailWithViewReadAndJobReadPermissionsOnly() throws IOException {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        j.createFreeStyleProject(\"aProject\");\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject\");\n\n        assertThat(result, failedWith(6));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: user is missing the View/Configure permission\"));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationShouldFailIfTheViewIsNotDirectlyModifiable:void()","methodSource":"@Test public void jobViewManipulationShouldFailIfTheViewIsNotDirectlyModifiable() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n\n        assertThat(j.jenkins.getView(\"All\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"All\").contains(project), equalTo(true));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"All\", \"aProject\");\n\n        assertThat(result, failedWith(4));\n        assertThat(result.stderr(), containsString(\"ERROR: \u0027All\u0027 view can not be modified directly\"));\n        assertThat(j.jenkins.getView(\"All\").getAllItems().size(), equalTo(1));\n        assertThat(j.jenkins.getView(\"All\").contains(project), equalTo(true));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationShouldFailIfTheJobDoesNotExist:void()","methodSource":"@Test public void jobViewManipulationShouldFailIfTheJobDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"never_created\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"aProject\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n\n        result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject1\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027aProject1\u0027; perhaps you meant \u0027aProject\u0027?\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project), equalTo(false));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationShouldFailIfTheJobNameIsEmpty:void()","methodSource":"@Test public void jobViewManipulationShouldFailIfTheJobNameIsEmpty() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027\u0027\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationManyShouldFailIfFirstJobDoesNotExist:void()","methodSource":"@Test public void jobViewManipulationManyShouldFailIfFirstJobDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"never_created\", \"aProject1\", \"aProject2\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027; perhaps you meant \u0027aProject1\u0027?\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationManyShouldFailIfMiddleJobDoesNotExist:void()","methodSource":"@Test public void jobViewManipulationManyShouldFailIfMiddleJobDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject1\", \"never_created\", \"aProject2\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027; perhaps you meant \u0027aProject1\u0027?\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationManyShouldFailIfLastJobDoesNotExist:void()","methodSource":"@Test public void jobViewManipulationManyShouldFailIfLastJobDoesNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject1\", \"aProject2\", \"never_created\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027; perhaps you meant \u0027aProject1\u0027?\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n    }"},{"className":"hudson.cli.ViewManipulationTestBase","methodSignature":"hudson.cli.ViewManipulationTestBase.jobViewManipulationManyShouldFailIfMoreJobsDoNotExist:void()","methodSource":"@Test public void jobViewManipulationManyShouldFailIfMoreJobsDoNotExist() throws Exception {\n\n        j.jenkins.addView(new ListView(\"aView\"));\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(\"aProject1\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"aProject2\");\n\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ, View.READ, Item.READ, View.CONFIGURE).everywhere().toAuthenticated());\n        final CLICommandInvoker.Result result \u003d command\n                .invokeWithArgs(\"aView\", \"aProject1\", \"never_created\", \"aProject2\", \"never_created\");\n\n        assertThat(result, failedWith(3));\n        assertThat(result.stderr(), containsString(\"ERROR: No such job \u0027never_created\u0027; perhaps you meant \u0027aProject1\u0027?\"));\n        assertThat(j.jenkins.getView(\"aView\").getAllItems().size(), equalTo(0));\n        assertThat(j.jenkins.getView(\"aView\").contains(project1), equalTo(false));\n        assertThat(j.jenkins.getView(\"aView\").contains(project2), equalTo(false));\n    }"},{"className":"hudson.cli.WaitNodeOfflineCommandTest","methodSignature":"hudson.cli.WaitNodeOfflineCommandTest.waitNodeOfflineShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test\n    public void waitNodeOfflineShouldFailIfNodeDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such node \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.WaitNodeOfflineCommandTest","methodSignature":"hudson.cli.WaitNodeOfflineCommandTest.waitNodeOfflineShouldSucceedOnOfflineNode:void()","methodSource":"@Test\n    public void waitNodeOfflineShouldSucceedOnOfflineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().setTemporarilyOffline(true);\n        while (!slave.toComputer().isOffline()) {\n            Thread.sleep(100);\n        }\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n    }"},{"className":"hudson.cli.WaitNodeOfflineCommandTest","methodSignature":"hudson.cli.WaitNodeOfflineCommandTest.waitNodeOfflineShouldSucceedOnGoingOfflineNode:void()","methodSource":"@Test\n    public void waitNodeOfflineShouldSucceedOnGoingOfflineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().setTemporarilyOffline(true);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n    }"},{"className":"hudson.cli.WaitNodeOfflineCommandTest","methodSignature":"hudson.cli.WaitNodeOfflineCommandTest.waitNodeOfflineShouldSucceedOnDisconnectedNode:void()","methodSource":"@Test\n    public void waitNodeOfflineShouldSucceedOnDisconnectedNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().disconnect();\n        while (!slave.toComputer().isOffline()) {\n            Thread.sleep(100);\n        }\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n    }"},{"className":"hudson.cli.WaitNodeOfflineCommandTest","methodSignature":"hudson.cli.WaitNodeOfflineCommandTest.waitNodeOfflineShouldSucceedOnDisconnectingNode:void()","methodSource":"@Test\n    public void waitNodeOfflineShouldSucceedOnDisconnectingNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().disconnect();\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOffline(), equalTo(true));\n    }"},{"className":"hudson.cli.WaitNodeOfflineCommandTest","methodSignature":"hudson.cli.WaitNodeOfflineCommandTest.waitNodeOfflineShouldTimeoutOnOnlineNode:void()","methodSource":"@Test\n    public void waitNodeOfflineShouldTimeoutOnOnlineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        boolean timeoutOccurred \u003d false;\n\n        FutureTask task \u003d new FutureTask(() -\u003e {\n            final CLICommandInvoker.Result result \u003d command\n                    .authorizedTo(Jenkins.READ)\n                    .invokeWithArgs(\"aNode\");\n            fail(\"Never should return from previous CLI call!\");\n            return null;\n        });\n        try {\n            task.get(30, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        } finally {\n            task.cancel(true);\n        }\n\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n    }"},{"className":"hudson.cli.WaitNodeOnlineCommandTest","methodSignature":"hudson.cli.WaitNodeOnlineCommandTest.waitNodeOnlineShouldFailIfNodeDoesNotExist:void()","methodSource":"@Test\n    public void waitNodeOnlineShouldFailIfNodeDoesNotExist() {\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"never_created\");\n        assertThat(result, failedWith(3));\n        assertThat(result, hasNoStandardOutput());\n        assertThat(result.stderr(), containsString(\"ERROR: No such node \u0027never_created\u0027\"));\n    }"},{"className":"hudson.cli.WaitNodeOnlineCommandTest","methodSignature":"hudson.cli.WaitNodeOnlineCommandTest.waitNodeOnlineShouldSucceedOnGoingOnlineNode:void()","methodSource":"@Test\n    public void waitNodeOnlineShouldSucceedOnGoingOnlineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.cli.WaitNodeOnlineCommandTest","methodSignature":"hudson.cli.WaitNodeOnlineCommandTest.waitNodeOnlineShouldTimeoutOnGoingOfflineNode:void()","methodSource":"@Test\n    public void waitNodeOnlineShouldTimeoutOnGoingOfflineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().setTemporarilyOffline(true);\n\n        boolean timeoutOccurred \u003d false;\n        FutureTask task \u003d new FutureTask(() -\u003e {\n            final CLICommandInvoker.Result result \u003d command\n                    .authorizedTo(Jenkins.READ)\n                    .invokeWithArgs(\"aNode\");\n            fail(\"Never should return from previous CLI call!\");\n            return null;\n        });\n        try {\n            task.get(30, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        } finally {\n            task.cancel(true);\n        }\n\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n    }"},{"className":"hudson.cli.WaitNodeOnlineCommandTest","methodSignature":"hudson.cli.WaitNodeOnlineCommandTest.waitNodeOnlineShouldTimeoutOnDisconnectedNode:void()","methodSource":"@Test\n    public void waitNodeOnlineShouldTimeoutOnDisconnectedNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().disconnect();\n        slave.toComputer().waitUntilOffline();\n\n        boolean timeoutOccurred \u003d false;\n        FutureTask task \u003d new FutureTask(() -\u003e {\n            final CLICommandInvoker.Result result \u003d command\n                    .authorizedTo(Jenkins.READ)\n                    .invokeWithArgs(\"aNode\");\n            fail(\"Never should return from previous CLI call!\");\n            return null;\n        });\n        try {\n            task.get(30, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        } finally {\n            task.cancel(true);\n        }\n\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n    }"},{"className":"hudson.cli.WaitNodeOnlineCommandTest","methodSignature":"hudson.cli.WaitNodeOnlineCommandTest.waitNodeOnlineShouldTimeoutOnDisconnectingNode:void()","methodSource":"@Test\n    public void waitNodeOnlineShouldTimeoutOnDisconnectingNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().disconnect();\n\n        boolean timeoutOccurred \u003d false;\n        FutureTask task \u003d new FutureTask(() -\u003e {\n            final CLICommandInvoker.Result result \u003d command\n                    .authorizedTo(Jenkins.READ)\n                    .invokeWithArgs(\"aNode\");\n            fail(\"Never should return from previous CLI call!\");\n            return null;\n        });\n        try {\n            task.get(30, TimeUnit.SECONDS);\n        } catch (TimeoutException e) {\n            timeoutOccurred \u003d true;\n        } finally {\n            task.cancel(true);\n        }\n\n        if (!timeoutOccurred)\n            fail(\"Missing timeout for CLI call\");\n    }"},{"className":"hudson.cli.WaitNodeOnlineCommandTest","methodSignature":"hudson.cli.WaitNodeOnlineCommandTest.waitNodeOnlineShouldSuccessOnOnlineNode:void()","methodSource":"@Test\n    public void waitNodeOnlineShouldSuccessOnOnlineNode() throws Exception {\n        DumbSlave slave \u003d j.createSlave(\"aNode\", \"\", null);\n        slave.toComputer().waitUntilOnline();\n        while (!slave.toComputer().isOnline()) {\n            Thread.sleep(100);\n        }\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"aNode\");\n        assertThat(result, succeededSilently());\n        assertThat(slave.toComputer().isOnline(), equalTo(true));\n    }"},{"className":"hudson.console.AnnotatedLargeTextTest","methodSignature":"hudson.console.AnnotatedLargeTextTest.smokes:void()","methodSource":"@Test\n    public void smokes() throws Exception {\n        ByteBuffer buf \u003d new ByteBuffer();\n        PrintStream ps \u003d new PrintStream(buf, true, StandardCharsets.UTF_8);\n        ps.print(\"Some text.\\n\");\n        ps.print(\"Go back to \" + TestNote.encodeTo(\"/root\", \"your home\") + \".\\n\");\n        ps.print(\"More text.\\n\");\n        AnnotatedLargeText\u003cVoid\u003e text \u003d new AnnotatedLargeText\u003c\u003e(buf, StandardCharsets.UTF_8, true, null);\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        text.writeLogTo(0, baos);\n        assertEquals(\"Some text.\\nGo back to your home.\\nMore text.\\n\", baos.toString(StandardCharsets.UTF_8));\n        StringWriter w \u003d new StringWriter();\n        text.writeHtmlTo(0, w);\n        assertEquals(\"Some text.\\nGo back to \u003ca href\u003d\u0027/root\u0027\u003eyour home\u003c/a\u003e.\\nMore text.\\n\", w.toString());\n    }"},{"className":"hudson.console.AnnotatedLargeTextTest","methodSignature":"hudson.console.AnnotatedLargeTextTest.oldDeserialization:void()","methodSource":"@Issue(\"SECURITY-382\")\n    @Test\n    public void oldDeserialization() throws Exception {\n        ByteBuffer buf \u003d new ByteBuffer();\n        buf.write((\"hello\"\n                        + ConsoleNote.PREAMBLE_STR\n                        + \"AAAAwR+LCAAAAAAAAP9dzLEOwVAUxvHThtiNprYxsGiMQhiwNSIhMR/tSZXr\"\n                        + \"3Lr3oJPwPt7FM5hM3gFh8i3/5Bt+1yeUrYH6ap9Yza1Ys9WKWuMiR05wqWhE\"\n                        + \"gpmyEy306Jxvwb19ccGNoBJjLplmgWq0xgOGCjkNZ2IyTrsRlFayVTs4gVMY\"\n                        + \"qP3pw28/JnznuABF/rYWyIyeJfLQe1vxZiDQ7NnYZLn0UZGRRjA9MiV+0OyF\"\n                        + \"v3+utadQyH8B+aJxVM4AAAA\u003d\"\n                        + ConsoleNote.POSTAMBLE_STR\n                        + \"there\\n\")\n                .getBytes(StandardCharsets.UTF_8));\n        AnnotatedLargeText\u003cVoid\u003e text \u003d new AnnotatedLargeText\u003c\u003e(buf, StandardCharsets.UTF_8, true, null);\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        text.writeLogTo(0, baos);\n        assertEquals(\"hellothere\\n\", baos.toString(StandardCharsets.UTF_8));\n        StringWriter w \u003d new StringWriter();\n        text.writeHtmlTo(0, w);\n        assertEquals(\"hellothere\\n\", w.toString());\n        assertThat(logging.getMessages(), hasItem(\n                \"Failed to resurrect annotation from \\\"\\\\u001B[8mha:AAAAwR+LC\"\n                        + \"AAAAAAAAP9dzLEOwVAUxvHThtiNprYxsGiMQhiwNSIhMR/tSZXr3Lr3oJPwP\"\n                        + \"t7FM5hM3gFh8i3/5Bt+1yeUrYH6ap9Yza1Ys9WKWuMiR05wqWhEgpmyEy306\"\n                        + \"Jxvwb19ccGNoBJjLplmgWq0xgOGCjkNZ2IyTrsRlFayVTs4gVMYqP3pw28/J\"\n                        + \"nznuABF/rYWyIyeJfLQe1vxZiDQ7NnYZLn0UZGRRjA9MiV+0OyFv3+utadQy\"\n                        + \"H8B+aJxVM4AAAA\u003d\\\\u001B[0mthere\\\\n\\\"\")); // TODO assert that this is IOException: Refusing to deserialize unsigned note from an old log.\n        ConsoleNote.INSECURE \u003d true;\n        try {\n            w \u003d new StringWriter();\n            text.writeHtmlTo(0, w);\n            assertThat(w.toString(), containsString(\"\u003cscript\u003e\"));\n        } finally {\n            ConsoleNote.INSECURE \u003d false;\n        }\n    }","advisory":"SECURITY-382"},{"className":"hudson.console.AnnotatedLargeTextTest","methodSignature":"hudson.console.AnnotatedLargeTextTest.badMac:void()","methodSource":"@Issue(\"SECURITY-382\")\n    @Test\n    public void badMac() throws Exception {\n        ByteBuffer buf \u003d new ByteBuffer();\n        buf.write((\"Go back to \"\n                        + ConsoleNote.PREAMBLE_STR\n                        + \"////4ByIhqPpAc43AbrEtyDUDc1/UEOXsoY6LeoHSeSlb1d7AAAAlR+LCAAA\"\n                        + \"AAAAAP9b85aBtbiIQS+jNKU4P08vOT+vOD8nVc8xLy+/JLEkNcUnsSg9NSS1\"\n                        + \"oiQktbhEBUT45ZekCpys9xWo8J3KxMDkycCWk5qXXpLhw8BcWpRTwiDkk5VY\"\n                        + \"lqifk5iXrh9cUpSZl25dUcQghWaBM4QGGcYAAYxMDAwVBUAGZwkDq35Rfn4J\"\n                        + \"ABmN28qcAAAA\"\n                        + ConsoleNote.POSTAMBLE_STR\n                        + \"your home.\\n\")\n                .getBytes(StandardCharsets.UTF_8));\n        AnnotatedLargeText\u003cVoid\u003e text \u003d new AnnotatedLargeText\u003c\u003e(buf, StandardCharsets.UTF_8, true, null);\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        text.writeLogTo(0, baos);\n        assertEquals(\"Go back to your home.\\n\", baos.toString(StandardCharsets.UTF_8));\n        StringWriter w \u003d new StringWriter();\n        text.writeHtmlTo(0, w);\n        assertEquals(\"Go back to your home.\\n\", w.toString());\n        assertThat(logging.getMessages(), hasItem(\n                \"Failed to resurrect annotation from \\\"\\\\u001B[8mha:////4ByIh\"\n                        + \"qPpAc43AbrEtyDUDc1/UEOXsoY6LeoHSeSlb1d7AAAAlR+LCAAAAAAAAP9b8\"\n                        + \"5aBtbiIQS+jNKU4P08vOT+vOD8nVc8xLy+/JLEkNcUnsSg9NSS1oiQktbhEB\"\n                        + \"UT45ZekCpys9xWo8J3KxMDkycCWk5qXXpLhw8BcWpRTwiDkk5VYlqifk5iXr\"\n                        + \"h9cUpSZl25dUcQghWaBM4QGGcYAAYxMDAwVBUAGZwkDq35Rfn4JABmN28qcA\"\n                        + \"AAA\\\\u001B[0myour home.\\\\n\\\"\")); // TODO assert that this is IOException: MAC mismatch\n    }","advisory":"SECURITY-382"},{"className":"hudson.console.AnnotatedLargeTextTest","methodSignature":"hudson.console.AnnotatedLargeTextTest.corruptedNote:void()","methodSource":"@Issue(\"JENKINS-61452\")\n    @Test\n    public void corruptedNote() throws Exception {\n        ByteBuffer buf \u003d new ByteBuffer();\n        PrintStream ps \u003d new PrintStream(buf, true, StandardCharsets.UTF_8);\n        ps.print(\"Some text.\\n\");\n        ps.print(\"Go back to \" + TestNote.encodeTo(\"/root\", \"your home\") + \".\\n\");\n        ps.print(\"More text.\\n\");\n        String original \u003d buf.toString();\n        String corrupted \u003d original.replace(\"+\", \"\\u0000\");\n        buf \u003d new ByteBuffer();\n        buf.write(corrupted.getBytes());\n        AnnotatedLargeText\u003cVoid\u003e text \u003d new AnnotatedLargeText\u003c\u003e(buf, StandardCharsets.UTF_8, true, null);\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        text.writeLogTo(0, baos);\n        assertThat(baos.toString(StandardCharsets.UTF_8), matchesRegex(\"Some text[.]\\nGo back to .*your home[.]\\nMore text[.]\\n\"));\n        assertThat(logging.getMessages(), hasItem(matchesRegex(\"Failed to skip annotation from .+\")));\n        StringWriter w \u003d new StringWriter();\n        text.writeHtmlTo(0, w);\n        assertThat(w.toString(), matchesRegex(\"Some text[.]\\nGo back to .*your home[.]\\nMore text[.]\\n\"));\n        assertThat(logging.getMessages(), hasItem(matchesRegex(\"Failed to resurrect annotation from .+\")));\n    }","advisory":"JENKINS-61452"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.completedStatelessLogAnnotation:void()","methodSource":"@Issue(\"JENKINS-6031\")\n    @Test public void completedStatelessLogAnnotation() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                listener.getLogger().println(\"---\");\n                listener.getLogger().println(\"ooo\");\n                listener.getLogger().println(\"ooo\");\n                return true;\n            }\n        });\n\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n\n        // make sure we see the annotation\n        HtmlPage rsp \u003d r.createWebClient().getPage(b, \"console\");\n        assertEquals(1, DomNodeUtil.selectNodes(rsp, \"//B[@class\u003d\u0027demo\u0027]\").size());\n\n        // make sure raw console output doesn\u0027t include the garbage\n        TextPage raw \u003d (TextPage) r.createWebClient().goTo(b.getUrl() + \"consoleText\", \"text/plain\");\n        System.out.println(raw.getContent());\n        String nl \u003d System.getProperty(\"line.separator\");\n        assertTrue(raw.getContent().contains(nl + \"---\" + nl + \"ooo\" + nl + \"ooo\" + nl));\n\n        // there should be two \u0027ooo\u0027s\n        String xml \u003d rsp.asXml();\n        assertEquals(xml, 3, xml.split(\"ooo\").length);\n    }","advisory":"JENKINS-6031"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.consoleAnnotationFilterOut:void()","methodSource":"@Issue(\"JENKINS-6034\")\n    @Test public void consoleAnnotationFilterOut() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                listener.getLogger().print(\"abc\\n\");\n                listener.getLogger().print(HyperlinkNote.encodeTo(\"http://infradna.com/\", \"def\") + \"\\n\");\n                return true;\n            }\n        });\n\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n\n        // make sure we see the annotation\n        HtmlPage rsp \u003d r.createWebClient().getPage(b, \"console\");\n        assertEquals(1, DomNodeUtil.selectNodes(rsp, \"//A[@href\u003d\u0027http://infradna.com/\u0027]\").size());\n\n        // make sure raw console output doesn\u0027t include the garbage\n        TextPage raw \u003d (TextPage) r.createWebClient().goTo(b.getUrl() + \"consoleText\", \"text/plain\");\n        assertThat(raw.getContent(), containsString(\"\\nabc\\ndef\\n\"));\n    }","advisory":"JENKINS-6034"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.progressiveOutput:void()","methodSource":"@Test public void progressiveOutput() throws Exception {\n        final SequenceLock lock \u003d new SequenceLock();\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                lock.phase(0);\n                // make sure the build is now properly started\n                lock.phase(2);\n                listener.getLogger().println(\"line1\");\n                lock.phase(4);\n                listener.getLogger().println(\"line2\");\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future\u003cFreeStyleBuild\u003e f \u003d p.scheduleBuild2(0);\n\n\n        lock.phase(1);\n        FreeStyleBuild b \u003d p.getBuildByNumber(1);\n        ProgressiveLogClient plc \u003d new ProgressiveLogClient(wc, b);\n        // the page should contain some output indicating the build has started why and etc.\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"\u003cb tag\u003d1\u003eline1\u003c/b\u003e\\r\\n\", plc.next());\n\n        // the new invocation should start from where the previous call left off\n        lock.phase(5);\n        assertEquals(\"\u003cb tag\u003d2\u003eline2\u003c/b\u003e\\r\\n\", plc.next());\n\n        lock.done();\n\n        // should complete successfully\n        r.assertBuildStatusSuccess(f);\n    }"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.consoleAnnotation:void()","methodSource":"@Test public void consoleAnnotation() throws Exception {\n        final SequenceLock lock \u003d new SequenceLock();\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                lock.phase(0);\n                // make sure the build is now properly started\n\n                lock.phase(2);\n                listener.getLogger().print(\"abc\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"def\");\n\n                lock.phase(4);\n                listener.getLogger().print(\"123\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().print(\"456\");\n                listener.annotate(new DollarMark());\n                listener.getLogger().println(\"789\");\n\n                lock.phase(6);\n                return true;\n            }\n        });\n        Future\u003cFreeStyleBuild\u003e f \u003d p.scheduleBuild2(0);\n\n        // discard the initial header portion\n        lock.phase(1);\n        FreeStyleBuild b \u003d p.getBuildByNumber(1);\n        ProgressiveLogClient plc \u003d new ProgressiveLogClient(wc, b);\n        plc.next();\n\n        lock.phase(3);\n        assertEquals(\"abc$$$def\\r\\n\", plc.next());\n\n        lock.phase(5);\n        assertEquals(\"123$$$456$$$789\\r\\n\", plc.next());\n\n        lock.done();\n\n        // should complete successfully\n        r.assertBuildStatusSuccess(f);\n    }"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.scriptInclusion:void()","methodSource":"@Test public void scriptInclusion() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n\n        HtmlPage html \u003d r.createWebClient().getPage(b, \"console\");\n        // verify that there\u0027s an element inserted by the script\n        assertNotNull(html.getElementById(\"inserted-by-test1\"));\n        assertNotNull(html.getElementById(\"inserted-by-test2\"));\n        for (DomElement e : html.getElementsByTagName(\"script\")) {\n            String src \u003d e.getAttribute(\"src\");\n            if (!src.isEmpty()) {\n                assertThat(src, containsString(Jenkins.SESSION_HASH));\n            }\n        }\n    }"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.escape:void()","methodSource":"@Issue(\"JENKINS-5952\")\n    @Test public void escape() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                listener.getLogger().println(\"\u003cb\u003e\u0026amp;\u003c/b\u003e\");\n                return true;\n            }\n        });\n\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        HtmlPage html \u003d r.createWebClient().getPage(b, \"console\");\n        String text \u003d html.asNormalizedText();\n        System.out.println(text);\n        assertTrue(text.contains(\"\u003cb\u003e\u0026amp;\u003c/b\u003e\"));\n        assertTrue(JenkinsRule.getLog(b).contains(\"\u003cb\u003e\u0026amp;\u003c/b\u003e\"));\n    }","advisory":"JENKINS-5952"},{"className":"hudson.console.ConsoleAnnotatorTest","methodSignature":"hudson.console.ConsoleAnnotatorTest.pollingOutput:void()","methodSource":"@Test public void pollingOutput() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setScm(new PollingSCM());\n        SCMTrigger t \u003d new SCMTrigger(\"@daily\");\n        t.start(p, true);\n        p.addTrigger(t);\n\n        r.buildAndAssertSuccess(p);\n\n        // poll now\n        t.new Runner().run();\n\n        HtmlPage log \u003d r.createWebClient().getPage(p, \"scmPollLog\");\n        String text \u003d log.asNormalizedText();\n        assertTrue(text, text.contains(\"$$$hello from polling\"));\n    }"},{"className":"hudson.console.ConsoleLogFilterTest","methodSignature":"hudson.console.ConsoleLogFilterTest.decorateSlaveLog:void()","methodSource":"@Issue(\"JENKINS-30777\")\n    @Test public void decorateSlaveLog() throws Exception {\n        SlaveComputer c \u003d r.createSlave().getComputer();\n        c.connect(false).get();\n        assertTrue(c.getLog().contains(\"[[\" + c.getName() + \"]] \"));\n    }","advisory":"JENKINS-30777"},{"className":"hudson.console.ExceptionAnnotationTest","methodSignature":"hudson.console.ExceptionAnnotationTest.test:void(org.jvnet.hudson.test.JenkinsRule)","methodSource":"@WithJenkins\n    @Test\n    void test(JenkinsRule j) throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                new Throwable().printStackTrace(listener.error(\"Injecting a failure\"));\n                return true;\n            }\n        });\n\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n\n        j.createWebClient().getPage(b, \"console\");\n\n        // TODO: check if the annotation is placed\n        // TODO: test an exception with cause and message\n\n//        interactiveBreak();\n    }"},{"className":"hudson.console.HyperlinkNoteTest","methodSignature":"hudson.console.HyperlinkNoteTest.textWithNewlines:void()","methodSource":"@Issue(\"JENKINS-53016\")\n    @Test\n    public void textWithNewlines() throws Exception {\n        String url \u003d r.getURL().toString() + \"test\";\n        String noteText \u003d \"\\nthis string\\nhas newline\\r\\ncharacters\\n\\r\";\n        String input \u003d HyperlinkNote.encodeTo(url, noteText);\n        String noteTextSanitized \u003d input.substring(input.length() - noteText.length());\n        // Throws IndexOutOfBoundsException before https://github.com/jenkinsci/jenkins/pull/3580.\n        String output \u003d annotate(input);\n        assertThat(output, allOf(\n                containsString(\"href\u003d\u0027\" + url + \"\u0027\"),\n                containsString(\"\u003e\" + noteTextSanitized + \"\u003c/a\u003e\")));\n    }","advisory":"JENKINS-53016"},{"className":"hudson.console.HyperlinkNoteTest","methodSignature":"hudson.console.HyperlinkNoteTest.textWithNewlinesModelHyperlinkNote:void()","methodSource":"@Issue(\"JENKINS-53016\")\n    @Test\n    public void textWithNewlinesModelHyperlinkNote() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        String noteText \u003d \"\\nthis string\\nhas newline\\r\\ncharacters\\n\\r\";\n        String input \u003d ModelHyperlinkNote.encodeTo(p, noteText);\n        String noteTextSanitized \u003d input.substring(input.length() - noteText.length());\n        // Throws IndexOutOfBoundsException before https://github.com/jenkinsci/jenkins/pull/3580.\n        String output \u003d annotate(input);\n        assertThat(output, allOf(\n                containsString(\"href\u003d\u0027\" + r.getURL().toString() + p.getUrl() + \"\u0027\"),\n                containsString(new ModelHyperlinkNote(\"\", 0).extraAttributes()),\n                containsString(\"\u003e\" + noteTextSanitized + \"\u003c/a\u003e\")));\n    }","advisory":"JENKINS-53016"},{"className":"hudson.console.HyperlinkNoteTest","methodSignature":"hudson.console.HyperlinkNoteTest.textWithSingleQuote:void()","methodSource":"@Test\n    public void textWithSingleQuote() throws Exception {\n        FreeStyleProject upstream \u003d r.createFreeStyleProject(\"upstream\");\n        r.createFreeStyleProject(\"d0wnstr3\u0027am\");\n        upstream.getPublishersList().add(new BuildTrigger(\"d0wnstr3\u0027am\", Result.SUCCESS));\n        r.jenkins.rebuildDependencyGraph();\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(upstream);\n        r.waitUntilNoActivity();\n        HtmlPage rsp \u003d r.createWebClient().goTo(b.getUrl() + \"console\");\n        assertThat(rsp.querySelector(\".console-output\").asNormalizedText(), containsString(\"Triggering a new build of\"));\n        assertThat(String.valueOf(rsp.getAnchorByText(\"d0wnstr3\u0027am\").click().getWebResponse().getStatusCode()), containsString(\"200\"));\n    }"},{"className":"hudson.console.UrlAnnotatorTest","methodSignature":"hudson.console.UrlAnnotatorTest.test1:void()","methodSource":"@Test\n    public void test1() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                listener.getLogger().println(\"http://www.sun.com/\");\n                listener.getLogger().println(\"\u003chttp://www.kohsuke.org/\u003e\");\n                listener.getLogger().println(\"\u003ca href\u003d\u0027http://www.oracle.com/\u0027\u003e\");\n                return true;\n            }\n        });\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n\n        HtmlPage c \u003d j.createWebClient().getPage(b, \"console\");\n        String rsp \u003d c.getWebResponse().getContentAsString();\n        assertTrue(rsp, rsp.contains(\"\u003ca href\u003d\u0027http://www.sun.com/\u0027\u003ehttp://www.sun.com/\u003c/a\u003e\"));\n        assertTrue(rsp, rsp.contains(\"\u003ca href\u003d\u0027http://www.kohsuke.org/\u0027\u003ehttp://www.kohsuke.org/\u003c/a\u003e\"));\n        assertTrue(rsp, rsp.contains(\"\u003ca href\u003d\u0027http://www.oracle.com/\u0027\u003ehttp://www.oracle.com/\u003c/a\u003e\"));\n    }"},{"className":"hudson.console.UrlAnnotatorTest","methodSignature":"hudson.console.UrlAnnotatorTest.test2:void()","methodSource":"@Test\n    public void test2() {\n        MarkupText m \u003d new MarkupText(\"{abc\u003d\u0027http://url/\u0027,def\u003d\u0027ghi\u0027}\");\n        new UrlAnnotator().newInstance(null).annotate(null, m);\n        String html \u003d m.toString(false);\n        assertTrue(html.contains(\"\u003ca href\u003d\u0027http://url/\u0027\u003ehttp://url/\u003c/a\u003e\"));\n        System.out.println(html);\n    }"},{"className":"hudson.core.PluginManagerOverrideTest","methodSignature":"hudson.core.PluginManagerOverrideTest.testViewOverrides:void()","methodSource":"@Test\n    public void testViewOverrides() throws Exception {\n        // Verify extension registered correctly and comes back in overrides\n        assertEquals(1, PluginManagerStaplerOverride.all().size());\n        assertThat(PluginManagerStaplerOverride.all().get(0), instanceOf(BasicPluginManagerOverride.class));\n\n        // Verify we can load untouched resources\n        JenkinsRule.WebClient client \u003d j.createWebClient();\n        assertEquals(200, client.goTo(\"self/pluginManager/available\").getWebResponse().getStatusCode());\n\n        // Verify new view loads\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/pluginManager/newview\");\n        assertEquals(\"LoremIpsum\", p.getElementById(\"dummyElement\").getTextContent());\n    }"},{"className":"hudson.CustomPluginManagerTest","methodSignature":"hudson.CustomPluginManagerTest.customPluginManager1:void()","methodSource":"@Issue(\"JENKINS-34681\")\n    @WithPlugin(\"htmlpublisher.jpi\")\n    @WithCustomLocalPluginManager(CustomPluginManager1.class)\n    @Test public void customPluginManager1() {\n        check(CustomPluginManager1.class);\n    }","advisory":"JENKINS-34681"},{"className":"hudson.CustomPluginManagerTest","methodSignature":"hudson.CustomPluginManagerTest.customPluginManager2:void()","methodSource":"@Issue(\"JENKINS-34681\")\n    @WithPlugin(\"htmlpublisher.jpi\")\n    @WithCustomLocalPluginManager(CustomPluginManager2.class)\n    @Test public void customPluginManager2() {\n        check(CustomPluginManager2.class);\n    }","advisory":"JENKINS-34681"},{"className":"hudson.CustomPluginManagerTest","methodSignature":"hudson.CustomPluginManagerTest.customPluginManager3:void()","methodSource":"@Issue(\"JENKINS-34681\")\n    @WithPlugin(\"htmlpublisher.jpi\")\n    @WithCustomLocalPluginManager(CustomPluginManager3.class)\n    @Test public void customPluginManager3() {\n        check(CustomPluginManager3.class);\n    }","advisory":"JENKINS-34681"},{"className":"hudson.CustomPluginManagerTest","methodSignature":"hudson.CustomPluginManagerTest.badCustomPluginManager:void()","methodSource":"@Issue(\"JENKINS-34681\")\n    @WithPlugin(\"htmlpublisher.jpi\")\n    @WithCustomLocalPluginManager(BadCustomPluginManager.class)\n    @Test public void badCustomPluginManager() {\n        assertThat(\"Custom plugin manager not installed\", r.getPluginManager(), not(instanceOf(CustomPluginManager.class)));\n    }","advisory":"JENKINS-34681"},{"className":"hudson.diagnosis.HudsonHomeDiskUsageMonitorTest","methodSignature":"hudson.diagnosis.HudsonHomeDiskUsageMonitorTest.flow:void()","methodSource":"@Test\n    public void flow() throws Exception {\n        // manually activate this\n        HudsonHomeDiskUsageMonitor mon \u003d HudsonHomeDiskUsageMonitor.get();\n        mon.activated \u003d true;\n\n        // clicking yes should take us to somewhere\n        j.submit(getForm(mon), \"yes\");\n        assertTrue(mon.isEnabled());\n\n        // now dismiss\n        // submit(getForm(mon),\"no\"); TODO: figure out why this test is fragile\n        mon.doAct(\"no\");\n        assertFalse(mon.isEnabled());\n\n        // and make sure it\u0027s gone\n        assertThrows(ElementNotFoundException.class, () -\u003e getForm(mon));\n    }"},{"className":"hudson.diagnosis.HudsonHomeDiskUsageMonitorTest","methodSignature":"hudson.diagnosis.HudsonHomeDiskUsageMonitorTest.noAccessForNonAdmin:void()","methodSource":"@Issue(\"SECURITY-371\")\n    @Test\n    public void noAccessForNonAdmin() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        // TODO: Use MockAuthorizationStrategy in later versions\n        JenkinsRule.DummySecurityRealm realm \u003d j.createDummySecurityRealm();\n        realm.addGroups(\"administrator\", \"admins\");\n        realm.addGroups(\"bob\", \"users\");\n        j.jenkins.setSecurityRealm(realm);\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        auth.add(Jenkins.ADMINISTER, \"admins\");\n        auth.add(Jenkins.READ, \"users\");\n        j.jenkins.setAuthorizationStrategy(auth);\n\n        User bob \u003d User.getById(\"bob\", true);\n        User administrator \u003d User.getById(\"administrator\", true);\n\n        WebRequest request \u003d new WebRequest(new URI(wc.getContextPath() + \"administrativeMonitor/hudsonHomeIsFull/act\").toURL(), HttpMethod.POST);\n        NameValuePair param \u003d new NameValuePair(\"no\", \"true\");\n        request.setRequestParameters(List.of(param));\n\n        HudsonHomeDiskUsageMonitor mon \u003d HudsonHomeDiskUsageMonitor.get();\n\n        wc.withBasicApiToken(bob);\n        Page p \u003d wc.getPage(request);\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, p.getWebResponse().getStatusCode());\n\n        assertTrue(mon.isEnabled());\n\n        WebRequest requestReadOnly \u003d new WebRequest(new URI(wc.getContextPath() + \"administrativeMonitor/hudsonHomeIsFull\").toURL(), HttpMethod.GET);\n        p \u003d wc.getPage(requestReadOnly);\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, p.getWebResponse().getStatusCode());\n\n        wc.withBasicApiToken(administrator);\n        request \u003d new WebRequest(new URI(wc.getContextPath() + \"administrativeMonitor/hudsonHomeIsFull/act\").toURL(), HttpMethod.POST);\n        request.setRequestParameters(List.of(param));\n        p \u003d wc.getPage(request);\n        assertEquals(HttpURLConnection.HTTP_OK, p.getWebResponse().getStatusCode());\n        assertFalse(mon.isEnabled());\n    }","advisory":"SECURITY-371"},{"className":"hudson.diagnosis.OldDataMonitorTest","methodSignature":"hudson.diagnosis.OldDataMonitorTest.robustness:void()","methodSource":"@Ignore(\"constantly failing on CI builders, makes problems for memory()\")\n    @Issue(\"JENKINS-19544\")\n    @LocalData\n    @Test public void robustness() {\n        OldDataMonitor odm \u003d OldDataMonitor.get(r.jenkins);\n        FreeStyleProject p \u003d r.jenkins.getItemByFullName(\"busted\", FreeStyleProject.class);\n        assertNotNull(p);\n        assertEquals(Set.of(p), odm.getData().keySet());\n        odm.doDiscard(null, null);\n        assertEquals(Collections.emptySet(), odm.getData().keySet());\n        // did not manage to save p, but at least we are not holding onto a reference to it anymore\n    }","advisory":"JENKINS-19544"},{"className":"hudson.diagnosis.OldDataMonitorTest","methodSignature":"hudson.diagnosis.OldDataMonitorTest.memory:void()","methodSource":"@Issue(\"JENKINS-19544\")\n    @Test public void memory() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject(\"p\");\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        b.addAction(new BadAction2());\n        b.save();\n        r.jenkins.getQueue().clearLeftItems();\n        p._getRuns().purgeCache();\n        b \u003d p.getBuildByNumber(1);\n        assertEquals(Set.of(b), OldDataMonitor.get(r.jenkins).getData().keySet());\n        WeakReference\u003c?\u003e ref \u003d new WeakReference\u003c\u003e(b);\n        b \u003d null;\n        MemoryAssert.assertGC(ref, true);\n    }","advisory":"JENKINS-19544"},{"className":"hudson.diagnosis.OldDataMonitorTest","methodSignature":"hudson.diagnosis.OldDataMonitorTest.slowDiscard:void()","methodSource":"@Issue(\"JENKINS-24763\")\n    @Test public void slowDiscard() throws InterruptedException, IOException, ExecutionException {\n        final OldDataMonitor oldDataMonitor \u003d OldDataMonitor.get(r.jenkins);\n        final CountDownLatch ensureEntry \u003d new CountDownLatch(1);\n        final CountDownLatch preventExit \u003d new CountDownLatch(1);\n        Saveable slowSavable \u003d () -\u003e {\n            try {\n                ensureEntry.countDown();\n                preventExit.await();\n            } catch (InterruptedException e) {\n            }\n        };\n\n        OldDataMonitor.report(slowSavable, (String) null);\n        ExecutorService executors \u003d Executors.newSingleThreadExecutor();\n\n        Future\u003cVoid\u003e discardFuture \u003d executors.submit(() -\u003e {\n            oldDataMonitor.doDiscard(Stapler.getCurrentRequest(), Stapler.getCurrentResponse());\n            return null;\n        });\n\n        ensureEntry.await();\n        // test will hang here due to JENKINS-24763\n        File xml \u003d File.createTempFile(\"OldDataMonitorTest.slowDiscard\", \"xml\");\n        xml.deleteOnExit();\n        OldDataMonitor.changeListener\n                .onChange(() -\u003e {},\n                        new XmlFile(xml));\n\n        preventExit.countDown();\n        discardFuture.get();\n\n    }","advisory":"JENKINS-24763"},{"className":"hudson.diagnosis.OldDataMonitorTest","methodSignature":"hudson.diagnosis.OldDataMonitorTest.unlocatableRun:void()","methodSource":"@Issue(\"JENKINS-26718\")\n    @Test public void unlocatableRun() throws Exception {\n        OldDataMonitor odm \u003d OldDataMonitor.get(r.jenkins);\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild build \u003d r.buildAndAssertSuccess(p);\n        p.delete();\n        OldDataMonitor.report(build, (String) null);\n\n        assertEquals(Set.of(build), odm.getData().keySet());\n        odm.doDiscard(null, null);\n        assertEquals(Collections.emptySet(), odm.getData().keySet());\n\n    }","advisory":"JENKINS-26718"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.localhost_correct:void()","methodSource":"@Test\n    public void localhost_correct() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"manage\");\n                wc.getPage(request);\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.localhost_testingForContext:void()","methodSource":"@Test\n    public void localhost_testingForContext() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"manage\");\n\n                // As the context was already set inside the referer, adding another one will fail\n                request.setRequestParameters(List.of(new NameValuePair(\"testWithContext\", \"true\")));\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.localhost_withoutReferer:void()","methodSource":"@Test\n    public void localhost_withoutReferer() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                // no referer\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.localhost_withRefererNotComingFromManage:void()","methodSource":"@Test\n    public void localhost_withRefererNotComingFromManage() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                // wrong referer\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"configure\");\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.withRootURL_localhost_missingContext:void()","methodSource":"@Test\n    public void withRootURL_localhost_missingContext() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n\n                String fullRootUrl \u003d j.getURL().toString();\n                String rootUrlWithoutContext \u003d fullRootUrl.replace(\"/jenkins\", \"\");\n                JenkinsLocationConfiguration.get().setUrl(rootUrlWithoutContext);\n\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"manage\");\n\n                // As the rootURL is missing the context, a regular test will fail\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n\n                // When testing with the context, it will be OK, allowing to display an additional message\n                request.setRequestParameters(List.of(new NameValuePair(\"testWithContext\", \"true\")));\n                wc.getPage(request);\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.withRootURL_localhost_wrongContext:void()","methodSource":"@Test\n    public void withRootURL_localhost_wrongContext() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n\n                String fullRootUrl \u003d j.getURL().toString();\n                String rootUrlWithoutContext \u003d fullRootUrl.replace(\"/jenkins\", \"/wrong\");\n                JenkinsLocationConfiguration.get().setUrl(rootUrlWithoutContext);\n\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"manage\");\n\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n\n                request.setRequestParameters(List.of(new NameValuePair(\"testWithContext\", \"true\")));\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.desiredContextPathEmpty_localhost:void()","methodSource":"@Test\n    public void desiredContextPathEmpty_localhost() {\n        desiredContextPath \u003d \"\";\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(j.getURL(), getAdminMonitorTestUrl(j)));\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"manage\");\n\n                wc.getPage(request);\n\n                // adding the context does not have any impact as there is no configured context\n                request.setRequestParameters(List.of(new NameValuePair(\"testWithContext\", \"true\")));\n                wc.getPage(request);\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.usingIp_butRefererUsingRootUrl:void()","methodSource":"@Test\n    public void usingIp_butRefererUsingRootUrl() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(getRootUrlWithIp(j), getAdminMonitorTestUrl(j)));\n                request.setAdditionalHeader(\"Referer\", j.getURL() + \"manage\");\n                wc.getPage(request);\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.usingIp_withoutReferer:void()","methodSource":"@Test\n    public void usingIp_withoutReferer() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(getRootUrlWithIp(j), getAdminMonitorTestUrl(j)));\n                // no referer\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.usingIp_withRefererIp:void()","methodSource":"@Test\n    public void usingIp_withRefererIp() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(getRootUrlWithIp(j), getAdminMonitorTestUrl(j)));\n                // referer using IP\n                request.setAdditionalHeader(\"Referer\", getRootUrlWithIp(j) + \"manage\");\n\n                // by default the JenkinsRule set the rootURL to localhost:\u003cport\u003e/jenkins\n                // even with similar request and referer, if the root URL is set, this will show a wrong proxy setting\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.withRootURL_usingIp_withRefererIp:void()","methodSource":"@Test\n    public void withRootURL_usingIp_withRefererIp() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n                JenkinsLocationConfiguration.get().setUrl(getRootUrlWithIp(j).toString());\n\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(getRootUrlWithIp(j), getAdminMonitorTestUrl(j)));\n                // referer using IP\n                request.setAdditionalHeader(\"Referer\", getRootUrlWithIp(j) + \"manage\");\n\n                wc.getPage(request);\n            }\n        });\n    }"},{"className":"hudson.diagnosis.ReverseProxySetupMonitorTest","methodSignature":"hudson.diagnosis.ReverseProxySetupMonitorTest.withRootURL_usingIp_missingContext_withRefererIp:void()","methodSource":"@Test\n    public void withRootURL_usingIp_missingContext_withRefererIp() {\n        rr.addStep(new Statement() {\n            @Override\n            public void evaluate() throws Throwable {\n                JenkinsRule j \u003d rr.j;\n\n                String fullRootUrl \u003d getRootUrlWithIp(j).toString();\n                String rootUrlWithoutContext \u003d fullRootUrl.replace(\"/jenkins\", \"\");\n                JenkinsLocationConfiguration.get().setUrl(rootUrlWithoutContext);\n\n                JenkinsRule.WebClient wc \u003d rr.j.createWebClient();\n                WebRequest request \u003d new WebRequest(new URL(getRootUrlWithIp(j), getAdminMonitorTestUrl(j)));\n                // referer using IP\n                request.setAdditionalHeader(\"Referer\", getRootUrlWithIp(j) + \"manage\");\n\n                // As the rootURL is missing the context, a regular test will fail\n                assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(request));\n\n                // When testing with the context, it will be OK, allowing to display an additional message\n                request.setRequestParameters(List.of(new NameValuePair(\"testWithContext\", \"true\")));\n                wc.getPage(request);\n            }\n        });\n    }"},{"className":"hudson.diagnosis.TooManyJobsButNoViewTest","methodSignature":"hudson.diagnosis.TooManyJobsButNoViewTest.initialState:void()","methodSource":"@Test public void initialState() throws Exception {\n        verifyNoForm();\n    }"},{"className":"hudson.diagnosis.TooManyJobsButNoViewTest","methodSignature":"hudson.diagnosis.TooManyJobsButNoViewTest.activated:void()","methodSource":"@Test public void activated() throws Exception {\n        for (int i \u003d 0; i \u003c\u003d TooManyJobsButNoView.THRESHOLD; i++)\n            r.createFreeStyleProject();\n\n        HtmlPage p \u003d r.createWebClient().goTo(\"manage\");\n        HtmlForm f \u003d p.getFormByName(mon.id);\n        assertNotNull(f);\n\n        // this should take us to the new view page\n        URL url \u003d r.submit(f, \"yes\").getUrl();\n        assertTrue(url.toExternalForm(), url.toExternalForm().endsWith(\"/newView\"));\n\n        // since we didn\u0027t create a view, if we go back, we should see the warning again\n        p \u003d r.createWebClient().goTo(\"manage\");\n        assertNotNull(p.getFormByName(mon.id));\n\n        // once we create a view, the message should disappear\n        r.jenkins.addView(new ListView(\"test\"));\n\n        verifyNoForm();\n    }"},{"className":"hudson.diagnosis.TooManyJobsButNoViewTest","methodSignature":"hudson.diagnosis.TooManyJobsButNoViewTest.systemReadNoViewAccessVerifyNoForm:void()","methodSource":"@Test\n    public void systemReadNoViewAccessVerifyNoForm() throws Exception {\n        final String READONLY \u003d \"readonly\";\n\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(READONLY)\n                .grant(Jenkins.SYSTEM_READ).everywhere().to(READONLY)\n        );\n\n        for (int i \u003d 0; i \u003c\u003d TooManyJobsButNoView.THRESHOLD; i++)\n            r.createFreeStyleProject();\n\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        wc.login(READONLY);\n\n        verifyNoMonitor(wc);\n    }"},{"className":"hudson.diagnosis.TooManyJobsButNoViewTest","methodSignature":"hudson.diagnosis.TooManyJobsButNoViewTest.systemReadVerifyForm:void()","methodSource":"@Test\n    public void systemReadVerifyForm() throws Exception {\n        final String READONLY \u003d \"readonly\";\n\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(READONLY)\n                .grant(Jenkins.SYSTEM_READ).everywhere().to(READONLY)\n                .grant(Item.READ).everywhere().to(READONLY)\n                .grant(View.READ).everywhere().to(READONLY)\n        );\n\n        for (int i \u003d 0; i \u003c\u003d TooManyJobsButNoView.THRESHOLD; i++)\n            r.createFreeStyleProject();\n\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        wc.login(READONLY);\n\n        verifyMonitor(wc);\n    }"},{"className":"hudson.ExtensionFinderTest","methodSignature":"hudson.ExtensionFinderTest.failingInstance:void()","methodSource":"@Test\n    public void failingInstance() {\n        FailingExtension i \u003d PageDecorator.all().get(FailingExtension.class);\n        assertNull(\"Instantiation should have failed\", i);\n        assertTrue(\"Instantiation should have been attempted\", FailingExtension.error);\n    }"},{"className":"hudson.ExtensionFinderTest","methodSignature":"hudson.ExtensionFinderTest.injection:void()","methodSource":"@Test\n    public void injection() {\n        InjectingExtension i \u003d PageDecorator.all().get(InjectingExtension.class);\n        assertNotNull(i.foo);\n        assertEquals(\"lion king\", i.value);\n    }"},{"className":"hudson.ExtensionFinderTest","methodSignature":"hudson.ExtensionFinderTest.legacyInjection:void()","methodSource":"@Test\n    public void legacyInjection() {\n        LegacyInjectingExtension i \u003d PageDecorator.all().get(LegacyInjectingExtension.class);\n        assertNotNull(i.foo);\n        assertEquals(\"lion king\", i.value);\n    }"},{"className":"hudson.ExtensionFinderTest","methodSignature":"hudson.ExtensionFinderTest.errorRecovery:void()","methodSource":"@Test\n    public void errorRecovery() {\n        BrokenExtension i \u003d PageDecorator.all().get(BrokenExtension.class);\n        assertNull(i);\n    }"},{"className":"hudson.ExtensionFinderTest","methodSignature":"hudson.ExtensionFinderTest.injectMutualRecursion:void()","methodSource":"@Test\n    public void injectMutualRecursion() {\n        A a \u003d ExtensionList.lookupSingleton(A.class);\n        B b \u003d ExtensionList.lookupSingleton(B.class);\n        assertEquals(b, a.b);\n        assertEquals(a, b.a);\n    }"},{"className":"hudson.ExtensionFinderTest","methodSignature":"hudson.ExtensionFinderTest.injectInterface:void()","methodSource":"@Issue(\"JENKINS-60816\")\n    @Test\n    public void injectInterface() {\n        assertThat(ExtensionList.lookupSingleton(X.class).xface, instanceOf(Impl.class));\n    }","advisory":"JENKINS-60816"},{"className":"hudson.ExtensionListListenerTest","methodSignature":"hudson.ExtensionListListenerTest.test_onChange:void()","methodSource":"@Test\n    public void test_onChange() throws Exception {\n        ExtensionList\u003cTransientActionFactory\u003e extensionList \u003d ExtensionList.lookup(TransientActionFactory.class);\n\n        // force ExtensionList.ensureLoaded, otherwise the refresh will be ignored because\n        // the extension list will not be initialised.\n        extensionList.size();\n\n        // Add the listener\n        MyExtensionListListener listListener \u003d new MyExtensionListListener();\n        extensionList.addListener(listListener);\n\n        // magiext.hpi has a TransientActionFactory @Extension impl in it. The loading of that\n        // plugin should trigger onChange in the MyExtensionListListener instance.\n        PluginManagerUtil.dynamicLoad(\"magicext.hpi\", r.jenkins);\n\n        Assert.assertEquals(1, listListener.onChangeCallCount);\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.autoDiscovery:void()","methodSource":"@Test\n    public void autoDiscovery() {\n        ExtensionList\u003cAnimal\u003e list \u003d ExtensionList.lookup(Animal.class);\n        assertEquals(2, list.size());\n        assertNotNull(list.get(Dog.class));\n        assertNotNull(list.get(Cat.class));\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.nullJenkinsInstance:void()","methodSource":"@Test\n    @WithoutJenkins\n    public void nullJenkinsInstance() {\n        ExtensionList\u003cAnimal\u003e list \u003d ExtensionList.lookup(Animal.class);\n        assertEquals(0, list.size());\n        assertFalse(list.iterator().hasNext());\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.extensionListView:void()","methodSource":"@Test\n    public void extensionListView() {\n        // this is how legacy list like UserNameResolver.LIST gets created.\n        List\u003cAnimal\u003e LIST \u003d ExtensionListView.createList(Animal.class);\n\n        // we should see auto-registered instances here\n        assertEquals(2, LIST.size());\n        assertTrue(hasInstanceOf(LIST, Dog.class));\n        assertTrue(hasInstanceOf(LIST, Cat.class));\n\n        Animal lion \u003d new Animal() {};\n        LIST.add(lion);\n        assertEquals(3, LIST.size());\n        assertTrue(LIST.contains(lion));\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.descriptorLookup:void()","methodSource":"@Test\n    public void descriptorLookup() {\n        Descriptor\u003cFish\u003e d \u003d new Sishamo().getDescriptor();\n\n        DescriptorExtensionList\u003cFish, Descriptor\u003cFish\u003e\u003e list \u003d j.jenkins.getDescriptorList(Fish.class);\n        assertSame(d, list.get(Sishamo.DescriptorImpl.class));\n\n        assertSame(d, j.jenkins.getDescriptor(Sishamo.class));\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.fishDiscovery:void()","methodSource":"@Test\n    public void fishDiscovery() {\n        // imagine that this is a static instance, like it is in many LIST static field in Hudson.\n        DescriptorList\u003cFish\u003e LIST \u003d new DescriptorList\u003c\u003e(Fish.class);\n\n        DescriptorExtensionList\u003cFish, Descriptor\u003cFish\u003e\u003e list \u003d j.jenkins.getDescriptorList(Fish.class);\n        assertEquals(2, list.size());\n        assertNotNull(list.get(Tai.DescriptorImpl.class));\n        assertNotNull(list.get(Saba.DescriptorImpl.class));\n\n        // registration can happen later, and it should be still visible\n        LIST.add(new Sishamo.DescriptorImpl());\n        assertEquals(3, list.size());\n        assertNotNull(list.get(Sishamo.DescriptorImpl.class));\n\n        // all 3 should be visible from LIST, too\n        assertEquals(3, LIST.size());\n        assertNotNull(LIST.findByName(Tai.class.getName()));\n        assertNotNull(LIST.findByName(Sishamo.class.getName()));\n        assertNotNull(LIST.findByName(Saba.class.getName()));\n\n        // DescriptorList can be gone and new one created but it should still have the same list\n        LIST \u003d new DescriptorList\u003c\u003e(Fish.class);\n        assertEquals(3, LIST.size());\n        assertNotNull(LIST.findByName(Tai.class.getName()));\n        assertNotNull(LIST.findByName(Sishamo.class.getName()));\n        assertNotNull(LIST.findByName(Saba.class.getName()));\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.legacyDescriptorList:void()","methodSource":"@Test\n    public void legacyDescriptorList() {\n        // created in a legacy fashion without any tie to ExtensionList\n        DescriptorList\u003cFish\u003e LIST \u003d new DescriptorList\u003c\u003e();\n\n        // we won\u0027t auto-discover anything\n        assertEquals(0, LIST.size());\n\n        // registration can happen later, and it should be still visible\n        LIST.add(new Sishamo.DescriptorImpl());\n        assertEquals(1, LIST.size());\n        assertNotNull(LIST.findByName(Sishamo.class.getName()));\n\n        // create a new list and it forgets everything.\n        LIST \u003d new DescriptorList\u003c\u003e();\n        assertEquals(0, LIST.size());\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.ordinals:void()","methodSource":"@Test\n    public void ordinals() {\n        ExtensionList\u003cCar\u003e list \u003d j.jenkins.getExtensionList(Car.class);\n        assertEquals(\"honda\", list.get(0).name);\n        assertEquals(\"mazda\", list.get(1).name);\n        assertEquals(\"toyota\", list.get(2).name);\n    }"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.removeAll:void()","methodSource":"@Issue(\"JENKINS-39520\")\n    @Test\n    public void removeAll() {\n        ExtensionList\u003cAnimal\u003e list \u003d ExtensionList.lookup(Animal.class);\n        assertTrue(list.removeAll(new ArrayList\u003c\u003e(list)));\n        assertEquals(0, list.size());\n        assertFalse(list.removeAll(new ArrayList\u003c\u003e(list)));\n        assertEquals(0, list.size());\n    }","advisory":"JENKINS-39520"},{"className":"hudson.ExtensionListTest","methodSignature":"hudson.ExtensionListTest.checkSort:void()","methodSource":"@Issue(\"JENKINS-62056\")\n    @Test\n    public void checkSort() {\n        ExtensionList.lookup(Object.class).get(0); // exceptions are a problem\n    }","advisory":"JENKINS-62056"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.listGlob:void()","methodSource":"@Issue(\"JENKINS-50237\")\n    @Test\n    public void listGlob() throws Exception {\n        for (Node n : new Node[] {r.jenkins, r.createOnlineSlave()}) {\n            FilePath d \u003d n.getRootPath().child(\"globbing\");\n            FilePath exists \u003d d.child(\"dir/exists\");\n            exists.write(\"\", null);\n            assertThat(d.list(\"**/exists\"), arrayContainingInAnyOrder(exists));\n            assertThat(d.list(\"**/nonexistent\"), emptyArray());\n            FilePath nonexistentDir \u003d d.child(\"nonexistentDir\");\n            try {\n                assertThat(\"if it works at all, should be empty\", nonexistentDir.list(\"**\"), emptyArray());\n            } catch (Exception x) {\n                assertThat(x.toString(), containsString(nonexistentDir.getRemote() + DirectoryScanner.DOES_NOT_EXIST_POSTFIX));\n            }\n        }\n    }","advisory":"JENKINS-50237"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipRelativePathHandledCorrectly:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32778\")\n    @LocalData(\"zip_with_relative\")\n    public void zipRelativePathHandledCorrectly() throws Exception {\n        assumeTrue(Functions.isWindows());\n        FilePath zipFile \u003d r.jenkins.getRootPath().child(\"zip-with-folder.zip\");\n        FilePath targetLocation \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n\n        FilePath simple1 \u003d targetLocation.child(\"simple1.txt\");\n        FilePath simple2 \u003d targetLocation.child(\"child\").child(\"simple2.txt\");\n\n        assertThat(simple1.exists(), is(false));\n        assertThat(simple2.exists(), is(false));\n\n        zipFile.unzip(targetLocation);\n\n        assertThat(simple1.exists(), is(true));\n        assertThat(simple2.exists(), is(true));\n    }","advisory":"JENKINS-32778"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipAbsolutePathHandledCorrectly_win:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32778\")\n    @LocalData(\"zip_with_relative\")\n    public void zipAbsolutePathHandledCorrectly_win() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        // this special zip contains a ..\\..\\ [..] \\..\\Temp\\evil.txt\n        FilePath zipFile \u003d r.jenkins.getRootPath().child(\"zip-slip-win.zip\");\n\n        FilePath targetLocation \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n\n        FilePath good \u003d targetLocation.child(\"good.txt\");\n\n        assertThat(good.exists(), is(false));\n\n        IOException e \u003d assertThrows(IOException.class, () -\u003e zipFile.unzip(targetLocation));\n        assertThat(e.getMessage(), containsString(\"contains illegal file name that breaks out of the target directory\"));\n\n        // as the unzip operation failed, the good.txt was potentially unzipped\n        // but we need to make sure that the evil.txt is not there\n        File evil \u003d new File(r.jenkins.getRootDir(), \"..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\Temp\\\\evil.txt\");\n        assertThat(evil.exists(), is(false));\n    }","advisory":"JENKINS-32778"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipAbsolutePathHandledCorrectly_unix:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32778\")\n    @LocalData(\"zip_with_relative\")\n    public void zipAbsolutePathHandledCorrectly_unix() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        // this special zip contains a ../../../ [..] /../tmp/evil.txt\n        FilePath zipFile \u003d r.jenkins.getRootPath().child(\"zip-slip.zip\");\n\n        FilePath targetLocation \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n\n        FilePath good \u003d targetLocation.child(\"good.txt\");\n\n        assertThat(good.exists(), is(false));\n\n        IOException e \u003d assertThrows(IOException.class, () -\u003e zipFile.unzip(targetLocation));\n        assertThat(e.getMessage(), containsString(\"contains illegal file name that breaks out of the target directory\"));\n\n        // as the unzip operation failed, the good.txt was potentially unzipped\n        // but we need to make sure that the evil.txt is not there\n        File evil \u003d new File(r.jenkins.getRootDir(), \"../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/evil.txt\");\n        assertThat(evil.exists(), is(false));\n    }","advisory":"JENKINS-32778"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipRelativePathHandledCorrectly_oneUp:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32778\")\n    @LocalData(\"zip_with_relative\")\n    public void zipRelativePathHandledCorrectly_oneUp() throws Exception {\n        // internal structure:\n        //  ../simple3.txt\n        //  child/simple2.txt\n        //  simple1.txt\n        FilePath zipFile \u003d r.jenkins.getRootPath().child(\"zip-rel-one-up.zip\");\n        FilePath targetLocation \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n\n        FilePath simple3 \u003d targetLocation.getParent().child(\"simple3.txt\");\n\n        assertThat(simple3.exists(), is(false));\n\n        IOException e \u003d assertThrows(IOException.class, () -\u003e zipFile.unzip(targetLocation));\n        assertThat(e.getMessage(), containsString(\"contains illegal file name that breaks out of the target directory\"));\n\n        assertThat(simple3.exists(), is(false));\n    }","advisory":"JENKINS-32778"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipTarget_regular:void()","methodSource":"@Test\n    @Issue(\"XXX\")\n    @LocalData(\"zip_with_relative\")\n    public void zipTarget_regular() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File zipFile \u003d new File(r.jenkins.getRootDir(), \"zip-with-folder.zip\");\n        File targetLocation \u003d new File(r.jenkins.getRootDir(), \"unzip-target\");\n        FilePath targetLocationFP \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n\n        FilePath simple1 \u003d targetLocationFP.child(\"simple1.txt\");\n        FilePath simple2 \u003d targetLocationFP.child(\"child\").child(\"simple2.txt\");\n\n        assertThat(simple1.exists(), is(false));\n        assertThat(simple2.exists(), is(false));\n\n        Method unzipPrivateMethod;\n        unzipPrivateMethod \u003d FilePath.class.getDeclaredMethod(\"unzip\", File.class, File.class);\n        unzipPrivateMethod.setAccessible(true);\n\n        FilePath fp \u003d new FilePath(new File(\".\"));\n        unzipPrivateMethod.invoke(fp, targetLocation, zipFile);\n\n        assertThat(simple1.exists(), is(true));\n        assertThat(simple2.exists(), is(true));\n    }","advisory":"XXX"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipTarget_relative:void()","methodSource":"@Test\n    @Issue(\"XXX\")\n    @LocalData(\"zip_with_relative\")\n    public void zipTarget_relative() throws Exception {\n        assumeTrue(Functions.isWindows());\n        File zipFile \u003d new File(r.jenkins.getRootDir(), \"zip-with-folder.zip\");\n        // the main difference is here, the ./\n        File targetLocation \u003d new File(r.jenkins.getRootDir(), \"./unzip-target\");\n        FilePath targetLocationFP \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n\n        FilePath simple1 \u003d targetLocationFP.child(\"simple1.txt\");\n        FilePath simple2 \u003d targetLocationFP.child(\"child\").child(\"simple2.txt\");\n\n        assertThat(simple1.exists(), is(false));\n        assertThat(simple2.exists(), is(false));\n\n        Method unzipPrivateMethod;\n        unzipPrivateMethod \u003d FilePath.class.getDeclaredMethod(\"unzip\", File.class, File.class);\n        unzipPrivateMethod.setAccessible(true);\n\n        FilePath fp \u003d new FilePath(new File(\".\"));\n        unzipPrivateMethod.invoke(fp, targetLocation, zipFile);\n\n        assertThat(simple1.exists(), is(true));\n        assertThat(simple2.exists(), is(true));\n    }","advisory":"XXX"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipSlipSamePathPrefix:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66094\")\n    @LocalData(\"ZipSlipSamePathPrefix\")\n    public void zipSlipSamePathPrefix() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        // \u003e unzip -l evil.zip\n        // good.txt\n        //  ../foo_evil.txt\n        FilePath zipFile \u003d r.jenkins.getRootPath().child(\"evil.zip\");\n\n        // foo_evil.txt will be extracted to unzip-target/foo_evil.txt\n        // which has the same path prefix as unzip-target/foo\n        FilePath targetLocationParent \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n        FilePath targetLocationFoo \u003d targetLocationParent.child(\"foo\");\n        FilePath evilEntry \u003d targetLocationParent.child(\"foo_evil.txt\");\n\n        assertThat(evilEntry.exists(), is(false));\n\n        IOException e \u003d assertThrows(IOException.class, () -\u003e zipFile.unzip(targetLocationFoo));\n        assertThat(e.getMessage(), containsString(\"contains illegal file name that breaks out of the target directory\"));\n\n        assertThat(evilEntry.exists(), is(false));\n    }","advisory":"JENKINS-66094"},{"className":"hudson.FilePathTest","methodSignature":"hudson.FilePathTest.zipSlipSamePathPrefixWin:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66094\")\n    @LocalData(\"ZipSlipSamePathPrefix\")\n    public void zipSlipSamePathPrefixWin() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        // \u003e unzip -l evil-win.zip\n        // good.txt\n        //  ..\\foo_evil.txt\n        FilePath zipFile \u003d r.jenkins.getRootPath().child(\"evil-win.zip\");\n\n        // foo_evil.txt will be extracted to unzip-target\\foo_evil.txt\n        // which has the same path prefix as unzip-target\\foo\n        FilePath targetLocationParent \u003d r.jenkins.getRootPath().child(\"unzip-target\");\n        FilePath targetLocationFoo \u003d targetLocationParent.child(\"foo\");\n        FilePath evilEntry \u003d targetLocationParent.child(\"foo_evil.txt\");\n\n        assertThat(evilEntry.exists(), is(false));\n\n        IOException e \u003d assertThrows(IOException.class, () -\u003e zipFile.unzip(targetLocationFoo));\n        assertThat(e.getMessage(), containsString(\"contains illegal file name that breaks out of the target directory\"));\n\n        assertThat(evilEntry.exists(), is(false));\n    }","advisory":"JENKINS-66094"},{"className":"hudson.HtmlEscapeTest","methodSignature":"hudson.HtmlEscapeTest.test1:void()","methodSource":"@Test\n    public void test1() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/foo\");\n        // literal HTML in message resources are allowed\n        assertEquals(\"test\", p.getElementById(\"d1\").getTextContent());\n        // likewise, but the portion that comes from arguments should be escaped\n        assertEquals(\"\u003cb\u003etest\u003c/b\u003e\", p.getElementById(\"d2\").getTextContent());\n        // JEXL evaluation by default gets escaped\n        assertEquals(\"\u003cb\u003etest\u003c/b\u003e\", p.getElementById(\"d3\").getTextContent());\n    }"},{"className":"hudson.init.impl.GroovyInitScriptTest","methodSignature":"hudson.init.impl.GroovyInitScriptTest.errorsHandled:void()","methodSource":"@Issue(\"JENKINS-17933\")\n    @LocalData\n    @Test public void errorsHandled() {\n        assertEquals(\"true\", System.getProperty(\"started\"));\n        /* TODO Jenkins.logRecords empty during a test, and adding a handler to root logger in JenkinsRule.before() does not work:\n        assertTrue(log, log.contains(\"Nonexistent\"));\n        */\n    }","advisory":"JENKINS-17933"},{"className":"hudson.init.InitMilestoneTest","methodSignature":"hudson.init.InitMilestoneTest.testInitMilestones:void()","methodSource":"@Test\n    public void testInitMilestones() {\n\n        List\u003cInitMilestone\u003e attained \u003d r.jenkins.getExtensionList(Initializers.class).get(0).getAttained();\n\n        // TODO assert that they are contained in order, currently it generally works but flakes after some time\n        assertThat(attained, containsInAnyOrder(\n                InitMilestone.EXTENSIONS_AUGMENTED,\n                InitMilestone.SYSTEM_CONFIG_LOADED,\n                InitMilestone.SYSTEM_CONFIG_ADAPTED,\n                InitMilestone.JOB_LOADED,\n                InitMilestone.JOB_CONFIG_ADAPTED));\n    }"},{"className":"hudson.jobs.CreateItemTest","methodSignature":"hudson.jobs.CreateItemTest.testCreateItemFromCopy:void()","methodSource":"@Issue(\"JENKINS-31235\")\n    @Test\n    public void testCreateItemFromCopy() throws Exception {\n        rule.jenkins.setCrumbIssuer(null);\n\n        String sourceJobName \u003d \"sourceJob\";\n        rule.createFreeStyleProject(sourceJobName);\n\n        String newJobName \u003d \"newJob\";\n        URL apiURL \u003d new URI(MessageFormat.format(\n                    \"{0}createItem?mode\u003dcopy\u0026from\u003d{1}\u0026name\u003d{2}\",\n                    rule.getURL().toString(), sourceJobName, newJobName)).toURL();\n\n        WebRequest request \u003d new WebRequest(apiURL, HttpMethod.POST);\n        deleteContentTypeHeader(request);\n\n        Page p \u003d rule.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false)\n                .getPage(request);\n        assertEquals(\"Creating job from copy should succeed.\",\n                HttpURLConnection.HTTP_OK,\n                p.getWebResponse().getStatusCode());\n    }","advisory":"JENKINS-31235"},{"className":"hudson.jobs.CreateItemTest","methodSignature":"hudson.jobs.CreateItemTest.vetoCreateItemFromCopy:void()","methodSource":"@Issue(\"JENKINS-34691\")\n    @Test\n    public void vetoCreateItemFromCopy() throws Exception {\n        rule.jenkins.setCrumbIssuer(null);\n\n        String sourceJobName \u003d \"sourceJob\";\n        rule.createFreeStyleProject(sourceJobName);\n\n        String newJobName \u003d \"newJob\";\n        URL apiURL \u003d new URI(MessageFormat.format(\n                    \"{0}createItem?mode\u003dcopy\u0026from\u003d{1}\u0026name\u003d{2}\",\n                    rule.getURL().toString(), sourceJobName, newJobName)).toURL();\n\n        WebRequest request \u003d new WebRequest(apiURL, HttpMethod.POST);\n        deleteContentTypeHeader(request);\n\n        Page p \u003d rule.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false)\n                .getPage(request);\n\n        assertEquals(\"Creating job from copy should fail.\",\n                HttpURLConnection.HTTP_BAD_REQUEST,\n                p.getWebResponse().getStatusCode());\n        assertThat(rule.jenkins.getItem(\"newJob\"), nullValue());\n    }","advisory":"JENKINS-34691"},{"className":"hudson.jobs.CreateItemTest","methodSignature":"hudson.jobs.CreateItemTest.createWithFolderPaths:void()","methodSource":"@Test\n    public void createWithFolderPaths() throws Exception {\n        rule.jenkins.setCrumbIssuer(null);\n        rule.createFolder(\"d1\").createProject(FreeStyleProject.class, \"p\");\n        MockFolder d2 \u003d rule.createFolder(\"d2\");\n\n        JenkinsRule.WebClient wc \u003d rule.createWebClient();\n\n        wc.getPage(new WebRequest(new URI(d2.getAbsoluteUrl() + \"createItem?mode\u003dcopy\u0026name\u003dp2\u0026from\u003d../d1/p\").toURL(), HttpMethod.POST));\n        assertNotNull(d2.getItem(\"p2\"));\n\n        wc.getPage(new WebRequest(new URI(d2.getAbsoluteUrl() + \"createItem?mode\u003dcopy\u0026name\u003dp3\u0026from\u003d/d1/p\").toURL(), HttpMethod.POST));\n        assertNotNull(d2.getItem(\"p3\"));\n    }"},{"className":"hudson.LauncherTest","methodSignature":"hudson.LauncherTest.correctlyExpandEnvVars:void()","methodSource":"@Issue(\"JENKINS-19488\")\n    @Test\n    public void correctlyExpandEnvVars() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"A\", \"aaa\"),\n                new StringParameterDefinition(\"C\", \"ccc\"),\n                new StringParameterDefinition(\"B\", \"$A$C\")\n        ));\n        final CommandInterpreter script \u003d Functions.isWindows()\n                ? new BatchFile(\"echo %A% %B% %C%\")\n                : new Shell(\"echo $A $B $C\")\n        ;\n        project.getBuildersList().add(script);\n\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        rule.assertLogContains(\"aaa aaaccc ccc\", build);\n    }","advisory":"JENKINS-19488"},{"className":"hudson.LauncherTest","methodSignature":"hudson.LauncherTest.overwriteSystemEnvVars:void()","methodSource":"@Issue(\"JENKINS-19926\")\n    @Test\n    public void overwriteSystemEnvVars() throws Exception {\n        Map\u003cString, String\u003e env \u003d new HashMap\u003c\u003e();\n        env.put(\"jenkins_19926\", \"original value\");\n        Slave slave \u003d rule.createSlave(new EnvVars(env));\n\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"jenkins_19926\", \"${jenkins_19926} and new value\")));\n        final CommandInterpreter script \u003d Functions.isWindows()\n                ? new BatchFile(\"echo %jenkins_19926%\")\n                : new Shell(\"echo ${jenkins_19926}\")\n        ;\n        project.getBuildersList().add(script);\n        project.setAssignedNode(slave.getComputer().getNode());\n\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        rule.assertLogContains(\"original value and new value\", build);\n    }","advisory":"JENKINS-19926"},{"className":"hudson.LauncherTest","methodSignature":"hudson.LauncherTest.quiet:void()","methodSource":"@Issue(\"JENKINS-23027\")\n    @Test public void quiet() throws Exception {\n        Slave s \u003d rule.createSlave();\n        boolean windows \u003d Functions.isWindows();\n        FreeStyleProject p \u003d rule.createFreeStyleProject();\n        p.getBuildersList().add(windows ? new BatchFile(\"echo printed text\") : new Shell(\"echo printed text\"));\n        for (Node n : new Node[] {rule.jenkins, s}) {\n            rule.assertLogContains(windows ? \"cmd /c\" : \"sh -xe\", runOn(p, n));\n        }\n        p.getBuildersList().clear(); // TODO .replace does not seem to work\n        p.getBuildersList().add(windows ? new QuietBatchFile(\"echo printed text\") : new QuietShell(\"echo printed text\"));\n        for (Node n : new Node[] {rule.jenkins, s}) {\n            rule.assertLogNotContains(windows ? \"cmd /c\" : \"sh -xe\", runOn(p, n));\n        }\n    }","advisory":"JENKINS-23027"},{"className":"hudson.LauncherTest","methodSignature":"hudson.LauncherTest.remotable:void()","methodSource":"@Issue(\"JENKINS-52729\")\n    @Test public void remotable() throws Exception {\n        try (var baos \u003d new ByteArrayOutputStream()) {\n            var listener \u003d new RemotableBuildListener(new StreamTaskListener(baos, StandardCharsets.UTF_8));\n            Launcher.ProcStarter ps \u003d rule.createOnlineSlave().createLauncher(listener).launch();\n            if (Functions.isWindows()) {\n                ps.cmds(\"cmd\", \"/c\", \"echo\", \"hello\");\n            } else {\n                ps.cmds(\"echo\", \"hello\");\n            }\n            assertEquals(0, ps.stdout(listener).join());\n            assertThat(baos.toString(StandardCharsets.UTF_8).replace(\"\\r\\n\", \"\\n\"),\n                containsString(\"[master → slave0] $ \" + (Functions.isWindows() ? \"cmd /c \" : \"\") + \"echo hello\\n\" +\n                               \"[master → slave0] hello\"));\n        }\n    }","advisory":"JENKINS-52729"},{"className":"hudson.LauncherTest","methodSignature":"hudson.LauncherTest.multipleStdioCalls:void()","methodSource":"@Issue(\"JENKINS-52729\")\n    @Test public void multipleStdioCalls() throws Exception {\n        Node master \u003d rule.jenkins;\n        Node agent \u003d rule.createOnlineSlave();\n        for (Node node : new Node[] {master, agent}) {\n            assertMultipleStdioCalls(\"first TaskListener then OutputStream\", node, false, (ps, os1, os2, os2Listener) -\u003e {\n                ps.stdout(os2Listener).stdout(os1);\n                assertEquals(os1, ps.stdout());\n            }, false);\n            assertMultipleStdioCalls(\"first OutputStream then TaskListener\", node, false, (ps, os1, os2, os2Listener) -\u003e {\n                ps.stdout(os1).stdout(os2Listener);\n                assertEquals(os2Listener.getLogger(), ps.stdout());\n            }, true);\n            assertMultipleStdioCalls(\"stdout then stderr\", node, true, (ps, os1, os2, os2Listener) -\u003e {\n                ps.stdout(os1).stderr(os2);\n                assertEquals(os1, ps.stdout());\n                assertEquals(os2, ps.stderr());\n            }, true);\n            assertMultipleStdioCalls(\"stderr then stdout\", node, true, (ps, os1, os2, os2Listener) -\u003e {\n                ps.stdout(os1).stderr(os2);\n                assertEquals(os1, ps.stdout());\n                assertEquals(os2, ps.stderr());\n            }, true);\n        }\n    }","advisory":"JENKINS-52729"},{"className":"hudson.lifecycle.LifecycleTest","methodSignature":"hudson.lifecycle.LifecycleTest.definedInPlugin:void()","methodSource":"@Test\n    public void definedInPlugin() throws Throwable {\n        rr.then(LifecycleTest::_definedInPlugin);\n    }"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.loggerConfig:void()","methodSource":"@Url(\"http://d.hatena.ne.jp/ssogabe/20090101/1230744150\")\n    @Test public void loggerConfig() throws Exception {\n        Logger logger \u003d Logger.getLogger(\"foo.bar.zot\");\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"log/levels\");\n        HtmlForm form \u003d page.getFormByName(\"configLogger\");\n        form.getInputByName(\"name\").setValue(\"foo.bar.zot\");\n        form.getSelectByName(\"level\").getOptionByValue(\"finest\").setSelected(true);\n        j.submit(form);\n\n        assertEquals(Level.FINEST, logger.getLevel());\n    }"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.loggerConfigNotFound:void()","methodSource":"@Test public void loggerConfigNotFound() throws Exception {\n        HtmlPage page \u003d j.createWebClient().goTo(\"log/levels\");\n        HtmlForm form \u003d page.getFormByName(\"configLogger\");\n        form.getInputByName(\"name\").setValue(\"foo.bar.zot\");\n        form.getSelectByName(\"level\").getOptionByValue(\"finest\").setSelected(true);\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e j.submit(form));\n        assertThat(e.getStatusCode(), equalTo(HttpURLConnection.HTTP_BAD_REQUEST));\n        assertThat(e.getResponse().getContentAsString(), containsString(\"A logger named \\\"foo.bar.zot\\\" does not exist\"));\n    }"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.logRecorderCheckName:void()","methodSource":"@Issue(\"JENKINS-62472\")\n    @Test public void logRecorderCheckName() {\n        LogRecorder testRecorder \u003d new LogRecorder(\"test\");\n        String warning \u003d FormValidation.warning(Messages.LogRecorder_Target_Empty_Warning()).toString();\n        assertEquals(warning, testRecorder.doCheckName(\"\", null).toString());\n        assertEquals(warning, testRecorder.doCheckName(\"\", \"illegalArgument\").toString());\n        assertEquals(warning, testRecorder.doCheckName(\"\", Level.ALL.getName()).toString());\n        assertEquals(warning, testRecorder.doCheckName(\"\", Level.FINEST.getName()).toString());\n        assertEquals(warning, testRecorder.doCheckName(\"\", Level.FINER.getName()).toString());\n        assertEquals(warning, testRecorder.doCheckName(\"\", Level.FINER.getName()).toString());\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", \"illegalArgument\"));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", null));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.ALL.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.FINEST.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.FINER.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.FINER.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"\", Level.CONFIG.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"\", Level.INFO.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"\", Level.WARNING.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"\", Level.SEVERE.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"\", Level.OFF.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.CONFIG.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.INFO.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.WARNING.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.SEVERE.getName()));\n        assertEquals(FormValidation.ok(), testRecorder.doCheckName(\"a\", Level.OFF.getName()));\n    }","advisory":"JENKINS-62472"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.loggingOnSlaves:void()","methodSource":"@Issue({\"JENKINS-18274\", \"JENKINS-63458\"})\n    @Test public void loggingOnSlaves() throws Exception {\n        // TODO could also go through WebClient to assert that the config UI works\n        LogRecorderManager mgr \u003d j.jenkins.getLog();\n        LogRecorder r1 \u003d new LogRecorder(\"r1\");\n        mgr.getRecorders().add(r1);\n        LogRecorder.Target t \u003d new LogRecorder.Target(\"ns1\", Level.FINE);\n        r1.getLoggers().add(t);\n        r1.save();\n        t.enable();\n        Computer c \u003d j.createOnlineSlave().toComputer();\n        assertNotNull(c);\n        t \u003d new LogRecorder.Target(\"ns2\", Level.FINER);\n        r1.getLoggers().add(t);\n        r1.save();\n        t.enable();\n        LogRecorder r2 \u003d new LogRecorder(\"r2\");\n        mgr.getRecorders().add(r2);\n        t \u003d new LogRecorder.Target(\"ns3\", Level.FINE);\n        r2.getLoggers().add(t);\n        r2.save();\n        t.enable();\n        VirtualChannel ch \u003d c.getChannel();\n        assertNotNull(ch);\n        assertTrue(ch.call(new Log(Level.FINE, \"ns1\", \"msg #1\")));\n        assertTrue(ch.call(new Log(Level.FINER, \"ns2\", \"msg #2\")));\n        assertTrue(ch.call(new Log(Level.FINE, \"ns3\", \"msg #3\")));\n        assertFalse(ch.call(new Log(Level.FINER, \"ns3\", \"not displayed\")));\n        assertTrue(ch.call(new Log(Level.INFO, \"ns4\", \"msg #4\")));\n        assertFalse(ch.call(new Log(Level.FINE, \"ns4\", \"not displayed\")));\n        assertTrue(ch.call(new Log(Level.INFO, \"other\", \"msg #5 {0,number,0.0} {1,number,0.0} \u0027\u0027OK?\u0027\u0027\", new Object[] {1.0, 2.0})));\n        assertTrue(ch.call(new LambdaLog(Level.FINE, \"ns1\")));\n        assertFalse(ch.call(new LambdaLog(Level.FINER, \"ns1\")));\n        List\u003cLogRecord\u003e recs \u003d c.getLogRecords();\n        assertEquals(show(recs), 6, recs.size());\n        // Would of course prefer to get \"msg #5 1.0 2.0 \u0027OK?\u0027\" but all attempts to fix this have ended in disaster (JENKINS-63458):\n        assertEquals(\"msg #5 {0,number,0.0} {1,number,0.0} \u0027\u0027OK?\u0027\u0027\", new SimpleFormatter().formatMessage(recs.get(1)));\n        recs \u003d r1.getSlaveLogRecords().get(c);\n        assertNotNull(recs);\n        assertEquals(show(recs), 3, recs.size());\n        recs \u003d r2.getSlaveLogRecords().get(c);\n        assertNotNull(recs);\n        assertEquals(show(recs), 1, recs.size());\n        String text \u003d j.createWebClient().goTo(\"log/r1/\").asNormalizedText();\n        assertTrue(text, text.contains(c.getDisplayName()));\n        assertTrue(text, text.contains(\"msg #1\"));\n        assertTrue(text, text.contains(\"msg #2\"));\n        assertFalse(text, text.contains(\"msg #3\"));\n        assertFalse(text, text.contains(\"msg #4\"));\n        assertTrue(text, text.contains(\"LambdaLog @FINE\"));\n        assertFalse(text, text.contains(\"LambdaLog @FINER\"));\n    }"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.addingLogRecorderToLegacyMapAddsToRecordersList:void()","methodSource":"@Test\n    @SuppressWarnings(\"deprecation\")\n    public void addingLogRecorderToLegacyMapAddsToRecordersList() throws IOException {\n        LogRecorderManager log \u003d j.jenkins.getLog();\n\n        assertThat(log.logRecorders.size(), is(0));\n        assertThat(log.getRecorders().size(), is(0));\n\n        LogRecorder logRecorder \u003d new LogRecorder(\"dummy\");\n        logRecorder.getLoggers().add(new LogRecorder.Target(\"dummy\", Level.ALL));\n\n        log.logRecorders.put(\"dummy\", logRecorder);\n        logRecorder.save();\n\n        assertThat(log.logRecorders.size(), is(1));\n        assertThat(log.getRecorders().size(), is(1));\n    }"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.addingLogRecorderToListAddsToLegacyRecordersMap:void()","methodSource":"@Test\n    @SuppressWarnings(\"deprecation\")\n    public void addingLogRecorderToListAddsToLegacyRecordersMap() throws IOException {\n        LogRecorderManager log \u003d j.jenkins.getLog();\n\n        assertThat(log.logRecorders.size(), is(0));\n        assertThat(log.getRecorders().size(), is(0));\n\n        LogRecorder logRecorder \u003d new LogRecorder(\"dummy\");\n        logRecorder.getLoggers().add(new LogRecorder.Target(\"dummy\", Level.ALL));\n\n        log.getRecorders().add(logRecorder);\n        logRecorder.save();\n\n        assertThat(log.logRecorders.size(), is(1));\n        assertThat(log.getRecorders().size(), is(1));\n    }"},{"className":"hudson.logging.LogRecorderManagerTest","methodSignature":"hudson.logging.LogRecorderManagerTest.deletingLogRecorder:void()","methodSource":"@Test\n    public void deletingLogRecorder() throws IOException {\n        LogRecorderManager log \u003d j.jenkins.getLog();\n        assertThat(log.getRecorders(), empty());\n        LogRecorder logRecorder \u003d new LogRecorder(\"dummy\");\n        logRecorder.getLoggers().add(new LogRecorder.Target(\"dummy\", Level.ALL));\n        log.getRecorders().add(logRecorder);\n        logRecorder.save();\n        assertThat(log.getRecorders(), hasSize(1));\n        logRecorder.delete();\n        assertThat(log.getRecorders(), empty());\n        assertTrue(DeletingLogRecorderListener.recordDeletion);\n    }"},{"className":"hudson.markup.MarkupFormatterTest","methodSignature":"hudson.markup.MarkupFormatterTest.configRoundtrip:void()","methodSource":"@Test\n    public void configRoundtrip() throws Exception {\n        j.jenkins.setSecurityRealm(new HudsonPrivateSecurityRealm(false));\n        j.jenkins.setAuthorizationStrategy(new Unsecured());\n        j.jenkins.setMarkupFormatter(new DummyMarkupImpl(\"hello\"));\n        j.configRoundtrip();\n\n        assertEquals(\"hello\", ((DummyMarkupImpl) j.jenkins.getMarkupFormatter()).prefix);\n    }"},{"className":"hudson.markup.MarkupFormatterTest","methodSignature":"hudson.markup.MarkupFormatterTest.defaultEscaped:void()","methodSource":"@Test\n    public void defaultEscaped() throws Exception {\n        assertEquals(\"\u0026lt;your thing here\u0026gt;\", j.jenkins.getMarkupFormatter().translate(\"\u003cyour thing here\u003e\"));\n        assertEquals(\"\", j.jenkins.getMarkupFormatter().translate(\"\"));\n        assertEquals(\"\", j.jenkins.getMarkupFormatter().translate(null));\n    }"},{"className":"hudson.markup.MarkupFormatterTest","methodSignature":"hudson.markup.MarkupFormatterTest.security2153RequiresPOST:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2153\")\n    public void security2153RequiresPOST() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        final HtmlPage htmlPage \u003d wc.goTo(\"markupFormatter/previewDescription?text\u003dlolwut\");\n        final WebResponse response \u003d htmlPage.getWebResponse();\n        assertEquals(405, response.getStatusCode());\n        assertThat(response.getContentAsString(), containsString(\"This endpoint now requires that POST requests are sent\"));\n        assertThat(response.getContentAsString(), not(containsString(\"lolwut\")));\n    }","advisory":"SECURITY-2153"},{"className":"hudson.markup.MarkupFormatterTest","methodSignature":"hudson.markup.MarkupFormatterTest.security2153SetsCSP:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2153\")\n    public void security2153SetsCSP() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n        final Page htmlPage \u003d wc.getPage(wc.addCrumb(new WebRequest(new URI(j.jenkins.getRootUrl() + \"/markupFormatter/previewDescription?text\u003dlolwut\").toURL(), HttpMethod.POST)));\n        final WebResponse response \u003d htmlPage.getWebResponse();\n        assertEquals(200, response.getStatusCode());\n        assertThat(response.getContentAsString(), containsString(\"lolwut\"));\n        assertThat(response.getResponseHeaderValue(\"Content-Security-Policy\"), containsString(\"default-src \u0027none\u0027;\"));\n        assertThat(response.getResponseHeaderValue(\"X-Content-Security-Policy\"), containsString(\"default-src \u0027none\u0027;\"));\n        assertThat(response.getResponseHeaderValue(\"X-WebKit-CSP\"), containsString(\"default-src \u0027none\u0027;\"));\n    }","advisory":"SECURITY-2153"},{"className":"hudson.model.AbortedFreeStyleBuildTest","methodSignature":"hudson.model.AbortedFreeStyleBuildTest.buildWrapperSeesAbortedStatus:void()","methodSource":"@Test\n    @Issue(\"JENKINS-8054\")\n    public void buildWrapperSeesAbortedStatus() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        TestBuildWrapper wrapper \u003d new TestBuildWrapper();\n        project.getBuildWrappersList().add(wrapper);\n        project.getBuildersList().add(new AbortingBuilder());\n        j.buildAndAssertStatus(Result.ABORTED, project);\n        assertEquals(Result.ABORTED, wrapper.buildResultInTearDown);\n    }","advisory":"JENKINS-8054"},{"className":"hudson.model.AbortedFreeStyleBuildTest","methodSignature":"hudson.model.AbortedFreeStyleBuildTest.interruptAsFailure:void()","methodSource":"@Test\n    @Issue(\"JENKINS-9203\")\n    public void interruptAsFailure() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        TestBuildWrapper wrapper \u003d new TestBuildWrapper();\n        project.getBuildWrappersList().add(wrapper);\n        project.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                Executor.currentExecutor().interrupt(Result.FAILURE);\n                throw new InterruptedException();\n            }\n        });\n        j.buildAndAssertStatus(Result.FAILURE, project);\n        assertEquals(Result.FAILURE, wrapper.buildResultInTearDown);\n    }","advisory":"JENKINS-9203"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.reportErrorShouldNotFailForNonPublisherClass:void()","methodSource":"@Test\n    @Issue(\"JENKINS-30730\")\n    public void reportErrorShouldNotFailForNonPublisherClass() throws Exception {\n        FreeStyleProject prj \u003d j.createFreeStyleProject();\n        ErroneousJobProperty erroneousJobProperty \u003d new ErroneousJobProperty();\n        prj.addProperty(erroneousJobProperty);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e future \u003d prj.scheduleBuild2(0);\n        assertThat(\"Build should be actually scheduled by Jenkins\", future, notNullValue());\n        FreeStyleBuild build \u003d future.get();\n        j.assertLogContains(ErroneousJobProperty.ERROR_MESSAGE, build);\n        j.assertLogNotContains(ClassCastException.class.getName(), build);\n    }","advisory":"JENKINS-30730"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.variablesResolved:void()","methodSource":"@Test\n    public void variablesResolved() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        j.jenkins.getNodeProperties().add(new EnvironmentVariablesNodeProperty(new EnvironmentVariablesNodeProperty.Entry(\"KEY1\", \"value\"), new EnvironmentVariablesNodeProperty.Entry(\"KEY2\", \"$KEY1\")));\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        j.buildAndAssertSuccess(project);\n\n        EnvVars envVars \u003d builder.getEnvVars();\n        assertEquals(\"value\", envVars.get(\"KEY1\"));\n        assertEquals(\"value\", envVars.get(\"KEY2\"));\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.rawConsoleOutput:void()","methodSource":"@Test\n    public void rawConsoleOutput() throws Exception {\n        final String out \u003d \"\u003ctest\u003e\u0026\u003c/test\u003e\";\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                listener.getLogger().println(out);\n                return true;\n            }\n        });\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        Page rsp \u003d j.createWebClient().goTo(b.getUrl() + \"/consoleText\", \"text/plain\");\n        assertThat(rsp.getWebResponse().getContentAsString(), containsString(out));\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.culprits:void()","methodSource":"@Test\n    public void culprits() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FakeChangeLogSCM scm \u003d new FakeChangeLogSCM();\n        p.setScm(scm);\n\n        LogRotatorTest.StallBuilder sync \u003d new LogRotatorTest.StallBuilder();\n\n        // 1st build, successful, no culprits\n        scm.addChange().withAuthor(\"alice\");\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        assertCulprits(b, \"alice\");\n\n        // 2nd build\n        scm.addChange().withAuthor(\"bob\");\n        p.getBuildersList().add(new FailureBuilder());\n        b \u003d j.buildAndAssertStatus(Result.FAILURE, p);\n        assertCulprits(b, \"bob\");\n\n        // 3rd build. bob continues to be in culprit\n        p.getBuildersList().add(sync);\n        scm.addChange().withAuthor(\"charlie\");\n        b \u003d p.scheduleBuild2(0).waitForStart();\n        sync.waitFor(b.getNumber(), 1, TimeUnit.SECONDS);\n\n        // Verify that we can get culprits while running.\n        assertCulprits(b, \"bob\", \"charlie\");\n        sync.release(b.getNumber());\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n        assertCulprits(b, \"bob\", \"charlie\");\n\n        // 4th build, unstable. culprit list should continue\n        scm.addChange().withAuthor(\"dave\");\n        p.getBuildersList().replaceBy(Set.of(new UnstableBuilder()));\n        b \u003d j.buildAndAssertStatus(Result.UNSTABLE, p);\n        assertCulprits(b, \"bob\", \"charlie\", \"dave\");\n\n        // 5th build, unstable. culprit list should continue\n        scm.addChange().withAuthor(\"eve\");\n        b \u003d j.buildAndAssertStatus(Result.UNSTABLE, p);\n        assertCulprits(b, \"bob\", \"charlie\", \"dave\", \"eve\");\n\n        // 6th build, success, accumulation continues up to this point\n        scm.addChange().withAuthor(\"fred\");\n        p.getBuildersList().clear();\n        b \u003d j.buildAndAssertSuccess(p);\n        assertCulprits(b, \"bob\", \"charlie\", \"dave\", \"eve\", \"fred\");\n\n        // 7th build, back to empty culprits\n        scm.addChange().withAuthor(\"george\");\n        b \u003d j.buildAndAssertSuccess(p);\n        assertCulprits(b, \"george\");\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.lastBuildNextBuild:void()","methodSource":"@Issue(\"JENKINS-19920\")\n    @Test\n    public void lastBuildNextBuild() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild b1 \u003d j.buildAndAssertSuccess(p);\n        FreeStyleBuild b2 \u003d j.buildAndAssertSuccess(p);\n        assertEquals(b2, p.getLastBuild());\n        b2.getNextBuild(); // force this to be initialized\n        b2.delete();\n        assertEquals(b1, p.getLastBuild());\n        b1 \u003d p.getLastBuild();\n        assertNull(b1.getNextBuild());\n    }","advisory":"JENKINS-19920"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.doNotInterruptBuildAbruptlyWhenExceptionThrownFromBuildStep:void()","methodSource":"@Test\n    public void doNotInterruptBuildAbruptlyWhenExceptionThrownFromBuildStep() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new ThrowBuilder());\n        FreeStyleBuild build \u003d j.buildAndAssertStatus(Result.FAILURE, p);\n        j.assertLogContains(\"Finished: FAILURE\", build);\n        j.assertLogContains(\"Build step \u0027ThrowBuilder\u0027 marked build as failure\", build);\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.fixEmptyDisplayName:void()","methodSource":"@Test\n    public void fixEmptyDisplayName() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n        p.setDisplayName(\"\");\n        assertEquals(\"An empty display name should be ignored.\", \"foo\", p.getDisplayName());\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.fixBlankDisplayName:void()","methodSource":"@Test\n    public void fixBlankDisplayName() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n        p.setDisplayName(\" \");\n        assertEquals(\"A blank display name should be ignored.\", \"foo\", p.getDisplayName());\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.validDisplayName:void()","methodSource":"@Test\n    public void validDisplayName() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n        p.setDisplayName(\"bar\");\n        assertEquals(\"A non-blank display name should be used.\", \"bar\", p.getDisplayName());\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.trimValidDisplayName:void()","methodSource":"@Test\n    public void trimValidDisplayName() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n        p.setDisplayName(\"    bar    \");\n        assertEquals(\"A non-blank display name with whitespace should be trimmed.\", \"bar\", p.getDisplayName());\n    }"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.workspaceLock:void()","methodSource":"@Test\n    @Issue(\"JENKINS-10615\")\n    public void workspaceLock() throws Exception {\n        logging.record(Run.class, Level.FINER);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setConcurrentBuild(true);\n        OneShotEvent e1 \u003d new OneShotEvent();\n        OneShotEvent e2 \u003d new OneShotEvent();\n        OneShotEvent done \u003d new OneShotEvent();\n\n        p.getPublishersList().add(new Recorder() {\n            @Override\n            public BuildStepMonitor getRequiredMonitorService() {\n                return BuildStepMonitor.NONE;\n            }\n\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                if (build.number \u003d\u003d 1) {\n                    e1.signal();  // signal that build #1 is in publisher\n                } else if (build.number \u003d\u003d 2) {\n                    e2.signal();  // signal that build #2 is in publisher\n                } else {\n                    throw new IllegalArgumentException(\"unexpected build number: \" + build.number);\n                }\n\n                done.block();\n\n                return true;\n            }\n\n            private Object writeReplace() {\n                return new Object();\n            }\n        });\n\n        QueueTaskFuture\u003cFreeStyleBuild\u003e b1 \u003d p.scheduleBuild2(0);\n        e1.block();\n\n        QueueTaskFuture\u003cFreeStyleBuild\u003e b2 \u003d p.scheduleBuild2(0);\n        e2.block();\n\n        // at this point both builds are in the publisher, so we verify that\n        // the workspace are differently allocated\n        assertNotEquals(b1.getStartCondition().get().getWorkspace(), b2.getStartCondition().get().getWorkspace());\n\n        done.signal();\n        Logger.getLogger(AbstractBuildTest.class.getName()).info(\"Test done, letting builds complete…\");\n        j.waitForCompletion(b1.get());\n        j.waitForCompletion(b2.get());\n        Logger.getLogger(AbstractBuildTest.class.getName()).info(\"…done.\");\n    }","advisory":"JENKINS-10615"},{"className":"hudson.model.AbstractBuildTest","methodSignature":"hudson.model.AbstractBuildTest.tempDirVariable:void()","methodSource":"@Test\n    @Issue(\"JENKINS-60634\")\n    public void tempDirVariable() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        if (Functions.isWindows()) {\n            p.getBuildersList().add(new BatchFile(\"mkdir \\\"%WORKSPACE_TMP%\\\"\\r\\necho ok \u003e \\\"%WORKSPACE_TMP%\\\\x\\\"\"));\n        } else {\n            p.getBuildersList().add(new Shell(\"set -u \u0026\u0026 mkdir -p \\\"$WORKSPACE_TMP\\\" \u0026\u0026 touch \\\"$WORKSPACE_TMP/x\\\"\"));\n        }\n        j.buildAndAssertSuccess(p);\n        assertTrue(WorkspaceList.tempDir(j.jenkins.getWorkspaceFor(p)).child(\"x\").exists());\n    }","advisory":"JENKINS-60634"},{"className":"hudson.model.AbstractItem2Test","methodSignature":"hudson.model.AbstractItem2Test.badSerialization:void()","methodSource":"@Issue(\"JENKINS-45892\")\n    @Test\n    public void badSerialization() throws Throwable {\n        sessions.then(j -\u003e {\n                FreeStyleProject p1 \u003d j.createFreeStyleProject(\"p1\");\n                p1.setDescription(\"this is p1\");\n                FreeStyleProject p2 \u003d j.createFreeStyleProject(\"p2\");\n                p2.addProperty(new BadProperty(p1));\n                String text \u003d p2.getConfigFile().asString();\n                assertThat(text, not(containsString(\"\u003cdescription\u003ethis is p1\u003c/description\u003e\")));\n                assertThat(text, containsString(\"\u003cfullName\u003ep1\u003c/fullName\u003e\"));\n                assertThat(logging.getMessages().toString(), containsString(p1.toString()));\n                assertThat(logging.getMessages().toString(), containsString(p2.getConfigFile().toString()));\n        });\n        sessions.then(j -\u003e {\n                FreeStyleProject p1 \u003d j.jenkins.getItemByFullName(\"p1\", FreeStyleProject.class);\n                FreeStyleProject p2 \u003d j.jenkins.getItemByFullName(\"p2\", FreeStyleProject.class);\n                /*\n                 * AbstractItem.Replacer.readResolve() is racy, as its comments acknowledge. Jobs\n                 * are loaded in parallel, and p1 may not have been loaded yet when we are loading\n                 * p2. The only way for this test to work reliably is to reload p2 after p1 has\n                 * already been loaded, thus assuring that p2\u0027s reference to p1 can be properly\n                 * deserialized.\n                 */\n                p2.doReload();\n                assertEquals(p1, p2.getProperty(BadProperty.class).other);\n        });\n    }","advisory":"JENKINS-45892"},{"className":"hudson.model.AbstractItemSecurityTest","methodSignature":"hudson.model.AbstractItemSecurityTest.testUpdateByXmlDoesNotProcessForeignResources:void()","methodSource":"@Issue(\"SECURITY-167\")\n    @Test\n    public void testUpdateByXmlDoesNotProcessForeignResources() throws Exception {\n        final String xml \u003d \"\u003c?xml version\u003d\u00271.0\u0027 encoding\u003d\u0027UTF-8\u0027?\u003e\\n\" +\n                \"\u003c!DOCTYPE project[\\n\" +\n                \"  \u003c!ENTITY foo SYSTEM \\\"file:///\\\"\u003e\\n\" +\n                \"]\u003e\\n\" +\n                \"\u003cproject\u003e\\n\" +\n                \"  \u003cdescription\u003e\u0026foo;\u003c/description\u003e\\n\" +\n                \"  \u003cscm class\u003d\\\"hudson.scm.NullSCM\\\"/\u003e\\n\" +\n                \"\u003c/project\u003e\";\n\n        FreeStyleProject project \u003d jenkinsRule.createFreeStyleProject(\"security-167\");\n        project.setDescription(\"Wibble\");\n        try {\n            project.updateByXml((Source) new StreamSource(new StringReader(xml)));\n            // if we didn\u0027t fail JAXP has thrown away the entity.\n            assertThat(project.getDescription(), emptyOrNullString());\n        } catch (IOException ex) {\n            assertThat(ex.getCause(), not(nullValue()));\n            assertThat(ex.getCause().getMessage(), containsString(\"Refusing to resolve entity\"));\n        }\n\n    }","advisory":"SECURITY-167"},{"className":"hudson.model.AbstractItemSecurityTest","methodSignature":"hudson.model.AbstractItemSecurityTest.testUpdateByXmlDoesNotFail:void()","methodSource":"@Issue(\"SECURITY-167\")\n    @Test\n    public void testUpdateByXmlDoesNotFail() throws Exception {\n        final String xml \u003d \"\u003c?xml version\u003d\u00271.0\u0027 encoding\u003d\u0027UTF-8\u0027?\u003e\\n\" +\n                \"\u003cproject\u003e\\n\" +\n                \"  \u003cdescription\u003e\u0026amp;\u003c/description\u003e\\n\" +\n                \"  \u003cscm class\u003d\\\"hudson.scm.NullSCM\\\"/\u003e\\n\" +\n                \"\u003c/project\u003e\";\n\n        FreeStyleProject project \u003d jenkinsRule.createFreeStyleProject(\"security-167\");\n        project.updateByXml((Source) new StreamSource(new StringReader(xml)));\n        assertThat(project.getDescription(), is(\"\u0026\")); // the entity is transformed\n    }","advisory":"SECURITY-167"},{"className":"hudson.model.AbstractItemTest","methodSignature":"hudson.model.AbstractItemTest.reload:void()","methodSource":"@Test\n    public void reload() throws Exception {\n        Jenkins jenkins \u003d j.jenkins;\n        FreeStyleProject p \u003d jenkins.createProject(FreeStyleProject.class, \"foo\");\n        p.setDescription(\"Hello World\");\n\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        b.setDescription(\"This is my build\");\n\n        // update on disk representation\n        Path path \u003d p.getConfigFile().getFile().toPath();\n        Files.writeString(path, Files.readString(path, StandardCharsets.UTF_8).replaceAll(\"Hello World\", \"Good Evening\"), StandardCharsets.UTF_8);\n\n        TestSaveableListener testSaveableListener \u003d ExtensionList.lookupSingleton(TestSaveableListener.class);\n        testSaveableListener.setSaveable(p);\n\n        // reload away\n        p.doReload();\n\n        assertFalse(SaveableListener.class.getSimpleName() + \" should not have been called\", testSaveableListener.wasCalled());\n\n\n        assertEquals(\"Good Evening\", p.getDescription());\n\n        FreeStyleBuild b2 \u003d p.getBuildByNumber(1);\n\n        assertNotEquals(b, b2); // should be different object\n        assertEquals(b.getDescription(), b2.getDescription()); // but should have the same properties\n    }"},{"className":"hudson.model.AbstractItemTest","methodSignature":"hudson.model.AbstractItemTest.checkRenameValidity:void()","methodSource":"@Test\n    public void checkRenameValidity() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n        p.getBuildersList().add(new SleepBuilder(10));\n        j.createFreeStyleProject(\"foo-exists\");\n\n        assertThat(checkNameAndReturnError(p, \"\"), equalTo(Messages.Hudson_NoName()));\n        assertThat(checkNameAndReturnError(p, \"..\"), equalTo(Messages.Jenkins_NotAllowedName(\"..\")));\n        assertThat(checkNameAndReturnError(p, \"50%\"), equalTo(Messages.Hudson_UnsafeChar(\u0027%\u0027)));\n        assertThat(checkNameAndReturnError(p, \"foo\"), equalTo(Messages.AbstractItem_NewNameUnchanged()));\n        assertThat(checkNameAndReturnError(p, \"foo-exists\"), equalTo(Messages.AbstractItem_NewNameInUse(\"foo-exists\")));\n\n        j.jenkins.setProjectNamingStrategy(new ProjectNamingStrategy.PatternProjectNamingStrategy(\"bar\", \"\", false));\n        assertThat(checkNameAndReturnError(p, \"foo1\"), equalTo(jenkins.model.Messages.Hudson_JobNameConventionNotApplyed(\"foo1\", \"bar\")));\n\n        FreeStyleBuild b \u003d p.scheduleBuild2(0).waitForStart();\n        assertThat(checkNameAndReturnError(p, \"bar\"), equalTo(Messages.Job_NoRenameWhileBuilding()));\n        j.assertBuildStatusSuccess(j.waitForCompletion(b));\n    }"},{"className":"hudson.model.AbstractItemTest","methodSignature":"hudson.model.AbstractItemTest.checkRenamePermissions:void()","methodSource":"@Test\n    public void checkRenamePermissions() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy mas \u003d new MockAuthorizationStrategy();\n        mas.grant(Item.CONFIGURE).everywhere().to(\"alice\", \"bob\");\n        mas.grant(Item.READ).everywhere().to(\"alice\");\n        j.jenkins.setAuthorizationStrategy(mas);\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n        j.createFreeStyleProject(\"foo-exists\");\n\n        try (ACLContext unused \u003d ACL.as(User.getById(\"alice\", true))) {\n            assertThat(checkNameAndReturnError(p, \"foo-exists\"), equalTo(Messages.AbstractItem_NewNameInUse(\"foo-exists\")));\n        }\n        try (ACLContext unused \u003d ACL.as(User.getById(\"bob\", true))) {\n            assertThat(checkNameAndReturnError(p, \"foo-exists\"), equalTo(Messages.Jenkins_NotAllowedName(\"foo-exists\")));\n        }\n        try (ACLContext unused \u003d ACL.as(User.getById(\"carol\", true))) {\n            AccessDeniedException3 e \u003d assertThrows(AccessDeniedException3.class, () -\u003e p.doCheckNewName(\"foo\"));\n            assertThat(e.permission, equalTo(Item.CREATE));\n        }\n    }"},{"className":"hudson.model.AbstractItemTest","methodSignature":"hudson.model.AbstractItemTest.renameViaRestApi:void()","methodSource":"@Test\n    public void renameViaRestApi() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy mas \u003d new MockAuthorizationStrategy();\n        mas.grant(Item.READ, Jenkins.READ).everywhere().to(\"alice\", \"bob\");\n        mas.grant(Item.CONFIGURE).everywhere().to(\"alice\");\n        j.jenkins.setAuthorizationStrategy(mas);\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo\");\n\n        WebClient w \u003d j.createWebClient();\n        WebRequest wr \u003d new WebRequest(w.createCrumbedUrl(p.getUrl() + \"confirmRename\"), HttpMethod.POST);\n        wr.setRequestParameters(List.of(new NameValuePair(\"newName\", \"bar\")));\n        w.login(\"alice\", \"alice\");\n        Page page \u003d w.getPage(wr);\n        assertThat(getPath(page.getUrl()), equalTo(p.getUrl()));\n        assertThat(p.getName(), equalTo(\"bar\"));\n\n        wr \u003d new WebRequest(w.createCrumbedUrl(p.getUrl() + \"confirmRename\"), HttpMethod.POST);\n        wr.setRequestParameters(List.of(new NameValuePair(\"newName\", \"baz\")));\n        w.login(\"bob\", \"bob\");\n\n        w.setThrowExceptionOnFailingStatusCode(false);\n        page \u003d w.getPage(wr);\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, page.getWebResponse().getStatusCode());\n        assertThat(p.getName(), equalTo(\"bar\"));\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.configRoundtrip:void()","methodSource":"@Test\n    public void configRoundtrip() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        Label l \u003d j.jenkins.getLabel(\"foo \u0026\u0026 bar\");\n        project.setAssignedLabel(l);\n        j.configRoundtrip(project);\n\n        assertEquals(l, project.getAssignedLabel());\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.wipeWorkspace:void()","methodSource":"@Test\n    public void wipeWorkspace() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo hello\") : new Shell(\"echo hello\"));\n\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(project);\n\n        assertTrue(\"Workspace should exist by now\", b.getWorkspace().exists());\n\n        project.doDoWipeOutWorkspace();\n\n        assertFalse(\"Workspace should be gone by now\", b.getWorkspace().exists());\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.wipeWorkspaceProtected:void()","methodSource":"@Test\n    public void wipeWorkspaceProtected() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        j.createDummySecurityRealm();\n        project.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo hello\") : new Shell(\"echo hello\"));\n\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(project);\n\n        assertTrue(\"Workspace should exist by now\", b.getWorkspace().exists());\n\n        // make sure that the action link is protected\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        Page page \u003d wc.getPage(new WebRequest(new URI(wc.getContextPath() + project.getUrl() + \"doWipeOutWorkspace\").toURL(), HttpMethod.POST));\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, page.getWebResponse().getStatusCode());\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.wipeWorkspaceProtected2:void()","methodSource":"@Test\n    @PresetData(DataSet.ANONYMOUS_READONLY)\n    public void wipeWorkspaceProtected2() throws Exception {\n        ((GlobalMatrixAuthorizationStrategy) j.jenkins.getAuthorizationStrategy()).add(Item.WORKSPACE, new PermissionEntry(AuthorizationType.EITHER, \"anonymous\"));\n\n        // make sure that the deletion is protected in the same way\n        wipeWorkspaceProtected();\n\n        // there shouldn\u0027t be any \"wipe out workspace\" link for anonymous user\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(j.jenkins.getItem(\"test0\"));\n\n        HtmlPage workspace \u003d page.getAnchorByText(\"Workspace\").click();\n        String wipeOutLabel \u003d ResourceBundle.getBundle(\"hudson/model/AbstractProject/sidepanel\").getString(\"Wipe Out Workspace\");\n        assertThrows(\"shouldn\u0027t find a link\", ElementNotFoundException.class, () -\u003e workspace.getAnchorByText(wipeOutLabel));\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.optionalBlockDataBindingRoundtrip:void()","methodSource":"@Test\n    public void optionalBlockDataBindingRoundtrip() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        for (boolean b : new boolean[] {true, false}) {\n            p.setConcurrentBuild(b);\n            j.submit(j.createWebClient().getPage(p, \"configure\").getFormByName(\"config\"));\n            assertEquals(b, p.isConcurrentBuild());\n        }\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.configuringBlockBuildWhenUpstreamBuildingRoundtrip:void()","methodSource":"@Test\n    @Issue(\"JENKINS-4423\")\n    public void configuringBlockBuildWhenUpstreamBuildingRoundtrip() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setBlockBuildWhenUpstreamBuilding(false);\n\n        HtmlForm form \u003d j.createWebClient().getPage(p, \"configure\").getFormByName(\"config\");\n        HtmlInput input \u003d form.getInputByName(\"blockBuildWhenUpstreamBuilding\");\n        assertFalse(\"blockBuildWhenUpstreamBuilding check box is checked.\", input.isChecked());\n\n        input.setChecked(true);\n        j.submit(form);\n        assertTrue(\"blockBuildWhenUpstreamBuilding was not updated from configuration form\", p.blockBuildWhenUpstreamBuilding());\n\n        form \u003d j.createWebClient().getPage(p, \"configure\").getFormByName(\"config\");\n        input \u003d form.getInputByName(\"blockBuildWhenUpstreamBuilding\");\n        assertTrue(\"blockBuildWhenUpstreamBuilding check box is not checked.\", input.isChecked());\n    }","advisory":"JENKINS-4423"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.pollingAndBuildExclusion:void()","methodSource":"@Test\n    @Issue(\"JENKINS-4202\")\n    public void pollingAndBuildExclusion() throws Exception {\n        final OneShotEvent sync \u003d new OneShotEvent();\n\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild b1 \u003d j.buildAndAssertSuccess(p);\n\n        p.setScm(new NullSCM() {\n            @Override\n            public boolean pollChanges(AbstractProject project, Launcher launcher, FilePath workspace, TaskListener listener) {\n                try {\n                    sync.block();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                return true;\n            }\n\n            /**\n             * Don\u0027t write \u0027this\u0027, so that subtypes can be implemented as\n             * anonymous class.\n             */\n            private Object writeReplace() {\n                return new Object();\n            }\n\n            @Override\n            public boolean requiresWorkspaceForPolling() {\n                return true;\n            }\n\n            @Override\n            public SCMDescriptor\u003c?\u003e getDescriptor() {\n                return new SCMDescriptor\u003c\u003e(null) {\n                };\n            }\n        });\n        Thread t \u003d new Thread() {\n            @Override\n            public void run() {\n                p.pollSCMChanges(StreamTaskListener.fromStdout());\n            }\n        };\n        try {\n            t.start();\n            Future\u003cFreeStyleBuild\u003e f \u003d p.scheduleBuild2(0);\n\n            // add a bit of delay to make sure that the blockage is happening\n            Thread.sleep(3000);\n\n            // release the polling\n            sync.signal();\n\n            FreeStyleBuild b2 \u003d j.assertBuildStatusSuccess(f);\n\n            // they should have used the same workspace.\n            assertEquals(b1.getWorkspace(), b2.getWorkspace());\n        } finally {\n            t.interrupt();\n        }\n    }","advisory":"JENKINS-4202"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.renameJobLostBuilds:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18678\")\n    public void renameJobLostBuilds() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"initial\");\n        j.buildAndAssertSuccess(p);\n        assertEquals(1, p.getBuilds().stream().count());\n        p.renameTo(\"edited\");\n        p._getRuns().purgeCache();\n        assertEquals(1, p.getBuilds().stream().count());\n        MockFolder d \u003d j.jenkins.createProject(MockFolder.class, \"d\");\n        Items.move(p, d);\n        assertEquals(p, j.jenkins.getItemByFullName(\"d/edited\"));\n        p._getRuns().purgeCache();\n        assertEquals(1, p.getBuilds().stream().count());\n        d.renameTo(\"d2\");\n        p \u003d j.jenkins.getItemByFullName(\"d2/edited\", FreeStyleProject.class);\n        p._getRuns().purgeCache();\n        assertEquals(1, p.getBuilds().stream().count());\n    }","advisory":"JENKINS-18678"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.deleteRedirect:void()","methodSource":"@Test\n    @Issue(\"JENKINS-17575\")\n    public void deleteRedirect() throws Exception {\n        j.createFreeStyleProject(\"j1\");\n        assertEquals(\"\", deleteRedirectTarget(\"job/j1\"));\n        j.createFreeStyleProject(\"j2\");\n        Jenkins.get().addView(new AllView(\"v1\"));\n        assertEquals(\"view/v1/\", deleteRedirectTarget(\"view/v1/job/j2\"));\n        MockFolder d \u003d Jenkins.get().createProject(MockFolder.class, \"d\");\n        d.addView(new AllView(\"v2\"));\n        for (String n : new String[] {\"j3\", \"j4\", \"j5\"}) {\n            d.createProject(FreeStyleProject.class, n);\n        }\n        assertEquals(\"job/d/\", deleteRedirectTarget(\"job/d/job/j3\"));\n        assertEquals(\"job/d/view/v2/\", deleteRedirectTarget(\"job/d/view/v2/job/j4\"));\n        assertEquals(\"view/v1/job/d/\", deleteRedirectTarget(\"view/v1/job/d/job/j5\"));\n        assertEquals(\"view/v1/\", deleteRedirectTarget(\"view/v1/job/d\")); // JENKINS-23375\n    }","advisory":"JENKINS-17575"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.queueSuccessBehavior:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18407\")\n    public void queueSuccessBehavior() throws Exception {\n        // prevent any builds to test the behaviour\n        j.jenkins.setNumExecutors(0);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        Future\u003cFreeStyleBuild\u003e f \u003d p.scheduleBuild2(0);\n        assertNotNull(f);\n        Future\u003cFreeStyleBuild\u003e g \u003d p.scheduleBuild2(0);\n        assertEquals(f, g);\n\n        p.makeDisabled(true);\n        assertNull(p.scheduleBuild2(0));\n    }","advisory":"JENKINS-18407"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.queueSuccessBehaviorOverHTTP:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18407\")\n    public void queueSuccessBehaviorOverHTTP() throws Exception {\n        // prevent any builds to test the behaviour\n        j.jenkins.setNumExecutors(0);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        WebResponse rsp \u003d wc.getPage(wc.addCrumb(new WebRequest(new URL(j.getURL(), p.getUrl() +\n                \"build?delay\u003d0\"),\n                HttpMethod.POST))).getWebResponse();\n        assertEquals(HttpURLConnection.HTTP_CREATED, rsp.getStatusCode());\n        assertNotNull(rsp.getResponseHeaderValue(\"Location\"));\n\n        WebResponse rsp2 \u003d wc.getPage(wc.addCrumb(new WebRequest(new URL(j.getURL(), p.getUrl() +\n                \"build?delay\u003d0\"),\n                HttpMethod.POST))).getWebResponse();\n        assertEquals(HttpURLConnection.HTTP_CREATED, rsp2.getStatusCode());\n        assertEquals(rsp.getResponseHeaderValue(\"Location\"), rsp2.getResponseHeaderValue(\"Location\"));\n\n        p.makeDisabled(true);\n\n        WebResponse rsp3 \u003d wc.getPage(wc.addCrumb(new WebRequest(new URL(j.getURL(), p.getUrl() +\n                \"build?delay\u003d0\"),\n                HttpMethod.POST))).getWebResponse();\n        assertEquals(HttpURLConnection.HTTP_CONFLICT, rsp3.getStatusCode());\n    }","advisory":"JENKINS-18407"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.vectorTriggers:void()","methodSource":"@Test\n    public void vectorTriggers() throws Exception {\n        AbstractProject\u003c?, ?\u003e p \u003d (AbstractProject\u003c?, ?\u003e) j.jenkins.createProjectFromXML(\"foo\", getClass().getResourceAsStream(\"AbstractProjectTest/vectorTriggers.xml\"));\n        assertEquals(1, p.triggers().size());\n        Trigger\u003c?\u003e t \u003d p.triggers().get(0);\n        assertEquals(SCMTrigger.class, t.getClass());\n        assertEquals(\"*/10 * * * *\", t.getSpec());\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.removeTrigger:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18813\")\n    public void removeTrigger() throws Exception {\n        AbstractProject\u003c?, ?\u003e p \u003d (AbstractProject\u003c?, ?\u003e) j.jenkins.createProjectFromXML(\"foo\", getClass().getResourceAsStream(\"AbstractProjectTest/vectorTriggers.xml\"));\n\n        TriggerDescriptor SCM_TRIGGER_DESCRIPTOR \u003d (TriggerDescriptor) j.jenkins.getDescriptorOrDie(SCMTrigger.class);\n        p.removeTrigger(SCM_TRIGGER_DESCRIPTOR);\n        assertEquals(0, p.triggers().size());\n    }","advisory":"JENKINS-18813"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.addTriggerSameType:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18813\")\n    public void addTriggerSameType() throws Exception {\n        AbstractProject\u003c?, ?\u003e p \u003d (AbstractProject\u003c?, ?\u003e) j.jenkins.createProjectFromXML(\"foo\", getClass().getResourceAsStream(\"AbstractProjectTest/vectorTriggers.xml\"));\n\n        SCMTrigger newTrigger \u003d new SCMTrigger(\"H/5 * * * *\");\n        p.addTrigger(newTrigger);\n\n        assertEquals(1, p.triggers().size());\n        Trigger\u003c?\u003e t \u003d p.triggers().get(0);\n        assertEquals(SCMTrigger.class, t.getClass());\n        assertEquals(\"H/5 * * * *\", t.getSpec());\n    }","advisory":"JENKINS-18813"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.addTriggerDifferentType:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18813\")\n    public void addTriggerDifferentType() throws Exception {\n        AbstractProject\u003c?, ?\u003e p \u003d (AbstractProject\u003c?, ?\u003e) j.jenkins.createProjectFromXML(\"foo\", getClass().getResourceAsStream(\"AbstractProjectTest/vectorTriggers.xml\"));\n\n        TimerTrigger newTrigger \u003d new TimerTrigger(\"20 * * * *\");\n        p.addTrigger(newTrigger);\n\n        assertEquals(2, p.triggers().size());\n        Trigger\u003c?\u003e t \u003d p.triggers().get(1);\n        assertEquals(newTrigger, t);\n    }","advisory":"JENKINS-18813"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.configDotXmlSubmissionToDifferentType:void()","methodSource":"@Test\n    public void configDotXmlSubmissionToDifferentType() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        HttpURLConnection con \u003d postConfigDotXml(p, \"\u003cmatrix-project /\u003e\");\n\n        // this should fail with a type mismatch error\n        // the error message should report both what was submitted and what was expected\n        assertEquals(500, con.getResponseCode());\n        String msg \u003d IOUtils.toString(con.getErrorStream(), StandardCharsets.UTF_8);\n        System.out.println(msg);\n        assertThat(msg, allOf(containsString(FreeStyleProject.class.getName()), containsString(MatrixProject.class.getName())));\n\n        // control. this should work\n        con \u003d postConfigDotXml(p, \"\u003cproject /\u003e\");\n        assertEquals(200, con.getResponseCode());\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.doConfigDotXmlReset:void()","methodSource":"@Issue(\"JENKINS-21017\")\n    @Test public void doConfigDotXmlReset() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedLabel(Label.get(\"whatever\"));\n        assertEquals(\"whatever\", p.getAssignedLabelString());\n        assertThat(p.getConfigFile().asString(), containsString(\"\u003cassignedNode\u003ewhatever\u003c/assignedNode\u003e\"));\n        assertEquals(200, postConfigDotXml(p, \"\u003cproject/\u003e\").getResponseCode());\n        assertNull(p.getAssignedLabelString()); // did not work\n        assertThat(p.getConfigFile().asString(), not(containsString(\"\u003cassignedNode\u003e\"))); // actually did work anyway\n    }","advisory":"JENKINS-21017"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.loadingWithNPEOnTriggerStart:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27549\")\n    public void loadingWithNPEOnTriggerStart() throws Exception {\n        AbstractProject\u003c?, ?\u003e project \u003d (AbstractProject\u003c?, ?\u003e) j.jenkins.createProjectFromXML(\"foo\", getClass().getResourceAsStream(\"AbstractProjectTest/npeTrigger.xml\"));\n\n        assertEquals(1, project.triggers().size());\n    }","advisory":"JENKINS-27549"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.resolveForCLI:void()","methodSource":"@Test\n    @Issue(\"JENKINS-30742\")\n    public void resolveForCLI() throws Exception {\n        CmdLineException e \u003d assertThrows(CmdLineException.class, () -\u003e AbstractProject.resolveForCLI(\"never_created\"));\n        assertEquals(\"No such job ‘never_created’ exists.\", e.getMessage());\n\n        AbstractProject\u003c?, ?\u003e project \u003d j.jenkins.createProject(FreeStyleProject.class, \"never_created\");\n        e \u003d assertThrows(CmdLineException.class, () -\u003e AbstractProject.resolveForCLI(\"never_created1\"));\n        assertEquals(\"No such job ‘never_created1’ exists. Perhaps you meant ‘never_created’?\", e.getMessage());\n    }","advisory":"JENKINS-30742"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.upstreamDownstreamExportApi:void()","methodSource":"@Issue(\"SECURITY-617\")\n    @Test\n    public void upstreamDownstreamExportApi() throws Exception {\n        FreeStyleProject us \u003d j.createFreeStyleProject(\"upstream-project\");\n        FreeStyleProject ds \u003d j.createFreeStyleProject(\"downstream-project\");\n        us.getPublishersList().add(new BuildTrigger(Set.of(ds), Result.SUCCESS));\n        j.jenkins.rebuildDependencyGraph();\n        assertEquals(List.of(ds), us.getDownstreamProjects());\n        assertEquals(List.of(us), ds.getUpstreamProjects());\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.READ).everywhere().toEveryone().\n                grant(Item.READ).everywhere().to(\"alice\").\n                grant(Item.READ).onItems(us).to(\"bob\").\n                grant(Item.READ).onItems(ds).to(\"charlie\"));\n        String api \u003d j.createWebClient().withBasicCredentials(\"alice\").goTo(us.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();\n        System.out.println(api);\n        assertThat(api, containsString(\"downstream-project\"));\n        api \u003d j.createWebClient().withBasicCredentials(\"alice\").goTo(ds.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();\n        System.out.println(api);\n        assertThat(api, containsString(\"upstream-project\"));\n        api \u003d j.createWebClient().withBasicCredentials(\"bob\").goTo(us.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();\n        System.out.println(api);\n        assertThat(api, not(containsString(\"downstream-project\")));\n        api \u003d j.createWebClient().withBasicCredentials(\"charlie\").goTo(ds.getUrl() + \"api/json?pretty\", null).getWebResponse().getContentAsString();\n        System.out.println(api);\n        assertThat(api, not(containsString(\"upstream-project\")));\n    }","advisory":"SECURITY-617"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.ensureWhenNonExistingLabelsProposalsAreMade:void()","methodSource":"@Test\n    public void ensureWhenNonExistingLabelsProposalsAreMade() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        String label \u003d \"whatever\";\n        HtmlPage htmlPage \u003d this.requestCheckAssignedLabelString(p, label);\n        String responseContent \u003d htmlPage.getWebResponse().getContentAsString();\n        /* Sample:\n         *\n         * \u003cdiv class\u003dwarning\u003e\u003cimg src\u003d\u0027/jenkins/static/03a3de4a/images/none.gif\u0027 height\u003d16 width\u003d1\u003eThere’s no agent/cloud that\n         *     matches this assignment. Did you mean ‘master’ instead of ‘whatever’?\n         * \u003c/div\u003e\n         */\n        assertThat(responseContent, allOf(\n                containsString(\"warning\"),\n                // as there is only the built-in node that is currently used, it\u0027s de facto the nearest to whatever\n                containsString(\"built-in\"),\n                containsString(\"whatever\")\n        ));\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.ensureLegitLabelsAreRetrievedCorrectly:void()","methodSource":"@Test\n    public void ensureLegitLabelsAreRetrievedCorrectly() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setLabelString(\"existing\");\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        String label \u003d \"existing\";\n        HtmlPage htmlPage \u003d this.requestCheckAssignedLabelString(p, label);\n        String responseContent \u003d htmlPage.getWebResponse().getContentAsString();\n        /* Sample:\n         *\n         * \u003cdiv class\u003dok\u003e\u003cimg src\u003d\u0027/jenkins/static/32591acf/images/none.gif\u0027 height\u003d16 width\u003d1\u003e\n         *   \u003ca href\u003d\"http://localhost:5595/jenkins/label/existing/\"\u003eLabel existing\u003c/a\u003e\n         *   is serviced by 1 node. Permissions or other restrictions provided by plugins may prevent\n         *   this job from running on those nodes.\n         * \u003c/div\u003e\n         */\n        assertThat(responseContent, allOf(\n                containsString(\"ok\"),\n                containsString(\"label/existing/\\\"\u003e\")\n        ));\n    }"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.dangerousLabelsAreEscaped:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1781\")\n    public void dangerousLabelsAreEscaped() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n\n        // unescaped: \"\\\"\u003e\u003cimg src\u003dx onerror\u003dalert(123)\u003e\"\n        String label \u003d \"\\\"\\\\\\\"\u003e\u003cimg src\u003dx onerror\u003dalert(123)\u003e\\\"\";\n        j.jenkins.setLabelString(label);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        HtmlPage htmlPage \u003d this.requestCheckAssignedLabelString(p, label);\n        String responseContent \u003d htmlPage.getWebResponse().getContentAsString();\n        /* Sample (before correction)\n         *\n         * \u003cdiv class\u003dok\u003e\u003cimg src\u003d\u0027/jenkins/static/793045c3/images/none.gif\u0027 height\u003d16 width\u003d1\u003e\n         *   \u003ca href\u003d\"http://localhost:5718/jenkins/label/\"\u003e\u003cimg src\u003dx onerror\u003dalert(123)\u003e/\"\u003eLabel \u0026quot;\u0026gt;\u0026lt;img src\u003dx\n         *      onerror\u003dalert(123)\u0026gt;\u003c/a\u003e\n         *   is serviced by 1 node. Permissions or other restrictions provided by plugins may prevent\n         *   this job from running on those nodes.\n         * \u003c/div\u003e\n         */\n        /* Sample (after correction)\n         * \u003cdiv class\u003dok\u003e\u003cimg src\u003d\u0027/jenkins/static/e16858e2/images/none.gif\u0027 height\u003d16 width\u003d1\u003e\n         *   \u003ca href\u003d\"http://localhost:6151/jenkins/label/%22%3E%3Cimg%20src\u003dx%20onerror\u003dalert(123)%3E/\"\u003e\n         *     Label \u0026quot;\u0026gt;\u0026lt;img src\u003dx onerror\u003dalert(123)\u0026gt;\u003c/a\u003e\n         *   is serviced by 1 node.\n         *   Permissions or other restrictions provided by plugins may prevent this job from running on those nodes.\n         * \u003c/div\u003e\n         */\n        DomNodeList\u003cDomNode\u003e domNodes \u003d htmlPage.getDocumentElement().querySelectorAll(\"*\");\n        assertThat(domNodes, hasSize(4));\n        assertEquals(\"head\", domNodes.get(0).getNodeName());\n        assertEquals(\"body\", domNodes.get(1).getNodeName());\n        assertEquals(\"div\", domNodes.get(2).getNodeName());\n        assertEquals(\"a\", domNodes.get(3).getNodeName());\n\n        // only: \"\u003e\u003cimg src\u003dx onerror\u003dalert(123)\u003e\n        // the first double quote was escaped during creation (with the backslash)\n        String unquotedLabel \u003d Label.parseExpression(label).getName();\n        HtmlAnchor anchor \u003d (HtmlAnchor) domNodes.get(3);\n        assertThat(anchor.getHrefAttribute(), containsString(Util.rawEncode(unquotedLabel)));\n\n        assertThat(responseContent, containsString(\"ok\"));\n    }","advisory":"SECURITY-1781"},{"className":"hudson.model.AbstractProjectTest","methodSignature":"hudson.model.AbstractProjectTest.autoCompleteUpstreamProjects:void()","methodSource":"@Test\n    public void autoCompleteUpstreamProjects() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        FreeStyleProject p1 \u003d j.createFreeStyleProject(\"p1\");\n        this.testAutoCompleteResponse(this.requestAutoCompleteUpstreamProjects(p1, \"\").getJSONObject(), \"p1\");\n        this.testAutoCompleteResponse(this.requestAutoCompleteUpstreamProjects(p1, \"z\").getJSONObject());\n        j.createFreeStyleProject(\"z1\");\n        this.testAutoCompleteResponse(this.requestAutoCompleteUpstreamProjects(p1, \"\").getJSONObject(), \"p1\", \"z1\");\n        this.testAutoCompleteResponse(this.requestAutoCompleteUpstreamProjects(p1, \"z\").getJSONObject(), \"z1\");\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.READ).everywhere().toEveryone().\n                grant(Item.READ).everywhere().to(\"alice\").\n                grant(Item.READ).onItems(p1).to(\"bob\"));\n        this.testAutoCompleteResponse(this.requestAutoCompleteUpstreamProjectsWithUser(p1, \"\", \"alice\").getJSONObject(), \"p1\", \"z1\");\n        this.testAutoCompleteResponse(this.requestAutoCompleteUpstreamProjectsWithUser(p1, \"\", \"bob\").getJSONObject(), \"p1\");\n    }"},{"className":"hudson.model.AperiodicWorkTest","methodSignature":"hudson.model.AperiodicWorkTest.newExtensionsAreScheduled:void()","methodSource":"@Test\n    public void newExtensionsAreScheduled() throws Exception {\n        TestAperiodicWork tapw \u003d new TestAperiodicWork();\n\n        int size \u003d AperiodicWork.all().size();\n        ExtensionList.lookup(AperiodicWork.class).add(tapw);\n\n        assertThat(\"we have one new AperiodicWork\", AperiodicWork.all(), hasSize(size + 1));\n        assertThat(\"The task was run within 15 seconds\", tapw.doneSignal.await(15, TimeUnit.SECONDS), is(true));\n    }"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.xpath:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2828\")\n    public void xpath() throws Exception {\n        j.createWebClient().goTo(\"api/xml?xpath\u003d/*[1]\", \"application/xml\");\n    }","advisory":"JENKINS-2828"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.json:void()","methodSource":"@Issue(\"JENKINS-27607\")\n    @Test public void json() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        WebResponse response \u003d wc.goTo(p.getUrl() + \"api/json?tree\u003dname\", \"application/json\").getWebResponse();\n        JSONObject json \u003d JSONObject.fromObject(response.getContentAsString());\n        assertEquals(\"p\", json.get(\"name\"));\n\n        String s \u003d wc.goTo(p.getUrl() + \"api/json?tree\u003dname\u0026jsonp\u003dwrap\", \"application/javascript\").getWebResponse().getContentAsString();\n        assertTrue(s.startsWith(\"wrap(\"));\n        assertEquals(\u0027)\u0027, s.charAt(s.length() - 1));\n        json \u003d JSONObject.fromObject(s.substring(\"wrap(\".length(), s.length() - 1));\n        assertEquals(\"p\", json.get(\"name\"));\n    }","advisory":"JENKINS-27607"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.wrappedZeroItems:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3267\")\n    public void wrappedZeroItems() throws Exception {\n        Page page \u003d j.createWebClient().goTo(\"api/xml?wrapper\u003droot\u0026xpath\u003d/hudson/nonexistent\", \"application/xml\");\n        assertEquals(\"\u003croot/\u003e\", page.getWebResponse().getContentAsString());\n    }","advisory":"JENKINS-3267"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.xPathDocumentFunction:void()","methodSource":"@Issue(\"SECURITY-165\")\n    @Test public void xPathDocumentFunction() throws Exception {\n        File f \u003d new File(j.jenkins.getRootDir(), \"queue.xml\");\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        // could expect application/xml but as an error occurred it\u0027s a text/html that is returned\n        Page page \u003d wc.goTo(\"api/xml?xpath\u003ddocument(\\\"\" + f.getAbsolutePath() + \"\\\")\", null);\n        assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, page.getWebResponse().getStatusCode());\n        assertThat(page.getWebResponse().getContentAsString(), containsString(\"Illegal function: document\"));\n    }","advisory":"SECURITY-165"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.wrappedOneItem:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3267\")\n    public void wrappedOneItem() throws Exception {\n        Page page \u003d j.createWebClient().goTo(\"api/xml?wrapper\u003droot\u0026xpath\u003d/hudson/view/name\", \"application/xml\");\n        assertEquals(\"\u003croot\u003e\u003cname\u003e\" + AllView.DEFAULT_VIEW_NAME + \"\u003c/name\u003e\u003c/root\u003e\", page.getWebResponse().getContentAsString());\n    }","advisory":"JENKINS-3267"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.wrappedMultipleItems:void()","methodSource":"@Test\n    public void wrappedMultipleItems() throws Exception {\n        j.createFreeStyleProject();\n        j.createFreeStyleProject();\n        Page page \u003d j.createWebClient().goTo(\"api/xml?wrapper\u003droot\u0026xpath\u003d/hudson/job/name\", \"application/xml\");\n        assertEquals(\"\u003croot\u003e\u003cname\u003etest0\u003c/name\u003e\u003cname\u003etest1\u003c/name\u003e\u003c/root\u003e\", page.getWebResponse().getContentAsString());\n    }"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.unwrappedZeroItems:void()","methodSource":"@Test\n    public void unwrappedZeroItems() throws Exception {\n        j.createWebClient().assertFails(\"api/xml?xpath\u003d/hudson/nonexistent\", HttpURLConnection.HTTP_NOT_FOUND);\n    }"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.unwrappedOneItem:void()","methodSource":"@Test\n    public void unwrappedOneItem() throws Exception {\n        Page page \u003d j.createWebClient().goTo(\"api/xml?xpath\u003d/hudson/view/name\", \"application/xml\");\n        assertEquals(\"\u003cname\u003e\" + AllView.DEFAULT_VIEW_NAME + \"\u003c/name\u003e\", page.getWebResponse().getContentAsString());\n    }"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.unwrappedLongString:void()","methodSource":"@Test\n    public void unwrappedLongString() throws Exception {\n        j.jenkins.setSystemMessage(\n                \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor\"\n                    + \" incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\"\n                    + \" nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\"\n                    + \" consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\"\n                    + \" cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\"\n                    + \" non proident, sunt in culpa qui officia deserunt mollit anim id est\"\n                    + \" laborum.\");\n        Page page \u003d j.createWebClient().goTo(\"api/xml?xpath\u003d/hudson/description\", \"application/xml\");\n        assertEquals(\n                \"\u003cdescription\u003e\" + j.jenkins.getSystemMessage() + \"\u003c/description\u003e\",\n                page.getWebResponse().getContentAsString());\n    }"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.unwrappedMultipleItems:void()","methodSource":"@Test\n    public void unwrappedMultipleItems() throws Exception {\n        j.createFreeStyleProject();\n        j.createFreeStyleProject();\n        j.createWebClient().assertFails(\"api/xml?xpath\u003d/hudson/job/name\", HttpURLConnection.HTTP_INTERNAL_ERROR);\n    }"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.parameter:void()","methodSource":"@Issue(\"JENKINS-22566\")\n    @Test\n    public void parameter() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"foo\", \"\")));\n        j.assertBuildStatusSuccess(p.scheduleBuild2(0, new ParametersAction(new StringParameterValue(\"foo\", \"bar\"))));\n\n        Page page \u003d j.createWebClient().goTo(\n                p.getUrl() + \"api/xml?tree\u003dbuilds[actions[parameters[name,value]]]\u0026xpath\u003dfreeStyleProject/build/action/parameter\",\n                \"application/xml\");\n        assertEquals(\n                \"\u003cparameter _class\u003d\\\"hudson.model.StringParameterValue\\\"\u003e\u003cname\u003efoo\u003c/name\u003e\u003cvalue\u003ebar\u003c/value\u003e\u003c/parameter\u003e\",\n                page.getWebResponse().getContentAsString());\n    }","advisory":"JENKINS-22566"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.escapedParameter:void()","methodSource":"@Issue(\"JENKINS-22566\")\n    @Ignore(\"TODO currently fails with: org.dom4j.DocumentException: Error on line 1 of document  : An invalid XML character (Unicode: 0x1b) was found in the element content of the document\")\n    @Test\n    public void escapedParameter() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"foo\", \"\")));\n        j.assertBuildStatusSuccess(p.scheduleBuild2(0, new ParametersAction(new StringParameterValue(\"foo\", \"bar\\u001B\"))));\n\n        Page page \u003d j.createWebClient().goTo(\n                p.getUrl() + \"api/xml?tree\u003dbuilds[actions[parameters[name,value]]]\u0026xpath\u003dfreeStyleProject/build/action/parameter\",\n                \"application/xml\");\n        assertEquals(\n                \"\u003cparameter _class\u003d\\\"hudson.model.StringParameterValue\\\"\u003e\u003cname\u003efoo\u003c/name\u003e\u003cvalue\u003ebar\u0026#x1b;\u003c/value\u003e\u003c/parameter\u003e\",\n                page.getWebResponse().getContentAsString());\n    }","advisory":"JENKINS-22566"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.project_notExposedToIFrame:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1704\")\n    public void project_notExposedToIFrame() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        ensureXmlIsNotExposedToIFrame(p.getUrl());\n        ensureJsonIsNotExposedToIFrame(p.getUrl());\n        ensurePythonIsNotExposedToIFrame(p.getUrl());\n    }","advisory":"SECURITY-1704"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.custom_notExposedToIFrame:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1704\")\n    public void custom_notExposedToIFrame() throws Exception {\n        ensureXmlIsNotExposedToIFrame(\"custom/\");\n        ensureJsonIsNotExposedToIFrame(\"custom/\");\n        ensurePythonIsNotExposedToIFrame(\"custom/\");\n    }","advisory":"SECURITY-1704"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.wrapperXss:void()","methodSource":"@Issue(\"SECURITY-1129\")\n    @Test\n    public void wrapperXss() throws Exception {\n        String wrapper \u003d \"html%20xmlns\u003d\\\"http://www.w3.org/1999/xhtml\\\"\u003e\u003cscript\u003ealert(%27XSS%20Detected%27)\u003c/script\u003e\u003c/html\u003e\u003c!--\";\n\n        checkWrapperParam(wrapper, HttpServletResponse.SC_BAD_REQUEST, Messages.Api_WrapperParamInvalid());\n    }","advisory":"SECURITY-1129"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.wrapperBadName:void()","methodSource":"@Issue(\"SECURITY-1129\")\n    @Test\n    public void wrapperBadName() throws Exception {\n        String wrapper \u003d \"-badname\";\n        checkWrapperParam(wrapper, HttpServletResponse.SC_BAD_REQUEST, Messages.Api_WrapperParamInvalid());\n\n    }","advisory":"SECURITY-1129"},{"className":"hudson.model.ApiTest","methodSignature":"hudson.model.ApiTest.wrapperGoodName:void()","methodSource":"@Issue(\"SECURITY-1129\")\n    @Test\n    public void wrapperGoodName() throws Exception {\n        String wrapper \u003d \"__GoodName-..-OK\";\n        checkWrapperParam(wrapper, HttpServletResponse.SC_OK, null);\n\n    }","advisory":"SECURITY-1129"},{"className":"hudson.model.AsynchPeopleTest","methodSignature":"hudson.model.AsynchPeopleTest.display:void()","methodSource":"@Issue(\"JENKINS-18641\")\n    @Test public void display() throws Exception {\n        User.getById(\"bob\", true);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"asynchPeople\");\n        assertEquals(0, wc.waitForBackgroundJavaScript(120000));\n        boolean found \u003d false;\n        for (DomElement div : page.getElementsByTagName(\"div\")) {\n            if (div.getAttribute(\"class\").contains(\"app-progress-bar\")) {\n                found \u003d true;\n                assertEquals(\"display: none;\", div.getAttribute(\"style\"));\n                break;\n            }\n        }\n        assertTrue(found);\n        /* TODO this still fails occasionally, for reasons TBD (I think because User.getAll sometimes is empty):\n        assertNotNull(page.getElementById(\"person-bob\"));\n        */\n    }","advisory":"JENKINS-18641"},{"className":"hudson.model.AutoCompletionCandidatesTest","methodSignature":"hudson.model.AutoCompletionCandidatesTest.completion:void()","methodSource":"@Test\n    public void completion() throws Exception {\n        FreeStyleProject foo \u003d j.createFreeStyleProject(\"foo\");\n        MatrixProject bar \u003d j.jenkins.createProject(MatrixProject.class, \"bar\");\n        bar.setAxes(new AxisList(new TextAxis(\"x\", \"1\", \"2\", \"3\")));\n\n        AutoCompletionCandidates c;\n\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"\", foo, j.jenkins);\n        assertContains(c, \"foo\", \"bar\");\n\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"ba\", foo, j.jenkins);\n        assertContains(c, \"bar\");\n\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"bar/\", foo, j.jenkins);\n        assertContains(c, \"bar/x\u003d1\", \"bar/x\u003d2\", \"bar/x\u003d3\");\n\n\n        c \u003d AutoCompletionCandidates.ofJobNames(FreeStyleProject.class, \"\", foo, j.jenkins);\n        assertContains(c, \"foo\");\n\n        c \u003d AutoCompletionCandidates.ofJobNames(MatrixConfiguration.class, \"bar/\", foo, j.jenkins);\n        assertContains(c, \"bar/x\u003d1\", \"bar/x\u003d2\", \"bar/x\u003d3\");\n\n        MatrixConfiguration x3 \u003d bar.getItem(\"x\u003d3\");\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"\", x3, x3.getParent());\n        assertContains(c, \"x\u003d1\", \"x\u003d2\", \"x\u003d3\");\n\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"/\", x3, x3.getParent());\n        assertContains(c, \"/foo\", \"/bar\");\n\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"/bar/\", x3, x3.getParent());\n        assertContains(c, \"/bar/x\u003d1\", \"/bar/x\u003d2\", \"/bar/x\u003d3\");\n\n        // relative path\n        c \u003d AutoCompletionCandidates.ofJobNames(Item.class, \"../\", x3, x3.getParent());\n        assertContains(c, \"../bar\", \"../foo\");\n    }"},{"className":"hudson.model.BuildAuthorizationTokenTest","methodSignature":"hudson.model.BuildAuthorizationTokenTest.triggerJobWithoutSecurityRealm_ShouldSucceed_WithPost:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2558\")\n    public void triggerJobWithoutSecurityRealm_ShouldSucceed_WithPost() throws Exception {\n        jr.jenkins.setSecurityRealm(null);\n        jr.jenkins.setAuthorizationStrategy(null);\n        FreeStyleProject project \u003d createFreestyleProjectWithToken();\n        JenkinsRule.WebClient wc \u003d jr.createWebClient();\n        wc.getPage(wc.addCrumb(new WebRequest(new URL(jr.getURL(), project.getUrl() +\n                \"build?delay\u003d0\"),\n                HttpMethod.POST)));\n        jr.waitUntilNoActivity();\n        assertThat(\"the project should have been built\", project.getBuilds(), hasSize(1));\n    }","advisory":"SECURITY-2558"},{"className":"hudson.model.BuildAuthorizationTokenTest","methodSignature":"hudson.model.BuildAuthorizationTokenTest.triggerJobWithoutSecurityRealm_ShouldFail_WithGet:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2558\")\n    public void triggerJobWithoutSecurityRealm_ShouldFail_WithGet() throws Exception {\n        jr.jenkins.setSecurityRealm(null);\n        jr.jenkins.setAuthorizationStrategy(null);\n        FreeStyleProject project \u003d jr.createFreeStyleProject();\n        JenkinsRule.WebClient wc \u003d jr.createWebClient();\n        FailingHttpStatusCodeException fex \u003d assertThrows(\n                \"should not reach here since only POST request can\",\n                FailingHttpStatusCodeException.class,\n                () -\u003e wc.getPage(new WebRequest(new URL(jr.getURL(), project.getUrl() + \"build?delay\u003d0\"), HttpMethod.GET)));\n        assertThat(\"Should fail with method not allowed\", fex.getStatusCode(), is(405));\n    }","advisory":"SECURITY-2558"},{"className":"hudson.model.BuildAuthorizationTokenTest","methodSignature":"hudson.model.BuildAuthorizationTokenTest.triggerJobWithoutSecurityRealm_ButWithToken_ShouldSucceed_WithGet:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2558\")\n    public void triggerJobWithoutSecurityRealm_ButWithToken_ShouldSucceed_WithGet() throws Exception {\n        jr.jenkins.setSecurityRealm(null);\n        jr.jenkins.setAuthorizationStrategy(null);\n        FreeStyleProject project \u003d createFreestyleProjectWithToken();\n        JenkinsRule.WebClient wc \u003d jr.createWebClient();\n        wc.getPage(new WebRequest(new URL(jr.getURL(), project.getUrl() + \"build?delay\u003d0\u0026token\u003d\" + token),\n                HttpMethod.GET));\n        jr.waitUntilNoActivity();\n        assertThat(\"the project should have been built\", project.getBuilds(), hasSize(1));\n    }","advisory":"SECURITY-2558"},{"className":"hudson.model.BuildAuthorizationTokenTest","methodSignature":"hudson.model.BuildAuthorizationTokenTest.triggerJobWithTokenShouldSucceedWithPost:void()","methodSource":"@Test\n    public void triggerJobWithTokenShouldSucceedWithPost() throws Exception {\n        FreeStyleProject project \u003d createFreestyleProjectWithToken();\n        JenkinsRule.WebClient wc \u003d jr.createWebClient();\n        HtmlPage page \u003d wc.getPage(wc.addCrumb(new WebRequest(\n                new URL(jr.getURL(), project.getUrl() + \"build?delay\u003d0\u0026token\u003d\" + token),\n                HttpMethod.POST)));\n        jr.waitUntilNoActivity();\n        assertThat(\"the project should have been built\", project.getBuilds(), hasSize(1));\n    }"},{"className":"hudson.model.BuildAuthorizationTokenTest","methodSignature":"hudson.model.BuildAuthorizationTokenTest.triggerJobWithTokenShouldSucceedWithGet:void()","methodSource":"@Test\n    public void triggerJobWithTokenShouldSucceedWithGet() throws Exception {\n        FreeStyleProject project \u003d createFreestyleProjectWithToken();\n        JenkinsRule.WebClient wc \u003d jr.createWebClient();\n        HtmlPage page \u003d wc.getPage(new WebRequest(\n                new URL(jr.getURL(), project.getUrl() + \"build?delay\u003d0\u0026token\u003d\" + token),\n                HttpMethod.GET));\n        jr.waitUntilNoActivity();\n        assertThat(\"the project should have been built\", project.getBuilds(), hasSize(1));\n    }"},{"className":"hudson.model.BuildAuthorizationTokenTest","methodSignature":"hudson.model.BuildAuthorizationTokenTest.triggerJobsWithoutTokenShouldFail:void()","methodSource":"@Test\n    public void triggerJobsWithoutTokenShouldFail() throws Exception {\n        FreeStyleProject project \u003d jr.createFreeStyleProject();\n        JenkinsRule.WebClient wc \u003d jr.createWebClient();\n        FailingHttpStatusCodeException fex \u003d assertThrows(\n                \"should not reach here as anonymous does not have Item.BUILD and token is not set\",\n                FailingHttpStatusCodeException.class,\n                () -\u003e wc.getPage(wc.addCrumb(new WebRequest(new URL(jr.getURL(), project.getUrl() + \"build?delay\u003d0\"), HttpMethod.POST))));\n        assertThat(\"Should fail with access denied\", fex.getStatusCode(), is(403));\n    }"},{"className":"hudson.model.BuildExecutionTest","methodSignature":"hudson.model.BuildExecutionTest.workspaceReliablyReleased:void()","methodSource":"@Issue(\"JENKINS-26698\")\n    @Test public void workspaceReliablyReleased() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getPublishersList().add(new BrokenPublisher());\n        FreeStyleBuild b \u003d r.buildAndAssertStatus(Result.FAILURE, p);\n        r.assertLogContains(Messages.Build_post_build_steps_failed(), b);\n        FilePath ws \u003d r.jenkins.getWorkspaceFor(p);\n        try (WorkspaceList.Lease lease \u003d r.jenkins.toComputer().getWorkspaceList().allocate(ws)) {\n            assertEquals(ws, lease.path);\n        }\n    }","advisory":"JENKINS-26698"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.deeplyNestedCauses:void()","methodSource":"@Issue(\"JENKINS-14814\")\n    @Test public void deeplyNestedCauses() throws Exception {\n        FreeStyleProject a \u003d j.createFreeStyleProject(\"a\");\n        FreeStyleProject b \u003d j.createFreeStyleProject(\"b\");\n        FreeStyleBuild early \u003d null;\n        FreeStyleBuild last \u003d null;\n        List\u003cQueueTaskFuture\u003cFreeStyleBuild\u003e\u003e futures \u003d new ArrayList\u003c\u003e();\n        for (int i \u003d 1; i \u003c\u003d 15; i++) {\n            last \u003d recordFuture(b.scheduleBuild2(0, new Cause.UpstreamCause(recordFuture(a.scheduleBuild2(0, last \u003d\u003d null ? null : new Cause.UpstreamCause(last)), futures).get())), futures).get();\n            if (i \u003d\u003d 5) {\n                early \u003d last;\n            }\n        }\n        String buildXml \u003d new XmlFile(Run.XSTREAM, new File(early.getRootDir(), \"build.xml\")).asString();\n        assertTrue(\"keeps full history:\\n\" + buildXml, buildXml.contains(\"\u003cupstreamBuild\u003e1\u003c/upstreamBuild\u003e\"));\n        buildXml \u003d new XmlFile(Run.XSTREAM, new File(last.getRootDir(), \"build.xml\")).asString();\n        assertFalse(\"too big:\\n\" + buildXml, buildXml.contains(\"\u003cupstreamBuild\u003e1\u003c/upstreamBuild\u003e\"));\n        for (QueueTaskFuture\u003cFreeStyleBuild\u003e future : futures) {\n            j.assertBuildStatusSuccess(j.waitForCompletion(future.waitForStart()));\n        }\n    }","advisory":"JENKINS-14814"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.broadlyNestedCauses:void()","methodSource":"@Issue(\"JENKINS-15747\")\n    @Test public void broadlyNestedCauses() throws Exception {\n        FreeStyleProject a \u003d j.createFreeStyleProject(\"a\");\n        FreeStyleProject b \u003d j.createFreeStyleProject(\"b\");\n        FreeStyleProject c \u003d j.createFreeStyleProject(\"c\");\n        List\u003cQueueTaskFuture\u003cFreeStyleBuild\u003e\u003e futures \u003d new ArrayList\u003c\u003e();\n        Run\u003c?, ?\u003e last \u003d null;\n        for (int i \u003d 1; i \u003c\u003d 10; i++) {\n            Cause cause \u003d last \u003d\u003d null ? null : new Cause.UpstreamCause(last);\n            QueueTaskFuture\u003cFreeStyleBuild\u003e next1 \u003d recordFuture(a.scheduleBuild2(0, cause), futures);\n            recordFuture(a.scheduleBuild2(0, cause), futures);\n            cause \u003d new Cause.UpstreamCause(next1.get());\n            QueueTaskFuture\u003cFreeStyleBuild\u003e next2 \u003d recordFuture(b.scheduleBuild2(0, cause), futures);\n            recordFuture(b.scheduleBuild2(0, cause), futures);\n            cause \u003d new Cause.UpstreamCause(next2.get());\n            QueueTaskFuture\u003cFreeStyleBuild\u003e next3 \u003d recordFuture(c.scheduleBuild2(0, cause), futures);\n            recordFuture(c.scheduleBuild2(0, cause), futures);\n            last \u003d next3.get();\n        }\n        int count \u003d new XmlFile(Run.XSTREAM, new File(last.getRootDir(), \"build.xml\")).asString().split(Pattern.quote(\"\u003chudson.model.Cause_-UpstreamCause\")).length;\n        assertFalse(\"too big at \" + count, count \u003e 100);\n        //j.interactiveBreak();\n        for (QueueTaskFuture\u003cFreeStyleBuild\u003e future : futures) {\n            j.assertBuildStatusSuccess(j.waitForCompletion(future.waitForStart()));\n        }\n    }","advisory":"JENKINS-15747"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.userIdCausePrintTest:void()","methodSource":"@Issue(\"JENKINS-48467\")\n    @Test public void userIdCausePrintTest() throws Exception {\n        ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n        TaskListener listener \u003d new StreamTaskListener(baos, Charset.defaultCharset());\n\n        //null userId - print unknown or anonymous\n        Cause causeA \u003d new Cause.UserIdCause(null);\n        causeA.print(listener);\n\n        assertEquals(\"Started by user unknown or anonymous\", baos.toString(Charset.defaultCharset()).trim());\n        baos.reset();\n\n        //SYSTEM userid  - getDisplayName() should be SYSTEM\n        Cause causeB \u003d new Cause.UserIdCause();\n        causeB.print(listener);\n\n        assertThat(baos.toString(Charset.defaultCharset()), containsString(\"SYSTEM\"));\n        baos.reset();\n\n        //unknown userid - print unknown or anonymous\n        Cause causeC \u003d new Cause.UserIdCause(\"abc123\");\n        causeC.print(listener);\n\n        assertEquals(\"Started by user unknown or anonymous\", baos.toString(Charset.defaultCharset()).trim());\n        baos.reset();\n\n        //More or less standard operation\n        //user userid  - getDisplayName() should be foo\n        User user \u003d User.getById(\"foo\", true);\n        Cause causeD \u003d new Cause.UserIdCause(user.getId());\n        causeD.print(listener);\n\n        assertThat(baos.toString(Charset.defaultCharset()), containsString(user.getDisplayName()));\n        baos.reset();\n    }","advisory":"JENKINS-48467"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.xssInRemoteCause:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1960\")\n    @LocalData\n    public void xssInRemoteCause() throws IOException, SAXException {\n        final Item item \u003d j.jenkins.getItemByFullName(\"fs\");\n        assertThat(item, instanceOf(FreeStyleProject.class));\n        FreeStyleProject fs \u003d (FreeStyleProject) item;\n        final FreeStyleBuild build \u003d fs.getBuildByNumber(1);\n\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n        final String content \u003d wc.getPage(build).getWebResponse().getContentAsString();\n        Assert.assertFalse(content.contains(\"Started by remote host \u003cimg\"));\n        Assert.assertTrue(content.contains(\"Started by remote host \u0026lt;img\"));\n    }","advisory":"SECURITY-1960"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.preventXssInUpstreamDisplayName:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1901\")\n    public void preventXssInUpstreamDisplayName() throws Exception {\n        j.jenkins.setQuietPeriod(0);\n        FreeStyleProject up \u003d j.createFreeStyleProject(\"up\");\n        up.setDisplayName(\"Up\u003cscript\u003ealert(123)\u003c/script\u003eProject\");\n\n        FreeStyleProject down \u003d j.createFreeStyleProject(\"down\");\n\n        up.getPublishersList().add(new BuildTrigger(down.getFullName(), false));\n\n        j.jenkins.rebuildDependencyGraph();\n\n        j.buildAndAssertSuccess(up);\n\n        FreeStyleBuild downBuild \u003d this.waitForDownBuild(down);\n\n        ensureXssIsPrevented(downBuild);\n    }","advisory":"SECURITY-1901"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.preventXssInUpstreamDisplayName_deleted:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1901\")\n    public void preventXssInUpstreamDisplayName_deleted() throws Exception {\n        j.jenkins.setQuietPeriod(0);\n        FreeStyleProject up \u003d j.createFreeStyleProject(\"up\");\n        up.setDisplayName(\"Up\u003cscript\u003ealert(123)\u003c/script\u003eProject\");\n\n        FreeStyleProject down \u003d j.createFreeStyleProject(\"down\");\n\n        up.getPublishersList().add(new BuildTrigger(down.getFullName(), false));\n\n        j.jenkins.rebuildDependencyGraph();\n\n        FreeStyleBuild upBuild \u003d j.buildAndAssertSuccess(up);\n\n        FreeStyleBuild downBuild \u003d this.waitForDownBuild(down);\n\n        // that will display a different part\n        upBuild.delete();\n\n        ensureXssIsPrevented(downBuild);\n    }","advisory":"SECURITY-1901"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.preventXssInUpstreamShortDescription:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1901\")\n    public void preventXssInUpstreamShortDescription() throws Exception {\n        FullNameChangingProject up \u003d j.createProject(FullNameChangingProject.class, \"up\");\n\n        FreeStyleProject down \u003d j.createFreeStyleProject(\"down\");\n\n        CustomBuild upBuild \u003d j.buildAndAssertSuccess(up);\n\n        up.setVirtualName(\"Up\u003cscript\u003ealert(123)\u003c/script\u003eProject\");\n        j.assertBuildStatusSuccess(down.scheduleBuild2(0, new Cause.UpstreamCause(upBuild)));\n        up.setVirtualName(null);\n\n        FreeStyleBuild downBuild \u003d this.waitForDownBuild(down);\n\n        ensureXssIsPrevented(downBuild);\n    }","advisory":"SECURITY-1901"},{"className":"hudson.model.CauseTest","methodSignature":"hudson.model.CauseTest.basicCauseIsSafe:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2452\")\n    public void basicCauseIsSafe() throws Exception {\n        final FreeStyleProject fs \u003d j.createFreeStyleProject();\n        {\n            final FreeStyleBuild build \u003d j.waitForCompletion(fs.scheduleBuild2(0, new SimpleCause(\"safe\")).get());\n\n            final JenkinsRule.WebClient wc \u003d j.createWebClient();\n            final String content \u003d wc.getPage(build).getWebResponse().getContentAsString();\n            Assert.assertTrue(content.contains(\"Simple cause: safe\"));\n        }\n        {\n            final FreeStyleBuild build \u003d j.waitForCompletion(fs.scheduleBuild2(0, new SimpleCause(\"\u003cimg src\u003dx onerror\u003dalert(1)\u003e\")).get());\n\n            final JenkinsRule.WebClient wc \u003d j.createWebClient();\n            final String content \u003d wc.getPage(build).getWebResponse().getContentAsString();\n            Assert.assertFalse(content.contains(\"Simple cause: \u003cimg\"));\n            Assert.assertTrue(content.contains(\"Simple cause: \u0026lt;img\"));\n        }\n    }","advisory":"SECURITY-2452"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.configXmlGetShouldFailForUnauthorized:void()","methodSource":"@Test\n    public void configXmlGetShouldFailForUnauthorized() {\n\n        when(req.getMethod()).thenReturn(\"GET\");\n\n        rule.jenkins.setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy());\n\n        assertThrows(AccessDeniedException3.class, () -\u003e computer.doConfigDotXml(req, rsp));\n    }"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.configXmlPostShouldFailForUnauthorized:void()","methodSource":"@Test\n    public void configXmlPostShouldFailForUnauthorized() {\n\n        when(req.getMethod()).thenReturn(\"POST\");\n\n        rule.jenkins.setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy());\n\n        assertThrows(AccessDeniedException3.class, () -\u003e computer.doConfigDotXml(req, rsp));\n    }"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.configXmlGetShouldYieldNodeConfiguration:void()","methodSource":"@Test\n    public void configXmlGetShouldYieldNodeConfiguration() throws Exception {\n\n        when(req.getMethod()).thenReturn(\"GET\");\n\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        Computer.EXTENDED_READ.setEnabled(true);\n        auth.add(Computer.EXTENDED_READ, \"user\");\n\n        final OutputStream outputStream \u003d captureOutput();\n\n        computer.doConfigDotXml(req, rsp);\n\n        final String out \u003d outputStream.toString();\n        assertThat(out, startsWith(\"\u003c?xml version\u003d\\\"1.1\\\" encoding\u003d\\\"UTF-8\\\"?\u003e\"));\n        assertThat(out, containsString(\"\u003cname\u003eslave0\u003c/name\u003e\"));\n        assertThat(out, containsString(\"\u003cmode\u003eNORMAL\u003c/mode\u003e\"));\n    }"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.configXmlPostShouldUpdateNodeConfiguration:void()","methodSource":"@Test\n    public void configXmlPostShouldUpdateNodeConfiguration() throws Exception {\n\n        when(req.getMethod()).thenReturn(\"POST\");\n\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        auth.add(Computer.CONFIGURE, \"user\");\n\n        when(req.getInputStream()).thenReturn(xmlNode(\"node.xml\"));\n\n        computer.doConfigDotXml(req, rsp);\n\n        final Node updatedSlave \u003d rule.jenkins.getNode(\"AgentFromXML\");\n        assertThat(updatedSlave.getNodeName(), equalTo(\"AgentFromXML\"));\n        assertThat(updatedSlave.getNumExecutors(), equalTo(42));\n    }"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.emptyNodeMonitorDataWithoutConnect:void()","methodSource":"@Test\n    @Issue(\"SECURITY-343\")\n    public void emptyNodeMonitorDataWithoutConnect() {\n        rule.jenkins.setAuthorizationStrategy(new GlobalMatrixAuthorizationStrategy());\n\n        assertTrue(computer.getMonitorData().isEmpty());\n    }","advisory":"SECURITY-343"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.populatedNodeMonitorDataWithConnect:void()","methodSource":"@Test\n    @Issue(\"SECURITY-343\")\n    public void populatedNodeMonitorDataWithConnect() {\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        auth.add(Computer.CONNECT, \"user\");\n\n        assertFalse(computer.getMonitorData().isEmpty());\n    }","advisory":"SECURITY-343"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.cannotChangeNodeType:void()","methodSource":"@Issue(\"SECURITY-1721\")\n    @Test\n    public void cannotChangeNodeType() throws Exception {\n        PretendSlave agent \u003d rule.createPretendSlave(p -\u003e new FakeLauncher.FinishedProc(0));\n        String name \u003d agent.getNodeName();\n        assertThat(name, is(not(emptyOrNullString())));\n        Computer computer \u003d agent.toComputer();\n        assertThat(computer, is(notNullValue()));\n\n        JenkinsRule.WebClient wc \u003d rule.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(String.format(\"%s/config.xml\", computer.getUrl())), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        // to ensure maximum compatibility of payload, we\u0027ll serialize a real one with the same name\n        DumbSlave mole \u003d new DumbSlave(name, temporaryFolder.newFolder().getPath(), rule.createComputerLauncher(null));\n        req.setRequestBody(Jenkins.XSTREAM.toXML(mole));\n        WebResponse response \u003d wc.getPage(req).getWebResponse();\n        assertThat(response.getStatusCode(), is(400));\n\n        // verify node hasn\u0027t been transformed into a different type\n        Node node \u003d rule.jenkins.getNode(name);\n        assertThat(node, instanceOf(PretendSlave.class));\n    }","advisory":"SECURITY-1721"},{"className":"hudson.model.ComputerConfigDotXmlTest","methodSignature":"hudson.model.ComputerConfigDotXmlTest.nodeNameReferencesParentDir:void()","methodSource":"@Issue(\"SECURITY-2021\")\n    @Test\n    public void nodeNameReferencesParentDir() throws Exception {\n        Computer computer \u003d rule.createSlave(\"anything\", null).toComputer();\n\n        JenkinsRule.WebClient wc \u003d rule.createWebClient();\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(String.format(\"%s/config.xml\", computer.getUrl())), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        req.setRequestBody(VALID_XML_BAD_NAME_XML);\n\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n        assertThat(e.getStatusCode(), equalTo(400));\n        File configDotXml \u003d new File(rule.jenkins.getRootDir(), \"config.xml\");\n        String configDotXmlContents \u003d Files.readString(configDotXml.toPath(), StandardCharsets.UTF_8);\n\n        assertThat(configDotXmlContents, not(containsString(\"\u003cname\u003e../\u003c/name\u003e\")));\n    }","advisory":"SECURITY-2021"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.pageRendering:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2821\")\n    public void pageRendering() throws Exception {\n        WebClient client \u003d j.createWebClient();\n        j.createSlave();\n        client.goTo(\"computer\");\n    }","advisory":"JENKINS-2821"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.configuration:void()","methodSource":"@Test\n    public void configuration() throws Exception {\n        WebClient client \u003d j.createWebClient();\n        HtmlForm form \u003d client.goTo(\"computer/configure\").getFormByName(\"config\");\n        j.submit(form);\n    }"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.nodeOfflineCli:void()","methodSource":"@Test\n    public void nodeOfflineCli() throws Exception {\n        DumbSlave s \u003d j.createSlave();\n\n        assertThat(new CLICommandInvoker(j, \"wait-node-offline\").invokeWithArgs(\"xxx\"), CLICommandInvoker.Matcher.failedWith(/* IllegalArgumentException from NodeOptionHandler */ 3));\n        assertThat(new CLICommandInvoker(j, \"wait-node-online\").invokeWithArgs(s.getNodeName()), CLICommandInvoker.Matcher.succeededSilently());\n\n        s.toComputer().disconnect(null).get();\n\n        assertThat(new CLICommandInvoker(j, \"wait-node-offline\").invokeWithArgs(s.getNodeName()), CLICommandInvoker.Matcher.succeededSilently());\n    }"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.getComputerNames:void()","methodSource":"@Test\n    public void getComputerNames() throws Exception {\n        assertThat(ComputerSet.getComputerNames(), is(empty()));\n        j.createSlave(\"aNode\", \"\", null);\n        assertThat(ComputerSet.getComputerNames(), contains(\"aNode\"));\n        j.createSlave(\"anAnotherNode\", \"\", null);\n        assertThat(ComputerSet.getComputerNames(), containsInAnyOrder(\"aNode\", \"anAnotherNode\"));\n    }"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.managePermissionCanConfigure:void()","methodSource":"@Test\n    public void managePermissionCanConfigure() throws Exception {\n        final String USER \u003d \"user\";\n        final String MANAGER \u003d \"manager\";\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                // Read access\n                .grant(Jenkins.READ).everywhere().to(USER)\n\n                // Read and Manage\n                .grant(Jenkins.READ).everywhere().to(MANAGER)\n                .grant(Jenkins.MANAGE).everywhere().to(MANAGER)\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        // Jenkins.READ can access /computer but not /computer/configure\n        wc.login(USER);\n        HtmlPage page \u003d wc.goTo(\"computer/\");\n        assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n        String responseContent \u003d page.getWebResponse().getContentAsString();\n        // the \"Node Monitoring\" link in the app bar is not visible\n        assertThat(responseContent, not(containsString(\"Node Monitoring\")));\n        page \u003d wc.goTo(\"computer/configure\");\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, page.getWebResponse().getStatusCode());\n\n        // Jenkins.MANAGER can access /computer and /computer/configure\n        wc.login(MANAGER);\n        page \u003d wc.goTo(\"computer/\");\n        assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n        responseContent \u003d page.getWebResponse().getContentAsString();\n        // the \"Node Monitoring\" link in the app bar is visible\n        assertThat(responseContent, containsString(\"Configure Monitors\"));\n        page \u003d wc.goTo(\"computer/configure\");\n        assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n        // and the save button is visible\n        responseContent \u003d page.getWebResponse().getContentAsString();\n        assertThat(responseContent, containsString(\"Save\"));\n    }"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.testTerminatedNodeStatusPageDoesNotShowTrace:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2120\")\n    public void testTerminatedNodeStatusPageDoesNotShowTrace() throws Exception {\n        DumbSlave agent \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(agent);\n\n        FreeStyleBuild b \u003d ExecutorTest.startBlockingBuild(p);\n\n        String message \u003d \"It went away\";\n        b.getBuiltOn().toComputer().disconnect(\n                new OfflineCause.ChannelTermination(new RuntimeException(message))\n        );\n\n        WebClient wc \u003d j.createWebClient();\n        Page page \u003d wc.getPage(wc.createCrumbedUrl(agent.toComputer().getUrl()));\n        String content \u003d page.getWebResponse().getContentAsString();\n        assertThat(content, not(containsString(message)));\n\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n    }","advisory":"SECURITY-2120"},{"className":"hudson.model.ComputerSetTest","methodSignature":"hudson.model.ComputerSetTest.testTerminatedNodeAjaxExecutorsDoesNotShowTrace:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2120\")\n    public void testTerminatedNodeAjaxExecutorsDoesNotShowTrace() throws Exception {\n        DumbSlave agent \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(agent);\n\n        FreeStyleBuild b \u003d ExecutorTest.startBlockingBuild(p);\n\n        String message \u003d \"It went away\";\n        b.getBuiltOn().toComputer().disconnect(\n                new OfflineCause.ChannelTermination(new RuntimeException(message))\n        );\n\n        WebClient wc \u003d j.createWebClient();\n        Page page \u003d wc.getPage(wc.createCrumbedUrl(HasWidgetHelper.getWidget(j.jenkins.getComputer(), ExecutorsWidget.class).orElseThrow().getUrl() + \"ajax\"));\n        String content \u003d page.getWebResponse().getContentAsString();\n        assertThat(content, not(containsString(message)));\n\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n    }","advisory":"SECURITY-2120"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.discardLogsAfterDeletion:void()","methodSource":"@Test\n    public void discardLogsAfterDeletion() throws Exception {\n        DumbSlave delete \u003d j.createOnlineSlave(Jenkins.get().getLabelAtom(\"delete\"));\n        DumbSlave keep \u003d j.createOnlineSlave(Jenkins.get().getLabelAtom(\"keep\"));\n        File logFile \u003d delete.toComputer().getLogFile();\n        assertTrue(logFile.exists());\n\n        Jenkins.get().removeNode(delete);\n\n        assertFalse(\"Slave log should be deleted\", logFile.exists());\n        assertFalse(\"Slave log directory should be deleted\", logFile.getParentFile().exists());\n\n        assertTrue(\"Slave log should be kept\", keep.toComputer().getLogFile().exists());\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.testProhibitRenameOverExistingNode:void()","methodSource":"@Issue(\"JENKINS-31321\")\n    @Test\n    public void testProhibitRenameOverExistingNode() throws Exception {\n        final String NOTE \u003d \"Rename node to name of another node should fail.\";\n\n        Node nodeA \u003d j.createSlave(\"nodeA\", null, null);\n        Node nodeB \u003d j.createSlave(\"nodeB\", null, null);\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlForm form \u003d wc.getPage(nodeB, \"configure\").getFormByName(\"config\");\n        form.getInputByName(\"_.name\").setValue(\"nodeA\");\n\n        Page page \u003d j.submit(form);\n        assertEquals(NOTE, HttpURLConnection.HTTP_BAD_REQUEST, page.getWebResponse().getStatusCode());\n        assertThat(NOTE, page.getWebResponse().getContentAsString(),\n                containsString(\"Agent called ‘nodeA’ already exists\"));\n    }","advisory":"JENKINS-31321"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.doNotShowUserDetailsInOfflineCause:void()","methodSource":"@Test\n    public void doNotShowUserDetailsInOfflineCause() throws Exception {\n        DumbSlave slave \u003d j.createOnlineSlave();\n        final Computer computer \u003d slave.toComputer();\n        computer.setTemporarilyOffline(true, new OfflineCause.UserCause(User.getOrCreateByIdOrFullName(\"username\"), \"msg\"));\n        verifyOfflineCause(computer);\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.removeUserDetailsFromOfflineCause:void()","methodSource":"@Test @LocalData\n    public void removeUserDetailsFromOfflineCause() throws Exception {\n        Computer computer \u003d j.jenkins.getComputer(\"deserialized\");\n        verifyOfflineCause(computer);\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.addAction:void()","methodSource":"@Issue(\"JENKINS-42969\")\n    @Test\n    public void addAction() throws Exception {\n        Computer c \u003d j.createSlave().toComputer();\n        class A extends InvisibleAction {}\n\n        assertEquals(0, c.getActions(A.class).size());\n        c.addAction(new A());\n        assertEquals(1, c.getActions(A.class).size());\n        c.addAction(new A());\n        assertEquals(2, c.getActions(A.class).size());\n    }","advisory":"JENKINS-42969"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.tiedJobs:void()","methodSource":"@Test\n    public void tiedJobs() throws Exception {\n        DumbSlave s \u003d j.createOnlineSlave();\n        Label l \u003d s.getSelfLabel();\n        Computer c \u003d s.toComputer();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedLabel(l);\n        FreeStyleProject p2 \u003d j.createFreeStyleProject();\n        MockFolder f \u003d j.createFolder(\"test\");\n        FreeStyleProject p3 \u003d f.createProject(FreeStyleProject.class, \"project\");\n        p3.setAssignedLabel(l);\n        assertThat(c.getTiedJobs(), containsInAnyOrder(p, p3));\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.exceptions:void()","methodSource":"@Test\n    public void exceptions() throws Exception {\n        logging.record(\"\", Level.WARNING).capture(10);\n        boolean ok \u003d false;\n        Computer.threadPoolForRemoting.submit(() -\u003e {\n            if (!ok) {\n                throw new IllegalStateException(\"oops\");\n            }\n        });\n        await().atMost(15, TimeUnit.SECONDS).until(() -\u003e logging, LoggerRule.recorded(Level.WARNING, anyOf(nullValue(), any(String.class)), isA(IllegalStateException.class)));\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.configDotXmlWithValidXmlAndBadField:void()","methodSource":"@Issue(\"SECURITY-1923\")\n    @Test\n    public void configDotXmlWithValidXmlAndBadField() throws Exception {\n        final String CONFIGURATOR \u003d \"configure_user\";\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy mas \u003d new MockAuthorizationStrategy();\n        mas.grant(Computer.CONFIGURE, Computer.EXTENDED_READ, Jenkins.READ)\n                .everywhere()\n                .to(CONFIGURATOR);\n        j.jenkins.setAuthorizationStrategy(mas);\n\n        Computer computer \u003d j.createSlave().toComputer();\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(CONFIGURATOR);\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(String.format(\"%s/config.xml\", computer.getUrl())), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        req.setRequestBody(VALID_XML_BAD_FIELD_USER_XML);\n\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n        // This really shouldn\u0027t return 500, but that\u0027s what it does now.\n        assertThat(e.getStatusCode(), equalTo(500));\n\n        OldDataMonitor odm \u003d ExtensionList.lookupSingleton(OldDataMonitor.class);\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n\n        assertThat(data.size(), equalTo(0));\n\n        odm.doDiscard(null, null);\n\n        User.AllUsers.scanAll();\n        boolean createUser \u003d false;\n        User badUser \u003d User.getById(\"foo\", createUser);\n\n        assertNull(\"Should not have created user.\", badUser);\n    }","advisory":"SECURITY-1923"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.testTerminatedNodeStatusPageDoesNotShowTrace:void()","methodSource":"@Test\n    public void testTerminatedNodeStatusPageDoesNotShowTrace() throws Exception {\n        DumbSlave agent \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(agent);\n\n        FreeStyleBuild b \u003d ExecutorTest.startBlockingBuild(p);\n\n        String message \u003d \"It went away\";\n        b.getBuiltOn().toComputer().disconnect(\n                new OfflineCause.ChannelTermination(new RuntimeException(message))\n        );\n\n        WebClient wc \u003d j.createWebClient();\n        Page page \u003d wc.getPage(wc.createCrumbedUrl(agent.toComputer().getUrl()));\n        String content \u003d page.getWebResponse().getContentAsString();\n        assertThat(content, not(containsString(message)));\n\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.testTerminatedNodeAjaxExecutorsDoesNotShowTrace:void()","methodSource":"@Test\n    public void testTerminatedNodeAjaxExecutorsDoesNotShowTrace() throws Exception {\n        DumbSlave agent \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(agent);\n\n        FreeStyleBuild b \u003d ExecutorTest.startBlockingBuild(p);\n\n        String message \u003d \"It went away\";\n        b.getBuiltOn().toComputer().disconnect(\n                new OfflineCause.ChannelTermination(new RuntimeException(message))\n        );\n\n        WebClient wc \u003d j.createWebClient();\n        Page page \u003d wc.getPage(wc.createCrumbedUrl(HasWidgetHelper.getWidget(agent.toComputer(), ExecutorsWidget.class).orElseThrow().getUrl() + \"ajax\"));\n        String content \u003d page.getWebResponse().getContentAsString();\n        assertThat(content, not(containsString(message)));\n\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n    }"},{"className":"hudson.model.ComputerTest","methodSignature":"hudson.model.ComputerTest.computersCollected:void()","methodSource":"@Test\n    public void computersCollected() throws Exception {\n        assumeThat(\"Seems to crash the test JVM at least in CI\", Functions.isWindows(), is(false));\n        DumbSlave agent \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(agent);\n        j.buildAndAssertSuccess(p);\n        Computer computer \u003d agent.toComputer();\n        WeakReference\u003cComputer\u003e computerRef \u003d new WeakReference\u003c\u003e(computer);\n        WeakReference\u003cChannel\u003e channelRef \u003d new WeakReference\u003c\u003e((Channel) computer.getChannel());\n        computer.disconnect(null);\n        computer \u003d null;\n        j.jenkins.removeNode(agent);\n        agent \u003d null;\n        MemoryAssert.assertGC(computerRef, false);\n        MemoryAssert.assertGC(channelRef, false);\n    }"},{"className":"hudson.model.DependencyGraphTest","methodSignature":"hudson.model.DependencyGraphTest.testTriggerJob:void()","methodSource":"@Test\n    public void testTriggerJob() throws Exception {\n        j.setQuietPeriod(3);\n        Project p \u003d j.createFreeStyleProject(),\n            down1 \u003d j.createFreeStyleProject(), down2 \u003d j.createFreeStyleProject();\n        // Add one standard downstream job:\n        p.getPublishersList().add(\n                new BuildTrigger(List.of(down1), Result.SUCCESS));\n        // Add one downstream job with custom Dependency impl:\n        p.getBuildersList().add(new TestDeclarer(Result.UNSTABLE, down2));\n        j.jenkins.rebuildDependencyGraph();\n        // First build won\u0027t trigger down1 (Unstable doesn\u0027t meet threshold)\n        // but will trigger down2 (build #1 is odd).\n        Build b \u003d (Build) p.scheduleBuild2(0, new Cause.UserIdCause()).get();\n        String log \u003d JenkinsRule.getLog(b);\n        Queue.Item q \u003d j.jenkins.getQueue().getItem(down1);\n        assertNull(\"down1 should not be triggered: \" + log, q);\n        assertNull(\"down1 should not be triggered: \" + log, down1.getLastBuild());\n        q \u003d j.jenkins.getQueue().getItem(down2);\n        assertNotNull(\"down2 should be in queue (quiet period): \" + log, q);\n        Run r \u003d (Run) q.getFuture().get(60, TimeUnit.SECONDS);\n        assertNotNull(\"down2 should be triggered: \" + log, r);\n        assertNotNull(\"down2 should have MailMessageIdAction\",\n                      r.getAction(MailMessageIdAction.class));\n        // Now change to success result..\n        p.getBuildersList().replace(new TestDeclarer(Result.SUCCESS, down2));\n        j.jenkins.rebuildDependencyGraph();\n        // ..and next build will trigger down1 (Success meets threshold),\n        // but not down2 (build #2 is even)\n        b \u003d (Build) p.scheduleBuild2(0, new Cause.UserIdCause()).get();\n        log \u003d JenkinsRule.getLog(b);\n        q \u003d j.jenkins.getQueue().getItem(down2);\n        assertNull(\"down2 should not be triggered: \" + log, q);\n        assertEquals(\"down2 should not be triggered: \" + log, 1,\n                     down2.getLastBuild().getNumber());\n        q \u003d j.jenkins.getQueue().getItem(down1);\n        assertNotNull(\"down1 should be in queue (quiet period): \" + log, q);\n        r \u003d (Run) q.getFuture().get(60, TimeUnit.SECONDS);\n        assertNotNull(\"down1 should be triggered\", r);\n    }"},{"className":"hudson.model.DependencyGraphTest","methodSignature":"hudson.model.DependencyGraphTest.testItemReadPermission:void()","methodSource":"@LocalData @Issue(\"JENKINS-5265\")\n    @Test\n    public void testItemReadPermission() {\n        // Rebuild dependency graph as anonymous user:\n        j.jenkins.rebuildDependencyGraph();\n        // Switch to full access to check results:\n        try (ACLContext ignored \u003d ACL.as2(ACL.SYSTEM2)) {\n            // @LocalData for this test has jobs w/o anonymous Item.READ\n            AbstractProject up \u003d (AbstractProject) j.jenkins.getItem(\"hiddenUpstream\");\n            assertNotNull(\"hiddenUpstream project not found\", up);\n            List\u003cAbstractProject\u003e down \u003d j.jenkins.getDependencyGraph().getDownstream(up);\n            assertEquals(\"Should have one downstream project\", 1, down.size());\n        } finally {\n            SecurityContextHolder.clearContext();\n        }\n    }","advisory":"JENKINS-5265"},{"className":"hudson.model.DependencyGraphTest","methodSignature":"hudson.model.DependencyGraphTest.testTopologicalSort:void()","methodSource":"@Issue(\"JENKINS-17247\")\n    @Test\n    public void testTopologicalSort() throws Exception {\n        /*\n            A-B---C-E\n               \\ /\n                D           A-\u003eB-\u003eC-\u003eD-\u003eB  and C-\u003eE\n         */\n        FreeStyleProject e \u003d j.createFreeStyleProject(\"e\");\n        FreeStyleProject d \u003d j.createFreeStyleProject(\"d\");\n        FreeStyleProject c \u003d j.createFreeStyleProject(\"c\");\n        FreeStyleProject b \u003d j.createFreeStyleProject(\"b\");\n        FreeStyleProject a \u003d j.createFreeStyleProject(\"a\");\n\n        depends(a, b);\n        depends(b, c);\n        depends(c, d, e);\n        depends(d, b);\n\n        j.jenkins.rebuildDependencyGraph();\n\n        DependencyGraph g \u003d j.jenkins.getDependencyGraph();\n        List\u003cAbstractProject\u003c?, ?\u003e\u003e sorted \u003d g.getTopologicallySorted();\n        StringBuilder buf \u003d new StringBuilder();\n        for (AbstractProject\u003c?, ?\u003e p : sorted) {\n            buf.append(p.getName());\n        }\n        String r \u003d buf.toString();\n        assertTrue(r.startsWith(\"a\"));\n        assertTrue(r.endsWith(\"e\"));\n        assertEquals(5, r.length());\n\n        assertTrue(g.compare(a, b) \u003c 0);\n        assertTrue(g.compare(a, e) \u003c 0);\n        assertTrue(g.compare(b, e) \u003c 0);\n        assertTrue(g.compare(c, e) \u003c 0);\n\n    }","advisory":"JENKINS-17247"},{"className":"hudson.model.DescriptorTest","methodSignature":"hudson.model.DescriptorTest.getItemTypeDescriptorOrDie:void()","methodSource":"@Issue(\"JENKINS-12307\")\n    @Test public void getItemTypeDescriptorOrDie() {\n        Describable\u003c?\u003e instance \u003d new Shell(\"echo hello\");\n        Descriptor\u003c?\u003e descriptor \u003d instance.getDescriptor();\n        PropertyType propertyType \u003d descriptor.getPropertyType(instance, \"command\");\n        AssertionError x \u003d assertThrows(AssertionError.class, () -\u003e propertyType.getItemTypeDescriptorOrDie());\n        for (String text : new String[]{\"hudson.tasks.CommandInterpreter\", \"getCommand\", \"java.lang.String\", \"collection\"}) {\n            assertTrue(text + \" mentioned in \" + x, x.toString().contains(text));\n        }\n    }","advisory":"JENKINS-12307"},{"className":"hudson.model.DescriptorTest","methodSignature":"hudson.model.DescriptorTest.overriddenId:void()","methodSource":"@Issue(\"JENKINS-26781\")\n    @Test public void overriddenId() throws Exception {\n        FreeStyleProject p \u003d rule.createFreeStyleProject();\n        p.getBuildersList().add(new BuilderImpl(\"builder-a\"));\n        rule.configRoundtrip(p);\n        List\u003cBuilder\u003e builders \u003d p.getBuildersList();\n        assertEquals(1, builders.size());\n        assertEquals(BuilderImpl.class, builders.get(0).getClass());\n        assertEquals(\"builder-a\", ((BuilderImpl) builders.get(0)).id);\n        rule.assertLogContains(\"running builder-a\", rule.buildAndAssertSuccess(p));\n        p.getBuildersList().replace(new BuilderImpl(\"builder-b\"));\n        rule.configRoundtrip(p);\n        builders \u003d p.getBuildersList();\n        assertEquals(1, builders.size());\n        assertEquals(BuilderImpl.class, builders.get(0).getClass());\n        assertEquals(\"builder-b\", ((BuilderImpl) builders.get(0)).id);\n        rule.assertLogContains(\"running builder-b\", rule.buildAndAssertSuccess(p));\n    }","advisory":"JENKINS-26781"},{"className":"hudson.model.DescriptorTest","methodSignature":"hudson.model.DescriptorTest.nestedDescribableOverridingId:void()","methodSource":"@Issue(\"JENKINS-28110\")\n    @Test public void nestedDescribableOverridingId() throws Exception {\n        FreeStyleProject p \u003d rule.createFreeStyleProject(\"p\");\n        p.getBuildersList().add(new B1(Arrays.asList(new D1(), new D2())));\n        rule.configRoundtrip(p);\n        rule.assertLogContains(\"[D1, D2]\", rule.buildAndAssertSuccess(p));\n    }","advisory":"JENKINS-28110"},{"className":"hudson.model.DescriptorTest","methodSignature":"hudson.model.DescriptorTest.nestedDescribableSharingClass:void()","methodSource":"@Ignore(\"never worked: TypePair.convertJSON looks for @DataBoundConstructor on D3 (Stapler does not grok Descriptor)\")\n    @Issue(\"JENKINS-28110\")\n    @Test public void nestedDescribableSharingClass() throws Exception {\n        FreeStyleProject p \u003d rule.createFreeStyleProject(\"p\");\n        p.getBuildersList().add(new B2(Arrays.asList(new D3(\"d3a\"), new D3(\"d3b\"))));\n        rule.configRoundtrip(p);\n        rule.assertLogContains(\"[d3a, d3b]\", rule.buildAndAssertSuccess(p));\n    }","advisory":"JENKINS-28110"},{"className":"hudson.model.DescriptorTest","methodSignature":"hudson.model.DescriptorTest.presentStacktraceFromFormException:void()","methodSource":"@Test\n    public void presentStacktraceFromFormException() {\n        NullPointerException cause \u003d new NullPointerException();\n        final Descriptor.FormException fe \u003d new Descriptor.FormException(\"My Message\", cause, \"fake\");\n        FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e\n            rule.executeOnServer((Callable\u003cVoid\u003e) () -\u003e {\n                fe.generateResponse(Stapler.getCurrentRequest(), Stapler.getCurrentResponse(), Jenkins.get());\n                return null;\n            }));\n        String response \u003d ex.getResponse().getContentAsString();\n        assertThat(response, containsString(fe.getMessage()));\n        assertThat(response, containsString(cause.getClass().getCanonicalName()));\n        assertThat(response, containsString(getClass().getCanonicalName()));\n    }"},{"className":"hudson.model.DescriptorVisibilityFilterTest","methodSignature":"hudson.model.DescriptorVisibilityFilterTest.jenkins40545:void()","methodSource":"@Test @Issue(\"JENKINS-40545\")\n    public void jenkins40545() throws Exception {\n        logger.record(\"hudson.ExpressionFactory2$JexlExpression\", Level.WARNING);\n        logger.record(\"hudson.model.DescriptorVisibilityFilter\", Level.WARNING);\n        logger.capture(10);\n        HtmlPage page \u003d j.createWebClient().goTo(\"jenkins40545\");\n        assertThat(logger.getRecords(), not(emptyIterable()));\n        for (LogRecord record : logger.getRecords()) {\n            String message \u003d record.getMessage();\n            assertThat(message, allOf(\n                    containsString(\"Descriptor list is null for context \u0027class hudson.model.DescriptorVisibilityFilterTest$Jenkins40545\u0027\"),\n                    containsString(\"DescriptorVisibilityFilterTest/Jenkins40545/index.jelly\"),\n                    not(endsWith(\"NullPointerException\"))\n            ));\n        }\n\n        assertThat(page.getWebResponse().getContentAsString(), containsString(\"descriptors found: .\")); // No output written from expression\n    }","advisory":"JENKINS-40545"},{"className":"hudson.model.DescriptorVisibilityFilterTest","methodSignature":"hudson.model.DescriptorVisibilityFilterTest.securityRealmAndAuthStrategyHidden:void()","methodSource":"@Test @Issue(\"JENKINS-49044\")\n    public void securityRealmAndAuthStrategyHidden() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n        HtmlPage page \u003d j.createWebClient().goTo(\"configureSecurity\");\n        String response \u003d page.getWebResponse().getContentAsString();\n        assertThat(response, not(containsString(\"TestSecurityRealm\")));\n        assertThat(response, not(containsString(\"TestAuthStrategy\")));\n    }","advisory":"JENKINS-49044"},{"className":"hudson.model.DirectlyModifiableViewTest","methodSignature":"hudson.model.DirectlyModifiableViewTest.manipulateViewContent:void()","methodSource":"@Test\n    public void manipulateViewContent() throws IOException {\n        FreeStyleProject projectA \u003d j.createFreeStyleProject(\"projectA\");\n        FreeStyleProject projectB \u003d j.createFreeStyleProject(\"projectB\");\n\n        ListView view \u003d new ListView(\"a_view\", j.jenkins);\n        j.jenkins.addView(view);\n\n        assertFalse(view.contains(projectA));\n        assertFalse(view.contains(projectB));\n\n        view.add(projectA);\n        assertTrue(view.contains(projectA));\n        assertFalse(view.contains(projectB));\n\n        view.add(projectB);\n        assertTrue(view.contains(projectA));\n        assertTrue(view.contains(projectB));\n\n        assertTrue(view.remove(projectA));\n        assertFalse(view.contains(projectA));\n        assertTrue(view.contains(projectB));\n\n        assertTrue(view.remove(projectB));\n        assertFalse(view.contains(projectA));\n        assertFalse(view.contains(projectB));\n\n        assertFalse(view.remove(projectB));\n    }"},{"className":"hudson.model.DirectlyModifiableViewTest","methodSignature":"hudson.model.DirectlyModifiableViewTest.doAddJobToView:void()","methodSource":"@Test\n    public void doAddJobToView() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"a_project\");\n        ListView view \u003d new ListView(\"a_view\", j.jenkins);\n        j.jenkins.addView(view);\n\n        assertFalse(view.contains(project));\n\n        Page page \u003d doPost(view, \"addJobToView?name\u003da_project\");\n        j.assertGoodStatus(page);\n        assertTrue(view.contains(project));\n\n        page \u003d doPost(view, \"addJobToView?name\u003da_project\");\n        j.assertGoodStatus(page);\n        assertTrue(view.contains(project));\n    }"},{"className":"hudson.model.DirectlyModifiableViewTest","methodSignature":"hudson.model.DirectlyModifiableViewTest.doAddNestedJobToRecursiveView:void()","methodSource":"@Test\n    public void doAddNestedJobToRecursiveView() throws Exception {\n        ListView view \u003d new ListView(\"a_view\", j.jenkins);\n        view.setRecurse(true);\n        j.jenkins.addView(view);\n\n        MockFolder folder \u003d j.createFolder(\"folder\");\n        FreeStyleProject np \u003d folder.createProject(FreeStyleProject.class, \"nested_project\");\n\n        view.add(np);\n        assertTrue(view.contains(np));\n        view.remove(np);\n        assertFalse(view.contains(np));\n\n        Page page \u003d doPost(view, \"addJobToView?name\u003dfolder/nested_project\");\n        j.assertGoodStatus(page);\n        assertTrue(view.contains(np));\n\n        page \u003d doPost(view, \"removeJobFromView?name\u003dfolder/nested_project\");\n        j.assertGoodStatus(page);\n        assertFalse(view.contains(np));\n\n        MockFolder nf \u003d folder.createProject(MockFolder.class, \"nested_folder\");\n        FreeStyleProject nnp \u003d nf.createProject(FreeStyleProject.class, \"nested_nested_project\");\n        ListView nestedView \u003d new ListView(\"nested_view\", folder);\n        nestedView.setRecurse(true);\n        folder.addView(nestedView);\n\n        page \u003d doPost(nestedView, \"addJobToView?name\u003dnested_folder/nested_nested_project\");\n        j.assertGoodStatus(page);\n        assertTrue(nestedView.contains(nnp));\n\n        page \u003d doPost(nestedView, \"removeJobFromView?name\u003dnested_folder/nested_nested_project\");\n        j.assertGoodStatus(page);\n        assertFalse(nestedView.contains(nnp));\n\n        page \u003d doPost(nestedView, \"addJobToView?name\u003d/folder/nested_folder/nested_nested_project\");\n        j.assertGoodStatus(page);\n        assertTrue(nestedView.contains(nnp));\n\n        page \u003d doPost(nestedView, \"removeJobFromView?name\u003d/folder/nested_folder/nested_nested_project\");\n        j.assertGoodStatus(page);\n        assertFalse(nestedView.contains(nnp));\n    }"},{"className":"hudson.model.DirectlyModifiableViewTest","methodSignature":"hudson.model.DirectlyModifiableViewTest.doRemoveJobFromView:void()","methodSource":"@Test\n    public void doRemoveJobFromView() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"a_project\");\n        ListView view \u003d new ListView(\"a_view\", j.jenkins);\n        j.jenkins.addView(view);\n\n        Page page \u003d doPost(view, \"addJobToView?name\u003da_project\");\n        assertTrue(view.contains(project));\n\n        page \u003d doPost(view, \"removeJobFromView?name\u003da_project\");\n        j.assertGoodStatus(page);\n        assertFalse(view.contains(project));\n\n        page \u003d doPost(view, \"removeJobFromView?name\u003da_project\");\n        j.assertGoodStatus(page);\n        assertFalse(view.contains(project));\n    }"},{"className":"hudson.model.DirectlyModifiableViewTest","methodSignature":"hudson.model.DirectlyModifiableViewTest.failWebMethodForIllegalRequest:void()","methodSource":"@Test\n    public void failWebMethodForIllegalRequest() throws Exception {\n        ListView view \u003d new ListView(\"a_view\", j.jenkins);\n        j.jenkins.addView(view);\n\n        assertBadStatus(\n                doPost(view, \"addJobToView\"),\n                \"Query parameter \u0027name\u0027 is required\"\n        );\n        assertBadStatus(\n                doPost(view, \"addJobToView?name\u003dno_project\"),\n                \"Query parameter \u0027name\u0027 does not correspond to a known item\"\n        );\n        assertBadStatus(\n                doPost(view, \"removeJobFromView\"),\n                \"Query parameter \u0027name\u0027 is required\"\n        );\n\n        MockFolder folder \u003d j.createFolder(\"folder\");\n        ListView folderView \u003d new ListView(\"folder_view\", folder);\n        folder.addView(folderView);\n\n        // Item is scoped to different ItemGroup\n        assertBadStatus(\n                doPost(folderView, \"addJobToView?name\u003dtop_project\"),\n                \"Query parameter \u0027name\u0027 does not correspond to a known item\"\n        );\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.doubleDots:void()","methodSource":"@Email(\"http://www.nabble.com/Status-Code-400-viewing-or-downloading-artifact-whose-filename-contains-two-consecutive-periods-tt21407604.html\")\n    @Test\n    public void doubleDots() throws Exception {\n        // create a problematic file name in the workspace\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        if (Functions.isWindows())\n            p.getBuildersList().add(new BatchFile(\"echo \u003e abc..def\"));\n        else\n            p.getBuildersList().add(new Shell(\"touch abc..def\"));\n        j.buildAndAssertSuccess(p);\n\n        // can we see it?\n        j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/abc..def\", \"application/octet-stream\");\n\n        // TODO: implement negative check to make sure we aren\u0027t serving unexpected directories.\n        // the following trivial attempt failed. Someone in between is normalizing.\n//        // but this should fail\n//        try {\n//            new WebClient().goTo(\"job/\" + p.getName() + \"/ws/abc/../\", \"application/octet-stream\");\n//        } catch (FailingHttpStatusCodeException e) {\n//            assertEquals(400,e.getStatusCode());\n//        }\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.doubleDots2:void()","methodSource":"@Email(\"http://www.nabble.com/Status-Code-400-viewing-or-downloading-artifact-whose-filename-contains-two-consecutive-periods-tt21407604.html\")\n    @Test\n    public void doubleDots2() throws Exception {\n        Assume.assumeFalse(\"can\u0027t test this on Windows\", Functions.isWindows());\n\n        // create a problematic file name in the workspace\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new Shell(\"mkdir abc; touch abc/def.bin\"));\n        j.buildAndAssertSuccess(p);\n\n        // can we see it?\n        j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/abc%5Cdef.bin\", \"application/octet-stream\");\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.nonAsciiChar:void()","methodSource":"@Test\n    public void nonAsciiChar() throws Exception {\n        // create a problematic file name in the workspace\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                build.getWorkspace().child(\"漢字.bin\").touch(0); // Kanji\n                return true;\n            }\n        }); // Kanji\n        j.buildAndAssertSuccess(p);\n\n        // can we see it?\n        j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/%e6%bc%a2%e5%ad%97.bin\", \"application/octet-stream\");\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.glob:void()","methodSource":"@Test\n    public void glob() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                ws.child(\"pom.xml\").touch(0);\n                ws.child(\"src/main/java/p\").mkdirs();\n                ws.child(\"src/main/java/p/X.java\").touch(0);\n                ws.child(\"src/main/resources/p\").mkdirs();\n                ws.child(\"src/main/resources/p/x.txt\").touch(0);\n                ws.child(\"src/test/java/p\").mkdirs();\n                ws.child(\"src/test/java/p/XTest.java\").touch(0);\n                return true;\n            }\n        });\n        j.buildAndAssertSuccess(p);\n        String text \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/**/*.java\").asNormalizedText();\n        assertTrue(text, text.contains(\"X.java\"));\n        assertTrue(text, text.contains(\"XTest.java\"));\n        assertFalse(text, text.contains(\"pom.xml\"));\n        assertFalse(text, text.contains(\"x.txt\"));\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.zipDownload:void()","methodSource":"@Issue(\"JENKINS-19752\")\n    @Test\n    public void zipDownload() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setScm(new SingleFileSCM(\"artifact.out\", \"Hello world!\"));\n        p.getPublishersList().add(new ArtifactArchiver(\"*\", \"\", true));\n        j.buildAndAssertSuccess(p);\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/artifact/\");\n        Page download \u003d page.getAnchorByHref(\"./*zip*/archive.zip\").click();\n        File zipfile \u003d download((UnexpectedPage) download);\n\n        ZipFile readzip \u003d new ZipFile(zipfile);\n\n        InputStream is \u003d readzip.getInputStream(readzip.getEntry(\"archive/artifact.out\"));\n\n        // ZipException in case of JENKINS-19752\n        assertNotEquals(\"Downloaded zip file must not be empty\", is.read(), -1);\n\n        is.close();\n        readzip.close();\n        zipfile.delete();\n    }","advisory":"JENKINS-19752"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.zipDownloadFileLeakMx_hypothesis:void()","methodSource":"@Test\n    public void zipDownloadFileLeakMx_hypothesis() throws Exception {\n        // this test is meant to just ensure zipDownloadFileLeakMx hypothesis about the UI work fine\n\n        String content \u003d \"Hello world!\";\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setScm(new SingleFileSCM(\"artifact.out\", content));\n        p.getPublishersList().add(new ArtifactArchiver(\"*\", \"\", true));\n        j.buildAndAssertSuccess(p);\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/artifact/\");\n        Page downloadPage \u003d page.getAnchorByHref(\"artifact.out\").click();\n        assertEquals(content, downloadPage.getWebResponse().getContentAsString());\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.zipDownloadFileLeakMx:void()","methodSource":"@Test\n    @Issue({\"JENKINS-64632\", \"JENKINS-61121\"})\n    public void zipDownloadFileLeakMx() throws Exception {\n        Assume.assumeFalse(Functions.isWindows());\n\n        int numOfClicks \u003d 10;\n        int totalRuns \u003d 10;\n        boolean freeFromLeak \u003d false;\n        long[][] openFds \u003d new long[totalRuns][2];\n        for (int runs \u003d 0; runs \u003c totalRuns \u0026\u0026 !freeFromLeak; runs++) {\n            long initialOpenFds \u003d getOpenFdCount();\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n\n            // add randomness just to prevent any potential caching issue\n            p.setScm(new SingleFileSCM(\"artifact.out\", \"Hello world! \" + Math.random()));\n            p.getPublishersList().add(new ArtifactArchiver(\"*\", \"\", true));\n            j.buildAndAssertSuccess(p);\n\n            HtmlPage page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/artifact/\");\n            for (int clicks \u003d 0; clicks \u003c numOfClicks; clicks++) {\n                page.getAnchorByHref(\"artifact.out\").click();\n            }\n            long finalOpenFds \u003d getOpenFdCount();\n\n            if (finalOpenFds \u003c initialOpenFds + numOfClicks) {\n                // when there was a file leak, the number of open file handle was always\n                // greater or equal to the number of download\n                // in reverse, since the correction, the likelihood to overpass the limit was less than 1%\n                freeFromLeak \u003d true;\n            }\n\n            openFds[runs][0] \u003d initialOpenFds;\n            openFds[runs][1] \u003d finalOpenFds;\n        }\n\n        List\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();\n        Map\u003cLong, Long\u003e differences \u003d new TreeMap\u003c\u003e();\n        for (int runs \u003d 0; runs \u003c totalRuns; runs++) {\n            long difference \u003d openFds[runs][1] - openFds[runs][0];\n            Long storedDifference \u003d differences.get(difference);\n            if (storedDifference \u003d\u003d null) {\n                differences.put(difference, 1L);\n            } else {\n                differences.put(difference, ++storedDifference);\n            }\n            messages.add(\"Initial\u003d\" + openFds[runs][0] + \", Final\u003d\" + openFds[runs][1] + \", difference\u003d\" + difference);\n        }\n        for (Long difference : differences.keySet()) {\n            messages.add(\"Difference\u003d\" + difference + \" occurs \" + differences.get(difference) + \" times\");\n        }\n\n        String summary \u003d String.join(\"\\n\", messages);\n        System.out.println(\"Summary of the test: \\n\" + summary);\n        assertTrue(\"There should be no difference greater than \" + numOfClicks + \", but the output was: \\n\" + summary, freeFromLeak);\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.contentSecurityPolicy:void()","methodSource":"@Issue(\"SECURITY-95\")\n    @Test\n    public void contentSecurityPolicy() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setScm(new SingleFileSCM(\"test.html\", \"\u003chtml\u003e\u003cbody\u003e\u003ch1\u003eHello world!\u003c/h1\u003e\u003c/body\u003e\u003c/html\u003e\"));\n        p.getPublishersList().add(new ArtifactArchiver(\"*\", \"\", true));\n        j.buildAndAssertSuccess(p);\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/artifact/test.html\");\n        for (String header : new String[]{\"Content-Security-Policy\", \"X-WebKit-CSP\", \"X-Content-Security-Policy\"}) {\n            assertEquals(\"Header set: \" + header, DirectoryBrowserSupport.DEFAULT_CSP_VALUE, page.getWebResponse().getResponseHeaderValue(header));\n        }\n\n        String propName \u003d DirectoryBrowserSupport.class.getName() + \".CSP\";\n        String initialValue \u003d System.getProperty(propName);\n        try {\n            System.setProperty(propName, \"\");\n            page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/artifact/test.html\");\n            List\u003cString\u003e headers \u003d page.getWebResponse().getResponseHeaders().stream().map(NameValuePair::getName).collect(Collectors.toList());\n            for (String header : new String[]{\"Content-Security-Policy\", \"X-WebKit-CSP\", \"X-Content-Security-Policy\"}) {\n                assertThat(headers, not(hasItem(header)));\n            }\n        } finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(DirectoryBrowserSupport.class.getName() + \".CSP\");\n            } else {\n                System.setProperty(DirectoryBrowserSupport.class.getName() + \".CSP\", initialValue);\n            }\n        }\n    }","advisory":"SECURITY-95"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.externalURLDownload:void()","methodSource":"@Issue(\"JENKINS-49635\")\n    @Test\n    public void externalURLDownload() throws Exception {\n        ArtifactManagerConfiguration.get().getArtifactManagerFactories().add(new ExternalArtifactManagerFactory());\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setScm(new SingleFileSCM(\"f\", \"Hello world!\"));\n        p.getPublishersList().add(new ArtifactArchiver(\"f\"));\n        j.buildAndAssertSuccess(p);\n        HtmlPage page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/artifact/\");\n        Page download \u003d page.getAnchorByText(\"f\").click();\n        assertEquals(\"Hello world!\", download.getWebResponse().getContentAsString());\n    }","advisory":"JENKINS-49635"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.symlink_outsideWorkspace_areNotAllowed:void()","methodSource":"@Test\n    @Issue(\"SECURITY-904\")\n    public void symlink_outsideWorkspace_areNotAllowed() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        File secretsFolder \u003d new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget \u003d new File(secretsFolder, \"goal.txt\");\n        String secretContent \u003d \"secret\";\n        Files.writeString(secretTarget.toPath(), secretContent, StandardCharsets.UTF_8);\n\n        /*\n         *  secrets/\n         *      goal.txt\n         *  workspace/\n         *      intermediateFolder/\n         *          public2.key\n         *          otherFolder/\n         *              to_secret3 -\u003e ../../../../secrets/\n         *          to_secret2 -\u003e ../../../secrets/\n         *          to_secret_goal2 -\u003e ../../../secrets/goal.txt\n         *      public1.key\n         *      to_secret1 -\u003e ../../secrets/\n         *      to_secret_goal1 -\u003e ../../secrets/goal.txt\n         *\n         */\n        if (Functions.isWindows()) {\n            // no need to test mklink /H since we cannot create an hard link to a non-existing file\n            // and so you need to have access to the master file system directly which is already a problem\n\n            String script \u003d loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script \u003d loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { // workspace root must be reachable (regular case)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { // to_secrets1 not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_secrets1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_secrets_goal1 not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // intermediateFolder must be reachable (regular case)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { // to_secrets2 not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // using symbolic in the intermediate path\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_secrets_goal2 not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        // pattern search feature\n        { // the pattern allow us to search inside the files / folders,\n            // without the patch the master.key from inside the outside symlinks would have been linked\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\")\n            ));\n        }\n\n        // zip feature\n        { // all the outside folders / files are not included in the zip, also the parent folder is included\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { // workaround for JENKINS-19947 is still supported, i.e. no parent folder\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/**/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    \"intermediateFolder/public2.key\",\n                    \"public1.key\"\n            ));\n        }\n        { // all the outside folders / files are not included in the zip\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n        { // workaround for JENKINS-19947 is still supported, i.e. no parent folder, even inside a sub-folder\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/**/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"public2.key\"));\n        }\n    }","advisory":"SECURITY-904"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.symlink_avoidLeakingInformation_aboutIllegalFolder:void()","methodSource":"@Test\n    @Issue(\"SECURITY-904\")\n    public void symlink_avoidLeakingInformation_aboutIllegalFolder() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        File secretsFolder \u003d new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget \u003d new File(secretsFolder, \"goal.txt\");\n        String secretContent \u003d \"secret\";\n        Files.writeString(secretTarget.toPath(), secretContent, StandardCharsets.UTF_8);\n        Files.writeString(secretsFolder.toPath().resolve(\"public_fake1.key\"), secretContent, StandardCharsets.UTF_8);\n        Files.writeString(secretsFolder.toPath().resolve(\"public_fake2.key\"), secretContent, StandardCharsets.UTF_8);\n        Files.writeString(secretsFolder.toPath().resolve(\"public_fake3.key\"), secretContent, StandardCharsets.UTF_8);\n\n        /*\n         *  secrets/\n         *      goal.txt\n         *      public_fake1.key\n         *      public_fake2.key\n         *      public_fake3.key\n         *  workspace/\n         *      intermediateFolder/\n         *          public2.key\n         *          otherFolder/\n         *              to_secret3 -\u003e ../../../../secrets/\n         *          to_secret2 -\u003e ../../../secrets/\n         *          to_secret_goal2 -\u003e ../../../secrets/goal.txt\n         *      public1.key\n         *      to_secret1 -\u003e ../../secrets/\n         *      to_secret_goal1 -\u003e ../../secrets/goal.txt\n         *\n         */\n        if (Functions.isWindows()) {\n            // no need to test mklink /H since we cannot create an hard link to a non-existing file\n            // and so you need to have access to the master file system directly which is already a problem\n\n            String script \u003d loadContentFromResource(\"outsideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script \u003d loadContentFromResource(\"outsideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        // the pattern allow us to search inside the files / folders,\n        // but it should not provide / leak information about non readable folders\n\n        { // without the patch the otherFolder and to_secrets[1,2,3] will appear in the results (once)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/**/goal.txt\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // without the patch the otherFolder and to_secrets[1,2,3] will appear in the results (3 times each)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/**/public*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    // those following presences would have leak information that there is some file satisfying that pattern inside\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets3\"))\n            ));\n        }\n    }","advisory":"SECURITY-904"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction:void()","methodSource":"@Test\n    @Issue(\"SECURITY-904\")\n    public void junctionAndSymlink_outsideWorkspace_areNotAllowed_windowsJunction() throws Exception {\n        Assume.assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        File secretsFolder \u003d new File(j.jenkins.getRootDir(), \"secrets\");\n        File secretTarget \u003d new File(secretsFolder, \"goal.txt\");\n        String secretContent \u003d \"secret\";\n        Files.writeString(secretTarget.toPath(), secretContent, StandardCharsets.UTF_8);\n\n        /*\n         *  secrets/\n         *      goal.txt\n         *  workspace/\n         *      intermediateFolder/\n         *          public2.key\n         *          otherFolder/\n         *              to_secret3s -\u003e symlink ../../../../secrets/\n         *              to_secret3j -\u003e junction ../../../../secrets/\n         *          to_secret2s -\u003e symlink ../../../secrets/\n         *          to_secret2j -\u003e junction ../../../secrets/\n         *          to_secret_goal2 -\u003e symlink ../../../secrets/goal.txt\n         *      public1.key\n         *      to_secret1s -\u003e symlink ../../secrets/\n         *      to_secret1j -\u003e junction ../../secrets/\n         *      to_secret_goal1 -\u003e symlink ../../secrets/goal.txt\n         *\n         */\n        String script \u003d loadContentFromResource(\"outsideWorkspaceStructureWithJunctions.bat\");\n        p.getBuildersList().add(new BatchFile(script));\n\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { // workspace root must be reachable (regular case)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"public1.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { // to_secrets1s not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_secrets1s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_secrets1j not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_secrets1j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_secrets_goal1 not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_secrets_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // intermediateFolder must be reachable (regular case)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"to_secrets1\")),\n                    not(containsString(\"to_secrets_goal1\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets_goal2\"))\n            ));\n        }\n        { // to_secrets2s not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_secrets2j not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // using symbolic in the intermediate path\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2s/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // using symbolic in the intermediate path\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets2j/master.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_secrets_goal2 not reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_secrets_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n\n        // pattern search feature\n        { // the pattern allow us to search inside the files / folders,\n            // without the patch the master.key from inside the outside symlinks would have been linked\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/**/*.key\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    not(containsString(\"master.key\")),\n                    containsString(\"public1.key\"),\n                    containsString(\"public2.key\"),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"otherFolder\")),\n                    not(containsString(\"to_secrets3j\")),\n                    not(containsString(\"to_secrets3s\")),\n                    not(containsString(\"to_secrets2j\")),\n                    not(containsString(\"to_secrets2s\")),\n                    not(containsString(\"to_secrets1j\")),\n                    not(containsString(\"to_secrets1s\"))\n            ));\n        }\n\n        // zip feature\n        { // all the outside folders / files are not included in the zip\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, containsInAnyOrder(\n                    p.getName() + \"/intermediateFolder/public2.key\",\n                    p.getName() + \"/public1.key\"\n            ));\n        }\n        { // all the outside folders / files are not included in the zip\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, contains(\"intermediateFolder/public2.key\"));\n        }\n        // Explicitly delete everything including junctions, which TemporaryDirectoryAllocator.dispose may have trouble with:\n        new Launcher.LocalLauncher(StreamTaskListener.fromStderr()).launch().cmds(\"cmd\", \"/c\", \"rmdir\", \"/s\", \"/q\", j.jenkins.getRootDir().getAbsolutePath()).start().join();\n    }","advisory":"SECURITY-904"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.directSymlink_forTestingZip:void()","methodSource":"@Test\n    @Issue(\"SECURITY-904\")\n    public void directSymlink_forTestingZip() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        j.buildAndAssertSuccess(p);\n        FilePath ws \u003d p.getSomeWorkspace();\n\n        /*\n         *  secrets/\n         *      goal.txt\n         *  workspace/\n         *      /a1/to_secrets1\n         *      /b1/b2/to_secrets1\n         *      /c1/c2/c3/to_secrets1\n         */\n        File secretsFolder \u003d new File(j.jenkins.getRootDir(), \"secrets\");\n        FilePath a1 \u003d ws.child(\"a1\");\n        a1.mkdirs();\n        a1.child(\"to_secrets1\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);\n        FilePath b2 \u003d ws.child(\"b1\").child(\"b2\");\n        b2.mkdirs();\n        b2.child(\"to_secrets2\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);\n        FilePath c3 \u003d ws.child(\"c1\").child(\"c2\").child(\"c3\");\n        c3.mkdirs();\n        c3.child(\"to_secrets3\").symlinkTo(secretsFolder.getAbsolutePath(), TaskListener.NULL);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        {\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, hasSize(0));\n        }\n        {\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/a1/*zip*/a1.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, hasSize(0));\n        }\n        {\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/b1/b2/*zip*/b2.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, hasSize(0));\n        }\n        {\n            Page zipPage \u003d wc.goTo(p.getUrl() + \"ws/c1/c2/c3/*zip*/c3.zip\", null);\n            assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n            List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n            assertThat(entryNames, hasSize(0));\n        }\n    }","advisory":"SECURITY-904"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.symlink_insideWorkspace_areNotAllowedAnymore:void()","methodSource":"@Test\n    @Issue({\"SECURITY-904\", \"SECURITY-1452\"})\n    public void symlink_insideWorkspace_areNotAllowedAnymore() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        // build once to have the workspace set up\n        j.buildAndAssertSuccess(p);\n\n        File jobWorkspaceFolder \u003d new File(new File(j.jenkins.getRootDir(), \"workspace\"), p.name);\n        File folderInsideWorkspace \u003d new File(jobWorkspaceFolder, \"asset\");\n        folderInsideWorkspace.mkdir();\n        File fileTarget \u003d new File(folderInsideWorkspace, \"goal.txt\");\n        String publicContent \u003d \"not-secret\";\n        Files.writeString(fileTarget.toPath(), publicContent, StandardCharsets.UTF_8);\n\n        /*\n         *  workspace/\n         *      asset/\n         *          goal.txt\n         *      intermediateFolder/\n         *          to_internal2 -\u003e ../asset\n         *          to_internal_goal2 -\u003e ../asset/goal.txt\n         *      to_internal1 -\u003e ./asset/\n         *      to_internal_goal1 -\u003e ./asset/goal.txt\n         */\n        if (Functions.isWindows()) {\n            String script \u003d loadContentFromResource(\"insideWorkspaceStructure.bat\");\n            p.getBuildersList().add(new BatchFile(script));\n        } else {\n            String script \u003d loadContentFromResource(\"insideWorkspaceStructure.sh\");\n            p.getBuildersList().add(new Shell(script));\n        }\n\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        { // workspace root must be reachable (regular case)\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, allOf(\n                    containsString(\"asset\"),\n                    not(containsString(\"to_internal1\")),\n                    not(containsString(\"to_internal_goal1\")),\n                    containsString(\"intermediateFolder\"),\n                    not(containsString(\"to_internal2\")),\n                    not(containsString(\"to_internal_goal2\")\n                    )));\n        }\n        { // to_internal1 reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_internal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_internal_goal1 reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/to_internal_goal1/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_internal2 reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // to_internal_goal2 reachable\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/to_internal_goal2/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n        }\n        { // direct to goal\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/asset/goal.txt/\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n            String workspaceContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(workspaceContent, containsString(publicContent));\n        }\n        { // the zip will only contain folder from inside the workspace\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/*zip*/ws.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { // the zip will only contain folder from inside the workspace\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/intermediateFolder/*zip*/intermediateFolder.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n        { // the zip will only contain folder from inside the workspace\n            Page page \u003d wc.goTo(p.getUrl() + \"ws/asset/*zip*/asset.zip\", null);\n            assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        }\n    }"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.windows_cannotViewAbsolutePath:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2481\")\n    public void windows_cannotViewAbsolutePath() throws Exception {\n        Assume.assumeTrue(\"can only be tested this on Windows\", Functions.isWindows());\n\n        Path targetTmpPath \u003d Files.createTempFile(\"sec2481\", \"tmp\");\n        String content \u003d \"random data provided as fixed value\";\n        Files.writeString(targetTmpPath, content, StandardCharsets.UTF_8);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        Page page \u003d wc.goTo(\"userContent/\" + targetTmpPath.toAbsolutePath() + \"/*view*\", null);\n\n        MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), equalTo(404));\n    }","advisory":"SECURITY-2481"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.windows_canViewAbsolutePath_withEscapeHatch:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2481\")\n    public void windows_canViewAbsolutePath_withEscapeHatch() throws Exception {\n        Assume.assumeTrue(\"can only be tested this on Windows\", Functions.isWindows());\n\n        String originalValue \u003d System.getProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME);\n        System.setProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, \"true\");\n        try {\n            Path targetTmpPath \u003d Files.createTempFile(\"sec2481\", \"tmp\");\n            String content \u003d \"random data provided as fixed value\";\n            Files.writeString(targetTmpPath, content, StandardCharsets.UTF_8);\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n            Page page \u003d wc.goTo(\"userContent/\" + targetTmpPath.toAbsolutePath() + \"/*view*\", null);\n\n            MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), equalTo(200));\n            MatcherAssert.assertThat(page.getWebResponse().getContentAsString(), containsString(content));\n        } finally {\n            if (originalValue \u003d\u003d null) {\n                System.clearProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME);\n            } else {\n                System.setProperty(DirectoryBrowserSupport.ALLOW_ABSOLUTE_PATH_PROPERTY_NAME, originalValue);\n            }\n        }\n\n    }","advisory":"SECURITY-2481"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.tmpNotListed:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1807\")\n    public void tmpNotListed() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                ws.child(\"anotherDir\").mkdirs();\n                WorkspaceList.tempDir(ws.child(\"subdir\")).mkdirs();\n                return true;\n            }\n        });\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        String text \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/\").asNormalizedText();\n        assertTrue(text, text.contains(\"anotherDir\"));\n        assertFalse(text, text.contains(\"subdir\"));\n    }","advisory":"SECURITY-1807"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.tmpNotListedWithGlob:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1807\")\n    public void tmpNotListedWithGlob() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n        FilePath ws \u003d p.getSomeWorkspace();\n\n        FilePath anotherDir \u003d ws.child(\"anotherDir\");\n        anotherDir.mkdirs();\n        anotherDir.child(\"insideDir\").mkdirs();\n\n        FilePath mainTmp \u003d WorkspaceList.tempDir(ws.child(\"subDir\"));\n        mainTmp.mkdirs();\n\n        FilePath anotherTmp \u003d WorkspaceList.tempDir(anotherDir.child(\"insideDir\"));\n        anotherTmp.mkdirs();\n\n        ws.child(\"anotherDir/one.txt\").touch(0);\n        ws.child(\"anotherDir/insideDir/two.txt\").touch(0);\n        mainTmp.child(\"three.txt\").touch(0);\n        anotherTmp.child(\"four.txt\").touch(0);\n\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        String text \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/**/*.txt\").asNormalizedText();\n        assertTrue(text, text.contains(\"one.txt\"));\n        assertTrue(text, text.contains(\"two.txt\"));\n        assertFalse(text, text.contains(\"three.txt\"));\n        assertFalse(text, text.contains(\"four.txt\"));\n    }","advisory":"SECURITY-1807"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.noDirectAccessToTmp:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1807\")\n    public void noDirectAccessToTmp() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n\n                FilePath folder \u003d ws.child(\"anotherDir\");\n                folder.mkdirs();\n                folder.child(\"one.txt\").touch(0);\n\n                FilePath mainTmp \u003d WorkspaceList.tempDir(ws.child(\"subDir\"));\n                mainTmp.mkdirs();\n                mainTmp.child(\"two.txt\").touch(0);\n\n                return true;\n            }\n        });\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        Page page \u003d wc.goTo(p.getUrl() + \"ws/anotherDir/\", null);\n        assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n        page \u003d wc.goTo(p.getUrl() + \"ws/anotherDir/one.txt\", null);\n        assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n        page \u003d wc.goTo(p.getUrl() + \"ws/subdir@tmp/\", null);\n        assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n\n        page \u003d wc.goTo(p.getUrl() + \"ws/subdir@tmp/two.txt\", null);\n        assertThat(page.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_NOT_FOUND));\n    }","advisory":"SECURITY-1807"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.tmpNotListedInPlain:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1807\")\n    public void tmpNotListedInPlain() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                ws.child(\"anotherDir\").mkdirs();\n                WorkspaceList.tempDir(ws.child(\"subdir\")).mkdirs();\n                return true;\n            }\n        });\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        String text \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/ws/*plain*\", \"text/plain\").getWebResponse().getContentAsString();\n        assertTrue(text, text.contains(\"anotherDir\"));\n        assertFalse(text, text.contains(\"subdir\"));\n    }","advisory":"SECURITY-1807"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.tmpNotListedInZipWithoutGlob:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1807\")\n    public void tmpNotListedInZipWithoutGlob() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n\n                FilePath anotherDir \u003d ws.child(\"anotherDir\");\n                anotherDir.mkdirs();\n                anotherDir.child(\"insideDir\").mkdirs();\n\n                FilePath mainTmp \u003d WorkspaceList.tempDir(ws.child(\"subDir\"));\n                mainTmp.mkdirs();\n\n                FilePath anotherTmp \u003d WorkspaceList.tempDir(anotherDir.child(\"insideDir\"));\n                anotherTmp.mkdirs();\n\n                ws.child(\"anotherDir/one.txt\").touch(0);\n                ws.child(\"anotherDir/insideDir/two.txt\").touch(0);\n                mainTmp.child(\"three.txt\").touch(0);\n                anotherTmp.child(\"four.txt\").touch(0);\n                return true;\n            }\n        });\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        //http://localhost:54407/jenkins/job/test0/ws/**/*.txt/*zip*/glob.zip\n        Page zipPage \u003d wc.goTo(\"job/\" + p.getName() + \"/ws/*zip*/\" + p.getName(), null);\n        assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n        List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n        assertThat(entryNames, hasSize(2));\n        assertThat(entryNames, containsInAnyOrder(\n                \"test0/anotherDir/one.txt\",\n                \"test0/anotherDir/insideDir/two.txt\"\n        ));\n\n        zipPage \u003d wc.goTo(\"job/\" + p.getName() + \"/ws/anotherDir/*zip*/\" + p.getName(), null);\n        assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n        entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n        assertThat(entryNames, hasSize(2));\n        assertThat(entryNames, containsInAnyOrder(\n                \"anotherDir/one.txt\",\n                \"anotherDir/insideDir/two.txt\"\n        ));\n    }","advisory":"SECURITY-1807"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.tmpNotListedInZipWithGlob:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1807\")\n    public void tmpNotListedInZipWithGlob() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n\n                FilePath anotherDir \u003d ws.child(\"anotherDir\");\n                anotherDir.mkdirs();\n                anotherDir.child(\"insideDir\").mkdirs();\n\n                FilePath mainTmp \u003d WorkspaceList.tempDir(ws.child(\"subDir\"));\n                mainTmp.mkdirs();\n\n                FilePath anotherTmp \u003d WorkspaceList.tempDir(anotherDir.child(\"insideDir\"));\n                anotherTmp.mkdirs();\n\n                ws.child(\"anotherDir/one.txt\").touch(0);\n                ws.child(\"anotherDir/insideDir/two.txt\").touch(0);\n                mainTmp.child(\"three.txt\").touch(0);\n                anotherTmp.child(\"four.txt\").touch(0);\n                return true;\n            }\n        });\n        assertEquals(Result.SUCCESS, p.scheduleBuild2(0).get().getResult());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        Page zipPage \u003d wc.goTo(\"job/\" + p.getName() + \"/ws/**/*.txt/*zip*/glob.zip\", null);\n        assertThat(zipPage.getWebResponse().getStatusCode(), equalTo(HttpURLConnection.HTTP_OK));\n\n        List\u003cString\u003e entryNames \u003d getListOfEntriesInDownloadedZip((UnexpectedPage) zipPage);\n        assertThat(entryNames, hasSize(2));\n        assertThat(entryNames, containsInAnyOrder(\n                \"anotherDir/one.txt\",\n                \"anotherDir/insideDir/two.txt\"\n        ));\n    }","advisory":"SECURITY-1807"},{"className":"hudson.model.DirectoryBrowserSupportTest","methodSignature":"hudson.model.DirectoryBrowserSupportTest.canViewRelativePath:void()","methodSource":"@Test\n    public void canViewRelativePath() throws Exception {\n        File testFile \u003d new File(j.jenkins.getRootDir(), \"userContent/test.txt\");\n        String content \u003d \"random data provided as fixed value\";\n\n        Files.writeString(testFile.toPath(), content, StandardCharsets.UTF_8);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        Page page \u003d wc.goTo(\"userContent/test.txt/*view*\", null);\n\n        MatcherAssert.assertThat(page.getWebResponse().getStatusCode(), equalTo(200));\n        MatcherAssert.assertThat(page.getWebResponse().getContentAsString(), containsString(content));\n    }"},{"className":"hudson.model.DisplayNameTest","methodSignature":"hudson.model.DisplayNameTest.testRenameJobWithNoDisplayName:void()","methodSource":"@Test\n    public void testRenameJobWithNoDisplayName() throws Exception {\n        final String projectName \u003d \"projectName\";\n        final String newProjectName \u003d \"newProjectName\";\n        FreeStyleProject project \u003d j.createFreeStyleProject(projectName);\n        assertEquals(projectName, project.getDisplayName());\n\n        project.renameTo(newProjectName);\n        assertEquals(newProjectName, project.getDisplayName());\n    }"},{"className":"hudson.model.DisplayNameTest","methodSignature":"hudson.model.DisplayNameTest.testRenameJobWithDisplayName:void()","methodSource":"@Test\n    public void testRenameJobWithDisplayName() throws Exception {\n        final String projectName \u003d \"projectName\";\n        final String newProjectName \u003d \"newProjectName\";\n        final String displayName \u003d \"displayName\";\n        FreeStyleProject project \u003d j.createFreeStyleProject(projectName);\n        project.setDisplayName(displayName);\n        assertEquals(displayName, project.getDisplayName());\n\n        project.renameTo(newProjectName);\n        assertEquals(displayName, project.getDisplayName());\n    }"},{"className":"hudson.model.DisplayNameTest","methodSignature":"hudson.model.DisplayNameTest.testCopyJobWithNoDisplayName:void()","methodSource":"@SuppressWarnings(\"rawtypes\")\n    @Test\n    public void testCopyJobWithNoDisplayName() throws Exception {\n        final String projectName \u003d \"projectName\";\n        final String newProjectName \u003d \"newProjectName\";\n        FreeStyleProject project \u003d j.createFreeStyleProject(projectName);\n        assertEquals(projectName, project.getDisplayName());\n\n        AbstractProject newProject \u003d Jenkins.get().copy((AbstractProject) project, newProjectName);\n        assertEquals(newProjectName, newProject.getName());\n        assertEquals(newProjectName, newProject.getDisplayName());\n    }"},{"className":"hudson.model.DisplayNameTest","methodSignature":"hudson.model.DisplayNameTest.testCopyJobWithDisplayName:void()","methodSource":"@SuppressWarnings(\"rawtypes\")\n    @Test\n    public void testCopyJobWithDisplayName() throws Exception {\n        final String projectName \u003d \"projectName\";\n        final String newProjectName \u003d \"newProjectName\";\n        final String oldDisplayName \u003d \"oldDisplayName\";\n        FreeStyleProject project \u003d j.createFreeStyleProject(projectName);\n        project.setDisplayName(oldDisplayName);\n        assertEquals(oldDisplayName, project.getDisplayName());\n\n        AbstractProject newProject \u003d Jenkins.get().copy((AbstractProject) project, newProjectName);\n        assertEquals(newProjectName, newProject.getName());\n        assertEquals(newProjectName, newProject.getDisplayName());\n\n    }"},{"className":"hudson.model.DisplayNameTest","methodSignature":"hudson.model.DisplayNameTest.copyJobWithDisplayNameToDifferentFolder:void()","methodSource":"@Issue(\"JENKINS-18074\")\n    @Test public void copyJobWithDisplayNameToDifferentFolder() throws Exception {\n        MockFolder d1 \u003d j.createFolder(\"d1\");\n        FreeStyleProject job \u003d d1.createProject(FreeStyleProject.class, \"job\");\n        job.setDisplayName(\"My Job\");\n        MockFolder d2 \u003d j.jenkins.copy(d1, \"d2\");\n        FreeStyleProject j2 \u003d (FreeStyleProject) d2.getItem(\"job\");\n        assertNotNull(j2);\n        assertEquals(\"My Job\", j2.getDisplayName());\n    }","advisory":"JENKINS-18074"},{"className":"hudson.model.DownloadService2Test","methodSignature":"hudson.model.DownloadService2Test.updateNow:void()","methodSource":"@Test public void updateNow() throws Exception {\n        for (DownloadService.Downloadable d : DownloadService.Downloadable.all()) {\n            FormValidation v \u003d d.updateNow();\n            assertEquals(v.toString(), FormValidation.Kind.OK, v.kind);\n        }\n    }"},{"className":"hudson.model.DownloadService2Test","methodSignature":"hudson.model.DownloadService2Test.loadJSONHTML:void()","methodSource":"@WithoutJenkins\n    @Test public void loadJSONHTML() throws Exception {\n        assertRoots(\"[list, signature]\", \"hudson.tasks.Maven.MavenInstaller.json.html\"); // format used by most tools\n        assertRoots(\"[data, signature, version]\", \"hudson.tools.JDKInstaller.json.html\"); // anomalous format\n    }"},{"className":"hudson.model.DownloadServiceTest","methodSignature":"hudson.model.DownloadServiceTest.testLoadJSON:void()","methodSource":"@WithoutJenkins // could have been in core/src/test/ but update-center.json was already in test/src/test/ (used by UpdateSiteTest)\n    @Test\n    public void testLoadJSON() throws Exception {\n        assertRoots(\"[list]\", getClass().getResource(\"hudson.tasks.Maven.MavenInstaller.json\")); // format used by most tools\n        assertRoots(\"[data, version]\", getClass().getResource(\"hudson.tools.JDKInstaller.json\")); // anomalous format\n        assertRoots(\"[connectionCheckUrl, core, id, plugins, signature, updateCenterVersion]\", UpdateSiteTest.extract(\"update-center.json\"));\n    }"},{"className":"hudson.model.DownloadServiceTest","methodSignature":"hudson.model.DownloadServiceTest.testReduceFunctionWithMavenJsons:void()","methodSource":"@Test\n    public void testReduceFunctionWithMavenJsons() throws Exception {\n        URL resource1 \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Maven.MavenInstaller1.json\");\n        URL resource2 \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Maven.MavenInstaller2.json\");\n        URL resource3 \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Maven.MavenInstaller3.json\");\n        JSONObject json1 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource1));\n        JSONObject json2 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource2));\n        JSONObject json3 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource3));\n        List\u003cJSONObject\u003e jsonObjectList \u003d new ArrayList\u003c\u003e();\n        jsonObjectList.add(json1);\n        jsonObjectList.add(json2);\n        jsonObjectList.add(json3);\n        Downloadable downloadable \u003d new Maven.MavenInstaller.DescriptorImpl().createDownloadable();\n        JSONObject reducedJson \u003d downloadable.reduce(jsonObjectList);\n        URL expectedResult \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Maven.MavenInstallerResult.json\");\n        JSONObject expectedResultJson \u003d JSONObject.fromObject(DownloadService.loadJSON(expectedResult));\n        assertEquals(reducedJson, expectedResultJson);\n    }"},{"className":"hudson.model.DownloadServiceTest","methodSignature":"hudson.model.DownloadServiceTest.testReduceFunctionWithAntJsons:void()","methodSource":"@Test\n    public void testReduceFunctionWithAntJsons() throws Exception {\n        URL resource1 \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Ant.AntInstaller1.json\");\n        URL resource2 \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Ant.AntInstaller2.json\");\n        URL resource3 \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Ant.AntInstaller3.json\");\n        JSONObject json1 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource1));\n        JSONObject json2 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource2));\n        JSONObject json3 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource3));\n        List\u003cJSONObject\u003e jsonObjectList \u003d new ArrayList\u003c\u003e();\n        jsonObjectList.add(json1);\n        jsonObjectList.add(json2);\n        jsonObjectList.add(json3);\n        Downloadable downloadable \u003d new AntInstaller.DescriptorImpl().createDownloadable();\n        JSONObject reducedJson \u003d downloadable.reduce(jsonObjectList);\n        URL expectedResult \u003d DownloadServiceTest.class.getResource(\"hudson.tasks.Ant.AntInstallerResult.json\");\n        JSONObject expectedResultJson \u003d JSONObject.fromObject(DownloadService.loadJSON(expectedResult));\n        assertEquals(reducedJson, expectedResultJson);\n    }"},{"className":"hudson.model.DownloadServiceTest","methodSignature":"hudson.model.DownloadServiceTest.testReduceFunctionWithNotDefaultSchemaJsons:void()","methodSource":"@Test\n    public void testReduceFunctionWithNotDefaultSchemaJsons() throws Exception {\n        URL resource1 \u003d DownloadServiceTest.class.getResource(\"hudson.plugins.cmake.CmakeInstaller1.json\");\n        URL resource2 \u003d DownloadServiceTest.class.getResource(\"hudson.plugins.cmake.CmakeInstaller2.json\");\n        JSONObject json1 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource1));\n        JSONObject json2 \u003d JSONObject.fromObject(DownloadService.loadJSON(resource2));\n        List\u003cJSONObject\u003e jsonObjectList \u003d new ArrayList\u003c\u003e();\n        jsonObjectList.add(json1);\n        jsonObjectList.add(json2);\n        Downloadable downloadable \u003d new GenericDownloadFromUrlInstaller.DescriptorImpl().createDownloadable();\n        JSONObject reducedJson \u003d downloadable.reduce(jsonObjectList);\n        URL expectedResult \u003d DownloadServiceTest.class.getResource(\"hudson.plugins.cmake.CmakeInstallerResult.json\");\n        JSONObject expectedResultJson \u003d JSONObject.fromObject(DownloadService.loadJSON(expectedResult));\n        assertEquals(reducedJson, expectedResultJson);\n    }"},{"className":"hudson.model.EnvironmentContributorTest","methodSignature":"hudson.model.EnvironmentContributorTest.projectScoped:void()","methodSource":"@Test\n    public void projectScoped() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        CaptureEnvironmentBuilder c \u003d new CaptureEnvironmentBuilder();\n        p.getBuildersList().add(c);\n        p.setDescription(\"Issac Newton\");\n        j.buildAndAssertSuccess(p);\n\n        assertEquals(\"Issac Newton\", c.getEnvVars().get(\"ABC\"));\n        assertEquals(\"built-in\", c.getEnvVars().get(\"NODE_NAME\"));\n    }"},{"className":"hudson.model.ExecutorTest","methodSignature":"hudson.model.ExecutorTest.whenAnExecutorDiesHardANewExecutorTakesItsPlace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-4756\")\n    public void whenAnExecutorDiesHardANewExecutorTakesItsPlace() throws Exception {\n        j.jenkins.setNumExecutors(1);\n\n        Computer c \u003d j.jenkins.toComputer();\n        Executor e \u003d getExecutorByNumber(c, 0);\n\n        j.jenkins.getQueue().schedule(new QueueTest.TestTask(new AtomicInteger()) {\n            @Override\n            public Queue.Executable createExecutable() {\n                throw new IllegalStateException(\"oops\");\n            }\n        }, 0);\n        while (e.isActive()) {\n            Thread.sleep(10);\n        }\n\n        waitUntilExecutorSizeIs(c, 1);\n\n        assertNotNull(getExecutorByNumber(c, 0));\n    }","advisory":"JENKINS-4756"},{"className":"hudson.model.ExecutorTest","methodSignature":"hudson.model.ExecutorTest.abortCause:void()","methodSource":"@Test\n    public void abortCause() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        FreeStyleBuild b \u003d startBlockingBuild(p);\n\n        User johnny \u003d User.getOrCreateByIdOrFullName(\"Johnny\");\n        p.getLastBuild().getExecutor().interrupt(Result.FAILURE,\n                new UserInterruption(johnny),   // test the merge semantics\n                new UserInterruption(johnny));\n\n        // make sure this information is recorded\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n        InterruptedBuildAction iba \u003d b.getAction(InterruptedBuildAction.class);\n        assertEquals(1, iba.getCauses().size());\n        assertEquals(((UserInterruption) iba.getCauses().get(0)).getUser(), johnny);\n\n        // make sure it shows up in the log\n        j.assertLogContains(johnny.getId(), b);\n    }"},{"className":"hudson.model.ExecutorTest","methodSignature":"hudson.model.ExecutorTest.disconnectCause:void()","methodSource":"@Test\n    public void disconnectCause() throws Exception {\n        DumbSlave slave \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(slave);\n\n        FreeStyleBuild b \u003d startBlockingBuild(p);\n        User johnny \u003d User.getOrCreateByIdOrFullName(\"Johnny\");\n\n        p.getLastBuild().getBuiltOn().toComputer().disconnect(\n                new OfflineCause.UserCause(johnny, \"Taking offline to break your build\")\n        );\n\n        j.assertBuildStatus(Result.FAILURE, j.waitForCompletion(b));\n        j.assertLogContains(\"Finished: FAILURE\", b);\n        j.assertLogContains(\"Build step \u0027TestBuilder\u0027 marked build as failure\", b);\n        j.assertLogContains(\"Agent went offline during the build\", b);\n        j.assertLogContains(\"Disconnected by Johnny : Taking offline to break your build\", b);\n    }"},{"className":"hudson.model.ExecutorTest","methodSignature":"hudson.model.ExecutorTest.apiPermissions:void()","methodSource":"@Issue(\"SECURITY-611\")\n    @Test\n    public void apiPermissions() throws Exception {\n        DumbSlave slave \u003d new DumbSlave(\"slave\", j.jenkins.getRootDir().getAbsolutePath(), j.createComputerLauncher(null));\n        slave.setNumExecutors(2);\n        j.jenkins.addNode(slave);\n        FreeStyleProject publicProject \u003d j.createFreeStyleProject(\"public-project\");\n        publicProject.setAssignedNode(slave);\n        FreeStyleProject secretProject \u003d j.createFreeStyleProject(\"secret-project\");\n        secretProject.setAssignedNode(slave);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.READ).everywhere().toEveryone().\n            grant(Item.READ).onItems(publicProject).toEveryone().\n            grant(Item.READ).onItems(secretProject).to(\"has-security-clearance\"));\n\n        FreeStyleBuild b1 \u003d startBlockingBuild(publicProject);\n        FreeStyleBuild b2 \u003d startBlockingBuild(secretProject);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"has-security-clearance\");\n        String api \u003d wc.goTo(slave.toComputer().getUrl() + \"api/json?pretty\u0026depth\u003d1\", null).getWebResponse().getContentAsString();\n        System.out.println(api);\n        assertThat(api, allOf(containsString(\"public-project\"), containsString(\"secret-project\")));\n\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"regular-joe\");\n        api \u003d wc.goTo(slave.toComputer().getUrl() + \"api/json?pretty\u0026depth\u003d1\", null).getWebResponse().getContentAsString();\n        System.out.println(api);\n        assertThat(api, allOf(containsString(\"public-project\"), not(containsString(\"secret-project\"))));\n\n        b1.doStop();\n        b2.doStop();\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b1));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b2));\n    }","advisory":"SECURITY-611"},{"className":"hudson.model.ExecutorTest","methodSignature":"hudson.model.ExecutorTest.disconnectCause_WithoutTrace:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2120\")\n    public void disconnectCause_WithoutTrace() throws Exception {\n        DumbSlave slave \u003d j.createOnlineSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(slave);\n\n        FreeStyleBuild b \u003d startBlockingBuild(p);\n\n        String message \u003d \"It went away\";\n        p.getLastBuild().getBuiltOn().toComputer().disconnect(\n                new OfflineCause.ChannelTermination(new RuntimeException(message))\n        );\n\n        OfflineCause offlineCause \u003d p.getLastBuild().getBuiltOn().toComputer().getOfflineCause();\n        assertThat(offlineCause.toString(), not(containsString(message)));\n\n        b.doStop();\n        j.waitForCompletion(b);\n    }","advisory":"SECURITY-2120"},{"className":"hudson.model.FileParameterValueSecurity3073Test","methodSignature":"hudson.model.FileParameterValueSecurity3073Test.verifyUploadedFileParameterPermission:void()","methodSource":"@Test\n    @Issue(\"SECURITY-3073\")\n    public void verifyUploadedFileParameterPermission() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"filePermission\", null)\n        )));\n        File dir \u003d tmp.newFolder();\n        File plugin \u003d new File(dir, \"htmlpublisher.jpi\");\n        // We\u0027re using a plugin to have a file above DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD\n        FileUtils.copyURLToFile(Objects.requireNonNull(getClass().getClassLoader().getResource(\"plugins/htmlpublisher.jpi\")), plugin);\n\n        HtmlPage page \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false).goTo(project.getUrl() + \"/build?delay\u003d0sec\");\n        HtmlForm form \u003d page.getFormByName(\"parameters\");\n        form.getInputByName(\"file\").setValueAttribute(plugin.getAbsolutePath());\n        j.submit(form);\n\n        File filesRef \u003d Files.createTempFile(\"tmp\", \".tmp\").toFile();\n        File filesTmpDir \u003d filesRef.getParentFile();\n        filesRef.deleteOnExit();\n\n        final Set\u003cPosixFilePermission\u003e[] filesPermission \u003d new Set[]{new HashSet\u003c\u003e()};\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e {\n                    Optional\u003cFile\u003e lastUploadedPlugin \u003d Arrays.stream(Objects.requireNonNull(\n                                    filesTmpDir.listFiles((file, fileName) -\u003e\n                                            fileName.startsWith(\"jenkins-stapler-uploads\")))).\n                                            max(Comparator.comparingLong(File::lastModified));\n                    if (lastUploadedPlugin.isPresent()) {\n                        filesPermission[0] \u003d Files.getPosixFilePermissions(lastUploadedPlugin.get().toPath(), LinkOption.NOFOLLOW_LINKS);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n        assertEquals(EnumSet.of(OWNER_EXECUTE, OWNER_READ, OWNER_WRITE), filesPermission[0]);\n    }","advisory":"SECURITY-3073"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_cannotCreateFile_outsideOfBuildFolder:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1074\")\n    public void fileParameter_cannotCreateFile_outsideOfBuildFolder() throws Exception {\n        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true\n\n        FilePath root \u003d j.jenkins.getRootPath();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"../../../../../root-level.txt\", null)\n        )));\n\n        assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n        assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);\n        // encoding dots\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2F%2E%2E%2Froot-level.txt/uploaded-file.txt\", uploadedContent);\n        // 16-bit encoding\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215%u002e%u002e%u2215root-level.txt/uploaded-file.txt\", uploadedContent);\n        // double encoding\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252f%252e%252e%252froot-level.txt/uploaded-file.txt\", uploadedContent);\n        // overlong utf-8 encoding\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%af%c0%2e%c0%2e%c0%afroot-level.txt/uploaded-file.txt\", uploadedContent);\n    }","advisory":"SECURITY-1074"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_cannotCreateFile_outsideOfBuildFolder_SEC1424:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1424\")\n    public void fileParameter_cannotCreateFile_outsideOfBuildFolder_SEC1424() throws Exception {\n        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true\n\n        FilePath root \u003d j.jenkins.getRootPath();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"dir/../../../pwned\", null)\n        )));\n\n        assertThat(root.child(\"pwned\").exists(), equalTo(false));\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"dir/../../../pwned\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n        assertThat(root.child(\"pwned\").exists(), equalTo(false));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n    }","advisory":"SECURITY-1424"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_cannotCreateFile_outsideOfBuildFolder_LeadingDoubleDot:void()","methodSource":"@Test\n    public void fileParameter_cannotCreateFile_outsideOfBuildFolder_LeadingDoubleDot() throws Exception {\n        FilePath root \u003d j.jenkins.getRootPath();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"../pwned\", null)\n        )));\n\n        assertThat(root.child(\"pwned\").exists(), equalTo(false));\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"../pwned\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n        assertThat(root.child(\"pwned\").exists(), equalTo(false));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n    }"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1074\")\n    public void fileParameter_cannotCreateFile_outsideOfBuildFolder_backslashEdition() throws Exception {\n        Assume.assumeTrue(\"Backslashes are only dangerous on Windows\", Functions.isWindows());\n\n        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true\n\n        FilePath root \u003d j.jenkins.getRootPath();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", null)\n        )));\n\n        assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n        assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..\\\\..\\\\..\\\\..\\\\..\\\\root-level.txt/uploaded-file.txt\", uploadedContent);\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);\n    }","advisory":"SECURITY-1074"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_withSingleDot:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1074\")\n    public void fileParameter_withSingleDot() throws Exception {\n        // this case was not working even before the patch\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\".\", null)\n        )));\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\".\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/uploaded-file.txt\", uploadedContent);\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/./uploaded-file.txt\", uploadedContent);\n    }","advisory":"SECURITY-1074"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_withDoubleDot:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1074\")\n    public void fileParameter_withDoubleDot() throws Exception {\n        // this case was not working even before the patch\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"..\", null)\n        )));\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"..\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/uploaded-file.txt\", uploadedContent);\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/../uploaded-file.txt\", uploadedContent);\n    }","advisory":"SECURITY-1074"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_cannotEraseFile_outsideOfBuildFolder:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1074\")\n    public void fileParameter_cannotEraseFile_outsideOfBuildFolder() throws Exception {\n        // you can test the behavior before the correction by setting FileParameterValue.ALLOW_FOLDER_TRAVERSAL_OUTSIDE_WORKSPACE to true\n\n        FilePath root \u003d j.jenkins.getRootPath();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"../../../../../root-level.txt\", null)\n        )));\n\n        assertThat(root.child(\"root-level.txt\").exists(), equalTo(false));\n        String initialContent \u003d \"do-not-erase-me\";\n        root.child(\"root-level.txt\").write(initialContent, StandardCharsets.UTF_8.name());\n\n        String uploadedContent \u003d \"test-content\";\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), uploadedContent, StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"../../../../../root-level.txt\", uploadedFile, \"uploaded-file.txt\")\n        )).get();\n\n        assertThat(build.getResult(), equalTo(Result.FAILURE));\n        assertThat(root.child(\"root-level.txt\").readToString(), equalTo(initialContent));\n\n        // ensure also the file is not reachable by request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        checkUrlNot200AndNotContains(wc, build.getUrl() + \"parameters/parameter/..%2F..%2F..%2F..%2F..%2Froot-level.txt/uploaded-file.txt\", uploadedContent);\n    }","advisory":"SECURITY-1074"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_canStillUse_internalHierarchy:void()","methodSource":"@Test\n    public void fileParameter_canStillUse_internalHierarchy() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new FileParameterDefinition(\"direct-child1.txt\", null),\n                new FileParameterDefinition(\"parent/child2.txt\", null)\n        )));\n\n        File uploadedFile1 \u003d tmp.newFile();\n        Files.writeString(uploadedFile1.toPath(), \"test1\", StandardCharsets.UTF_8);\n        File uploadedFile2 \u003d tmp.newFile();\n        Files.writeString(uploadedFile2.toPath(), \"test2\", StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"direct-child1.txt\", uploadedFile1, \"uploaded-file-1.txt\"),\n                new FileParameterValue(\"parent/child2.txt\", uploadedFile2, \"uploaded-file-2.txt\")\n        )));\n\n        // files are correctly saved in the build \"fileParameters\" folder\n        File directChild \u003d new File(build.getRootDir(), \"fileParameters/\" + \"direct-child1.txt\");\n        assertTrue(directChild.exists());\n\n        File parentChild \u003d new File(build.getRootDir(), \"fileParameters/\" + \"parent/child2.txt\");\n        assertTrue(parentChild.exists());\n\n        // both are correctly copied inside the workspace\n        assertTrue(build.getWorkspace().child(\"direct-child1.txt\").exists());\n        assertTrue(build.getWorkspace().child(\"parent\").child(\"child2.txt\").exists());\n\n        // and reachable using request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage workspacePage \u003d wc.goTo(p.getUrl() + \"ws\");\n        String workspaceContent \u003d workspacePage.getWebResponse().getContentAsString();\n        assertThat(workspaceContent, allOf(\n                containsString(\"direct-child1.txt\"),\n                containsString(\"parent\")\n        ));\n        HtmlPage workspaceParentPage \u003d wc.goTo(p.getUrl() + \"ws\" + \"/parent\");\n        String workspaceParentContent \u003d workspaceParentPage.getWebResponse().getContentAsString();\n        assertThat(workspaceParentContent, containsString(\"child2.txt\"));\n    }"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_canStillUse_doubleDotsInFileName:void()","methodSource":"@Test\n    public void fileParameter_canStillUse_doubleDotsInFileName() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"weird..name.txt\", null)\n        )));\n\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), \"test1\", StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"weird..name.txt\", uploadedFile, \"uploaded-file.txt\")\n        )));\n\n        // files are correctly saved in the build \"fileParameters\" folder\n        File directChild \u003d new File(build.getRootDir(), \"fileParameters/weird..name.txt\");\n        assertTrue(directChild.exists());\n\n        // both are correctly copied inside the workspace\n        assertTrue(build.getWorkspace().child(\"weird..name.txt\").exists());\n\n        // and reachable using request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage workspacePage \u003d wc.goTo(p.getUrl() + \"ws\");\n        String workspaceContent \u003d workspacePage.getWebResponse().getContentAsString();\n        assertThat(workspaceContent, containsString(\"weird..name.txt\"));\n    }"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.fileParameter_canStillUse_TildeInFileName:void()","methodSource":"@Test\n    public void fileParameter_canStillUse_TildeInFileName() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new FileParameterDefinition(\"~name\", null)\n        )));\n\n        File uploadedFile \u003d tmp.newFile();\n        Files.writeString(uploadedFile.toPath(), \"test1\", StandardCharsets.UTF_8);\n\n        FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new FileParameterValue(\"~name\", uploadedFile, \"uploaded-file.txt\")\n        )));\n\n        // files are correctly saved in the build \"fileParameters\" folder\n        File directChild \u003d new File(build.getRootDir(), \"fileParameters/~name\");\n        assertTrue(directChild.exists());\n\n        // both are correctly copied inside the workspace\n        assertTrue(build.getWorkspace().child(\"~name\").exists());\n\n        // and reachable using request\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage workspacePage \u003d wc.goTo(p.getUrl() + \"ws\");\n        String workspaceContent \u003d workspacePage.getWebResponse().getContentAsString();\n        assertThat(workspaceContent, containsString(\"~name\"));\n    }"},{"className":"hudson.model.FileParameterValueTest","methodSignature":"hudson.model.FileParameterValueTest.contentSecurityPolicy:void()","methodSource":"@Issue(\"SECURITY-1793\")\n    @Test\n    @LocalData\n    public void contentSecurityPolicy() throws Exception {\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(\"SECURITY-1793\", FreeStyleProject.class);\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/parameters/parameter/html.html/html.html\");\n        for (String header : new String[]{\"Content-Security-Policy\", \"X-WebKit-CSP\", \"X-Content-Security-Policy\"}) {\n            assertEquals(\"Header set: \" + header, DirectoryBrowserSupport.DEFAULT_CSP_VALUE, page.getWebResponse().getResponseHeaderValue(header));\n        }\n\n        String propName \u003d DirectoryBrowserSupport.class.getName() + \".CSP\";\n        String initialValue \u003d System.getProperty(propName);\n        try {\n            System.setProperty(propName, \"\");\n            page \u003d j.createWebClient().goTo(\"job/\" + p.getName() + \"/lastSuccessfulBuild/parameters/parameter/html.html/html.html\");\n            List\u003cString\u003e headers \u003d page.getWebResponse().getResponseHeaders().stream().map(NameValuePair::getName).collect(Collectors.toList());\n            for (String header : new String[]{\"Content-Security-Policy\", \"X-WebKit-CSP\", \"X-Content-Security-Policy\"}) {\n                assertThat(headers, not(hasItem(header)));\n            }\n        } finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(DirectoryBrowserSupport.class.getName() + \".CSP\");\n            } else {\n                System.setProperty(DirectoryBrowserSupport.class.getName() + \".CSP\", initialValue);\n            }\n        }\n    }","advisory":"SECURITY-1793"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testDoesNotLogUnimportantExcessiveLogMessage:void()","methodSource":"@Test\n    public void testDoesNotLogUnimportantExcessiveLogMessage() throws IOException {\n        createFolderStructure();\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n        configureLocalTestStorage(new TestFingerprint(true));\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n        String logOutput \u003d testTaskListener.outputStream.toString(Charset.defaultCharset());\n        assertFalse(\"Should not have logged unimportant, excessive message.\", logOutput.contains(\"possibly trimming\"));\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testFingerprintFileIsEmpty:void()","methodSource":"@Test\n    public void testFingerprintFileIsEmpty() throws IOException {\n        createFolderStructure();\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n        configureLocalTestStorage(new TestFingerprint(false));\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n        String logOutput \u003d testTaskListener.outputStream.toString(Charset.defaultCharset());\n        assertFalse(\"Should have deleted obsolete file.\", fpFile.toFile().exists());\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testGetRecurrencePeriod:void()","methodSource":"@Test\n    public void testGetRecurrencePeriod() {\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        assertEquals(\"Wrong recurrence period.\", PeriodicWork.DAY, cleanupThread.getRecurrencePeriod());\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testNoFingerprintsDir:void()","methodSource":"@Test\n    public void testNoFingerprintsDir() throws IOException {\n        createTestDir();\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n        configureLocalTestStorage(new TestFingerprint());\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n        String logOutput \u003d testTaskListener.outputStream.toString(Charset.defaultCharset());\n        assertTrue(\"Should have done nothing.\", logOutput.startsWith(\"Cleaned up 0 records\"));\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testBlockingFacetBlocksDeletion:void()","methodSource":"@Test\n    public void testBlockingFacetBlocksDeletion() throws IOException {\n        createFolderStructure();\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n        Fingerprint fp \u003d new TestFingerprint(false);\n        fp.facets.setOwner(Saveable.NOOP);\n        TestFingperprintFacet facet \u003d new TestFingperprintFacet(fp, System.currentTimeMillis(), true);\n        fp.facets.add(facet);\n        configureLocalTestStorage(fp);\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n        String logOutput \u003d testTaskListener.outputStream.toString(Charset.defaultCharset());\n        assertThat(logOutput, containsString(\"blocked deletion of\"));\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testUnblockedFacetsDontBlockDeletion:void()","methodSource":"@Test\n    public void testUnblockedFacetsDontBlockDeletion() throws IOException {\n        createFolderStructure();\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n        Fingerprint fp \u003d new TestFingerprint(false);\n        fp.facets.setOwner(Saveable.NOOP);\n        TestFingperprintFacet facet \u003d new TestFingperprintFacet(fp, System.currentTimeMillis(), false);\n        fp.facets.add(facet);\n        configureLocalTestStorage(fp);\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n        assertThat(fpFile.toFile(), is(not(aReadableFile())));\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testExternalStorageCleanupWithoutLocalFingerprints:void()","methodSource":"@Test\n    public void testExternalStorageCleanupWithoutLocalFingerprints() throws IOException {\n        createFolderStructure();\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n        Fingerprint fingerprint \u003d new TestFingerprint(false);\n        configureExternalTestStorage();\n        String fingerprintId \u003d fingerprint.getHashString();\n\n        fingerprint.save();\n        assertThat(Fingerprint.load(fingerprintId), is(not(nullValue())));\n\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n        assertThat(Fingerprint.load(fingerprintId), is(nullValue()));\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.testExternalStorageCleanupWithLocalFingerprints:void()","methodSource":"@Test\n    public void testExternalStorageCleanupWithLocalFingerprints() throws IOException {\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n\n        String localFingerprintId \u003d Util.getDigestOf(\"local\");\n        new Fingerprint((Run) null, \"foo.jar\", Util.fromHexString(localFingerprintId));\n\n        configureExternalTestStorage();\n        String externalFingerprintId \u003d Util.getDigestOf(\"local\");\n        new Fingerprint((Run) null, \"bar.jar\", Util.fromHexString(externalFingerprintId));\n\n        assertThat(Fingerprint.load(localFingerprintId), is(not(nullValue())));\n        assertThat(Fingerprint.load(externalFingerprintId), is(not(nullValue())));\n\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n\n        assertThat(Fingerprint.load(localFingerprintId), is(nullValue()));\n        assertThat(Fingerprint.load(externalFingerprintId), is(nullValue()));\n    }"},{"className":"hudson.model.FingerprintCleanupThreadTest","methodSignature":"hudson.model.FingerprintCleanupThreadTest.shouldNotCleanFingerprintsWhenDisabled:void()","methodSource":"@Test\n    public void shouldNotCleanFingerprintsWhenDisabled() throws IOException {\n        GlobalFingerprintConfiguration.get().setFingerprintCleanupDisabled(true);\n\n        TestTaskListener testTaskListener \u003d new TestTaskListener();\n\n        String localFingerprintId \u003d Util.getDigestOf(\"local\");\n        new Fingerprint((Run) null, \"foo.jar\", Util.fromHexString(localFingerprintId));\n\n        configureExternalTestStorage();\n        String externalFingerprintId \u003d Util.getDigestOf(\"local\");\n        new Fingerprint((Run) null, \"bar.jar\", Util.fromHexString(externalFingerprintId));\n\n        assertThat(Fingerprint.load(localFingerprintId), is(not(nullValue())));\n        assertThat(Fingerprint.load(externalFingerprintId), is(not(nullValue())));\n\n        FingerprintCleanupThread cleanupThread \u003d new FingerprintCleanupThread();\n        cleanupThread.execute(testTaskListener);\n\n        assertThat(Fingerprint.load(localFingerprintId), is(not(nullValue())));\n        assertThat(Fingerprint.load(externalFingerprintId), is(not(nullValue())));\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.roundTrip:void()","methodSource":"@Test\n    public void roundTrip() throws Exception {\n        Fingerprint f \u003d new Fingerprint(new Fingerprint.BuildPtr(\"foo\", 13), \"stuff\u0026more.jar\",\n                Util.fromHexString(SOME_MD5));\n        f.addWithoutSaving(\"some\", 1);\n        f.addWithoutSaving(\"some\", 2);\n        f.addWithoutSaving(\"some\", 3);\n        f.addWithoutSaving(\"some\", 10);\n        f.addWithoutSaving(\"other\", 6);\n        f.save();\n        Fingerprint f2 \u003d Fingerprint.load(SOME_MD5);\n        assertNotNull(f2);\n        assertEquals(f.toString(), f2.toString());\n        f.facets.setOwner(Saveable.NOOP);\n        f.facets.add(new TestFacet(f, 123, \"val\"));\n        f.save();\n        f2 \u003d Fingerprint.load(SOME_MD5);\n        assertEquals(f.toString(), f2.toString());\n        assertEquals(1, f2.facets.size());\n        TestFacet facet \u003d (TestFacet) f2.facets.get(0);\n        assertEquals(f2, facet.getFingerprint());\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldCreateFingerprintsForWorkspace:void()","methodSource":"@Test\n    public void shouldCreateFingerprintsForWorkspace() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        project.getPublishersList().add(new Fingerprinter(\"test.txt\", false));\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldCreateFingerprintsForArtifacts:void()","methodSource":"@Test\n    public void shouldCreateFingerprintsForArtifacts() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldCreateUsageLinks:void()","methodSource":"@Test\n    public void shouldCreateUsageLinks() throws Exception {\n        // Project 1\n        FreeStyleProject project \u003d createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build \u003d project.getLastBuild();\n\n        // Project 2\n        FreeStyleProject project2 \u003d rule.createFreeStyleProject();\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        FreeStyleBuild build2 \u003d rule.buildAndAssertSuccess(project2);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n\n        // Check references\n        Fingerprint.BuildPtr original \u003d fp.getOriginal();\n        assertEquals(\"Original reference contains a wrong job name\", project.getName(), original.getName());\n        assertEquals(\"Original reference contains a wrong build number\", build.getNumber(), original.getNumber());\n\n        Hashtable\u003cString, Fingerprint.RangeSet\u003e usages \u003d fp.getUsages();\n        assertTrue(\"Usages do not have a reference to \" + project, usages.containsKey(project.getName()));\n        assertTrue(\"Usages do not have a reference to \" + project2, usages.containsKey(project2.getName()));\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldThrowIOExceptionWhenFileIsInvalid:void()","methodSource":"@Test\n    @Issue(\"JENKINS-51179\")\n    public void shouldThrowIOExceptionWhenFileIsInvalid() throws Exception {\n        XmlFile f \u003d new XmlFile(new File(rule.jenkins.getRootDir(), \"foo.xml\"));\n        f.write(\"Hello, world!\");\n        IOException e \u003d assertThrows(IOException.class, () -\u003e FileFingerprintStorage.load(f.getFile()));\n        assertThat(e.getMessage(), containsString(\"Unexpected Fingerprint type\"));\n    }","advisory":"JENKINS-51179"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldBeUnableToSeeJobsIfNoPermissions:void()","methodSource":"@Test\n    @Issue(\"SECURITY-153\")\n    public void shouldBeUnableToSeeJobsIfNoPermissions() throws Exception {\n        // Project 1\n        final FreeStyleProject project1 \u003d createAndRunProjectWithPublisher(\"fpProducer\", \"test.txt\");\n        final FreeStyleBuild build \u003d project1.getLastBuild();\n\n        // Project 2\n        final FreeStyleProject project2 \u003d rule.createFreeStyleProject(\"project2\");\n        project2.getBuildersList().add(new WorkspaceCopyFileBuilder(\"test.txt\", project1.getName(), build.getNumber()));\n        project2.getPublishersList().add(new Fingerprinter(\"test.txt\"));\n        final FreeStyleBuild build2 \u003d rule.buildAndAssertSuccess(project2);\n\n        // Get fingerprint\n        final Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n\n        // Init Users\n        User user1 \u003d User.getOrCreateByIdOrFullName(\"user1\"); // can access project1\n        User user2 \u003d User.getOrCreateByIdOrFullName(\"user2\"); // can access project2\n        User user3 \u003d User.getOrCreateByIdOrFullName(\"user3\"); // cannot access anything\n\n        // Project permissions\n        setupProjectMatrixAuthStrategy(Jenkins.READ);\n        setJobPermissionsOnce(project1, \"user1\", Item.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project2, \"user2\", Item.READ, Item.DISCOVER);\n\n        try (ACLContext acl \u003d ACL.as(user1)) {\n            Fingerprint.BuildPtr original \u003d fp.getOriginal();\n            assertThat(\"user1 should be able to see the origin\", fp.getOriginal(), notNullValue());\n            assertEquals(\"user1 should be able to see the origin\u0027s project name\", project1.getName(), original.getName());\n            assertEquals(\"user1 should be able to see the origin\u0027s build number\", build.getNumber(), original.getNumber());\n            assertEquals(\"Only one usage should be visible to user1\", 1, fp._getUsages().size());\n            assertEquals(\"Only project1 should be visible to user1\", project1.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl \u003d ACL.as(user2)) {\n            assertThat(\"user2 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"Only one usage should be visible to user2\", 1, fp._getUsages().size());\n            assertEquals(\"Only project2 should be visible to user2\", project2.getFullName(), fp._getUsages().get(0).name);\n        }\n\n        try (ACLContext acl \u003d ACL.as(user3)) {\n            Fingerprint.BuildPtr original \u003d fp.getOriginal();\n            assertThat(\"user3 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"All usages should be invisible for user3\", 0, fp._getUsages().size());\n        }\n    }","advisory":"SECURITY-153"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly:void()","methodSource":"@Test\n    public void shouldBeAbleToSeeOriginalWithDiscoverPermissionOnly() throws Exception {\n        // Setup the environment\n        final FreeStyleProject project \u003d createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build \u003d project.getLastBuild();\n        final Fingerprint fingerprint \u003d getFingerprint(build, \"test.txt\");\n\n        // Init Users and security\n        User user1 \u003d User.get(\"user1\");\n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        try (ACLContext acl \u003d ACL.as(user1)) {\n            Fingerprint.BuildPtr original \u003d fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"Usage ref in fingerprint should be visible to user1\", 1, fingerprint._getUsages().size());\n        }\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldBeAbleToSeeFingerprintsInReadableFolder:void()","methodSource":"@Test\n    public void shouldBeAbleToSeeFingerprintsInReadableFolder() throws Exception {\n        final SecuredMockFolder folder \u003d rule.jenkins.createProject(SecuredMockFolder.class, \"folder\");\n        final FreeStyleProject project \u003d createAndRunProjectWithPublisher(folder, \"project\", \"test.txt\");\n        final FreeStyleBuild build \u003d project.getLastBuild();\n        final Fingerprint fingerprint \u003d getFingerprint(build, \"test.txt\");\n\n        // Init Users and security\n        User user1 \u003d User.getOrCreateByIdOrFullName(\"user1\");\n        setupProjectMatrixAuthStrategy(false, Jenkins.READ, Item.DISCOVER);\n        setJobPermissionsOnce(project, \"user1\", Item.DISCOVER); // Prevents the fallback to the folder ACL\n        folder.setPermissions(\"user1\", Item.READ);\n\n        // Ensure we can read the original from user account\n        try (ACLContext acl \u003d ACL.as(user1)) {\n            assertTrue(\"Test framework issue: User1 should be able to read the folder\", folder.hasPermission(Item.READ));\n\n            Fingerprint.BuildPtr original \u003d fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"user1 should be able to see the job\", 1, fingerprint._getUsages().size());\n\n            assertThat(\"User should be unable do retrieve the job due to the missing read\", original.getJob(), nullValue());\n        }\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldBeUnableToSeeFingerprintsInUnreadableFolder:void()","methodSource":"@Test\n    public void shouldBeUnableToSeeFingerprintsInUnreadableFolder() throws Exception {\n        final SecuredMockFolder folder \u003d rule.jenkins.createProject(SecuredMockFolder.class, \"folder\");\n        final FreeStyleProject project \u003d createAndRunProjectWithPublisher(folder, \"project\", \"test.txt\");\n        final FreeStyleBuild build \u003d project.getLastBuild();\n        final Fingerprint fingerprint \u003d getFingerprint(build, \"test.txt\");\n\n        // Init Users and security\n        User user1 \u003d User.getOrCreateByIdOrFullName(\"user1\"); // can access project1\n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.DISCOVER);\n\n        // Ensure we can read the original from user account\n        try (ACLContext acl \u003d ACL.as(user1)) {\n            assertFalse(\"Test framework issue: User1 should be unable to read the folder\", folder.hasPermission(Item.READ));\n            assertThat(\"user1 should be unable to see the origin\", fingerprint.getOriginal(), nullValue());\n            assertEquals(\"No jobs should be visible to user1\", 0, fingerprint._getUsages().size());\n        }\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.commonUserShouldBeUnableToSeeReferencesOfDeletedJobs:void()","methodSource":"@Test\n    @Issue(\"SECURITY-153\")\n    public void commonUserShouldBeUnableToSeeReferencesOfDeletedJobs() throws Exception {\n        // Setup the environment\n        FreeStyleProject project \u003d createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        FreeStyleBuild build \u003d project.getLastBuild();\n        final Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n\n        // Init Users and security\n        User user1 \u003d User.getOrCreateByIdOrFullName(\"user1\");\n        setupProjectMatrixAuthStrategy(Jenkins.READ, Item.READ, Item.DISCOVER);\n        project.delete();\n\n        try (ACLContext acl \u003d ACL.as(user1)) {\n            assertThat(\"user1 should be unable to see the origin\", fp.getOriginal(), nullValue());\n            assertEquals(\"No jobs should be visible to user1\", 0, fp._getUsages().size());\n        }\n    }","advisory":"SECURITY-153"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.adminShouldBeAbleToSeeReferencesOfDeletedJobs:void()","methodSource":"@Test\n    public void adminShouldBeAbleToSeeReferencesOfDeletedJobs() throws Exception {\n        // Setup the environment\n        final FreeStyleProject project \u003d createAndRunProjectWithPublisher(\"project\", \"test.txt\");\n        final FreeStyleBuild build \u003d project.getLastBuild();\n        final Fingerprint fingerprint \u003d getFingerprint(build, \"test.txt\");\n\n        // Init Users and security\n        User user1 \u003d User.getOrCreateByIdOrFullName(\"user1\");\n        setupProjectMatrixAuthStrategy(Jenkins.ADMINISTER);\n        project.delete();\n\n        try (ACLContext acl \u003d ACL.as(user1)) {\n            Fingerprint.BuildPtr original \u003d fingerprint.getOriginal();\n            assertThat(\"user1 should able to see the origin\", fingerprint.getOriginal(), notNullValue());\n            assertThat(\"Job has been deleted, so Job reference should return null\", fingerprint.getOriginal().getJob(), nullValue());\n            assertEquals(\"user1 sees the wrong original name with Item.DISCOVER\", project.getFullName(), original.getName());\n            assertEquals(\"user1 sees the wrong original number with Item.DISCOVER\", build.getNumber(), original.getNumber());\n            assertEquals(\"user1 should be able to see the job in usages\", 1, fingerprint._getUsages().size());\n        }\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.shouldDeleteFingerprint:void()","methodSource":"@Test\n    public void shouldDeleteFingerprint() throws IOException {\n        String id \u003d SOME_MD5;\n        Fingerprint fingerprintSaved \u003d new Fingerprint(new Fingerprint.BuildPtr(\"foo\", 3),\n                \"stuff\u0026more.jar\", Util.fromHexString(id));\n        fingerprintSaved.save();\n\n        Fingerprint fingerprintLoaded \u003d Fingerprint.load(id);\n        assertThat(fingerprintLoaded, is(not(nullValue())));\n\n        Fingerprint.delete(id);\n        fingerprintLoaded \u003d Fingerprint.load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n\n        Fingerprint.delete(id);\n        fingerprintLoaded \u003d Fingerprint.load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkNormalFingerprint:void()","methodSource":"@Test\n    public void checkNormalFingerprint() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        Fingerprint loadedFingerprint \u003d Fingerprint.load(fp.getHashString());\n        assertEquals(fp.getDisplayName(), loadedFingerprint.getDisplayName());\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkNormalFingerprintWithWebClient:void()","methodSource":"@Test\n    public void checkNormalFingerprintWithWebClient() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n\n        Page page \u003d rule.createWebClient().getPage(new WebRequest(new URL(rule.getURL(), \"fingerprint/\" + fp.getHashString() + \"/\")));\n        assertEquals(200, page.getWebResponse().getStatusCode());\n\n        // could also be reached using static/\u003canything\u003e/\n        Page page2 \u003d rule.createWebClient().getPage(new WebRequest(new URL(rule.getURL(), \"static/abc/fingerprint/\" + fp.getHashString() + \"/\")));\n        assertEquals(200, page2.getWebResponse().getStatusCode());\n    }"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.canModifyFacets:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65611\")\n    public void canModifyFacets() {\n        Fingerprint fingerprint \u003d new Fingerprint(new Fingerprint.BuildPtr(\"foo\", 3),\n                \"stuff\u0026more.jar\", Util.fromHexString(SOME_MD5));\n        TestFacet testFacet \u003d new TestFacet(fingerprint, 0, \"test\");\n        assertThat(fingerprint.getFacets().size(), is(0));\n        fingerprint.getFacets().add(testFacet);\n        assertThat(fingerprint.getFacets().size(), is(1));\n        assertTrue(fingerprint.getFacets().contains(testFacet));\n        fingerprint.getFacets().remove(testFacet);\n        assertThat(fingerprint.getFacets().size(), is(0));\n        fingerprint.getFacets().add(testFacet);\n        assertThat(fingerprint.getFacets().size(), is(1));\n        Iterator\u003cFingerprintFacet\u003e itr \u003d fingerprint.getFacets().iterator();\n        itr.next();\n        itr.remove();\n        assertThat(fingerprint.getFacets().size(), is(0));\n    }","advisory":"JENKINS-65611"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryEmptyFileExistence:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryEmptyFileExistence() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        File targetFile \u003d new File(rule.jenkins.getRootDir(), \"../cf1.xml\");\n        Util.touch(targetFile);\n        // required as cf1.xml is outside the temporary folders created for the test\n        // and if the test is failing, it will not be deleted\n        targetFile.deleteOnExit();\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n        String id \u003d first + second + \"/../../\" + first + \"/\" + second + \"/../../../../cf1\";\n        Fingerprint fingerprint \u003d Fingerprint.load(id);\n        assertNull(fingerprint);\n        assertTrue(targetFile.exists());\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryEmptyFileExistenceWithWebClient:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryEmptyFileExistenceWithWebClient() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        File targetFile \u003d new File(rule.jenkins.getRootDir(), \"../cf2.xml\");\n        Util.touch(targetFile);\n        targetFile.deleteOnExit();\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n        rule.createWebClient().getPage(new WebRequest(new URL(rule.getURL(), \"static/abc/fingerprint/\" + first + second + \"%2f..%2f..%2f\" + first + \"%2f\" + second + \"%2f..%2f..%2f..%2f..%2fcf2/\")));\n        assertTrue(targetFile.exists());\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryFileExistence:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryFileExistence() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        File sourceFile \u003d new File(rule.jenkins.getRootDir(), \"config.xml\");\n        File targetFile \u003d new File(rule.jenkins.getRootDir(), \"../cf3.xml\");\n        Files.copy(sourceFile.toPath(), targetFile.toPath(), REPLACE_EXISTING);\n        targetFile.deleteOnExit();\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n        String id \u003d first + second + \"/../../\" + first + \"/\" + second + \"/../../../../cf3\";\n        Fingerprint fingerprint \u003d Fingerprint.load(id);\n        assertNull(fingerprint);\n        assertTrue(targetFile.exists());\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryFileExistenceWithWebClient:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryFileExistenceWithWebClient() throws Exception {\n        loggerRule.record(FileFingerprintStorage.class, Level.WARNING)\n                .record(FileFingerprintStorage.class, Level.WARNING)\n                .capture(1000);\n\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        File sourceFile \u003d new File(rule.jenkins.getRootDir(), \"config.xml\");\n        File targetFile \u003d new File(rule.jenkins.getRootDir(), \"../cf4.xml\");\n        Files.copy(sourceFile.toPath(), targetFile.toPath(), REPLACE_EXISTING);\n        targetFile.deleteOnExit();\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n\n        rule.createWebClient().getPage(new WebRequest(new URL(rule.getURL(), \"static/abc/fingerprint/\" + first + second + \"%2f..%2f..%2f\" + first + \"%2f\" + second + \"%2f..%2f..%2f..%2f..%2fcf4/\")));\n        assertTrue(targetFile.exists());\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryFileNonexistence:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryFileNonexistence() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n        String id \u003d first + second + \"/../../\" + first + \"/\" + second + \"/../../../../cf5\";\n        Fingerprint fingerprint \u003d Fingerprint.load(id);\n        assertNull(fingerprint);\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryFileNonexistenceWithWebClient:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryFileNonexistenceWithWebClient() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n        rule.createWebClient().getPage(new WebRequest(new URL(rule.getURL(), \"static/abc/fingerprint/\" + first + second + \"%2f..%2f..%2f\" + first + \"%2f\" + second + \"%2f..%2f..%2f..%2f..%2fcf6/\")));\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FingerprintTest","methodSignature":"hudson.model.FingerprintTest.checkArbitraryFingerprintConfigFileExistenceWithWebClient:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2023\")\n    public void checkArbitraryFingerprintConfigFileExistenceWithWebClient() throws Exception {\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"test.txt\", \"Hello, world!\"));\n        ArtifactArchiver archiver \u003d new ArtifactArchiver(\"test.txt\");\n        archiver.setFingerprint(true);\n        project.getPublishersList().add(archiver);\n        FreeStyleBuild build \u003d rule.buildAndAssertSuccess(project);\n\n        Fingerprint fp \u003d getFingerprint(build, \"test.txt\");\n        File targetFile \u003d new File(rule.jenkins.getRootDir(), \"../cf7.xml\");\n        Files.writeString(targetFile.toPath(), TEST_FINGERPRINT_CONFIG_FILE_CONTENT, StandardCharsets.UTF_8);\n        targetFile.deleteOnExit();\n\n        String first \u003d fp.getHashString().substring(0, 2);\n        String second \u003d fp.getHashString().substring(2, 4);\n\n        Page page \u003d null;\n        try {\n            // that file exists, so we need to ensure if it\u0027s returned, the content is not the expected one from the test data.\n            String partialUrl \u003d \"static/abc/fingerprint/\" + first + second + \"%2f..%2f..%2f\" + first + \"%2f\" + second + \"%2f..%2f..%2f..%2f..%2fcf7/\";\n            page \u003d rule.createWebClient().getPage(new WebRequest(new URL(rule.getURL(), partialUrl)));\n        } catch (FailingHttpStatusCodeException e) {\n            // expected refusal after the correction\n            assertEquals(500, e.getStatusCode());\n        }\n        if (page !\u003d null) {\n            // content retrieval occurred before the correction, we have to check the content to ensure non-regression\n            String pageContent \u003d page.getWebResponse().getContentAsString();\n            assertThat(pageContent, not(containsString(TEST_FINGERPRINT_ID)));\n        }\n        assertTrue(targetFile.exists());\n    }","advisory":"SECURITY-2023"},{"className":"hudson.model.FreestyleJobPublisherTest","methodSignature":"hudson.model.FreestyleJobPublisherTest.testFreestyleWithFalsePublisher:void()","methodSource":"@Issue(\"JENKINS-26964\")\n    @Test\n    public void testFreestyleWithFalsePublisher() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); // noop\n        p.getPublishersList().add(new TrueFalsePublisher(false));   // FAIL build with false\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); // catch result to file\n        final ArtifactArchiver artifactArchiver \u003d new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); // transfer file to build dir\n\n        FreeStyleBuild b \u003d j.buildAndAssertStatus(Result.FAILURE, p);\n        Path path \u003d b.getArtifactsDir().toPath().resolve(\"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", Files.exists(path));\n        assertEquals(\"Publisher, after publisher with return false status, must see FAILURE status\", Files.readString(path, StandardCharsets.UTF_8), Result.FAILURE.toString());\n    }","advisory":"JENKINS-26964"},{"className":"hudson.model.FreestyleJobPublisherTest","methodSignature":"hudson.model.FreestyleJobPublisherTest.testFreestyleWithExceptionPublisher:void()","methodSource":"@Issue(\"JENKINS-26964\")\n    @Test\n    public void testFreestyleWithExceptionPublisher() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); // noop\n        p.getPublishersList().add(new AbortExceptionPublisher()); // FAIL build with AbortException\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); // catch result to file\n        final ArtifactArchiver artifactArchiver \u003d new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); // transfer file to build dir\n\n        FreeStyleBuild b \u003d j.buildAndAssertStatus(Result.FAILURE, p);\n\n        j.assertLogNotContains(\"\\tat\", b); // log must not contain stacktrace\n        j.assertLogContains(\"Threw AbortException from publisher!\", b); // log must contain exact error message\n        Path path \u003d b.getArtifactsDir().toPath().resolve(\"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", Files.exists(path));\n        assertEquals(\"Third publisher must see FAILURE status\", Files.readString(path, StandardCharsets.UTF_8), Result.FAILURE.toString());\n    }","advisory":"JENKINS-26964"},{"className":"hudson.model.FreestyleJobPublisherTest","methodSignature":"hudson.model.FreestyleJobPublisherTest.testFreestyleWithIOExceptionPublisher:void()","methodSource":"@Issue(\"JENKINS-26964\")\n    @Test\n    public void testFreestyleWithIOExceptionPublisher() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        p.getPublishersList().add(new TrueFalsePublisher(true)); // noop\n        p.getPublishersList().add(new IOExceptionPublisher());   // fail with IOException\n        p.getPublishersList().add(new ResultWriterPublisher(\"result.txt\")); //catch result to file\n        final ArtifactArchiver artifactArchiver \u003d new ArtifactArchiver(\"result.txt\");\n        artifactArchiver.setOnlyIfSuccessful(false);\n        p.getPublishersList().add(artifactArchiver); // transfer file to build dir\n\n        FreeStyleBuild b \u003d j.buildAndAssertStatus(Result.FAILURE, p);\n\n        j.assertLogContains(\"\\tat hudson.model.utils.IOExceptionPublisher\", b); // log must contain stacktrace\n        j.assertLogContains(\"Threw IOException from publisher!\", b); // log must contain exact error message\n        Path path \u003d b.getArtifactsDir().toPath().resolve(\"result.txt\");\n        assertTrue(\"ArtifactArchiver is executed even prior publisher fails\", Files.exists(path));\n        assertEquals(\"Third publisher must see FAILURE status\", Files.readString(path, StandardCharsets.UTF_8), Result.FAILURE.toString());\n    }","advisory":"JENKINS-26964"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.configSubmission:void()","methodSource":"@Test\n    public void configSubmission() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        Shell shell \u003d new Shell(\"echo hello\");\n        project.getBuildersList().add(shell);\n\n        // emulate the user behavior\n        WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(project, \"configure\");\n\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        j.submit(form);\n\n        List\u003cBuilder\u003e builders \u003d project.getBuilders();\n        assertEquals(1, builders.size());\n        assertEquals(Shell.class, builders.get(0).getClass());\n        assertEquals(\"echo hello\", ((Shell) builders.get(0)).getCommand().trim());\n        assertNotSame(builders.get(0), shell);\n    }"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.customWorkspaceAllocation:void()","methodSource":"@Test\n    @Issue(\"JENKINS-4206\")\n    public void customWorkspaceAllocation() throws Exception {\n        FreeStyleProject f \u003d j.createFreeStyleProject();\n        f.setCustomWorkspace(tempFolder.newFolder().getPath());\n        j.buildAndAssertSuccess(f);\n    }","advisory":"JENKINS-4206"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.customWorkspaceVariableExpansion:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3997\")\n    public void customWorkspaceVariableExpansion() throws Exception {\n        FreeStyleProject f \u003d j.createFreeStyleProject();\n        File d \u003d new File(tempFolder.newFolder(), \"${JOB_NAME}\");\n        f.setCustomWorkspace(d.getPath());\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(f);\n\n        String path \u003d b.getWorkspace().getRemote();\n        System.out.println(path);\n        assertFalse(path.contains(\"${JOB_NAME}\"));\n        assertEquals(b.getWorkspace().getName(), f.getName());\n    }","advisory":"JENKINS-3997"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.minimalConfigXml:void()","methodSource":"@Test\n    @Issue(\"JENKINS-15817\")\n    public void minimalConfigXml() throws Exception {\n        // Make sure it can be created without exceptions:\n        FreeStyleProject project \u003d (FreeStyleProject) j.jenkins.createProjectFromXML(\"stuff\", new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8)));\n        System.out.println(project.getConfigFile().asString());\n        // and round-tripped:\n        Shell shell \u003d new Shell(\"echo hello\");\n        project.getBuildersList().add(shell);\n        WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(project, \"configure\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        j.submit(form);\n        List\u003cBuilder\u003e builders \u003d project.getBuilders();\n        assertEquals(1, builders.size());\n        assertEquals(Shell.class, builders.get(0).getClass());\n        assertEquals(\"echo hello\", ((Shell) builders.get(0)).getCommand().trim());\n        assertNotSame(builders.get(0), shell);\n        System.out.println(project.getConfigFile().asString());\n    }","advisory":"JENKINS-15817"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.buildStabilityReports:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36629\")\n    @WithTimeout(300)\n    public void buildStabilityReports() throws Exception {\n        for (int i \u003d 0; i \u003c\u003d 32; i++) {\n            FreeStyleProject p \u003d j.createFreeStyleProject(String.format(\"Pattern-%s\", Integer.toBinaryString(i)));\n            int expectedFails \u003d 0;\n            for (int j \u003d 32; j \u003e\u003d 1; j \u003d j / 2) {\n                p.getBuildersList().clear();\n                if ((i \u0026 j) \u003d\u003d j) {\n                    p.getBuildersList().add(new FailureBuilder());\n                    if (j \u003c\u003d 16) {\n                        expectedFails++;\n                    }\n                    this.j.buildAndAssertStatus(Result.FAILURE, p);\n                } else {\n                    this.j.buildAndAssertSuccess(p);\n                }\n            }\n            HealthReport health \u003d p.getBuildHealth();\n\n            assertThat(String.format(\"Pattern %s score\", Integer.toBinaryString(i)), health.getScore(), is(100 * (5 - expectedFails) / 5));\n        }\n    }","advisory":"JENKINS-36629"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.configDotXmlWithValidXmlAndBadField:void()","methodSource":"@Issue(\"SECURITY-1923\")\n    @Test\n    public void configDotXmlWithValidXmlAndBadField() throws Exception {\n        final String CONFIGURATOR \u003d \"configure_user\";\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy mas \u003d new MockAuthorizationStrategy();\n        mas.grant(Item.CONFIGURE, Item.READ, Jenkins.READ)\n                .everywhere()\n                .to(CONFIGURATOR);\n        j.jenkins.setAuthorizationStrategy(mas);\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(CONFIGURATOR);\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(String.format(\"%s/config.xml\", project.getUrl())), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        req.setRequestBody(VALID_XML_BAD_FIELD_USER_XML);\n\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n        // This really shouldn\u0027t return 500, but that\u0027s what it does now.\n        assertThat(e.getStatusCode(), equalTo(500));\n\n        OldDataMonitor odm \u003d ExtensionList.lookupSingleton(OldDataMonitor.class);\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n\n        assertThat(data.size(), equalTo(0));\n\n        odm.doDiscard(null, null);\n\n        User.AllUsers.scanAll();\n        boolean createUser \u003d false;\n        User badUser \u003d User.getById(\"foo\", createUser);\n\n        assertNull(\"Should not have created user.\", badUser);\n    }","advisory":"SECURITY-1923"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.submitPossibleWithoutJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void submitPossibleWithoutJellyTrace() throws Exception {\n        FreeStyleProject freeStyleProject \u003d j.createFreeStyleProject();\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage htmlPage \u003d wc.goTo(freeStyleProject.getUrl() + \"configure\");\n        HtmlForm configForm \u003d htmlPage.getFormByName(\"config\");\n        j.assertGoodStatus(j.submit(configForm));\n    }","advisory":"JENKINS-65288"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.submitPossibleWithJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void submitPossibleWithJellyTrace() throws Exception {\n        boolean currentValue \u003d JellyFacet.TRACE;\n        try {\n            JellyFacet.TRACE \u003d true;\n\n            FreeStyleProject freeStyleProject \u003d j.createFreeStyleProject();\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            HtmlPage htmlPage \u003d wc.goTo(freeStyleProject.getUrl() + \"configure\");\n            HtmlForm configForm \u003d htmlPage.getFormByName(\"config\");\n            j.assertGoodStatus(j.submit(configForm));\n        } finally {\n            JellyFacet.TRACE \u003d currentValue;\n        }\n    }","advisory":"JENKINS-65288"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.cannotCreateJobWithTrailingDot_withoutOtherJob:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateJobWithTrailingDot_withoutOtherJob() throws Exception {\n        assertThat(j.jenkins.getItems(), hasSize(0));\n        Failure e \u003d assertThrows(\n                \"Adding the job should have thrown an exception during checkGoodName\",\n                Failure.class,\n                () -\u003e j.jenkins.createProjectFromXML(\"jobA.\", new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))));\n        assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());\n        assertThat(j.jenkins.getItems(), hasSize(0));\n    }","advisory":"SECURITY-2424"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.cannotCreateJobWithTrailingDot_withExistingJob:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateJobWithTrailingDot_withExistingJob() throws Exception {\n        assertThat(j.jenkins.getItems(), hasSize(0));\n        j.createFreeStyleProject(\"jobA\");\n        assertThat(j.jenkins.getItems(), hasSize(1));\n        Failure e \u003d assertThrows(\n                \"Adding the job should have thrown an exception during checkGoodName\",\n                Failure.class,\n                () -\u003e j.jenkins.createProjectFromXML(\"jobA.\", new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8))));\n        assertEquals(Messages.Hudson_TrailingDot(), e.getMessage());\n        assertThat(j.jenkins.getItems(), hasSize(1));\n    }","advisory":"SECURITY-2424"},{"className":"hudson.model.FreeStyleProjectTest","methodSignature":"hudson.model.FreeStyleProjectTest.cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet:void()","methodSource":"@Issue(\"SECURITY-2424\")\n    @Test public void cannotCreateJobWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {\n        String propName \u003d Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;\n        String initialValue \u003d System.getProperty(propName);\n        System.setProperty(propName, \"false\");\n        try {\n            assertThat(j.jenkins.getItems(), hasSize(0));\n            j.jenkins.createProjectFromXML(\"jobA.\", new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8)));\n        }\n        finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(propName);\n            } else {\n                System.setProperty(propName, initialValue);\n            }\n        }\n        assertThat(j.jenkins.getItems(), hasSize(1));\n    }","advisory":"SECURITY-2424"},{"className":"hudson.model.HelpLinkTest","methodSignature":"hudson.model.HelpLinkTest.systemConfig:void()","methodSource":"@Test\n    public void systemConfig() throws Exception {\n        clickAllHelpLinks(j.createWebClient().goTo(\"configure\"));\n    }"},{"className":"hudson.model.HelpLinkTest","methodSignature":"hudson.model.HelpLinkTest.freestyleConfig:void()","methodSource":"@Test\n    public void freestyleConfig() throws Exception {\n        clickAllHelpLinks(j.createFreeStyleProject());\n    }"},{"className":"hudson.model.HelpLinkTest","methodSignature":"hudson.model.HelpLinkTest.matrixConfig:void()","methodSource":"@Test\n    public void matrixConfig() throws Exception {\n        clickAllHelpLinks(j.jenkins.createProject(MatrixProject.class, \"mp\"));\n    }"},{"className":"hudson.model.HelpLinkTest","methodSignature":"hudson.model.HelpLinkTest.negative:void()","methodSource":"@Test\n    public void negative() throws Exception {\n        HelpNotFoundBuilder.DescriptorImpl d \u003d new HelpNotFoundBuilder.DescriptorImpl();\n        Publisher.all().add(d);\n        try {\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            p.getPublishersList().add(new HelpNotFoundBuilder());\n            JenkinsRule.WebClient webclient \u003d j.createWebClient();\n            WebResponseListener.StatusListener statusListener \u003d new WebResponseListener.StatusListener(404);\n            webclient.addWebResponseListener(statusListener);\n\n            clickAllHelpLinks(webclient, p);\n\n            statusListener.assertHasResponses();\n            String contentAsString \u003d statusListener.getResponses().get(0).getContentAsString();\n            Assert.assertTrue(contentAsString.contains(d.getHelpFile()));\n        } finally {\n            Publisher.all().remove(d);\n        }\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.globalConfigRoundtrip:void()","methodSource":"@Test\n    public void globalConfigRoundtrip() throws Exception {\n        j.jenkins.setQuietPeriod(10);\n        j.jenkins.setScmCheckoutRetryCount(9);\n        j.jenkins.setNumExecutors(8);\n        j.configRoundtrip();\n        assertEquals(10, j.jenkins.getQuietPeriod());\n        assertEquals(9, j.jenkins.getScmCheckoutRetryCount());\n        assertEquals(8, j.jenkins.getNumExecutors());\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.simpleConfigSubmit:void()","methodSource":"@Test\n    @LocalData\n    @Email(\"http://www.nabble.com/Hudson.configure-calling-deprecated-Descriptor.configure-td19051815.html\")\n    public void simpleConfigSubmit() throws Exception {\n        // just load the page and resubmit\n        HtmlPage configPage \u003d j.createWebClient().goTo(\"configure\");\n        HtmlForm form \u003d configPage.getFormByName(\"config\");\n        j.submit(form);\n        // Load tools page and resubmit too\n        HtmlPage toolsConfigPage \u003d j.createWebClient().goTo(\"configureTools\");\n        HtmlForm toolsForm \u003d toolsConfigPage.getFormByName(\"config\");\n        j.submit(toolsForm);\n\n        // make sure all the pieces are intact\n        assertEquals(2, j.jenkins.getNumExecutors());\n        assertSame(Mode.NORMAL, j.jenkins.getMode());\n        assertSame(SecurityRealm.NO_AUTHENTICATION, j.jenkins.getSecurityRealm());\n        assertSame(AuthorizationStrategy.UNSECURED, j.jenkins.getAuthorizationStrategy());\n        assertEquals(5, j.jenkins.getQuietPeriod());\n\n        List\u003cJDK\u003e jdks \u003d j.jenkins.getJDKs();\n        assertEquals(3, jdks.size()); // Hudson adds one more\n        assertJDK(jdks.get(0), \"jdk1\", \"/tmp\");\n        assertJDK(jdks.get(1), \"jdk2\", \"/tmp\");\n\n        AntInstallation[] ants \u003d j.jenkins.getDescriptorByType(Ant.DescriptorImpl.class).getInstallations();\n        assertEquals(2, ants.length);\n        assertAnt(ants[0], \"ant1\", \"/tmp\");\n        assertAnt(ants[1], \"ant2\", \"/tmp\");\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.searchIndex:void()","methodSource":"@Test\n    public void searchIndex() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        Page jobPage \u003d j.search(p.getName());\n\n        URL url \u003d jobPage.getUrl();\n        System.out.println(url);\n        assertTrue(url.getPath().endsWith(\"/job/\" + p.getName() + \"/\"));\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.breadcrumb:void()","methodSource":"@Test\n    public void breadcrumb() throws Exception {\n        HtmlPage root \u003d j.createWebClient().goTo(\"\");\n        DomElement navbar \u003d root.getElementById(\"breadcrumbs\");\n        assertEquals(1, navbar.querySelectorAll(\".jenkins-breadcrumbs__list-item\").size());\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.computerConfigureLink:void()","methodSource":"@Test\n    @Email(\"http://www.nabble.com/Master-slave-refactor-td21361880.html\")\n    public void computerConfigureLink() throws Exception {\n        HtmlPage page \u003d j.createWebClient().goTo(\"computer/(built-in)/configure\");\n        j.submit(page.getFormByName(\"config\"));\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.deleteHudsonComputer:void()","methodSource":"@Test\n    @Email(\"http://www.nabble.com/Master-slave-refactor-td21361880.html\")\n    public void deleteHudsonComputer() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n        HtmlPage page \u003d wc.goTo(\"computer/(built-in)/\");\n        for (HtmlAnchor a : page.getAnchors()) {\n            assertFalse(a.getHrefAttribute(), a.getHrefAttribute().endsWith(\"delete\"));\n        }\n\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        // try to delete it by hitting the final URL directly\n        WebRequest req \u003d new WebRequest(new URI(wc.getContextPath() + \"computer/(built-in)/doDelete\").toURL(), HttpMethod.POST);\n        page \u003d wc.getPage(wc.addCrumb(req));\n        assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, page.getWebResponse().getStatusCode());\n\n        // the built-in computer object should be still here\n        page \u003d wc.goTo(\"computer/(built-in)/\");\n        assertEquals(HttpURLConnection.HTTP_OK, page.getWebResponse().getStatusCode());\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.legacyDescriptorLookup:void()","methodSource":"@Test\n    @Email(\"http://www.nabble.com/1.286-version-and-description-The-requested-resource-%28%29-is-not--available.-td22233801.html\")\n    public void legacyDescriptorLookup() {\n        Descriptor dummy \u003d new Descriptor(HudsonTest.class) {};\n\n        BuildStep.PUBLISHERS.addRecorder(dummy);\n        assertSame(dummy, j.jenkins.getDescriptor(HudsonTest.class.getName()));\n\n        BuildStep.PUBLISHERS.remove(dummy);\n        assertNull(j.jenkins.getDescriptor(HudsonTest.class.getName()));\n    }"},{"className":"hudson.model.HudsonTest","methodSignature":"hudson.model.HudsonTest.invalidPrimaryView:void()","methodSource":"@Test\n    @Issue(\"JENKINS-6938\")\n    public void invalidPrimaryView() throws Exception {\n        Field pv \u003d Jenkins.class.getDeclaredField(\"primaryView\");\n        pv.setAccessible(true);\n        String value \u003d null;\n        pv.set(j.jenkins, value);\n        assertNull(\"null primaryView\", j.jenkins.getView(value));\n        value \u003d \"some bogus name\";\n        pv.set(j.jenkins, value);\n        assertNull(\"invalid primaryView\", j.jenkins.getView(value));\n    }","advisory":"JENKINS-6938"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.xmlFileReadCannotResolveClassException:void()","methodSource":"@Issue(\"JENKINS-20951\")\n    @LocalData\n    @Test public void xmlFileReadCannotResolveClassException() {\n        MockFolder d \u003d r.jenkins.getItemByFullName(\"d\", MockFolder.class);\n        assertNotNull(d);\n        Collection\u003cTopLevelItem\u003e items \u003d d.getItems();\n        assertEquals(1, items.size());\n        assertEquals(\"valid\", items.iterator().next().getName());\n    }","advisory":"JENKINS-20951"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.xmlFileFailsToLoad:void()","methodSource":"@Issue(\"JENKINS-22811\")\n  @Test\n  public void xmlFileFailsToLoad() throws Exception {\n    MockFolder folder \u003d r.createFolder(\"folder\");\n    assertNotNull(folder);\n\n    AbstractProject project \u003d folder.createProject(FreeStyleProject.class, \"job1\");\n    AbstractProject project2 \u003d folder.createProject(FreeStyleProject.class, \"job2\");\n    AbstractProject project3 \u003d folder.createProject(FreeStyleProject.class, \"job3\");\n\n    File configFile \u003d project.getConfigFile().getFile();\n\n    List\u003cString\u003e lines \u003d Files.readAllLines(configFile.toPath(), StandardCharsets.UTF_8).subList(0, 5);\n    configFile.delete();\n\n    // Remove half of the config.xml file to make \"invalid\" or fail to load\n    Files.writeString(configFile.toPath(), lines.toString(), StandardCharsets.UTF_8);\n    for (int i \u003d lines.size() / 2; i \u003c lines.size(); i++) {\n      Files.writeString(configFile.toPath(), lines.get(i), StandardCharsets.UTF_8, StandardOpenOption.APPEND);\n    }\n\n    // Reload Jenkins.\n    r.jenkins.reload();\n\n    // Folder\n    assertNotNull(\"Folder failed to load.\", r.jenkins.getItemByFullName(\"folder\"));\n    assertNull(\"Job should have failed to load.\", r.jenkins.getItemByFullName(\"folder/job1\"));\n    assertNotNull(\"Other job in folder should have loaded.\", r.jenkins.getItemByFullName(\"folder/job2\"));\n    assertNotNull(\"Other job in folder should have loaded.\", r.jenkins.getItemByFullName(\"folder/job3\"));\n  }","advisory":"JENKINS-22811"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.xmlFileReadExceptionOnLoad:void()","methodSource":"@LocalData\n  @Issue(\"JENKINS-22811\")\n  @Test\n  public void xmlFileReadExceptionOnLoad() {\n    MockFolder d \u003d r.jenkins.getItemByFullName(\"d\", MockFolder.class);\n    assertNotNull(d);\n    Collection\u003cTopLevelItem\u003e items \u003d d.getItems();\n    assertEquals(5, items.size());\n  }","advisory":"JENKINS-22811"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.createProjectFromXMLShouldNoCreateEntities:void()","methodSource":"@Test public void createProjectFromXMLShouldNoCreateEntities() throws IOException {\n\n        final String xml \u003d \"\u003c?xml version\u003d\u00271.0\u0027 encoding\u003d\u0027UTF-8\u0027?\u003e\\n\" +\n                \"\u003c!DOCTYPE project[\\n\" +\n                \"  \u003c!ENTITY foo SYSTEM \\\"file:///\\\"\u003e\\n\" +\n                \"]\u003e\\n\" +\n                \"\u003cproject\u003e\\n\" +\n                \"  \u003cactions/\u003e\\n\" +\n                \"  \u003cdescription\u003e\u0026foo;\u003c/description\u003e\\n\" +\n                \"  \u003ckeepDependencies\u003efalse\u003c/keepDependencies\u003e\\n\" +\n                \"  \u003cproperties/\u003e\\n\" +\n                \"  \u003cscm class\u003d\\\"hudson.scm.NullSCM\\\"/\u003e\\n\" +\n                \"  \u003ccanRoam\u003etrue\u003c/canRoam\u003e\\n\" +\n                \"  \u003ctriggers/\u003e\\n\" +\n                \"  \u003cbuilders/\u003e\\n\" +\n                \"  \u003cpublishers/\u003e\\n\" +\n                \"  \u003cbuildWrappers/\u003e\\n\" +\n                \"\u003c/project\u003e\";\n\n        Item foo \u003d r.jenkins.createProjectFromXML(\"foo\", new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)));\n        // if no exception then JAXP is swallowing these - so there should be no entity in the description.\n        assertThat(Items.getConfigFile(foo).asString(), containsString(\"\u003cdescription/\u003e\"));\n    }"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.copy_checkGoodName:void()","methodSource":"@Issue(\"JENKINS-61956\")\n  @Test\n  public void copy_checkGoodName() throws IOException {\n    final String goodName \u003d \"calvin-jenkins\";\n    final String badName \u003d \"calvin@jenkins\";\n\n    Project goodProject \u003d r.jenkins.createProject(FreeStyleProject.class, goodName);\n\n    Failure exception \u003d assertThrows(Failure.class, () -\u003e r.jenkins.copy(goodProject, badName));\n    assertEquals(exception.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n  }","advisory":"JENKINS-61956"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.createProject_checkGoodName:void()","methodSource":"@Issue(\"JENKINS-61956\")\n  @Test\n  public void createProject_checkGoodName() {\n    final String badName \u003d \"calvin@jenkins\";\n\n    Failure exception \u003d assertThrows(Failure.class, () -\u003e r.jenkins.createProject(MockFolder.class, badName));\n    assertEquals(exception.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n  }","advisory":"JENKINS-61956"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.createProjectFromXML_checkGoodName:void()","methodSource":"@Issue(\"JENKINS-61956\")\n  @Test\n  public void createProjectFromXML_checkGoodName() {\n    final String badName \u003d \"calvin@jenkins\";\n\n    final String xml \u003d \"\u003c?xml version\u003d\u00271.0\u0027 encoding\u003d\u0027UTF-8\u0027?\u003e\\n\" +\n            \"\u003c!DOCTYPE project[\\n\" +\n            \"  \u003c!ENTITY foo SYSTEM \\\"file:///\\\"\u003e\\n\" +\n            \"]\u003e\\n\" +\n            \"\u003cproject\u003e\\n\" +\n            \"  \u003cactions/\u003e\\n\" +\n            \"  \u003cdescription\u003e\u0026foo;\u003c/description\u003e\\n\" +\n            \"  \u003ckeepDependencies\u003efalse\u003c/keepDependencies\u003e\\n\" +\n            \"  \u003cproperties/\u003e\\n\" +\n            \"  \u003cscm class\u003d\\\"hudson.scm.NullSCM\\\"/\u003e\\n\" +\n            \"  \u003ccanRoam\u003etrue\u003c/canRoam\u003e\\n\" +\n            \"  \u003ctriggers/\u003e\\n\" +\n            \"  \u003cbuilders/\u003e\\n\" +\n            \"  \u003cpublishers/\u003e\\n\" +\n            \"  \u003cbuildWrappers/\u003e\\n\" +\n            \"\u003c/project\u003e\";\n\n    Failure exception \u003d assertThrows(Failure.class, () -\u003e r.jenkins.createProjectFromXML(badName, new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8))));\n    assertEquals(exception.getMessage(), Messages.Hudson_UnsafeChar(\"@\"));\n  }","advisory":"JENKINS-61956"},{"className":"hudson.model.ItemGroupMixInTest","methodSignature":"hudson.model.ItemGroupMixInTest.doCreateItemWithValidXmlAndBadField:void()","methodSource":"@Issue(\"SECURITY-1923\")\n  @Test\n  public void doCreateItemWithValidXmlAndBadField() throws Exception {\n    final String CREATOR \u003d \"create_user\";\n\n    r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n    MockAuthorizationStrategy mas \u003d new MockAuthorizationStrategy();\n    mas.grant(Item.CREATE, Item.CONFIGURE, Item.READ, Jenkins.READ)\n            .everywhere()\n            .to(CREATOR);\n    r.jenkins.setAuthorizationStrategy(mas);\n\n    JenkinsRule.WebClient wc \u003d r.createWebClient();\n    wc.login(CREATOR);\n    WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"createItem?name\u003dtestProject\"), HttpMethod.POST);\n    req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n    req.setRequestBody(VALID_XML_BAD_FIELD_USER_XML);\n\n    FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n    // This really shouldn\u0027t return 500, but that\u0027s what it does now.\n    assertThat(e.getStatusCode(), equalTo(500));\n\n    OldDataMonitor odm \u003d ExtensionList.lookupSingleton(OldDataMonitor.class);\n    Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n\n    assertThat(data.size(), equalTo(0));\n\n    odm.doDiscard(null, null);\n\n    User.AllUsers.scanAll();\n    boolean createUser \u003d false;\n    User badUser \u003d User.getById(\"foo\", createUser);\n\n    assertNull(\"Should not have created user.\", badUser);\n  }","advisory":"SECURITY-1923"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.getAllItems:void()","methodSource":"@Test public void getAllItems() throws Exception {\n        MockFolder d \u003d r.createFolder(\"d\");\n        MockFolder sub2 \u003d d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a \u003d sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c \u003d sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b \u003d sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 \u003d d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root \u003d r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp \u003d d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q \u003d sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p \u003d sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap \u003d sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp \u003d sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp \u003d sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha \u003d sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO \u003d sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie \u003d sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertEquals(Arrays.asList(dp, sub1p, sub1q, sub2ap, sub2alpha, sub2bp, sub2BRAVO, sub2cp, sub2charlie), d.getAllItems(FreeStyleProject.class));\n        assertEquals(Arrays.\u003cItem\u003easList(sub2a, sub2ap, sub2alpha, sub2b, sub2bp, sub2BRAVO, sub2c, sub2cp, sub2charlie), sub2.getAllItems(Item.class));\n    }"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.getAllItemsPredicate:void()","methodSource":"@Test public void getAllItemsPredicate() throws Exception {\n        MockFolder d \u003d r.createFolder(\"d\");\n        MockFolder sub2 \u003d d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a \u003d sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c \u003d sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b \u003d sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 \u003d d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root \u003d r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp \u003d d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q \u003d sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p \u003d sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap \u003d sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp \u003d sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp \u003d sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha \u003d sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO \u003d sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie \u003d sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertEquals(Arrays.asList(dp, sub1p, sub2ap, sub2bp, sub2cp), d.getAllItems(FreeStyleProject.class, t -\u003e t.getName().equals(\"p\")));\n        assertEquals(Arrays.\u003cItem\u003easList(sub2a, sub2alpha), sub2.getAllItems(Item.class, t -\u003e t.getName().startsWith(\"a\")));\n    }"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.allItems:void()","methodSource":"@Issue(\"JENKINS-40252\")\n    @Test\n    public void allItems() throws Exception {\n        MockFolder d \u003d r.createFolder(\"d\");\n        MockFolder sub2 \u003d d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a \u003d sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c \u003d sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b \u003d sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 \u003d d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root \u003d r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp \u003d d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q \u003d sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p \u003d sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap \u003d sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp \u003d sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp \u003d sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha \u003d sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO \u003d sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie \u003d sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertThat(d.allItems(FreeStyleProject.class), containsInAnyOrder(dp, sub1p, sub1q, sub2ap, sub2alpha,\n                sub2bp, sub2BRAVO, sub2cp, sub2charlie));\n        assertThat(sub2.allItems(Item.class), containsInAnyOrder((Item) sub2a, sub2ap, sub2alpha, sub2b, sub2bp,\n                sub2BRAVO, sub2c, sub2cp, sub2charlie));\n    }","advisory":"JENKINS-40252"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.allItemsPredicate:void()","methodSource":"@Test public void allItemsPredicate() throws Exception {\n        MockFolder d \u003d r.createFolder(\"d\");\n        MockFolder sub2 \u003d d.createProject(MockFolder.class, \"sub2\");\n        MockFolder sub2a \u003d sub2.createProject(MockFolder.class, \"a\");\n        MockFolder sub2c \u003d sub2.createProject(MockFolder.class, \"c\");\n        MockFolder sub2b \u003d sub2.createProject(MockFolder.class, \"b\");\n        MockFolder sub1 \u003d d.createProject(MockFolder.class, \"sub1\");\n        FreeStyleProject root \u003d r.createFreeStyleProject(\"root\");\n        FreeStyleProject dp \u003d d.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub1q \u003d sub1.createProject(FreeStyleProject.class, \"q\");\n        FreeStyleProject sub1p \u003d sub1.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2ap \u003d sub2a.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2bp \u003d sub2b.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2cp \u003d sub2c.createProject(FreeStyleProject.class, \"p\");\n        FreeStyleProject sub2alpha \u003d sub2.createProject(FreeStyleProject.class, \"alpha\");\n        FreeStyleProject sub2BRAVO \u003d sub2.createProject(FreeStyleProject.class, \"BRAVO\");\n        FreeStyleProject sub2charlie \u003d sub2.createProject(FreeStyleProject.class, \"charlie\");\n        assertThat(d.allItems(FreeStyleProject.class, t -\u003e t.getName().equals(\"p\")), containsInAnyOrder(dp, sub1p, sub2ap, sub2bp, sub2cp));\n        assertThat(sub2.allItems(Item.class, t -\u003e t.getName().startsWith(\"a\")), containsInAnyOrder(sub2a, sub2alpha));\n    }"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.moveItem:void()","methodSource":"@Issue(\"JENKINS-24825\")\n    @Test public void moveItem() throws Exception {\n        File tmp \u003d tmpRule.getRoot();\n        r.jenkins.setRawBuildsDir(tmp.getAbsolutePath() + \"/${ITEM_FULL_NAME}\");\n        MockFolder foo \u003d r.createFolder(\"foo\");\n        MockFolder bar \u003d r.createFolder(\"bar\");\n        FreeStyleProject test \u003d foo.createProject(FreeStyleProject.class, \"test\");\n        r.buildAndAssertSuccess(test);\n        Items.move(test, bar);\n        assertFalse(new File(tmp, \"foo/test/1\").exists());\n        assertTrue(new File(tmp, \"bar/test/1\").exists());\n    }","advisory":"JENKINS-24825"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.overwriteNonexistentTarget:void()","methodSource":"@Test public void overwriteNonexistentTarget() throws Exception {\n        overwriteTargetSetUp();\n        for (OverwriteTactic tactic : OverwriteTactic.values()) {\n            tactic.run(r, \"nonexistent\");\n            System.out.println(tactic + \" worked as expected on a nonexistent target\");\n            r.jenkins.getItem(\"nonexistent\").delete();\n        }\n    }"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.overwriteVisibleTarget:void()","methodSource":"@Test public void overwriteVisibleTarget() throws Exception {\n        cannotOverwrite(\"visible\");\n    }"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.overwriteKnownTarget:void()","methodSource":"@Test public void overwriteKnownTarget() throws Exception {\n        cannotOverwrite(\"known\");\n    }"},{"className":"hudson.model.ItemsTest","methodSignature":"hudson.model.ItemsTest.overwriteHiddenTarget:void()","methodSource":"@Issue(\"SECURITY-321\")\n    @Test public void overwriteHiddenTarget() throws Exception {\n        cannotOverwrite(\"secret\");\n    }","advisory":"SECURITY-321"},{"className":"hudson.model.JobPropertyTest","methodSignature":"hudson.model.JobPropertyTest.jobPropertySummaryIsShownInMatrixProjectIndexPage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2398\")\n    public void jobPropertySummaryIsShownInMatrixProjectIndexPage() throws Exception {\n        assertJobPropertySummaryIsShownInIndexPage(MatrixProject.class);\n    }","advisory":"JENKINS-2398"},{"className":"hudson.model.JobPropertyTest","methodSignature":"hudson.model.JobPropertyTest.jobPropertySummaryIsShownInFreeStyleProjectIndexPage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2398\")\n    public void jobPropertySummaryIsShownInFreeStyleProjectIndexPage() throws Exception {\n        assertJobPropertySummaryIsShownInIndexPage(FreeStyleProject.class);\n    }","advisory":"JENKINS-2398"},{"className":"hudson.model.JobPropertyTest","methodSignature":"hudson.model.JobPropertyTest.configRoundtrip:void()","methodSource":"@Test\n    public void configRoundtrip() throws Exception {\n        logs.record(Descriptor.class, Level.ALL);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        JobPropertyWithConfigImpl before \u003d new JobPropertyWithConfigImpl(\"Duke\");\n        p.addProperty(before);\n        j.configRoundtrip((Item) p);\n        JobPropertyWithConfigImpl after \u003d p.getProperty(JobPropertyWithConfigImpl.class);\n        assertNotSame(after, before);\n        j.assertEqualDataBoundBeans(before, after);\n        p.removeProperty(after);\n        JobPropertyWithConfigImpl empty \u003d new JobPropertyWithConfigImpl(\"\");\n        p.addProperty(empty);\n        j.configRoundtrip((Item) p);\n        assertNull(p.getProperty(JobPropertyWithConfigImpl.class));\n    }"},{"className":"hudson.model.JobPropertyTest","methodSignature":"hudson.model.JobPropertyTest.invisibleProperty:void()","methodSource":"@Test\n    public void invisibleProperty() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        InvisibleImpl before \u003d new InvisibleImpl();\n        p.addProperty(before);\n        j.configRoundtrip((Item) p);\n        InvisibleImpl after \u003d p.getProperty(InvisibleImpl.class);\n        assertSame(after, before);\n    }"},{"className":"hudson.model.JobQueueTest","methodSignature":"hudson.model.JobQueueTest.buildPendingWhenBuildRunning:void()","methodSource":"@Test\n    public void buildPendingWhenBuildRunning() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(2000));\n\n        //Kick the first Build\n        project.scheduleBuild2(1);\n        //Schedule another build\n        project.scheduleBuild2(1);\n\n        //The project should be in Queue when Run is in BUILDING stage\n        assertTrue(project.isInQueue());\n\n        //Cancel the project from queue\n        j.jenkins.getQueue().cancel(project.getQueueItem());\n\n        //Verify the project is removed from Queue\n        assertTrue(j.jenkins.getQueue().isEmpty());\n    }"},{"className":"hudson.model.JobQueueTest","methodSignature":"hudson.model.JobQueueTest.buildPendingWhenBuildInPostProduction:void()","methodSource":"@Test\n    public void buildPendingWhenBuildInPostProduction() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        project.getBuildersList().add(new SleepBuilder(1000));\n\n        //Kick the first Build\n        FreeStyleBuild b1 \u003d project.scheduleBuild2(1).waitForStart();\n        int count \u003d 0;\n        //Now, Wait for run to be in POST_PRODUCTION stage\n        while (!JobQueueTest.fireCompletedFlag \u0026\u0026 count \u003c 100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        QueueTaskFuture\u003cFreeStyleBuild\u003e b2 \u003d null;\n        if (JobQueueTest.fireCompletedFlag) {\n        //Schedule the build for the project and this build should be in Queue since the state is POST_PRODUCTION\n            b2 \u003d project.scheduleBuild2(0);\n            assertTrue(project.isInQueue()); //That means it\u0027s pending or it\u0027s waiting or blocked\n            j.jenkins.getQueue().maintain();\n            while (j.jenkins.getQueue().getItem(project) instanceof WaitingItem) {\n                System.out.println(j.jenkins.getQueue().getItem(project));\n                j.jenkins.getQueue().maintain();\n                Thread.sleep(10);\n            }\n            assertThat(j.jenkins.getQueue().getItem(project), instanceOf(BlockedItem.class)); //check is it is blocked\n        }\n        else {\n            fail(\"The maximum attempts for checking if the job is in POST_PRODUCTION State have reached\");\n        }\n        count \u003d 0;\n        while (!JobQueueTest.fireFinalizeFlag \u0026\u0026 count \u003c 100) {\n            Thread.sleep(100);\n            count++;\n        }\n\n        if (JobQueueTest.fireFinalizeFlag) {\n        //Verify the build is removed from Queue since now it is in Completed state\n        //it should be scheduled for run\n            j.jenkins.getQueue().maintain();\n            assertThat(j.jenkins.getQueue().getItem(project), not(instanceOf(BlockedItem.class)));\n        }\n        else {\n            fail(\"The maximum attempts for checking if the job is in COMPLETED State have reached\");\n        }\n        j.assertBuildStatusSuccess(b1);\n        if (b2 !\u003d null) {\n            j.assertBuildStatusSuccess(b2);\n        }\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.jobPropertySummaryIsShownInMainPage:void()","methodSource":"@SuppressWarnings(\"unchecked\")\n    @Test public void jobPropertySummaryIsShownInMainPage() throws Exception {\n        AbstractProject project \u003d j.createFreeStyleProject();\n        project.addProperty(new JobPropertyImpl(\"NeedleInPage\"));\n\n        HtmlPage page \u003d j.createWebClient().getPage(project);\n        WebAssert.assertTextPresent(page, \"NeedleInPage\");\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.buildNumberSynchronization:void()","methodSource":"@Test public void buildNumberSynchronization() throws Exception {\n        AbstractProject project \u003d j.createFreeStyleProject();\n        CountDownLatch startLatch \u003d new CountDownLatch(1);\n        CountDownLatch stopLatch \u003d new CountDownLatch(2);\n        BuildNumberSyncTester test1 \u003d new BuildNumberSyncTester(project, startLatch, stopLatch, true);\n        BuildNumberSyncTester test2 \u003d new BuildNumberSyncTester(project, startLatch, stopLatch, false);\n        new Thread(test1).start();\n        new Thread(test2).start();\n\n        startLatch.countDown();\n        stopLatch.await();\n\n        assertTrue(test1.message, test2.passed);\n        assertTrue(test2.message, test2.passed);\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.readPermission:void()","methodSource":"@Test public void readPermission() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"testJob\");\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.READ).everywhere().toEveryone().\n            grant(Item.READ).onItems(p).to(\"joe\"));\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.assertFails(\"job/testJob/\", HttpURLConnection.HTTP_NOT_FOUND);\n        wc.assertFails(\"jobCaseInsensitive/testJob/\", HttpURLConnection.HTTP_NOT_FOUND);\n        wc.withBasicCredentials(\"joe\");\n        // Verify we can access both URLs:\n        wc.goTo(\"job/testJob/\");\n        wc.goTo(\"jobCaseInsensitive/TESTJOB/\");\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.configDotXmlPermission:void()","methodSource":"@LocalData\n    @Test public void configDotXmlPermission() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        boolean saveEnabled \u003d Item.EXTENDED_READ.getEnabled();\n        Item.EXTENDED_READ.setEnabled(true);\n        try {\n            wc.assertFails(\"job/testJob/config.xml\", HttpURLConnection.HTTP_FORBIDDEN);\n\n            wc.setThrowExceptionOnFailingStatusCode(false);\n\n            // Has CONFIGURE and EXTENDED_READ permission\n            wc.withBasicApiToken(User.getById(\"alice\", true));\n            tryConfigDotXml(wc, HttpURLConnection.HTTP_INTERNAL_ERROR, \"Both perms; should get 500\");\n\n            // Has only CONFIGURE permission (this should imply EXTENDED_READ)\n            wc.withBasicApiToken(User.getById(\"bob\", true));\n            tryConfigDotXml(wc, HttpURLConnection.HTTP_INTERNAL_ERROR, \"Config perm should imply EXTENDED_READ\");\n\n            // Has only EXTENDED_READ permission\n            wc.withBasicApiToken(User.getById(\"charlie\", true));\n            tryConfigDotXml(wc, HttpURLConnection.HTTP_FORBIDDEN, \"No permission, should get 403\");\n        } finally {\n            Item.EXTENDED_READ.setEnabled(saveEnabled);\n        }\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.getArtifactsUpTo:void()","methodSource":"@LocalData @Issue(\"JENKINS-6371\")\n    @Test public void getArtifactsUpTo() {\n        // There was a bug where intermediate directories were counted,\n        // so too few artifacts were returned.\n        Run r \u003d j.jenkins.getItemByFullName(\"testJob\", Job.class).getLastCompletedBuild();\n        assertEquals(3, r.getArtifacts().size());\n        assertEquals(3, r.getArtifactsUpTo(3).size());\n        assertEquals(2, r.getArtifactsUpTo(2).size());\n        assertEquals(1, r.getArtifactsUpTo(1).size());\n    }","advisory":"JENKINS-6371"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.emptyDescriptionReturnsEmptyPage:void()","methodSource":"@Issue(\"JENKINS-10182\")\n    @Test public void emptyDescriptionReturnsEmptyPage() throws Exception {\n        // A NPE was thrown if a job had a null (empty) description.\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        project.setDescription(\"description\");\n        assertEquals(\"description\", ((TextPage) wc.goTo(\"job/project/description\", \"text/plain\")).getContent());\n        project.setDescription(null);\n        assertEquals(\"\", ((TextPage) wc.goTo(\"job/project/description\", \"text/plain\")).getContent());\n    }","advisory":"JENKINS-10182"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.projectNamingStrategy:void()","methodSource":"@Test public void projectNamingStrategy() throws Exception {\n        j.jenkins.setProjectNamingStrategy(new ProjectNamingStrategy.PatternProjectNamingStrategy(\"DUMMY.*\", false));\n        try {\n            final FreeStyleProject p \u003d j.createFreeStyleProject(\"DUMMY_project\");\n            assertNotNull(\"no project created\", p);\n            assertThrows(Failure.class, () -\u003e j.createFreeStyleProject(\"project\"));\n        } finally {\n            // set it back to the default naming strategy, otherwise all other tests would fail to create jobs!\n            j.jenkins.setProjectNamingStrategy(ProjectNamingStrategy.DEFAULT_NAMING_STRATEGY);\n        }\n        j.createFreeStyleProject(\"project\");\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.getLastFailedBuild:void()","methodSource":"@Issue(\"JENKINS-16023\")\n    @Test public void getLastFailedBuild() throws Exception {\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new FailureBuilder());\n        j.buildAndAssertStatus(Result.FAILURE, p);\n        j.buildAndAssertStatus(Result.FAILURE, p);\n        j.buildAndAssertStatus(Result.FAILURE, p);\n        p.getBuildersList().remove(FailureBuilder.class);\n        j.buildAndAssertSuccess(p);\n        j.buildAndAssertSuccess(p);\n        j.buildAndAssertSuccess(p);\n        assertEquals(6, p.getLastSuccessfulBuild().getNumber());\n        assertEquals(3, RunLoadCounter.assertMaxLoads(p, 1, () -\u003e p.getLastFailedBuild().getNumber()).intValue());\n    }","advisory":"JENKINS-16023"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithCustomBuildsDirWithSubdir:void()","methodSource":"@Issue(\"JENKINS-19764\")\n    @Test public void testRenameWithCustomBuildsDirWithSubdir() throws Exception {\n        j.jenkins.setRawBuildsDir(\"${JENKINS_HOME}/builds/${ITEM_FULL_NAME}/builds\");\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        j.buildAndAssertSuccess(p);\n        p.renameTo(\"different-name\");\n    }","advisory":"JENKINS-19764"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithCustomBuildsDirWithBuildsIntact:void()","methodSource":"@Issue(\"JENKINS-44657\")\n    @Test public void testRenameWithCustomBuildsDirWithBuildsIntact() throws Exception {\n        j.jenkins.setRawBuildsDir(\"${JENKINS_HOME}/builds/${ITEM_FULL_NAME}/builds\");\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        final File oldBuildsDir \u003d p.getBuildDir();\n        j.buildAndAssertSuccess(p);\n        String oldDirContent \u003d dirContent(oldBuildsDir);\n        p.renameTo(\"different-name\");\n        final File newBuildDir \u003d p.getBuildDir();\n        assertNotNull(newBuildDir);\n        assertNotEquals(oldBuildsDir.getAbsolutePath(), newBuildDir.getAbsolutePath());\n        String newDirContent \u003d dirContent(newBuildDir);\n        assertEquals(oldDirContent, newDirContent);\n    }","advisory":"JENKINS-44657"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithCustomBuildsDirWithBuildsIntactInFolder:void()","methodSource":"@Issue(\"JENKINS-44657\")\n    @Test public void testRenameWithCustomBuildsDirWithBuildsIntactInFolder() throws Exception {\n        j.jenkins.setRawBuildsDir(\"${JENKINS_HOME}/builds/${ITEM_FULL_NAME}/builds\");\n        final MockFolder f \u003d j.createFolder(\"F\");\n\n        final FreeStyleProject p1 \u003d f.createProject(FreeStyleProject.class, \"P1\");\n        j.buildAndAssertSuccess(p1);\n        File oldP1BuildsDir \u003d p1.getBuildDir();\n        final String oldP1DirContent \u003d dirContent(oldP1BuildsDir);\n        f.renameTo(\"different-name\");\n\n        File newP1BuildDir \u003d p1.getBuildDir();\n        assertNotNull(newP1BuildDir);\n        assertNotEquals(oldP1BuildsDir.getAbsolutePath(), newP1BuildDir.getAbsolutePath());\n        String newP1DirContent \u003d dirContent(newP1BuildDir);\n        assertEquals(oldP1DirContent, newP1DirContent);\n\n        final FreeStyleProject p2 \u003d f.createProject(FreeStyleProject.class, \"P2\");\n        if (Functions.isWindows()) {\n            p2.getBuildersList().add(new BatchFile(\"echo hello \u003e hello.txt\"));\n        } else {\n            p2.getBuildersList().add(new Shell(\"echo hello \u003e hello.txt\"));\n        }\n        p2.getPublishersList().add(new ArtifactArchiver(\"*.txt\"));\n        j.buildAndAssertSuccess(p2);\n\n        File oldP2BuildsDir \u003d p2.getBuildDir();\n        final String oldP2DirContent \u003d dirContent(oldP2BuildsDir);\n        FreeStyleBuild b2 \u003d p2.getBuilds().getLastBuild();\n        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();\n        b2.getLogText().writeRawLogTo(0, out);\n        final String oldB2Log \u003d out.toString(Charset.defaultCharset());\n        assertTrue(b2.getArtifactManager().root().child(\"hello.txt\").exists());\n        f.renameTo(\"something-else\");\n\n        //P1 check again\n        newP1BuildDir \u003d p1.getBuildDir();\n        assertNotNull(newP1BuildDir);\n        assertNotEquals(oldP1BuildsDir.getAbsolutePath(), newP1BuildDir.getAbsolutePath());\n        newP1DirContent \u003d dirContent(newP1BuildDir);\n        assertEquals(oldP1DirContent, newP1DirContent);\n\n        //P2 check\n\n        b2 \u003d p2.getBuilds().getLastBuild();\n        assertNotNull(b2);\n        out \u003d new ByteArrayOutputStream();\n        b2.getLogText().writeRawLogTo(0, out);\n        final String newB2Log \u003d out.toString(Charset.defaultCharset());\n        assertEquals(oldB2Log, newB2Log);\n        assertTrue(b2.getArtifactManager().root().child(\"hello.txt\").exists());\n\n        File newP2BuildDir \u003d p2.getBuildDir();\n        assertNotNull(newP2BuildDir);\n        assertNotEquals(oldP2BuildsDir.getAbsolutePath(), newP2BuildDir.getAbsolutePath());\n        String newP2DirContent \u003d dirContent(newP2BuildDir);\n        assertEquals(oldP2DirContent, newP2DirContent);\n    }","advisory":"JENKINS-44657"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameTrimsLeadingSpace:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testRenameTrimsLeadingSpace() throws Exception {\n        tryRename(\"myJob1\", \" foo\", \"foo\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameTrimsTrailingSpace:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testRenameTrimsTrailingSpace() throws Exception {\n        tryRename(\"myJob2\", \"foo \", \"foo\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testAllowTrimmingByUser:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testAllowTrimmingByUser() throws Exception {\n        assumeFalse(\"Unix-only test.\", Functions.isWindows());\n        tryRename(\"myJob3 \", \"myJob3\", \"myJob3\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithLeadingSpaceTrimsLeadingSpace:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testRenameWithLeadingSpaceTrimsLeadingSpace() throws Exception {\n        assumeFalse(\"Unix-only test.\", Functions.isWindows());\n        tryRename(\" myJob4\", \" foo\", \"foo\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithLeadingSpaceTrimsTrailingSpace:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testRenameWithLeadingSpaceTrimsTrailingSpace()\n            throws Exception {\n        assumeFalse(\"Unix-only test.\", Functions.isWindows());\n        tryRename(\" myJob5\", \"foo \", \"foo\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithTrailingSpaceTrimsTrailingSpace:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testRenameWithTrailingSpaceTrimsTrailingSpace()\n            throws Exception {\n        assumeFalse(\"Unix-only test.\", Functions.isWindows());\n        tryRename(\"myJob6 \", \"foo \", \"foo\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameWithTrailingSpaceTrimsLeadingSpace:void()","methodSource":"@Issue(\"JENKINS-30502\")\n    @Test\n    public void testRenameWithTrailingSpaceTrimsLeadingSpace()\n            throws Exception {\n        assumeFalse(\"Unix-only test.\", Functions.isWindows());\n        tryRename(\"myJob7 \", \" foo\", \"foo\");\n    }","advisory":"JENKINS-30502"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameNonLatin:void()","methodSource":"@Issue(\"JENKINS-63899\")\n    @Test\n    public void testRenameNonLatin() throws Exception {\n        tryRename(\"myJob8\", \"блины\", \"блины\");\n    }","advisory":"JENKINS-63899"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.testRenameSpaceInBetween:void()","methodSource":"@Test\n    public void testRenameSpaceInBetween() throws Exception {\n        tryRename(\"myJob9\", \"my Job9\", \"my Job9\");\n    }"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.interruptOnDelete:void()","methodSource":"@Issue(\"JENKINS-35160\")\n    @Test\n    public void interruptOnDelete() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        j.jenkins.setNumExecutors(2);\n        Queue.getInstance().maintain();\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"dummy\", \"0\")));\n        p.setConcurrentBuild(true);\n        p.getBuildersList().add(new SleepBuilder(Long.MAX_VALUE));  // we want the uninterrupted job to run for long time\n        FreeStyleBuild build1 \u003d p.scheduleBuild2(0).getStartCondition().get();\n        FreeStyleBuild build2 \u003d p.scheduleBuild2(0).getStartCondition().get();\n        QueueTaskFuture\u003cFreeStyleBuild\u003e build3 \u003d p.scheduleBuild2(0);\n        long start \u003d System.nanoTime();\n        p.delete();\n        long end \u003d System.nanoTime();\n        assertThat(end - start, Matchers.lessThan(TimeUnit.SECONDS.toNanos(1)));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(build1));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(build2));\n        assertTrue(build3.isCancelled());\n    }","advisory":"JENKINS-35160"},{"className":"hudson.model.JobTest","methodSignature":"hudson.model.JobTest.noXssPossible:void()","methodSource":"@Issue(\"SECURITY-1868\")\n    @Test public void noXssPossible() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        String desiredNodeName \u003d \"agent is a better name2 \u003cscript\u003ealert(123)\u003c/script\u003e\";\n        String initialNodeName \u003d \"agent is a better name\";\n\n        NameChangingNode node \u003d new NameChangingNode(j, initialNodeName);\n        j.jenkins.addNode(node);\n\n        j.waitOnline(node);\n\n        j.jenkins.setNumExecutors(0);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        j.buildAndAssertSuccess(p);\n\n        node.setVirtualName(desiredNodeName);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        AtomicReference\u003cString\u003e alertContent \u003d new AtomicReference\u003c\u003e(\"\");\n\n        wc.setAlertHandler((page, s1) -\u003e\n                alertContent.set(s1)\n        );\n\n        wc.withThrowExceptionOnFailingStatusCode(false);\n        wc.getPage(p, \"buildTimeTrend\");\n\n        assertEquals(\"\", alertContent.get());\n    }","advisory":"SECURITY-1868"},{"className":"hudson.model.LabelLoadStatisticsQueueLengthTest","methodSignature":"hudson.model.LabelLoadStatisticsQueueLengthTest.queueLengthReflectsBuildableItemsAssignedLabel:void()","methodSource":"@Test\n    public void queueLengthReflectsBuildableItemsAssignedLabel()\n            throws Exception {\n        final Label label \u003d Label.get(LABEL_STRING);\n        final Label altLabel \u003d Label.get(ALT_LABEL_STRING);\n\n        FreeStyleProject project \u003d createTestProject();\n\n        // Before queueing the builds the rolling queue length should be 0.\n        assertEquals(\"Initially the rolling queue length for the label is 0.\", 0f, label.loadStatistics.queueLength.getLatest(TimeScale.SEC10), 0.0);\n\n        // Add the job to the build queue several times with an assigned label.\n        for (int i \u003d 0; i \u003c 3; i++) {\n            assertNotNull(project.scheduleBuild2(0, CAUSE, new LabelAssignmentActionImpl(),\n                    new ParametersAction(new StringParameterValue(\n                            PARAMETER_NAME, String.valueOf(i)))));\n        }\n\n        // Verify that the real queue length is 3.\n        assertEquals(\"The job is queued as often as it was scheduled.\", 3, j\n                .getInstance().getQueue().getItems(project).size());\n\n        maintainQueueAndForceRunOfLoadStatisticsUpdater(project);\n\n        assertEquals(\"The job is still queued as often as it was scheduled.\", 3, j\n                .getInstance().getQueue().getItems(project).size());\n\n\n        float labelQueueLength \u003d label.loadStatistics.queueLength\n                .getLatest(TimeScale.SEC10);\n        assertThat(\"After LoadStatisticsUpdater runs, the queue length load statistic for the label is greater than 0.\",\n                labelQueueLength, greaterThan(0f));\n\n        // Assign an alternate label to the project and update the load stats.\n        project.setAssignedLabel(altLabel);\n        maintainQueueAndForceRunOfLoadStatisticsUpdater(project);\n\n        // Verify that the queue length load stat continues to reflect the labels assigned to the items in the queue.\n        float labelQueueLengthNew \u003d label.loadStatistics.queueLength\n                .getLatest(TimeScale.SEC10);\n        assertThat(\"After assigning an alternate label to the job, the queue length load statistic for the \"\n                        + \"queued builds should not decrease.\",\n                labelQueueLengthNew, greaterThan(labelQueueLength));\n    }"},{"className":"hudson.model.LabelLoadStatisticsQueueLengthTest","methodSignature":"hudson.model.LabelLoadStatisticsQueueLengthTest.queueLengthReflectsJobsAssignedLabel:void()","methodSource":"@Test\n    public void queueLengthReflectsJobsAssignedLabel() throws Exception {\n        final Label label \u003d Label.get(LABEL_STRING);\n        final Label altLabel \u003d Label.get(ALT_LABEL_STRING);\n\n        FreeStyleProject project \u003d createTestProject();\n        // Assign a label to the job.\n        project.setAssignedLabel(label);\n\n        // Before queueing the builds the rolling queue lengths should be 0.\n        assertEquals(\"Initially the rolling queue length for the label is 0.\", 0f, label.loadStatistics.queueLength.getLatest(TimeScale.SEC10), 0.0);\n        assertEquals(\"Initially the rolling queue length for the alt label is 0.\", 0f, altLabel.loadStatistics.queueLength.getLatest(TimeScale.SEC10), 0.0);\n\n        // Add the job to the build queue several times.\n        for (int i \u003d 0; i \u003c 3; i++) {\n            assertNotNull(project.scheduleBuild2(0, CAUSE,\n                    new ParametersAction(new StringParameterValue(\n                            PARAMETER_NAME, String.valueOf(i)))));\n        }\n\n        // Verify that the real queue length is 3.\n        assertEquals(\"The job is queued as often as it was scheduled.\", 3, j\n                .getInstance().getQueue().getItems(project).size());\n\n        maintainQueueAndForceRunOfLoadStatisticsUpdater(project);\n\n        float labelQueueLength \u003d label.loadStatistics.queueLength\n                .getLatest(TimeScale.SEC10);\n        assertTrue(\n                \"After LoadStatisticsUpdater runs, the queue length load statistic for the label is greater than 0.\",\n                labelQueueLength \u003e 0f);\n\n        // Assign an alternate label to the job and update the load stats.\n        project.setAssignedLabel(altLabel);\n        maintainQueueAndForceRunOfLoadStatisticsUpdater(project);\n\n        // Verify that the queue length load stats of the labels reflect the newly project\u0027s newly assigned label.\n        float labelQueueLengthNew \u003d label.loadStatistics.queueLength\n                .getLatest(TimeScale.SEC10);\n        assertTrue(\n                \"After assigning an alternate label to the job, the queue length load statistic for the queued builds should decrease.\",\n                labelQueueLengthNew \u003c labelQueueLength);\n\n        float altLabelQueueLength \u003d altLabel.loadStatistics.queueLength\n                .getLatest(TimeScale.SEC10);\n        assertTrue(\n                \"After assigning an alternate label to the job, the queue length load statistic for the alternate label should be greater than 0.\",\n                altLabelQueueLength \u003e 0f);\n    }"},{"className":"hudson.model.labels.LabelAtomPropertyTest","methodSignature":"hudson.model.labels.LabelAtomPropertyTest.configRoundtrip:void()","methodSource":"@Test\n    public void configRoundtrip() throws Exception {\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo\");\n        LabelAtomPropertyImpl old \u003d new LabelAtomPropertyImpl(\"value\");\n        foo.getProperties().add(old);\n        assertTrue(foo.getConfigFile().exists());\n        foo.load(); // make sure load works\n\n        // it should survive the configuration roundtrip\n        j.submit(j.createWebClient().goTo(\"label/foo/configure\").getFormByName(\"config\"));\n        assertEquals(1, foo.getProperties().size());\n        j.assertEqualDataBoundBeans(old, foo.getProperties().get(LabelAtomPropertyImpl.class));\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.nonexisting:void()","methodSource":"@Test\n    public void nonexisting() {\n        LabelAtom nonexistent \u003d j.jenkins.getLabelAtom(\"nonexistent\");\n        XmlFile configFile \u003d nonexistent.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.normal:void()","methodSource":"@Test\n    public void normal() throws Exception {\n        j.submit(j.createWebClient().goTo(\"labelAtom/foo/configure\").getFormByName(\"config\"));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertTrue(configFile.getFile().exists());\n        assertThat(configFile.getFile().getParentFile().getName(), equalTo(\"labels\"));\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.startsWithDoubleDotSlash:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void startsWithDoubleDotSlash() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/..%2ffoo/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"../foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.startsWithSlash:void()","methodSource":"@Test\n    public void startsWithSlash() throws Exception {\n        // Not a great result, but it works and doesn\u0027t cause problems.\n        j.submit(j.createWebClient().goTo(\"labelAtom/%2ffoo/configure\").getFormByName(\"config\"));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"/foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertTrue(configFile.getFile().exists());\n        assertThat(configFile.getFile().getParentFile().getName(), equalTo(\"labels\"));\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.startsWithDoubleDot:void()","methodSource":"@Test\n    public void startsWithDoubleDot() throws Exception {\n        j.submit(j.createWebClient().goTo(\"labelAtom/..foo/configure\").getFormByName(\"config\"));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"..foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertTrue(configFile.getFile().exists());\n        assertThat(configFile.getFile().getParentFile().getName(), equalTo(\"labels\"));\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.endsWithDoubleDotSlash:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void endsWithDoubleDotSlash() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/foo..%2f/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo../\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.endsWithDoubleDot:void()","methodSource":"@Test\n    public void endsWithDoubleDot() throws Exception {\n        j.submit(j.createWebClient().goTo(\"labelAtom/foo../configure\").getFormByName(\"config\"));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo..\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertTrue(configFile.getFile().exists());\n        assertThat(configFile.getFile().getParentFile().getName(), equalTo(\"labels\"));\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.startsWithDoubleDotBackslash:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void startsWithDoubleDotBackslash() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/..\\\\foo/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"..\\\\foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.endsWithDoubleDotBackslash:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void endsWithDoubleDotBackslash() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/foo..\\\\/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo..\\\\\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.middleDotsSlashes:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void middleDotsSlashes() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/foo%2f..%2fgoo/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo/../goo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.middleDotsBackslashes:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void middleDotsBackslashes() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/foo%\\\\..\\\\goo/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo\\\\..\\\\\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.programmaticCreationInvalidName:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void programmaticCreationInvalidName() {\n        LabelAtom label \u003d new LabelAtom(\"foo/../goo\");\n        assertThrows(IOException.class, label::save);\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.programmaticCreation:void()","methodSource":"@Test\n    public void programmaticCreation() throws IOException {\n        LabelAtom label \u003d new LabelAtom(\"foo\");\n        label.save();\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\"foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertTrue(configFile.getFile().exists());\n        assertThat(configFile.getFile().getParentFile().getName(), equalTo(\"labels\"));\n    }"},{"className":"hudson.model.labels.LabelAtomSecurity1986Test","methodSignature":"hudson.model.labels.LabelAtomSecurity1986Test.startsWithTripleDotBackslash:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1986\")\n    public void startsWithTripleDotBackslash() {\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Should have rejected label.\", FailingHttpStatusCodeException.class, () -\u003e j.submit(j.createWebClient().goTo(\"labelAtom/...%2ffoo/configure\").getFormByName(\"config\")));\n        assertThat(e.getStatusCode(), is(HttpURLConnection.HTTP_BAD_REQUEST));\n        LabelAtom foo \u003d j.jenkins.getLabelAtom(\".../foo\");\n        XmlFile configFile \u003d foo.getConfigFile();\n        assertFalse(configFile.getFile().exists());\n    }","advisory":"SECURITY-1986"},{"className":"hudson.model.labels.LabelAtomTest","methodSignature":"hudson.model.labels.LabelAtomTest.selfLabel:void()","methodSource":"@Test\n    public void selfLabel() throws Exception {\n        j.createSlave(\"node\", \"label\", null);\n        Label self \u003d new LabelAtom(\"node\");\n        assertThat(self.isSelfLabel(), is(true));\n        Label label \u003d new LabelAtom(\"label\");\n        assertThat(label.isSelfLabel(), is(false));\n        Label selfJenkins \u003d j.jenkins.getLabel(\"node\");\n        assertThat(selfJenkins.isSelfLabel(), is(true));\n    }"},{"className":"hudson.model.labels.LabelAtomTest","methodSignature":"hudson.model.labels.LabelAtomTest.getNodes:void()","methodSource":"@Test\n    public void getNodes() throws Exception {\n        Node n1 \u003d j.createSlave(\"n1\", \"label\", null);\n        Node n2 \u003d j.createSlave(\"n2\", \"label label2\", null);\n        Node n3 \u003d j.createSlave(\"n3\", \"label2\", null);\n        Label l \u003d j.jenkins.getLabel(\"label\");\n        Label l2 \u003d j.jenkins.getLabel(\"label2\");\n        Label l3 \u003d j.jenkins.getLabel(\"label3\");\n        assertThat(l.getNodes().size(), is(2));\n        assertThat(l.getNodes(), containsInAnyOrder(n1, n2));\n        assertThat(l2.getNodes().size(), is(2));\n        assertThat(l2.getNodes(), containsInAnyOrder(n3, n2));\n        assertThat(l3.getNodes(), is(empty()));\n    }"},{"className":"hudson.model.labels.LabelAtomTest","methodSignature":"hudson.model.labels.LabelAtomTest.getClouds:void()","methodSource":"@Test\n    public void getClouds() {\n        Cloud test \u003d new TestCloud(\"test\", \"label\");\n        j.jenkins.clouds.add(test);\n        Label l \u003d new LabelAtom(\"label\");\n        Label l2 \u003d new LabelAtom(\"label2\");\n        assertThat(l.getClouds().size(), is(1));\n        assertThat(l.getClouds(), containsInAnyOrder(test));\n        assertThat(l2.getClouds(), is(empty()));\n    }"},{"className":"hudson.model.labels.LabelAtomTest","methodSignature":"hudson.model.labels.LabelAtomTest.isEmpty:void()","methodSource":"@Test\n    public void isEmpty() throws Exception {\n        Label l \u003d new LabelAtom(\"label\");\n        assertThat(l.isEmpty(), is(true));\n        l \u003d new LabelAtom(\"label\");\n        j.createSlave(\"node\", \"label\", null);\n        assertThat(l.isEmpty(), is(false));\n        Label l2 \u003d new LabelAtom(\"label2\");\n        Cloud test \u003d new TestCloud(\"test\", \"label2\");\n        j.jenkins.clouds.add(test);\n        assertThat(l2.isEmpty(), is(false));\n    }"},{"className":"hudson.model.labels.LabelBenchmarkTest","methodSignature":"hudson.model.labels.LabelBenchmarkTest.runBenchmark:void()","methodSource":"@Test\n    public void runBenchmark() throws Exception {\n        // run the minimum possible number of iterations\n        ChainedOptionsBuilder options \u003d new OptionsBuilder()\n                .mode(Mode.AverageTime)\n                .forks(1)\n                .result(\"jmh-report.json\")\n                .resultFormat(ResultFormatType.JSON)\n                .operationsPerInvocation(1)\n                .threads(1)\n                .warmupForks(0)\n                .warmupIterations(0)\n                .measurementBatchSize(1)\n                .measurementIterations(1)\n                .timeUnit(TimeUnit.NANOSECONDS)\n                .shouldFailOnError(true)\n                .include(LabelBenchmarkTest.class.getName() + \".*\");\n        new Runner(options.build()).run();\n        assertTrue(Files.exists(Paths.get(\"jmh-report.json\")));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.queueBehavior1:void()","methodSource":"@Test\n    public void queueBehavior1() throws Exception {\n        DumbSlave w32 \u003d j.createSlave(\"win 32bit\", null);\n        DumbSlave w64 \u003d j.createSlave(\"win 64bit\", null);\n        j.createSlave(\"linux 32bit\", null);\n\n        final SequenceLock seq \u003d new SequenceLock();\n\n        FreeStyleProject p1 \u003d j.createFreeStyleProject();\n        p1.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                seq.phase(0); // first, make sure the w32 agent is occupied\n                seq.phase(2);\n                seq.done();\n                return true;\n            }\n        });\n        p1.setAssignedLabel(j.jenkins.getLabel(\"win \u0026\u0026 32bit\"));\n\n        FreeStyleProject p2 \u003d j.createFreeStyleProject();\n        p2.setAssignedLabel(j.jenkins.getLabel(\"win \u0026\u0026 32bit\"));\n\n        FreeStyleProject p3 \u003d j.createFreeStyleProject();\n        p3.setAssignedLabel(j.jenkins.getLabel(\"win\"));\n\n        Future\u003cFreeStyleBuild\u003e f1 \u003d p1.scheduleBuild2(0);\n\n        seq.phase(1); // we schedule p2 build after w32 agent is occupied\n        Future\u003cFreeStyleBuild\u003e f2 \u003d p2.scheduleBuild2(0);\n\n        Thread.sleep(1000); // time window to ensure queue has tried to assign f2 build\n\n        // p3 is tied to \u0027win\u0027, so even though p1 is busy, this should still go ahead and complete\n        FreeStyleBuild b3 \u003d j.buildAndAssertSuccess(p3);\n        assertSame(w64, b3.getBuiltOn());\n\n        seq.phase(3);   // once we confirm that p3 build is over, we let p1 proceed\n\n        // p1 should have been built on w32\n        FreeStyleBuild b1 \u003d j.assertBuildStatusSuccess(f1);\n        assertSame(w32, b1.getBuiltOn());\n\n        // and so is p2\n        FreeStyleBuild b2 \u003d j.assertBuildStatusSuccess(f2);\n        assertSame(w32, b2.getBuiltOn());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.queueBehavior2:void()","methodSource":"@Test\n    public void queueBehavior2() throws Exception {\n        DumbSlave s \u003d j.createSlave(\"win\", null);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        p.setAssignedLabel(j.jenkins.getLabel(\"!win\"));\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        assertSame(j.jenkins, b.getBuiltOn());\n\n        p.setAssignedLabel(j.jenkins.getLabel(\"win\"));\n        b \u003d j.buildAndAssertSuccess(p);\n        assertSame(s, b.getBuiltOn());\n\n        p.setAssignedLabel(j.jenkins.getLabel(\"!win\"));\n        b \u003d j.buildAndAssertSuccess(p);\n        assertSame(j.jenkins, b.getBuiltOn());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.setLabelString:void()","methodSource":"@Test\n    public void setLabelString() throws Exception {\n        DumbSlave s \u003d j.createSlave(\"foo\", \"\", null);\n\n        assertSame(\"\", s.getLabelString());\n\n        s.setLabelString(\"bar\");\n\n        assertSame(\"bar\", s.getLabelString());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.parser1:void()","methodSource":"@Test\n    public void parser1() throws Exception {\n        parseAndVerify(\"foo\", \"foo\");\n        parseAndVerify(\"32bit.dot\", \"32bit.dot\");\n        parseAndVerify(\"foo||bar\", \"foo || bar\");\n\n        // user-given parenthesis is preserved\n        parseAndVerify(\"foo||bar\u0026\u0026zot\", \"foo||bar\u0026\u0026zot\");\n        parseAndVerify(\"foo||(bar\u0026\u0026zot)\", \"foo||(bar\u0026\u0026zot)\");\n\n        parseAndVerify(\"(foo||bar)\u0026\u0026zot\", \"(foo||bar)\u0026\u0026zot\");\n        parseAndVerify(\"(foo||bar)\u0026\u0026zot\", \"  ( foo || bar )  \u0026\u0026 zot\");\n        parseAndVerify(\"foo-\u003ebar\", \"foo -\u003e\\tbar\");\n        parseAndVerify(\"foo-\u003ebar\", \"foo -\u003e bar\");\n        parseAndVerify(\"foo-\u003ebar\", \"   foo \\t\\t -\u003e   bar \\t \");\n        parseAndVerify(\"!foo\u003c-\u003ebar\", \"!foo \u003c-\u003e bar\");\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.parser2:void()","methodSource":"@Issue(\"JENKINS-8537\")\n    @Test\n    public void parser2() throws Exception {\n        parseAndVerify(\"aaa\u0026\u0026bbb\u0026\u0026ccc\", \"aaa\u0026\u0026bbb\u0026\u0026ccc\");\n    }","advisory":"JENKINS-8537"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.parserError:void()","methodSource":"@Test\n    public void parserError() {\n        parseShouldFail(\"foo bar\", \"line 1:4: extraneous input \u0027bar\u0027 expecting \u003cEOF\u003e\");\n        parseShouldFail(\"foo (bar)\", \"line 1:4: mismatched input \u0027(\u0027 expecting {\u003cEOF\u003e, \u0027\u0026\u0026\u0027, \u0027||\u0027, \u0027-\u003e\u0027, \u0027\u003c-\u003e\u0027}\");\n        parseShouldFail(\"foo(bar)\", \"line 1:3: mismatched input \u0027(\u0027 expecting {\u003cEOF\u003e, \u0027\u0026\u0026\u0027, \u0027||\u0027, \u0027-\u003e\u0027, \u0027\u003c-\u003e\u0027}\");\n        parseShouldFail(\"a \u003c- b\", \"line 1:2: token recognition error at: \u0027\u003c- \u0027\");\n        parseShouldFail(\"a -\u003c b\", \"line 1:3: token recognition error at: \u0027\u003c \u0027\");\n        parseShouldFail(\"a - b\", \"line 1:2: mismatched input \u0027-\u0027 expecting {\u003cEOF\u003e, \u0027\u0026\u0026\u0027, \u0027||\u0027, \u0027-\u003e\u0027, \u0027\u003c-\u003e\u0027}\");\n        parseShouldFail(\"-\u003e\", \"line 1:0: mismatched input \u0027-\u003e\u0027 expecting {\u0027!\u0027, \u0027(\u0027, ATOM, STRINGLITERAL}\");\n        parseShouldFail(\"-\u003c\", \"line 1:1: token recognition error at: \u0027\u003c\u0027\");\n        parseShouldFail(\"-!\", \"line 1:1: extraneous input \u0027!\u0027 expecting \u003cEOF\u003e\");\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.laxParsing:void()","methodSource":"@Test\n    public void laxParsing() {\n        // this should parse as an atom\n        LabelAtom l \u003d (LabelAtom) j.jenkins.getLabel(\"lucene.zones.apache.org (Solaris 10)\");\n        assertEquals(\"lucene.zones.apache.org (Solaris 10)\", l.getName());\n        assertEquals(\"\\\"lucene.zones.apache.org (Solaris 10)\\\"\", l.getExpression());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.dataCompatibilityWithHostNameWithWhitespace:void()","methodSource":"@Test\n    public void dataCompatibilityWithHostNameWithWhitespace() throws Exception {\n        assumeFalse(\"Windows can\u0027t have paths with colons, skipping\", Functions.isWindows());\n        DumbSlave slave \u003d new DumbSlave(\"abc def (xyz) test\", tempFolder.newFolder().getPath(), j.createComputerLauncher(null));\n        slave.setRetentionStrategy(RetentionStrategy.NOOP);\n        slave.setNodeDescription(\"dummy\");\n        slave.setNodeProperties(Collections.emptyList());\n        j.jenkins.addNode(slave);\n\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedLabel(j.jenkins.getLabel(\"abc def\"));\n        assertEquals(\"abc def\", p.getAssignedLabel().getName());\n        assertEquals(\"\\\"abc def\\\"\", p.getAssignedLabel().getExpression());\n\n        // expression should be persisted, not the name\n        Field f \u003d AbstractProject.class.getDeclaredField(\"assignedNode\");\n        f.setAccessible(true);\n        assertEquals(\"\\\"abc def\\\"\", f.get(p));\n\n        // but if the name is set, we\u0027d still like to parse it\n        f.set(p, \"a:b c\");\n        assertEquals(\"a:b c\", p.getAssignedLabel().getName());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.quote:void()","methodSource":"@Test\n    public void quote() {\n        Label l \u003d j.jenkins.getLabel(\"\\\"abc\\\\\\\\\\\\\\\"def\\\"\");\n        assertEquals(\"abc\\\\\\\"def\", l.getName());\n\n        l \u003d j.jenkins.getLabel(\"label1||label2\"); // create label expression\n        l \u003d j.jenkins.getLabel(\"\\\"label1||label2\\\"\");\n        assertEquals(\"label1||label2\", l.getName());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.composite:void()","methodSource":"@Test\n    public void composite() {\n        LabelAtom x \u003d j.jenkins.getLabelAtom(\"x\");\n        assertEquals(\"!!x\", x.not().not().getName());\n        assertEquals(\"(x||x)\u0026\u0026x\", x.or(x).and(x).getName());\n        assertEquals(\"x\u0026\u0026x||x\", x.and(x).or(x).getName());\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.dash:void()","methodSource":"@Test\n    public void dash() {\n        j.jenkins.getLabelAtom(\"solaris-x86\");\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_simple:void()","methodSource":"@Test\n    public void expression_atom_simple() throws Exception {\n        Label label \u003d Label.parseExpression(\"a\");\n        assertThat(label, instanceOf(LabelAtom.class));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_simpleLonger:void()","methodSource":"@Test\n    public void expression_atom_simpleLonger() throws Exception {\n        Label label \u003d Label.parseExpression(\"abc123def\");\n        assertThat(label, instanceOf(LabelAtom.class));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_withDash:void()","methodSource":"@Test\n    public void expression_atom_withDash() throws Exception {\n        Label label \u003d Label.parseExpression(\"a-b\");\n        assertThat(label, instanceOf(LabelAtom.class));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_withDashes:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_withDashes() throws Exception {\n        Label label \u003d Label.parseExpression(\"--a----b-c-\");\n        assertThat(label, instanceOf(LabelAtom.class));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_doubleDash:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_doubleDash() throws Exception {\n        assertEquals(new LabelAtom(\"--\"), Label.parseExpression(\"--\"));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_dashBeforeImplies:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_dashBeforeImplies() throws Exception {\n        assertEquals(new LabelAtom(\"a-\").implies(new LabelAtom(\"b\")), Label.parseExpression(\"a--\u003eb\"));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_dashAfterImplies:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_dashAfterImplies() throws Exception {\n        assertEquals(new LabelAtom(\"a\").implies(new LabelAtom(\"-b\")), Label.parseExpression(\"a-\u003e-b\"));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_justDash:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_justDash() throws Exception {\n        assertEquals(new LabelAtom(\"-\"), Label.parseExpression(\"-\"));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_dashBefore:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_dashBefore() throws Exception {\n        assertEquals(new LabelAtom(\"-1\"), Label.parseExpression(\"-1\"));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_atom_dashAround:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_atom_dashAround() throws Exception {\n        assertEquals(new LabelAtom(\"-abc-\"), Label.parseExpression(\"-abc-\"));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_implies:void()","methodSource":"@Test\n    public void expression_implies() throws Exception {\n        Label label \u003d Label.parseExpression(\"a -\u003e b\");\n        assertThat(label, instanceOf(LabelExpression.Implies.class));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_implies_withoutSpaces:void()","methodSource":"@Test\n    @Issue(\"JENKINS-66613\")\n    public void expression_implies_withoutSpaces() throws Exception {\n        Label label \u003d Label.parseExpression(\"a-\u003eb\");\n        assertThat(label, instanceOf(LabelExpression.Implies.class));\n    }","advisory":"JENKINS-66613"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_and:void()","methodSource":"@Test\n    public void expression_and() throws Exception {\n        Label label \u003d Label.parseExpression(\"a \u0026\u0026 b\");\n        assertThat(label, instanceOf(LabelExpression.And.class));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.expression_and_withoutSpaces:void()","methodSource":"@Test\n    public void expression_and_withoutSpaces() throws Exception {\n        Label label \u003d Label.parseExpression(\"a\u0026\u0026b\");\n        assertThat(label, instanceOf(LabelExpression.And.class));\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.formValidation:void()","methodSource":"@Test\n    public void formValidation() throws Exception {\n        j.executeOnServer(() -\u003e {\n            Label l \u003d j.jenkins.getLabel(\"foo\");\n            DumbSlave s \u003d j.createSlave(l);\n            String msg \u003d LabelExpression.validate(\"goo\").renderHtml();\n            assertTrue(msg.contains(\"foo\"));\n            assertTrue(msg.contains(\"goo\"));\n\n            msg \u003d LabelExpression.validate(\"built-in \u0026\u0026 goo\").renderHtml();\n            assertTrue(msg.contains(\"foo\"));\n            assertTrue(msg.contains(\"goo\"));\n            return null;\n        });\n    }"},{"className":"hudson.model.labels.LabelExpressionTest","methodSignature":"hudson.model.labels.LabelExpressionTest.parseLabel:void()","methodSource":"@Test\n    public void parseLabel() {\n        Set\u003cLabelAtom\u003e result \u003d Label.parse(\"one two three\");\n        String[] expected \u003d {\"one\", \"two\", \"three\"};\n\n        for (String e : expected) {\n            assertTrue(result.contains(new LabelAtom(e)));\n        }\n\n        assertEquals(result.size(), expected.length);\n    }"},{"className":"hudson.model.listeners.ItemListenerTest","methodSignature":"hudson.model.listeners.ItemListenerTest.onCreatedViaCLI:void()","methodSource":"@Test\n    public void onCreatedViaCLI() {\n        CLICommandInvoker.Result result \u003d new CLICommandInvoker(j, \"create-job\").\n                withStdin(new ByteArrayInputStream(\"\u003cproject\u003e\u003cactions/\u003e\u003cbuilders/\u003e\u003cpublishers/\u003e\u003cbuildWrappers/\u003e\u003c/project\u003e\".getBytes(Charset.defaultCharset()))).\n                invokeWithArgs(\"testJob\");\n        assertThat(result, CLICommandInvoker.Matcher.succeeded());\n        assertNotNull(\"job should be created: \" + result, j.jenkins.getItem(\"testJob\"));\n        assertEquals(\"onCreated event should be triggered: \" + result, \"C\", events.toString());\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.nullJobNames:void()","methodSource":"@Issue(\"JENKINS-15309\")\n    @LocalData\n    @Test public void nullJobNames() {\n        assertTrue(j.jenkins.getView(\"v\").getItems().isEmpty());\n    }","advisory":"JENKINS-15309"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.testJobLinksAreValid:void()","methodSource":"@Test\n    public void testJobLinksAreValid() throws Exception {\n      /*\n       * jenkins\n       * + -- folder1\n       *      |-- job1\n       *      +-- folder2\n       *          +-- job2\n       */\n      MockFolder folder1 \u003d j.jenkins.createProject(MockFolder.class, \"folder1\");\n      FreeStyleProject job1 \u003d folder1.createProject(FreeStyleProject.class, \"job1\");\n      MockFolder folder2 \u003d folder1.createProject(MockFolder.class, \"folder2\");\n      FreeStyleProject job2 \u003d folder2.createProject(FreeStyleProject.class, \"job2\");\n\n      ListView lv \u003d new ListView(\"myview\");\n      lv.setRecurse(true);\n      lv.setIncludeRegex(\".*\");\n      j.jenkins.addView(lv);\n      WebClient webClient \u003d j.createWebClient();\n      checkLinkFromViewExistsAndIsValid(folder1, j.jenkins, lv, webClient);\n      checkLinkFromViewExistsAndIsValid(job1, j.jenkins, lv, webClient);\n      checkLinkFromViewExistsAndIsValid(folder2, j.jenkins, lv, webClient);\n      checkLinkFromViewExistsAndIsValid(job2, j.jenkins, lv, webClient);\n      ListView lv2 \u003d new ListView(\"myview\", folder1);\n      lv2.setRecurse(true);\n      lv2.setIncludeRegex(\".*\");\n      folder1.addView(lv2);\n      checkLinkFromItemExistsAndIsValid(job1, folder1, folder1, webClient);\n      checkLinkFromItemExistsAndIsValid(folder2, folder1, folder1, webClient);\n      checkLinkFromViewExistsAndIsValid(job2, folder1, lv2, webClient);\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.nonTopLevelItemGroup:void()","methodSource":"@Issue(\"JENKINS-20415\")\n    @Test public void nonTopLevelItemGroup() throws Exception {\n        MatrixProject mp \u003d j.jenkins.createProject(MatrixProject.class, \"mp\");\n        mp.setAxes(new AxisList(new TextAxis(\"axis\", \"one\", \"two\")));\n        assertEquals(2, mp.getItems().size());\n        ListView v \u003d new ListView(\"v\");\n        j.jenkins.addView(v);\n        v.setIncludeRegex(\".*\");\n        v.setRecurse(true);\n        // Note: did not manage to reproduce CCE until I changed expand to use ‘for (TopLevelItem item : items)’ rather than ‘for (Item item : items)’; perhaps a compiler-specific issue?\n        assertEquals(List.of(mp), v.getItems());\n    }","advisory":"JENKINS-20415"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.renamesMovesAndDeletes:void()","methodSource":"@Issue(\"JENKINS-18680\")\n    @Test public void renamesMovesAndDeletes() throws Exception {\n        MockFolder top \u003d j.createFolder(\"top\");\n        MockFolder sub \u003d top.createProject(MockFolder.class, \"sub\");\n        FreeStyleProject p1 \u003d top.createProject(FreeStyleProject.class, \"p1\");\n        FreeStyleProject p2 \u003d sub.createProject(FreeStyleProject.class, \"p2\");\n        FreeStyleProject p3 \u003d top.createProject(FreeStyleProject.class, \"p3\");\n        ListView v \u003d new ListView(\"v\");\n        v.setRecurse(true);\n        top.addView(v);\n        v.add(p1);\n        v.add(p2);\n        v.add(p3);\n        assertEquals(new HashSet\u003cTopLevelItem\u003e(Arrays.asList(p1, p2, p3)), new HashSet\u003c\u003e(v.getItems()));\n        sub.renameTo(\"lower\");\n        MockFolder stuff \u003d top.createProject(MockFolder.class, \"stuff\");\n        Items.move(p1, stuff);\n        p3.delete();\n        top.createProject(FreeStyleProject.class, \"p3\");\n        assertEquals(new HashSet\u003cTopLevelItem\u003e(Arrays.asList(p1, p2)), new HashSet\u003c\u003e(v.getItems()));\n        top.renameTo(\"upper\");\n        assertEquals(new HashSet\u003cTopLevelItem\u003e(Arrays.asList(p1, p2)), new HashSet\u003c\u003e(v.getItems()));\n    }","advisory":"JENKINS-18680"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.renameJobContainedInTopLevelView:void()","methodSource":"@Issue(\"JENKINS-23893\")\n    @Test public void renameJobContainedInTopLevelView() throws Exception {\n        ListView view \u003d new ListView(\"view\", j.jenkins);\n        j.jenkins.addView(view);\n        FreeStyleProject job \u003d j.createFreeStyleProject(\"old_name\");\n        view.add(job);\n\n        assertTrue(view.contains(job));\n        assertTrue(view.jobNamesContains(job));\n\n        job.renameTo(\"new_name\");\n\n        assertFalse(\"old job name is still contained: \" + view.jobNames, view.jobNames.contains(\"old_name\"));\n        assertTrue(view.contains(job));\n        assertTrue(view.jobNamesContains(job));\n    }","advisory":"JENKINS-23893"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.renameContainedJob:void()","methodSource":"@Test public void renameContainedJob() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"folder\");\n        ListView view \u003d new ListView(\"view\", folder);\n        folder.addView(view);\n\n        FreeStyleProject job \u003d folder.createProject(FreeStyleProject.class, \"old_name\");\n        view.add(job);\n\n        assertTrue(view.contains(job));\n        assertTrue(view.jobNamesContains(job));\n\n        job.renameTo(\"new_name\");\n\n        assertFalse(\"old job name is still contained\", view.jobNames.contains(\"old_name\"));\n        assertTrue(view.contains(job));\n        assertTrue(view.jobNamesContains(job));\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.deleteJobContainedInTopLevelView:void()","methodSource":"@Issue(\"JENKINS-23893\")\n    @Test public void deleteJobContainedInTopLevelView() throws Exception {\n        ListView view \u003d new ListView(\"view\", j.jenkins);\n        j.jenkins.addView(view);\n        FreeStyleProject job \u003d j.createFreeStyleProject(\"project\");\n        view.add(job);\n\n        assertTrue(view.contains(job));\n        assertTrue(view.jobNamesContains(job));\n\n        job.delete();\n\n        assertFalse(view.contains(job));\n        assertFalse(view.jobNamesContains(job));\n    }","advisory":"JENKINS-23893"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.deleteContainedJob:void()","methodSource":"@Test public void deleteContainedJob() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"folder\");\n        ListView view \u003d new ListView(\"view\", folder);\n        folder.addView(view);\n        FreeStyleProject job \u003d folder.createProject(FreeStyleProject.class, \"project\");\n        view.add(job);\n\n        assertTrue(view.contains(job));\n        assertTrue(view.jobNamesContains(job));\n\n        job.delete();\n\n        assertFalse(view.contains(job));\n        assertFalse(view.jobNamesContains(job));\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.renameJobInViewYouCannotSee:void()","methodSource":"@Issue(\"JENKINS-22769\")\n    @Test public void renameJobInViewYouCannotSee() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new AllButViewsAuthorizationStrategy());\n        final FreeStyleProject p \u003d j.createFreeStyleProject(\"p1\");\n        ListView v \u003d new ListView(\"v\", j.jenkins);\n        v.add(p);\n        j.jenkins.addView(v);\n        try (ACLContext acl \u003d ACL.as(User.getOrCreateByIdOrFullName(\"alice\"))) {\n            p.renameTo(\"p2\");\n        }\n        assertEquals(List.of(p), v.getItems());\n    }","advisory":"JENKINS-22769"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.addJobUsingAPI:void()","methodSource":"@Issue(\"JENKINS-41128\")\n    @Test public void addJobUsingAPI() throws Exception {\n        ListView v \u003d new ListView(\"view\", j.jenkins);\n        j.jenkins.addView(v);\n        StaplerRequest req \u003d mock(StaplerRequest.class);\n        StaplerResponse rsp \u003d mock(StaplerResponse.class);\n\n        String configXml \u003d IOUtils.toString(getClass().getResourceAsStream(String.format(\"%s/%s/config.xml\", getClass().getSimpleName(), testName.getMethodName())), StandardCharsets.UTF_8);\n\n        when(req.getMethod()).thenReturn(\"POST\");\n        when(req.getParameter(\"name\")).thenReturn(\"job1\");\n        when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(configXml, StandardCharsets.UTF_8)));\n        when(req.getContentType()).thenReturn(\"application/xml\");\n        v.doCreateItem(req, rsp);\n        List\u003cTopLevelItem\u003e items \u003d v.getItems();\n        assertEquals(1, items.size());\n        assertEquals(\"job1\", items.get(0).getName());\n    }","advisory":"JENKINS-41128"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.doRemoveJobFromViewNullItem:void()","methodSource":"@Issue(\"JENKINS-23411\")\n    @Test public void doRemoveJobFromViewNullItem() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"folder\");\n        ListView view \u003d new ListView(\"view\", folder);\n        folder.addView(view);\n        FreeStyleProject job \u003d folder.createProject(FreeStyleProject.class, \"job1\");\n        view.add(job);\n\n        List\u003cTopLevelItem\u003e items \u003d view.getItems();\n        assertEquals(1, items.size());\n        assertEquals(\"job1\", items.get(0).getName());\n\n        // remove a contained job\n        view.doRemoveJobFromView(\"job1\");\n        List\u003cTopLevelItem\u003e itemsNow \u003d view.getItems();\n        assertEquals(0, itemsNow.size());\n\n        // remove a not contained job\n        Failure e \u003d assertThrows(Failure.class, () -\u003e view.doRemoveJobFromView(\"job2\"));\n        assertEquals(\"Query parameter \u0027name\u0027 does not correspond to a known and readable item\", e.getMessage());\n    }","advisory":"JENKINS-23411"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.doApplyDoNotOverloadElements:void()","methodSource":"@Issue(\"JENKINS-71200\")\n    @Test public void doApplyDoNotOverloadElements() throws Exception {\n        MockFolder folder \u003d j.createFolder(\"folder\");\n        FreeStyleProject job \u003d folder.createProject(FreeStyleProject.class, \"elements\");\n        ListView view \u003d new ListView(\"view\", folder);\n        folder.addView(view);\n        view.add(job);\n\n        final AtomicBoolean alerts \u003d new AtomicBoolean();\n        WebClient webClient \u003d j.createWebClient();\n        webClient.setAlertHandler((AlertHandler) (page, s) -\u003e alerts.set(true));\n        HtmlPage page \u003d webClient.goTo(view.getUrl() + \"configure\");\n        HtmlForm form \u003d page.getFormByName(\"viewConfig\");\n        j.assertGoodStatus(j.submit(form));\n        Assert.assertFalse(\"No alert expected\", alerts.get());\n    }","advisory":"JENKINS-71200"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.getItemsNames:void()","methodSource":"@Test public void getItemsNames() throws Exception {\n        MockFolder f1 \u003d j.createFolder(\"f1\");\n        MockFolder f2 \u003d j.createFolder(\"f2\");\n        FreeStyleProject p1 \u003d j.createFreeStyleProject(\"p1\");\n        FreeStyleProject p2 \u003d j.createFreeStyleProject(\"p2\");\n        FreeStyleProject p3 \u003d f1.createProject(FreeStyleProject.class, \"p3\");\n        FreeStyleProject p4 \u003d f2.createProject(FreeStyleProject.class, \"p4\");\n        ListView lv \u003d new ListView(\"view\", Jenkins.get());\n        lv.setRecurse(false);\n        Set\u003cString\u003e names \u003d new TreeSet\u003c\u003e();\n        names.add(\"p1\");\n        names.add(\"p2\");\n        names.add(\"f1/p3\");\n        names.add(\"f2/p4\");\n        lv.setJobNames(names);\n        assertThat(lv.getItems(), containsInAnyOrder(p1, p2));\n        lv.setRecurse(true);\n        assertThat(lv.getItems(), containsInAnyOrder(p1, p2, p3, p4));\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.getItemsRegex:void()","methodSource":"@Test public void getItemsRegex() throws Exception {\n        MockFolder f1 \u003d j.createFolder(\"f1\");\n        MockFolder f2 \u003d j.createFolder(\"f2\");\n        FreeStyleProject p1 \u003d j.createFreeStyleProject(\"p1\");\n        FreeStyleProject p2 \u003d j.createFreeStyleProject(\"p2\");\n        FreeStyleProject p3 \u003d f1.createProject(FreeStyleProject.class, \"p3\");\n        FreeStyleProject p4 \u003d f2.createProject(FreeStyleProject.class, \"p4\");\n        ListView lv \u003d new ListView(\"view\", Jenkins.get());\n        lv.setRecurse(false);\n        lv.setIncludeRegex(\"p.*\");\n        assertThat(lv.getItems(), containsInAnyOrder(p1, p2));\n        lv.setRecurse(true);\n        assertThat(lv.getItems(), containsInAnyOrder(p1, p2));\n        lv.setIncludeRegex(\"f.*\");\n        assertThat(lv.getItems(), containsInAnyOrder(p3, p4, f1, f2));\n        lv.setRecurse(false);\n        assertThat(lv.getItems(), containsInAnyOrder(f1, f2));\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.withJobViewFilter:void()","methodSource":"@Test public void withJobViewFilter() throws Exception {\n        MockFolder f1 \u003d j.createFolder(\"f1\");\n        MockFolder f2 \u003d j.createFolder(\"f2\");\n        FreeStyleProject p1 \u003d j.createFreeStyleProject(\"p1\");\n        FreeStyleProject p2 \u003d j.createFreeStyleProject(\"p2\");\n        FreeStyleProject p3 \u003d f1.createProject(FreeStyleProject.class, \"p3\");\n        FreeStyleProject p4 \u003d f2.createProject(FreeStyleProject.class, \"p4\");\n        ListView lv \u003d new ListView(\"view\", Jenkins.get());\n        lv.setJobFilters(List.of(new AllFilter()));\n        lv.setRecurse(false);\n        assertThat(lv.getItems(), containsInAnyOrder(f1, f2, p1, p2));\n        lv.setRecurse(true);\n        assertThat(lv.getItems(), containsInAnyOrder(f1, f2, p1, p2, p3, p4));\n    }"},{"className":"hudson.model.ListViewTest","methodSignature":"hudson.model.ListViewTest.migrateStatusFilter:void()","methodSource":"@Issue(\"JENKINS-62661\")\n    @Test @LocalData public void migrateStatusFilter() {\n        View v \u003d j.jenkins.getView(\"testview\");\n        assertThat(v, notNullValue());\n        assertThat(v, instanceOf(ListView.class));\n        ListView lv \u003d (ListView) v;\n        StatusFilter sf \u003d lv.getJobFilters().get(StatusFilter.class);\n        assertThat(sf.getStatusFilter(), is(true));\n    }","advisory":"JENKINS-62661"},{"className":"hudson.model.ManagementLinkTest","methodSignature":"hudson.model.ManagementLinkTest.links:void()","methodSource":"@Test\n    @WithTimeout(300)\n    public void links() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n\n        for (int i \u003d 0; ; i++) {\n            HtmlPage page \u003d wc.goTo(\"manage\");\n            List\u003c?\u003e anchors \u003d DomNodeUtil.selectNodes(page, \"//div[contains(@class,\u0027jenkins-section__item\u0027)]/a[not(contains(@class,\u0027confirmation-link\u0027))]\");\n            assertTrue(anchors.size() \u003e\u003d 8);\n            if (i \u003d\u003d anchors.size())  return; // done\n\n            ((HtmlAnchor) anchors.get(i)).click();\n        }\n    }"},{"className":"hudson.model.ManagementLinkTest","methodSignature":"hudson.model.ManagementLinkTest.invisibleLinks:void()","methodSource":"@Test @Issue(\"JENKINS-33683\")\n    public void invisibleLinks() {\n        assertNull(j.jenkins.getDynamic(\"and_fail_trying\"));\n    }","advisory":"JENKINS-33683"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testReadResolve:void()","methodSource":"@Test\n    public void testReadResolve() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.setUser(user);\n        user.addProperty(property);\n        property.readResolve();\n        assertNotNull(\"Property should contain \" + AllView.DEFAULT_VIEW_NAME + \" by default.\", property.getView(AllView.DEFAULT_VIEW_NAME));\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testGetViews:void()","methodSource":"@Test\n    public void testGetViews() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        assertTrue(\"Property should contain \" + AllView.DEFAULT_VIEW_NAME, property.getViews().contains(property.getView(AllView.DEFAULT_VIEW_NAME)));\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        assertTrue(\"Property should contain \" + view.name, property.getViews().contains(view));\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testGetView:void()","methodSource":"@Test\n    public void testGetView() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        assertNotNull(\"Property should contain \" + AllView.DEFAULT_VIEW_NAME, property.getView(\n                AllView.DEFAULT_VIEW_NAME));\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        assertEquals(\"Property should contain \" + view.name, view, property.getView(view.name));\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testGetPrimaryView:void()","methodSource":"@Test\n    public void testGetPrimaryView() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        assertEquals(\"Property should have primary view \" + AllView.DEFAULT_VIEW_NAME + \" instead of \" + property.getPrimaryView(). name, property.getView(AllView.DEFAULT_VIEW_NAME), property.getPrimaryView());\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        property.setPrimaryViewName(view.name);\n        assertEquals(\"Property should have primary view \" + view.name + \" instead of \" + property.getPrimaryView().name, view, property.getPrimaryView());\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testCanDelete:void()","methodSource":"@Test\n    public void testCanDelete() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        assertFalse(\"Property should not enable to delete view \" + AllView.DEFAULT_VIEW_NAME, property.canDelete(property.getView(AllView.DEFAULT_VIEW_NAME)));\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        assertTrue(\"Property should enable to delete view \" + view.name, property.canDelete(view));\n        property.setPrimaryViewName(view.name);\n        assertFalse(\"Property should not enable to delete view \" + view.name, property.canDelete(view));\n        assertTrue(\"Property should enable to delete view \" + AllView.DEFAULT_VIEW_NAME, property.canDelete(property.getView(AllView.DEFAULT_VIEW_NAME)));\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testDeleteView:void()","methodSource":"@Test\n    public void testDeleteView() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        boolean ex \u003d false;\n        try {\n            property.deleteView(property.getView(AllView.DEFAULT_VIEW_NAME));\n        }\n        catch (IllegalStateException e) {\n            ex \u003d true;\n        }\n        assertTrue(\"Property should throw IllegalStateException.\", ex);\n        assertTrue(\"Property should contain view \" + AllView.DEFAULT_VIEW_NAME, property.getViews().contains(property.getView(AllView.DEFAULT_VIEW_NAME)));\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        ex \u003d false;\n        try {\n            property.deleteView(view);\n        }\n        catch (IllegalStateException e) {\n            ex \u003d true;\n        }\n        assertFalse(\"Property should not contain view \" + view.name, property.getViews().contains(view));\n        property.addView(view);\n        property.setPrimaryViewName(view.name);\n        assertTrue(\"Property should not contain view \" + view.name, property.getViews().contains(view));\n        property.deleteView(property.getView(AllView.DEFAULT_VIEW_NAME));\n        assertFalse(\"Property should not contains view \" + AllView.DEFAULT_VIEW_NAME, property.getViews().contains(property.getView(AllView.DEFAULT_VIEW_NAME)));\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testOnViewRenamed:void()","methodSource":"@Test\n    public void testOnViewRenamed() throws IOException, FormException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        property.setPrimaryViewName(view.name);\n        view.rename(\"primary-renamed\");\n        assertEquals(\"Property should rename its primary view \", \"primary-renamed\", property.getPrimaryViewName());\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testAddView:void()","methodSource":"@Test\n    public void testAddView() throws Exception {\n        {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        View view \u003d new ListView(\"foo\", property);\n        property.addView(view);\n        assertTrue(\"Property should contain view \" + view.name, property.getViews().contains(view));\n        }\n        rule.jenkins.reload();\n        {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d user.getProperty(MyViewsProperty.class);\n        assertTrue(\"Property should save changes.\", property.getViews().contains(property.getView(\"foo\")));\n        }\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testDoCreateView:void()","methodSource":"@Test\n    public void testDoCreateView() throws Exception {\n        {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        HtmlForm form \u003d rule.createWebClient().goTo(property.getUrl() + \"/newView\").getFormByName(\"createItem\");\n        form.getInputByName(\"name\").setValue(\"foo\");\n        form.getRadioButtonsByName(\"mode\").get(0).setChecked(true);\n        rule.submit(form);\n        assertNotNull(\"Property should contain view foo\", property.getView(\"foo\"));\n        }\n        rule.jenkins.reload();\n        {\n        MyViewsProperty property \u003d User.getOrCreateByIdOrFullName(\"User\").getProperty(MyViewsProperty.class);\n        assertNotNull(\"Property should save changes\", property.getView(\"foo\"));\n        }\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testGetACL:void()","methodSource":"@Test\n    public void testGetACL() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        user.addProperty(property);\n        for (Permission p : Permission.getAll()) {\n            assertEquals(\"Property should have the same ACL as its user\", property.hasPermission(p), user.hasPermission(p));\n        }\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testCheckPermission:void()","methodSource":"@Test\n    public void testCheckPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        User user2 \u003d User.getOrCreateByIdOrFullName(\"User2\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        user.addProperty(property);\n        boolean ex \u003d false;\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        try {\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch (AccessDeniedException e) {\n            ex \u003d true;\n        }\n        assertTrue(\"Property should throw AccessDeniedException.\", ex);\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        try {\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch (AccessDeniedException e) {\n            fail(\"Property should not throw AccessDeniedException - user should control of himself.\");\n        }\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        try {\n            property.checkPermission(Permission.CONFIGURE);\n        }\n        catch (AccessDeniedException e) {\n            fail(\"Property should not throw AccessDeniedException.\");\n        }\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.testHasPermission:void()","methodSource":"@Test\n    public void testHasPermission() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n        User user2 \u003d User.getOrCreateByIdOrFullName(\"User2\");\n        MyViewsProperty property \u003d new MyViewsProperty(AllView.DEFAULT_VIEW_NAME);\n        property.readResolve();\n        property.setUser(user);\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        user.addProperty(property);\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        assertFalse(\"User User2 should not configure permission for user User\", property.hasPermission(Permission.CONFIGURE));\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertTrue(\"User should control of himself.\", property.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, \"User2\");\n        assertTrue(\"User User2 should configure permission for user User\", property.hasPermission(Permission.CONFIGURE));\n    }"},{"className":"hudson.model.MyViewsPropertyTest","methodSignature":"hudson.model.MyViewsPropertyTest.shouldNotFailWhenMigratingLegacyViewsWithoutPrimaryOne:void()","methodSource":"@Test\n    @Issue(\"JENKINS-48157\")\n    public void shouldNotFailWhenMigratingLegacyViewsWithoutPrimaryOne() throws IOException {\n        rule.jenkins.setSecurityRealm(rule.createDummySecurityRealm());\n        User user \u003d User.getOrCreateByIdOrFullName(\"User\");\n\n        // Emulates creation of a new object with Reflection in User#load() does.\n        MyViewsProperty property \u003d new MyViewsProperty(null);\n        user.addProperty(property);\n\n        // At AllView with non-default to invoke NPE path in AllView.migrateLegacyPrimaryAllViewLocalizedName()\n        property.addView(new AllView(\"foobar\"));\n        property.readResolve();\n    }","advisory":"JENKINS-48157"},{"className":"hudson.model.MyViewTest","methodSignature":"hudson.model.MyViewTest.testContains:void()","methodSource":"@Test\n    public void testContains() throws Exception {\n\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        User user \u003d User.getOrCreateByIdOrFullName(\"User1\");\n        FreeStyleProject job \u003d rule.createFreeStyleProject(\"job\");\n        MyView view \u003d new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contain job \" + job.getDisplayName(), view.contains(job));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" contain job \" + job.getDisplayName(), view.contains(job));\n    }"},{"className":"hudson.model.MyViewTest","methodSignature":"hudson.model.MyViewTest.testDoCreateItem:void()","methodSource":"@Test\n    public void testDoCreateItem() throws Exception {\n        logs.record(AbstractItem.class, Level.ALL);\n        MyView view \u003d new MyView(\"My\", rule.jenkins);\n        rule.jenkins.addView(view);\n        HtmlPage newItemPage \u003d rule.createWebClient().goTo(\"view/\" + view.getDisplayName() + \"/newJob\");\n        HtmlForm form \u003d newItemPage.getFormByName(\"createItem\");\n        // Set the name of the item\n        form.getInputByName(\"name\").setValue(\"job\");\n        form.getInputByName(\"name\").blur();\n        // Select the item clicking on the first item type shown\n        HtmlElement itemType \u003d newItemPage.getFirstByXPath(\"//div[@class\u003d\u0027category\u0027]/ul/li\");\n        itemType.click();\n        rule.submit(form);\n        Item item \u003d rule.jenkins.getItem(\"job\");\n        assumeThat(\"TODO sometimes on Windows CI the submission does not seem to be really processed (most log messages are missing)\", item, notNullValue());\n        assertThat(view.getItems(), contains(equalTo(item)));\n    }"},{"className":"hudson.model.MyViewTest","methodSignature":"hudson.model.MyViewTest.testGetItems:void()","methodSource":"@Test\n    public void testGetItems() throws IOException {\n        User user \u003d User.getOrCreateByIdOrFullName(\"User1\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        rule.jenkins.setAuthorizationStrategy(auth);\n        FreeStyleProject job2 \u003d rule.createFreeStyleProject(\"job2\");\n        FreeStyleProject job \u003d rule.createFreeStyleProject(\"job\");\n        MyView view \u003d new MyView(\"My\", rule.jenkins);\n        auth.add(Item.READ, \"User1\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertFalse(\"View \" + view.getDisplayName() + \" should not contains job \" + job2.getDisplayName(), view.getItems().contains(job2));\n        auth.add(Item.CONFIGURE, \"User1\");\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job.getDisplayName(), view.getItems().contains(job));\n        assertTrue(\"View \" + view.getDisplayName() + \" should contain job \" + job2.getDisplayName(), view.getItems().contains(job2));\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testSetTemporaryOfflineCause:void()","methodSource":"@Test\n    public void testSetTemporaryOfflineCause() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setAssignedLabel(j.jenkins.getLabel(node.getDisplayName()));\n        OfflineCause cause \u003d new OfflineCause.ByCLI(\"message\");\n        node.setTemporaryOfflineCause(cause);\n        for (ComputerListener l : ComputerListener.all()) {\n            l.onOnline(node.toComputer(), TaskListener.NULL);\n        }\n        assertEquals(\"Node should have offline cause which was set.\", cause, node.toComputer().getOfflineCause());\n        OfflineCause cause2 \u003d new OfflineCause.ByCLI(\"another message\");\n        node.setTemporaryOfflineCause(cause2);\n        assertEquals(\"Node should have original offline cause after setting another.\", cause, node.toComputer().getOfflineCause());\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testOfflineCause:void()","methodSource":"@Test\n    public void testOfflineCause() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        Computer computer \u003d node.toComputer();\n        OfflineCause.UserCause cause;\n\n        final User someone \u003d User.getOrCreateByIdOrFullName(\"someone@somewhere.com\");\n        try (ACLContext ignored \u003d ACL.as2(someone.impersonate2())) {\n            computer.doToggleOffline(\"original message\");\n            cause \u003d (OfflineCause.UserCause) computer.getOfflineCause();\n            assertTrue(cause.toString(), cause.toString().matches(\"^.*?Disconnected by someone@somewhere.com : original message\"));\n            assertEquals(someone, cause.getUser());\n        }\n        final User root \u003d User.getOrCreateByIdOrFullName(\"root@localhost\");\n        try (ACLContext ignored \u003d ACL.as2(root.impersonate2())) {\n            computer.doChangeOfflineCause(\"new message\");\n            cause \u003d (OfflineCause.UserCause) computer.getOfflineCause();\n            assertTrue(cause.toString(), cause.toString().matches(\"^.*?Disconnected by root@localhost : new message\"));\n            assertEquals(root, cause.getUser());\n\n            computer.doToggleOffline(null);\n            assertNull(computer.getOfflineCause());\n        }\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testOfflineCauseAsAnonymous:void()","methodSource":"@Test\n    public void testOfflineCauseAsAnonymous() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        final Computer computer \u003d node.toComputer();\n        OfflineCause.UserCause cause;\n        try (ACLContext ctxt \u003d ACL.as2(Jenkins.ANONYMOUS2)) {\n            computer.doToggleOffline(\"original message\");\n        }\n\n        cause \u003d (OfflineCause.UserCause) computer.getOfflineCause();\n        assertThat(cause.toString(), endsWith(\"Disconnected by anonymous : original message\"));\n        assertEquals(User.getUnknown(), cause.getUser());\n\n\n        final User root \u003d User.get(\"root@localhost\");\n        try (ACLContext ctxt \u003d ACL.as2(root.impersonate2())) {\n            computer.doChangeOfflineCause(\"new message\");\n        }\n        cause \u003d (OfflineCause.UserCause) computer.getOfflineCause();\n        assertThat(cause.toString(), endsWith(\"Disconnected by root@localhost : new message\"));\n        assertEquals(root, cause.getUser());\n\n        computer.doToggleOffline(null);\n        assertNull(computer.getOfflineCause());\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetLabelCloud:void()","methodSource":"@Test\n    public void testGetLabelCloud() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        node.setLabelString(\"label1 label2\");\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        final Label label \u003d j.jenkins.getLabel(\"label1\");\n        project.setAssignedLabel(label);\n        label.reset(); // Make sure cached value is not used\n        TagCloud\u003cLabelAtom\u003e cloud \u003d node.getLabelCloud();\n        for (TagCloud.Entry e : cloud) {\n            if (e.item.equals(label)) {\n                assertEquals(\"Label label1 should have one tied project.\", 1, e.weight, 0);\n            } else {\n                assertEquals(\"Label \" + e.item + \" should not have any tied project.\", 0, e.weight, 0);\n            }\n        }\n\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetAssignedLabels:void()","methodSource":"@Test\n    public void testGetAssignedLabels() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        node.setLabelString(\"label1 label2\");\n        LabelAtom notContained \u003d j.jenkins.getLabelAtom(\"notContained\");\n        addDynamicLabel \u003d true;\n        assertTrue(\"Node should have label1.\", node.getAssignedLabels().contains(j.jenkins.getLabelAtom(\"label1\")));\n        assertTrue(\"Node should have label2.\", node.getAssignedLabels().contains(j.jenkins.getLabelAtom(\"label2\")));\n        assertTrue(\"Node should have dynamically added dynamicLabel.\", node.getAssignedLabels().contains(j.jenkins.getLabelAtom(\"dynamicLabel\")));\n        assertFalse(\"Node should not have label notContained.\", node.getAssignedLabels().contains(notContained));\n        assertTrue(\"Node should have self label.\", node.getAssignedLabels().contains(node.getSelfLabel()));\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testCanTake:void()","methodSource":"@Test\n    public void testCanTake() throws Exception {\n        Slave node \u003d j.createOnlineSlave();\n        node.setLabelString(\"label1 label2\");\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setAssignedLabel(j.jenkins.getLabel(\"label1\"));\n        FreeStyleProject project2 \u003d j.createFreeStyleProject();\n        FreeStyleProject project3 \u003d j.createFreeStyleProject();\n        project3.setAssignedLabel(j.jenkins.getLabel(\"notContained\"));\n        Queue.BuildableItem item \u003d new Queue.BuildableItem(new WaitingItem(new GregorianCalendar(), project, new ArrayList\u003c\u003e()));\n        Queue.BuildableItem item2 \u003d new Queue.BuildableItem(new WaitingItem(new GregorianCalendar(), project2, new ArrayList\u003c\u003e()));\n        Queue.BuildableItem item3 \u003d new Queue.BuildableItem(new WaitingItem(new GregorianCalendar(), project3, new ArrayList\u003c\u003e()));\n        assertNull(\"Node should take project which is assigned to its label.\", node.canTake(item));\n        assertNull(\"Node should take project which is assigned to its label.\", node.canTake(item2));\n        assertNotNull(\"Node should not take project which is not assigned to its label.\", node.canTake(item3));\n        String message \u003d Messages._Node_LabelMissing(node.getNodeName(), j.jenkins.getLabel(\"notContained\")).toString();\n        assertEquals(\"Cause of blockage should be missing label.\", message, node.canTake(item3).getShortDescription());\n        node.setMode(Node.Mode.EXCLUSIVE);\n        assertNotNull(\"Node should not take project which has null label because it is in exclusive mode.\", node.canTake(item2));\n        message \u003d Messages._Node_BecauseNodeIsReserved(node.getNodeName()).toString();\n        assertEquals(\"Cause of blockage should be reserved label.\", message, node.canTake(item2).getShortDescription());\n        node.getNodeProperties().add(new NodePropertyImpl());\n        notTake \u003d true;\n        assertNotNull(\"Node should not take project because node property does not allow it.\", node.canTake(item));\n        assertThat(\"Cause of blockage should be busy label.\", node.canTake(item), instanceOf(CauseOfBlockage.BecauseLabelIsBusy.class));\n        User user \u003d User.get(\"John\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        realm.createAccount(\"John\", \"\");\n        notTake \u003d false;\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator().authenticate(project.getFullName(), user.impersonate2()));\n        assertNotNull(\"Node should not take project because user does not have build permission.\", node.canTake(item));\n        message \u003d Messages._Node_LackingBuildPermission(item.authenticate2().getName(), node.getNodeName()).toString();\n        assertEquals(\"Cause of blockage should be build permission label.\", message, node.canTake(item).getShortDescription());\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testCreatePath:void()","methodSource":"@Test\n    public void testCreatePath() throws Exception {\n        Slave node \u003d j.createOnlineSlave();\n        Node node2 \u003d j.createSlave();\n        String absolutePath \u003d node.remoteFS;\n        FilePath path \u003d node.createPath(absolutePath);\n        assertNotNull(\"Path should be created.\", path);\n        assertNotNull(\"Channel should be set.\", path.getChannel());\n        assertEquals(\"Channel should be equals to channel of node.\", node.getChannel(), path.getChannel());\n        path \u003d node2.createPath(absolutePath);\n        assertNull(\"Path should be null if agent have channel null.\", path);\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testHasPermission:void()","methodSource":"@Test\n    public void testHasPermission() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"abcdef\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"Current user should not have permission read.\", node.hasPermission(Permission.READ));\n        auth.add(Computer.CONFIGURE, user.getId());\n        assertTrue(\"Current user should have permission CONFIGURE.\", user.hasPermission(Permission.CONFIGURE));\n        auth.add(Jenkins.ADMINISTER, user.getId());\n        assertTrue(\"Current user should have permission read, because he has permission administer.\", user.hasPermission(Permission.READ));\n        SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS2);\n\n        user \u003d User.getOrCreateByIdOrFullName(\"anonymous\");\n        assertFalse(\"Current user should not have permission read, because does not have global permission read and authentication is anonymous.\", user.hasPermission(Permission.READ));\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetChannel:void()","methodSource":"@Test\n    public void testGetChannel() throws Exception {\n        Slave agent \u003d j.createOnlineSlave();\n        Node nodeOffline \u003d j.createSlave();\n        Node node \u003d new DumbSlave(\"agent2\", \"description\", agent.getRemoteFS(), \"1\", Mode.NORMAL, \"\", agent.getLauncher(), agent.getRetentionStrategy(), agent.getNodeProperties());\n        assertNull(\"Channel of node should be null because node has not assigned computer.\", node.getChannel());\n        assertNull(\"Channel of node should be null because assigned computer is offline.\", nodeOffline.getChannel());\n        assertNotNull(\"Channel of node should not be null.\", agent.getChannel());\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testToComputer:void()","methodSource":"@Test\n    public void testToComputer() throws Exception {\n        Slave agent \u003d j.createOnlineSlave();\n        Node node \u003d new DumbSlave(\"agent2\", \"description\", agent.getRemoteFS(), \"1\", Mode.NORMAL, \"\", agent.getLauncher(), agent.getRetentionStrategy(), agent.getNodeProperties());\n        assertNull(\"Agent which is not added into Jenkins list nodes should not have assigned computer.\", node.toComputer());\n        assertNotNull(\"Agent which is added into Jenkins list nodes should have assigned computer.\", agent.toComputer());\n    }"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.envPropertiesImmutable:void()","methodSource":"@Issue(\"JENKINS-27188\")\n    @Test public void envPropertiesImmutable() throws Exception {\n        Slave agent \u003d j.createSlave();\n\n        String propertyKey \u003d \"JENKINS-27188\";\n        EnvVars envVars \u003d agent.getComputer().getEnvironment();\n        envVars.put(propertyKey, \"huuhaa\");\n        assertTrue(envVars.containsKey(propertyKey));\n        assertFalse(agent.getComputer().getEnvironment().containsKey(propertyKey));\n\n        assertNotSame(agent.getComputer().getEnvironment(), agent.getComputer().getEnvironment());\n    }","advisory":"JENKINS-27188"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetAssignedLabelWithLabelOrExpression:void()","methodSource":"@Issue(\"JENKINS-26391\")\n    @Test\n    public void testGetAssignedLabelWithLabelOrExpression() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        node.setLabelString(\"label1 label2\");\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setAssignedLabel(new LabelExpression.Or(j.jenkins.getLabel(\"label1\"), j.jenkins.getLabel(\"label2\")));\n\n        TagCloud\u003cLabelAtom\u003e cloud \u003d node.getLabelCloud();\n        assertThatCloudLabelContains(cloud, \"label1\", 0);\n        assertThatCloudLabelContains(cloud, \"label2\", 0);\n    }","advisory":"JENKINS-26391"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetAssignedLabelWithLabelAndExpression:void()","methodSource":"@Issue(\"JENKINS-26391\")\n    @Test\n    public void testGetAssignedLabelWithLabelAndExpression() throws Exception {\n        Node node \u003d j.createOnlineSlave();\n        node.setLabelString(\"label1 label2\");\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setAssignedLabel(new LabelExpression.And(j.jenkins.getLabel(\"label1\"), j.jenkins.getLabel(\"label2\")));\n\n        TagCloud\u003cLabelAtom\u003e cloud \u003d node.getLabelCloud();\n        assertThatCloudLabelContains(cloud, \"label1\", 0);\n        assertThatCloudLabelContains(cloud, \"label2\", 0);\n    }","advisory":"JENKINS-26391"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetAssignedLabelWithBothAndOrExpression:void()","methodSource":"@Issue(\"JENKINS-26391\")\n    @Test\n    public void testGetAssignedLabelWithBothAndOrExpression() throws Exception {\n        Node n1 \u003d j.createOnlineSlave();\n        Node n2 \u003d j.createOnlineSlave();\n        Node n3 \u003d j.createOnlineSlave();\n        Node n4 \u003d j.createOnlineSlave();\n\n        n1.setLabelString(\"label1 label2 label3\");\n        n2.setLabelString(\"label1\");\n        n3.setLabelString(\"label1 label2\");\n        n4.setLabelString(\"label1 label\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedLabel(Label.parseExpression(\"label1 \u0026\u0026 (label2 || label3)\"));\n\n        // Node 1 should not be tied to any labels\n        TagCloud\u003cLabelAtom\u003e n1LabelCloud \u003d n1.getLabelCloud();\n        assertThatCloudLabelContains(n1LabelCloud, \"label1\", 0);\n        assertThatCloudLabelContains(n1LabelCloud, \"label2\", 0);\n        assertThatCloudLabelContains(n1LabelCloud, \"label3\", 0);\n\n        // Node 2 should not be tied to any labels\n        TagCloud\u003cLabelAtom\u003e n2LabelCloud \u003d n1.getLabelCloud();\n        assertThatCloudLabelContains(n2LabelCloud, \"label1\", 0);\n\n        // Node 3 should not be tied to any labels\n        TagCloud\u003cLabelAtom\u003e n3LabelCloud \u003d n1.getLabelCloud();\n        assertThatCloudLabelContains(n3LabelCloud, \"label1\", 0);\n        assertThatCloudLabelContains(n3LabelCloud, \"label2\", 0);\n\n        // Node 4 should not be tied to any labels\n        TagCloud\u003cLabelAtom\u003e n4LabelCloud \u003d n1.getLabelCloud();\n        assertThatCloudLabelContains(n4LabelCloud, \"label1\", 0);\n    }","advisory":"JENKINS-26391"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.testGetAssignedLabelWithSpaceOnly:void()","methodSource":"@Issue(\"JENKINS-26391\")\n    @Test\n    public void testGetAssignedLabelWithSpaceOnly() throws Exception {\n        Node n \u003d j.createOnlineSlave();\n        n.setLabelString(\"label1 label2\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedLabel(j.jenkins.getLabel(\"label1 label2\"));\n\n        TagCloud\u003cLabelAtom\u003e cloud \u003d n.getLabelCloud();\n        assertThatCloudLabelDoesNotContain(cloud, \"label1 label2\", 0);\n    }","advisory":"JENKINS-26391"},{"className":"hudson.model.NodeTest","methodSignature":"hudson.model.NodeTest.builtInComputerConfigDotXml:void()","methodSource":"@Issue(\"SECURITY-281\")\n    @Test\n    public void builtInComputerConfigDotXml() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.assertFails(\"computer/(built-in)/config.xml\", HttpURLConnection.HTTP_BAD_REQUEST);\n        WebRequest settings \u003d new WebRequest(wc.createCrumbedUrl(\"computer/(built-in)/config.xml\"));\n        settings.setHttpMethod(HttpMethod.POST);\n        settings.setRequestBody(\"\u003chudson/\u003e\");\n\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        Page page \u003d wc.getPage(settings);\n        assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, page.getWebResponse().getStatusCode());\n    }","advisory":"SECURITY-281"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.undefinedParameters:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void undefinedParameters() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\")\n        )));\n        ParametersCheckBuilder b \u003d new ParametersCheckBuilder(false);\n        p.getBuildersList().add(b);\n        p.save();\n\n        j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new StringParameterValue(\"foo\", \"baz\"),\n                new StringParameterValue(\"undef\", \"undef\")\n        )));\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.undefinedParametersOverride:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void undefinedParametersOverride() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\")\n        )));\n        ParametersCheckBuilder b \u003d new ParametersCheckBuilder(true);\n        p.getBuildersList().add(b);\n        p.save();\n        try {\n            System.setProperty(ParametersAction.KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME, \"true\");\n\n            j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                    new StringParameterValue(\"foo\", \"baz\"),\n                    new StringParameterValue(\"undef\", \"undef\")\n            )));\n        } finally {\n            System.clearProperty(ParametersAction.KEEP_UNDEFINED_PARAMETERS_SYSTEM_PROPERTY_NAME);\n        }\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.backwardCompatibility:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    @LocalData\n    public void backwardCompatibility() throws Exception {\n        // Local data contains a parameterized job with two parameters (FOO and BAR) and one build\n        // with pre-fix format (generated with 1.609.3) with FOO, BAR and UNDEF.\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(Functions.isWindows() ? \"parameterized-windows\" : \"parameterized\", FreeStyleProject.class);\n\n        FreeStyleBuild b1 \u003d p.getBuildByNumber(1);\n        ParametersAction pa \u003d b1.getAction(ParametersAction.class);\n        hasParameterWithName(pa, \"FOO\");\n        hasParameterWithName(pa, \"BAR\");\n        // legacy behaviour expected (UNDEF returned by getParameters())\n        hasParameterWithName(pa, \"UNDEF\");\n\n        // A new build should work as expected (undef is not published to env)\n        ParametersCheckBuilder b \u003d new ParametersCheckBuilder(false);\n        p.getBuildersList().add(b);\n        p.save();\n\n        j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new StringParameterValue(\"foo\", \"baz\"),\n                new StringParameterValue(\"undef\", \"undef\")\n        )));\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.parametersDefinitionChange:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void parametersDefinitionChange() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\"))));\n\n        FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new StringParameterValue(\"foo\", \"baz\"),\n                new StringParameterValue(\"bar\", \"bar\"),\n                new StringParameterValue(\"undef\", \"undef\")\n        )));\n\n        assertFalse(\"undef parameter is not listed in getParameters\",\n                hasParameterWithName(build.getAction(ParametersAction.class), \"undef\"));\n\n        p.removeProperty(ParametersDefinitionProperty.class);\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\"),\n                new StringParameterDefinition(\"undef\", \"undef\"))));\n\n        // undef is still not listed even after being added to the job parameters definition\n        assertFalse(\"undef parameter is not listed in getParameters\",\n                hasParameterWithName(build.getAction(ParametersAction.class), \"undef\"));\n\n        // remove bar and undef from parameters definition\n        p.removeProperty(ParametersDefinitionProperty.class);\n        p.addProperty(new ParametersDefinitionProperty(List.of(\n                new StringParameterDefinition(\"foo\", \"foo\"))));\n\n        assertEquals(\"the build still have 2 parameters\", 2, build.getAction(ParametersAction.class).getParameters().size());\n\n        p.removeProperty(ParametersDefinitionProperty.class);\n        assertEquals(\"the build still have 2 parameters\", 2, build.getAction(ParametersAction.class).getParameters().size());\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.whitelistedParameter:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void whitelistedParameter() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\"))));\n\n        try {\n            System.setProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME, \"whitelisted1,whitelisted2\");\n            FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                    new StringParameterValue(\"foo\", \"baz\"),\n                    new StringParameterValue(\"bar\", \"bar\"),\n                    new StringParameterValue(\"whitelisted1\", \"x\"),\n                    new StringParameterValue(\"whitelisted2\", \"y\")\n            )));\n\n            assertTrue(\"whitelisted1 parameter is listed in getParameters\",\n                    hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted1\"));\n            assertTrue(\"whitelisted2 parameter is listed in getParameters\",\n                    hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted2\"));\n        } finally {\n            System.clearProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME);\n        }\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.whitelistedParameterByOverride:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void whitelistedParameterByOverride() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        String name \u003d p.getFullName();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\"))));\n\n        try {\n            ParametersAction action \u003d new ParametersAction(\n                    Arrays.asList(\n                        new StringParameterValue(\"foo\", \"baz\"),\n                        new StringParameterValue(\"bar\", \"bar\"),\n                        new StringParameterValue(\"whitelisted1\", \"x\"),\n                        new StringParameterValue(\"whitelisted2\", \"y\"),\n                        new StringParameterValue(\"whitelisted3\", \"y\")\n                                                 ),\n                    Arrays.asList(\"whitelisted1\", \"whitelisted2\"));\n            FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), action));\n\n            assertTrue(\"whitelisted1 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted1\"));\n            assertTrue(\"whitelisted2 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted2\"));\n            assertFalse(\"whitelisted3 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted3\"));\n            j.jenkins.reload();\n            //Test again after reload\n            p \u003d j.jenkins.getItemByFullName(name, FreeStyleProject.class);\n            build \u003d p.getLastBuild();\n            assertTrue(\"whitelisted1 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted1\"));\n            assertTrue(\"whitelisted2 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted2\"));\n            assertFalse(\"whitelisted3 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted3\"));\n        } finally {\n            System.clearProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME);\n        }\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.whitelistedParameterSameAfterChange:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void whitelistedParameterSameAfterChange() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        String name \u003d p.getFullName();\n        p.addProperty(new ParametersDefinitionProperty(Arrays.asList(\n                new StringParameterDefinition(\"foo\", \"foo\"),\n                new StringParameterDefinition(\"bar\", \"bar\"))));\n\n        try {\n            System.setProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME, \"whitelisted1,whitelisted2\");\n            FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                    new StringParameterValue(\"foo\", \"baz\"),\n                    new StringParameterValue(\"bar\", \"bar\"),\n                    new StringParameterValue(\"whitelisted1\", \"x\"),\n                    new StringParameterValue(\"whitelisted2\", \"y\"),\n                    new StringParameterValue(\"whitelisted3\", \"z\"),\n                    new StringParameterValue(\"whitelisted4\", \"w\")\n            )));\n            assertTrue(\"whitelisted1 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted1\"));\n            assertTrue(\"whitelisted2 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted2\"));\n            assertFalse(\"whitelisted3 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted3\"));\n            assertFalse(\"whitelisted4 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted4\"));\n\n            System.setProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME, \"whitelisted3,whitelisted4\");\n            j.jenkins.reload();\n            p \u003d j.jenkins.getItemByFullName(name, FreeStyleProject.class);\n            build \u003d p.getLastBuild();\n            assertTrue(\"whitelisted1 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted1\"));\n            assertTrue(\"whitelisted2 parameter is listed in getParameters\",\n                       hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted2\"));\n            assertFalse(\"whitelisted3 parameter is listed in getParameters\",\n                        hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted3\"));\n            assertFalse(\"whitelisted4 parameter is listed in getParameters\",\n                        hasParameterWithName(build.getAction(ParametersAction.class), \"whitelisted4\"));\n\n        } finally {\n            System.clearProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME);\n        }\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.nonParameterizedJob:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void nonParameterizedJob() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild build \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                new StringParameterValue(\"foo\", \"baz\"),\n                new StringParameterValue(\"bar\", \"bar\")\n        )));\n\n        assertFalse(\"foo parameter is not listed in getParameters\",\n                hasParameterWithName(build.getAction(ParametersAction.class), \"foo\"));\n        assertFalse(\"bar parameter is not listed in getParameters\",\n                hasParameterWithName(build.getAction(ParametersAction.class), \"bar\"));\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.nonParameterizedJobButWhitelisted:void()","methodSource":"@Test\n    @Issue(\"SECURITY-170\")\n    public void nonParameterizedJobButWhitelisted() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        try {\n            System.setProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME, \"foo,bar\");\n            FreeStyleBuild build2 \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new Cause.UserIdCause(), new ParametersAction(\n                    new StringParameterValue(\"foo\", \"baz\"),\n                    new StringParameterValue(\"bar\", \"bar\")\n            )));\n\n            assertTrue(\"foo parameter is listed in getParameters\",\n                    hasParameterWithName(build2.getAction(ParametersAction.class), \"foo\"));\n            assertTrue(\"bar parameter is listed in getParameters\",\n                    hasParameterWithName(build2.getAction(ParametersAction.class), \"bar\"));\n        } finally {\n            System.clearProperty(ParametersAction.SAFE_PARAMETERS_SYSTEM_PROPERTY_NAME);\n        }\n    }","advisory":"SECURITY-170"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.ensureNoListReuse:void()","methodSource":"@Test\n    @Issue(\"JENKINS-45472\")\n    public void ensureNoListReuse() throws Exception {\n        FreeStyleProject p1 \u003d j.createFreeStyleProject();\n        p1.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"foo\", \"\")));\n        FreeStyleProject p2 \u003d j.createFreeStyleProject();\n        p2.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"foo\", \"\")));\n\n        List\u003cParameterValue\u003e params \u003d new ArrayList\u003c\u003e();\n        params.add(new StringParameterValue(\"foo\", \"for p1\"));\n        p1.scheduleBuild2(1, new ParametersAction(params));\n        params.clear();\n        params.add(new StringParameterValue(\"foo\", \"for p2\"));\n        p2.scheduleBuild2(0, new ParametersAction(params));\n\n        j.waitUntilNoActivity();\n\n        assertEquals(1, p1.getLastBuild().getAction(ParametersAction.class).getParameters().size());\n        assertEquals(1, p2.getLastBuild().getAction(ParametersAction.class).getParameters().size());\n        assertEquals(\"for p1\", p1.getLastBuild().getAction(ParametersAction.class).getParameter(\"foo\").getValue());\n        assertEquals(\"for p2\", p2.getLastBuild().getAction(ParametersAction.class).getParameter(\"foo\").getValue());\n    }","advisory":"JENKINS-45472"},{"className":"hudson.model.ParametersAction2Test","methodSignature":"hudson.model.ParametersAction2Test.noInnerClasses:void()","methodSource":"@Issue(\"JENKINS-49573\")\n    @Test\n    public void noInnerClasses() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"key\", \"sensible-default\")));\n        FreeStyleBuild b \u003d j.assertBuildStatusSuccess(p.scheduleBuild2(0, new ParametersAction(new StringParameterValue(\"key\", \"value\"))));\n        assertThat(new XmlFile(Run.XSTREAM, new File(b.getRootDir(), \"build.xml\")).asString(), not(containsString(\"sensible-default\")));\n        assertEquals(Collections.emptyList(), logs.getMessages());\n    }","advisory":"JENKINS-49573"},{"className":"hudson.model.ParametersDefinitionPropertyTest","methodSignature":"hudson.model.ParametersDefinitionPropertyTest.customNewInstance:void()","methodSource":"@Issue(\"JENKINS-31458\")\n    @Test\n    public void customNewInstance() throws Exception {\n        logs.record(Descriptor.class, Level.ALL);\n        KrazyParameterDefinition kpd \u003d new KrazyParameterDefinition(\"kpd\", \"desc\", \"KrAzY\");\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        ParametersDefinitionProperty pdp \u003d new ParametersDefinitionProperty(kpd);\n        p.addProperty(pdp);\n        r.configRoundtrip(p);\n        pdp \u003d p.getProperty(ParametersDefinitionProperty.class);\n        kpd \u003d (KrazyParameterDefinition) pdp.getParameterDefinition(\"kpd\");\n        assertEquals(\"desc\", kpd.getDescription());\n        assertEquals(\"krazy\", kpd.field);\n    }","advisory":"JENKINS-31458"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.parameterTypes:void()","methodSource":"@Test\n    public void parameterTypes() throws Exception {\n        FreeStyleProject otherProject \u003d j.createFreeStyleProject();\n        j.buildAndAssertSuccess(otherProject);\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdp \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"),\n                new BooleanParameterDefinition(\"boolean\", true, \"boolean description\"),\n                new ChoiceParameterDefinition(\"choice\", \"Choice 1\\nChoice 2\", \"choice description\"),\n                new RunParameterDefinition(\"run\", otherProject.getName(), \"run description\", null));\n        project.addProperty(pdp);\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.goTo(\"job/\" + project.getName() + \"/build?delay\u003d0sec\");\n\n        HtmlForm form \u003d page.getFormByName(\"parameters\");\n\n        HtmlElement element \u003d (HtmlElement) ((HtmlElement) DomNodeUtil.selectSingleNode(form, \"//div[input/@value\u003d\u0027string\u0027]\")).getParentNode();\n        assertNotNull(element);\n        assertEquals(\"string description\", element.getParentNode().querySelector(\".jenkins-form-description\").getTextContent());\n\n        HtmlTextInput stringParameterInput \u003d DomNodeUtil.selectSingleNode(element, \".//input[@name\u003d\u0027value\u0027]\");\n        assertEquals(\"defaultValue\", stringParameterInput.getAttribute(\"value\"));\n        assertEquals(\"string\", ((HtmlElement) DomNodeUtil.selectSingleNode(element.getParentNode(), \"div[contains(@class, \u0027jenkins-form-label\u0027)]\")).getTextContent());\n        stringParameterInput.setValue(\"newValue\");\n\n        element \u003d DomNodeUtil.selectSingleNode(form, \"//div[input/@value\u003d\u0027boolean\u0027]\");\n        assertNotNull(element);\n        assertEquals(\"boolean description\", element.getParentNode().getParentNode().querySelector(\".jenkins-form-description\").getTextContent());\n        Object o \u003d DomNodeUtil.selectSingleNode(element, \".//input[@name\u003d\u0027value\u0027]\");\n        HtmlCheckBoxInput booleanParameterInput \u003d (HtmlCheckBoxInput) o;\n        assertTrue(booleanParameterInput.isChecked());\n        assertEquals(\"boolean\", element.getTextContent());\n\n        element \u003d (HtmlElement) ((HtmlElement) DomNodeUtil.selectSingleNode(form, \".//div[input/@value\u003d\u0027choice\u0027]\")).getParentNode();\n        assertNotNull(element);\n        assertEquals(\"choice description\", element.getParentNode().querySelector(\".jenkins-form-description\").getTextContent());\n        assertEquals(\"choice\", ((HtmlElement) DomNodeUtil.selectSingleNode(element.getParentNode(), \"div[contains(@class, \u0027jenkins-form-label\u0027)]\")).getTextContent());\n\n        element \u003d (HtmlElement) ((HtmlElement) DomNodeUtil.selectSingleNode(form, \".//div[input/@value\u003d\u0027run\u0027]\")).getParentNode();\n        assertNotNull(element);\n        assertEquals(\"run description\", element.getParentNode().querySelector(\".jenkins-form-description\").getTextContent());\n        assertEquals(\"run\", ((HtmlElement) DomNodeUtil.selectSingleNode(element.getParentNode(), \"div[contains(@class, \u0027jenkins-form-label\u0027)]\")).getTextContent());\n\n        j.submit(form);\n        j.waitUntilNoActivity();\n\n        assertEquals(\"newValue\", builder.getEnvVars().get(\"STRING\"));\n        assertEquals(\"true\", builder.getEnvVars().get(\"BOOLEAN\"));\n        assertEquals(\"Choice 1\", builder.getEnvVars().get(\"CHOICE\"));\n        assertEquals(j.jenkins.getRootUrl() + otherProject.getLastBuild().getUrl(), builder.getEnvVars().get(\"RUN\"));\n    }"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.choiceWithLTGT:void()","methodSource":"@Test\n    public void choiceWithLTGT() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdp \u003d new ParametersDefinitionProperty(\n                new ChoiceParameterDefinition(\"choice\", \"Choice 1\\nChoice \u003c2\u003e\", \"choice description\"));\n        project.addProperty(pdp);\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.goTo(\"job/\" + project.getName() + \"/build?delay\u003d0sec\");\n        HtmlForm form \u003d page.getFormByName(\"parameters\");\n\n        HtmlElement element \u003d (HtmlElement) (form.getElementsByAttribute(\"input\", \"name\", \"name\")).get(0).getParentNode();\n        assertNotNull(element);\n        assertEquals(\"choice description\", ((HtmlElement) DomNodeUtil.selectSingleNode(form, \"//div[contains(@class, \u0027jenkins-form-description\u0027)]\")).getTextContent());\n        assertEquals(\"choice\", ((HtmlElement) DomNodeUtil.selectSingleNode(form, \"//div[contains(@class, \u0027jenkins-form-label\u0027)]\")).getTextContent());\n\n        HtmlSelect choiceSelect \u003d (HtmlSelect) form.getElementsByAttribute(\"select\", \"name\", \"value\").get(0);\n\n        HtmlOption opt \u003d DomNodeUtil.selectSingleNode(choiceSelect, \"option[@value\u003d\u0027Choice \u003c2\u003e\u0027]\");\n        assertNotNull(opt);\n        assertEquals(\"Choice \u003c2\u003e\", opt.asNormalizedText());\n        opt.setSelected(true);\n\n        j.submit(form);\n        j.waitUntilNoActivity();\n\n        assertNotNull(builder.getEnvVars());\n        assertEquals(\"Choice \u003c2\u003e\", builder.getEnvVars().get(\"CHOICE\"));\n    }"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.sensitiveParameters:void()","methodSource":"@Test\n    public void sensitiveParameters() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdb \u003d new ParametersDefinitionProperty(\n                new PasswordParameterDefinition(\"password\", \"12345\", \"password description\"));\n        project.addProperty(pdb);\n\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        Set\u003cString\u003e sensitiveVars \u003d build.getSensitiveBuildVariables();\n\n        assertNotNull(sensitiveVars);\n        assertTrue(sensitiveVars.contains(\"password\"));\n    }"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.nonSensitiveParameters:void()","methodSource":"@Test\n    public void nonSensitiveParameters() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdb \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"));\n        project.addProperty(pdb);\n\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        Set\u003cString\u003e sensitiveVars \u003d build.getSensitiveBuildVariables();\n\n        assertNotNull(sensitiveVars);\n        assertFalse(sensitiveVars.contains(\"string\"));\n    }"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.mixedSensitivity:void()","methodSource":"@Test\n    public void mixedSensitivity() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdb \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"),\n                new PasswordParameterDefinition(\"password\", \"12345\", \"password description\"),\n                new StringParameterDefinition(\"string2\", \"Value2\", \"string description\")\n        );\n        project.addProperty(pdb);\n\n        CaptureEnvironmentBuilder builder \u003d new CaptureEnvironmentBuilder();\n        project.getBuildersList().add(builder);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        Set\u003cString\u003e sensitiveVars \u003d build.getSensitiveBuildVariables();\n\n        assertNotNull(sensitiveVars);\n        assertFalse(sensitiveVars.contains(\"string\"));\n        assertTrue(sensitiveVars.contains(\"password\"));\n        assertFalse(sensitiveVars.contains(\"string2\"));\n    }"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.fileParameterNotSet:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3539\")\n    public void fileParameterNotSet() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdp \u003d new ParametersDefinitionProperty(\n                new FileParameterDefinition(\"filename\", \"description\"));\n        project.addProperty(pdp);\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.goTo(\"job/\" + project.getName() + \"/build?delay\u003d0sec\");\n        HtmlForm form \u003d page.getFormByName(\"parameters\");\n\n        j.submit(form);\n        j.waitUntilNoActivity();\n\n        assertFalse(\"file must not exist\", project.getSomeWorkspace().child(\"filename\").exists());\n    }","advisory":"JENKINS-3539"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.unicodeParametersArePresetCorrectly:void()","methodSource":"@Test\n    @Issue(\"JENKINS-11543\")\n    public void unicodeParametersArePresetCorrectly() throws Exception {\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdb \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"sname:a¶‱ﻷ\", \"svalue:a¶‱ﻷ\", \"sdesc:a¶‱ﻷ\"),\n                new FileParameterDefinition(\"fname:a¶‱ﻷ\", \"fdesc:a¶‱ﻷ\")\n        );\n        p.addProperty(pdb);\n\n        WebClient wc \u003d j.createWebClient()\n                // Ignore 405\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"build\");\n\n        // java.lang.IllegalArgumentException: No such parameter definition: \u003cgibberish\u003e.\n        wc.setThrowExceptionOnFailingStatusCode(true);\n        final HtmlForm form \u003d page.getFormByName(\"parameters\");\n        HtmlFormUtil.submit(form, HtmlFormUtil.getButtonByCaption(form, \"Build\"));\n        j.waitUntilNoActivity();\n    }","advisory":"JENKINS-11543"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.xss:void()","methodSource":"@Issue(\"SECURITY-353\")\n    @Test\n    public void xss() throws Exception {\n        j.jenkins.setMarkupFormatter(new MyMarkupFormatter());\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        StringParameterDefinition param \u003d new StringParameterDefinition(\"\u003cparam name\u003e\", \"\u003cparam default\u003e\", \"\u003cparam description\u003e\");\n        assertEquals(\"\u003cb\u003e[\u003c/b\u003eparam description\u003cb\u003e]\u003c/b\u003e\", param.getFormattedDescription());\n        p.addProperty(new ParametersDefinitionProperty(param));\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"build?delay\u003d0sec\");\n        collector.checkThat(page.getWebResponse().getStatusCode(), is(HttpURLConnection.HTTP_BAD_METHOD)); // 405 to dissuade scripts from thinking this triggered the build\n        String text \u003d page.getWebResponse().getContentAsString();\n        collector.checkThat(\"build page should escape param name\", text, containsString(\"\u0026lt;param name\u0026gt;\"));\n        collector.checkThat(\"build page should not leave param name unescaped\", text, not(containsString(\"\u003cparam name\u003e\")));\n        collector.checkThat(\"build page should escape param default\", text, containsString(\"\u0026lt;param default\u0026gt;\"));\n        collector.checkThat(\"build page should not leave param default unescaped\", text, not(containsString(\"\u003cparam default\u003e\")));\n        collector.checkThat(\"build page should mark up param description\", text, containsString(\"\u003cb\u003e[\u003c/b\u003eparam description\u003cb\u003e]\u003c/b\u003e\"));\n        collector.checkThat(\"build page should not leave param description unescaped\", text, not(containsString(\"\u003cparam description\u003e\")));\n        HtmlForm form \u003d page.getFormByName(\"parameters\");\n        HtmlTextInput value \u003d form.getInputByValue(\"\u003cparam default\u003e\");\n        value.setText(\"\u003cparam value\u003e\");\n        j.submit(form);\n        j.waitUntilNoActivity();\n        FreeStyleBuild b \u003d p.getBuildByNumber(1);\n        page \u003d j.createWebClient().getPage(b, \"parameters/\");\n        text \u003d page.getWebResponse().getContentAsString();\n        collector.checkThat(\"parameters page should escape param name\", text, containsString(\"\u0026lt;param name\u0026gt;\"));\n        collector.checkThat(\"parameters page should not leave param name unescaped\", text, not(containsString(\"\u003cparam name\u003e\")));\n        collector.checkThat(\"parameters page should escape param value\", text, containsString(\"\u0026lt;param value\u0026gt;\"));\n        collector.checkThat(\"parameters page should not leave param value unescaped\", text, not(containsString(\"\u003cparam value\u003e\")));\n        collector.checkThat(\"parameters page should mark up param description\", text, containsString(\"\u003cb\u003e[\u003c/b\u003eparam description\u003cb\u003e]\u003c/b\u003e\"));\n        collector.checkThat(\"parameters page should not leave param description unescaped\", text, not(containsString(\"\u003cparam description\u003e\")));\n    }","advisory":"SECURITY-353"},{"className":"hudson.model.ParametersTest","methodSignature":"hudson.model.ParametersTest.emptyParameterDefinitionProperty:void()","methodSource":"@Test\n    @Issue(\"JENKINS-69637\")\n    public void emptyParameterDefinitionProperty() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page;\n\n        page \u003d wc.getPage(p, \"build?delay\u003d0sec\");\n        collector.checkThat(page.getWebResponse().getStatusCode(), is(HttpURLConnection.HTTP_BAD_METHOD));\n        HtmlForm form \u003d page.getFormByName(\"parameters\");\n        page \u003d j.submit(form);\n        collector.checkThat(page.getWebResponse().getStatusCode(), is(HttpURLConnection.HTTP_OK));\n        j.waitUntilNoActivity();\n        FreeStyleBuild b \u003d p.getBuildByNumber(1);\n        collector.checkThat(b.getResult(), is(Result.SUCCESS));\n    }","advisory":"JENKINS-69637"},{"className":"hudson.model.PasswordParameterDefinitionTest","methodSignature":"hudson.model.PasswordParameterDefinitionTest.defaultValueKeptSecret:void()","methodSource":"@Test public void defaultValueKeptSecret() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition(\"p\", \"s3cr3t\", \"\")));\n        j.configRoundtrip(p);\n        assertEquals(\"s3cr3t\", ((PasswordParameterDefinition) p.getProperty(ParametersDefinitionProperty.class).getParameterDefinition(\"p\")).getDefaultValue());\n    }"},{"className":"hudson.model.PasswordParameterDefinitionTest","methodSignature":"hudson.model.PasswordParameterDefinitionTest.defaultValueAlwaysAvailable:void()","methodSource":"@Issue(\"JENKINS-36476\")\n    @Test public void defaultValueAlwaysAvailable() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").\n            grant(Jenkins.READ, Item.READ, Item.BUILD).everywhere().to(\"dev\"));\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition(\"secret\", \"s3cr3t\", \"\")));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                listener.getLogger().println(\"I heard about a \" + build.getEnvironment(listener).get(\"secret\") + \"!\");\n                return true;\n            }\n        });\n\n        User admin \u003d User.getById(\"admin\", true);\n        User dev \u003d User.getById(\"dev\", true);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                // ParametersDefinitionProperty/index.jelly sends a 405 but really it is OK\n                .withThrowExceptionOnFailingStatusCode(false);\n        // Control case: admin can use default value.\n        j.submit(wc.withBasicApiToken(admin).getPage(p, \"build?delay\u003d0sec\").getFormByName(\"parameters\"));\n        j.waitUntilNoActivity();\n        FreeStyleBuild b1 \u003d p.getLastBuild();\n        assertEquals(1, b1.getNumber());\n        j.assertLogContains(\"I heard about a s3cr3t!\", j.assertBuildStatusSuccess(b1));\n\n        // Another control case: anyone can enter a different value.\n        HtmlForm form \u003d wc.withBasicApiToken(dev).getPage(p, \"build?delay\u003d0sec\").getFormByName(\"parameters\");\n        ((HtmlElement) form.querySelector(\"button.hidden-password-update-btn\")).click();\n        HtmlPasswordInput input \u003d form.getInputByName(\"value\");\n        input.setText(\"rumor\");\n        j.submit(form);\n        j.waitUntilNoActivity();\n        FreeStyleBuild b2 \u003d p.getLastBuild();\n        assertEquals(2, b2.getNumber());\n        j.assertLogContains(\"I heard about a rumor!\", j.assertBuildStatusSuccess(b2));\n\n        // Test case: anyone can use default value.\n        j.submit(wc.withBasicApiToken(dev).getPage(p, \"build?delay\u003d0sec\").getFormByName(\"parameters\"));\n        j.waitUntilNoActivity();\n        FreeStyleBuild b3 \u003d p.getLastBuild();\n        assertEquals(3, b3.getNumber());\n        j.assertLogContains(\"I heard about a s3cr3t!\", j.assertBuildStatusSuccess(b3));\n\n        // Another control case: blank values.\n        form \u003d wc.withBasicApiToken(dev).getPage(p, \"build?delay\u003d0sec\").getFormByName(\"parameters\");\n        ((HtmlElement) form.querySelector(\"button.hidden-password-update-btn\")).click();\n        input \u003d form.getInputByName(\"value\");\n        input.setText(\"\");\n        j.submit(form);\n        j.waitUntilNoActivity();\n        FreeStyleBuild b4 \u003d p.getLastBuild();\n        assertEquals(4, b4.getNumber());\n        j.assertLogContains(\"I heard about a !\", j.assertBuildStatusSuccess(b4));\n    }","advisory":"JENKINS-36476"},{"className":"hudson.model.PeriodicWorkTest","methodSignature":"hudson.model.PeriodicWorkTest.newExtensionsAreScheduled:void()","methodSource":"@Test\n    public void newExtensionsAreScheduled() throws Exception {\n        TestPeriodicWork tpw \u003d new TestPeriodicWork();\n\n        int size \u003d PeriodicWork.all().size();\n        ExtensionList.lookup(PeriodicWork.class).add(tpw);\n\n        assertThat(\"we have one new PeriodicWork\", PeriodicWork.all(), hasSize(size + 1));\n        assertThat(\"The task was run within 15 seconds\", tpw.doneSignal.await(15, TimeUnit.SECONDS), is(true));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testSave:void()","methodSource":"@Test\n    public void testSave() throws IOException, InterruptedException, ReactorException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.disabled \u003d true;\n        p.nextBuildNumber \u003d 5;\n        p.description \u003d \"description\";\n        p.save();\n        j.jenkins.reload();\n        assertEquals(\"All persistent data should be saved.\", \"description\", p.description);\n        assertEquals(\"All persistent data should be saved.\", 5, p.nextBuildNumber);\n        assertTrue(\"All persistent data should be saved\", p.disabled);\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testOnCreateFromScratch:void()","methodSource":"@Test\n    public void testOnCreateFromScratch() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        j.buildAndAssertSuccess(p);\n        p.removeRun(p.getLastBuild());\n        createAction \u003d true;\n        p.onCreatedFromScratch();\n        assertNotNull(\"Project should have last build.\", p.getLastBuild());\n        assertNotNull(\"Project should have transient action TransientAction.\", p.getAction(TransientAction.class));\n        createAction \u003d false;\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testOnLoad:void()","methodSource":"@Test\n    public void testOnLoad() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        j.buildAndAssertSuccess(p);\n        p.removeRun(p.getLastBuild());\n        createAction \u003d true;\n        p.onLoad(j.jenkins, \"project\");\n        assertNotNull(\"Project should have a build.\", p.getLastBuild());\n        assertNotNull(\"Project should have a scm.\", p.getScm());\n        assertNotNull(\"Project should have Transient Action TransientAction.\", p.getAction(TransientAction.class));\n        createAction \u003d false;\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetEnvironment:void()","methodSource":"@Test\n    public void testGetEnvironment() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        Slave slave \u003d j.createOnlineSlave();\n        EnvironmentVariablesNodeProperty.Entry entry \u003d new EnvironmentVariablesNodeProperty.Entry(\"jdk\", \"some_java\");\n        slave.getNodeProperties().add(new EnvironmentVariablesNodeProperty(entry));\n        EnvVars var \u003d p.getEnvironment(slave, TaskListener.NULL);\n        assertEquals(\"Environment should have set jdk.\", \"some_java\", var.get(\"jdk\"));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testPerformDelete:void()","methodSource":"@Test\n    public void testPerformDelete() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.performDelete();\n        assertFalse(\"Project should be deleted from disk.\", p.getConfigFile().exists());\n        assertTrue(\"Project should be disabled when deleting start.\", p.isDisabled());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetAssignedLabel:void()","methodSource":"@Test\n    public void testGetAssignedLabel() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.setAssignedLabel(j.jenkins.getSelfLabel());\n        Slave slave \u003d j.createOnlineSlave();\n        assertEquals(\"Project should have Jenkins\u0027s self label.\", j.jenkins.getSelfLabel(), p.getAssignedLabel());\n        p.setAssignedLabel(null);\n        assertNull(\"Project should not have any label.\", p.getAssignedLabel());\n        p.setAssignedLabel(slave.getSelfLabel());\n        assertEquals(\"Project should have self label of slave\", slave.getSelfLabel(), p.getAssignedLabel());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetAssignedLabelString:void()","methodSource":"@Test\n    public void testGetAssignedLabelString() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        Slave slave \u003d j.createOnlineSlave();\n        assertNull(\"Project should not have any label.\", p.getAssignedLabelString());\n        p.setAssignedLabel(j.jenkins.getSelfLabel());\n        assertNull(\"Project should return null, because assigned label is Jenkins.\", p.getAssignedLabelString());\n        p.setAssignedLabel(slave.getSelfLabel());\n        assertEquals(\"Project should return name of slave.\", slave.getSelfLabel().name, p.getAssignedLabelString());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetSomeWorkspace:void()","methodSource":"@Test\n    public void testGetSomeWorkspace() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        assertNull(\"Project which has never run should not have any workspace.\", p.getSomeWorkspace());\n        getFilePath \u003d true;\n        assertNotNull(\"Project should have any workspace because WorkspaceBrowser find some.\", p.getSomeWorkspace());\n        getFilePath \u003d false;\n        String cmd \u003d \"echo ahoj \u003e some.log\";\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(cmd) : new Shell(cmd));\n        j.buildAndAssertSuccess(p);\n        assertNotNull(\"Project should has any workspace.\", p.getSomeWorkspace());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetSomeBuildWithWorkspace:void()","methodSource":"@Test\n    public void testGetSomeBuildWithWorkspace() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        String cmd \u003d \"echo ahoj \u003e some.log\";\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(cmd) : new Shell(cmd));\n        assertNull(\"Project which has never run should not have any build with workspace.\", p.getSomeBuildWithWorkspace());\n        j.buildAndAssertSuccess(p);\n        assertEquals(\"Last build should have workspace.\", p.getLastBuild(), p.getSomeBuildWithWorkspace());\n        p.getLastBuild().delete();\n        assertNull(\"Project should not have build with some workspace.\", p.getSomeBuildWithWorkspace());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.workspaceBrowsing:void()","methodSource":"@Issue(\"JENKINS-10450\")\n    @Test public void workspaceBrowsing() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        String cmd \u003d \"echo ahoj \u003e some.log\";\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(cmd) : new Shell(cmd));\n        j.buildAndAssertSuccess(p);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.goTo(\"job/project/ws/some.log\", \"text/plain\");\n        wc.assertFails(\"job/project/ws/other.log\", 404);\n        p.doDoWipeOutWorkspace();\n        wc.assertFails(\"job/project/ws/some.log\", 404);\n    }","advisory":"JENKINS-10450"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetQuietPeriod:void()","methodSource":"@Test\n    public void testGetQuietPeriod() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        assertEquals(\"Quiet period should be default.\", j.jenkins.getQuietPeriod(), p.getQuietPeriod());\n        j.jenkins.setQuietPeriod(0);\n        assertEquals(\"Quiet period is not set so it should be the same as global quiet period.\", 0, p.getQuietPeriod());\n        p.setQuietPeriod(10);\n        assertEquals(\"Quiet period was set.\", 10, p.getQuietPeriod());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetScmCheckoutStrategy:void()","methodSource":"@Test\n    public void testGetScmCheckoutStrategy() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.setScmCheckoutStrategy(null);\n        assertThat(\"Project should return default checkout strategy if scm checkout strategy is not set.\", p.getScmCheckoutStrategy(), instanceOf(DefaultSCMCheckoutStrategyImpl.class));\n        SCMCheckoutStrategy strategy \u003d new SCMCheckoutStrategyImpl();\n        p.setScmCheckoutStrategy(strategy);\n        assertEquals(\"Project should return its scm checkout strategy if this strategy is not null\", strategy, p.getScmCheckoutStrategy());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetScmCheckoutRetryCount:void()","methodSource":"@Test\n    public void testGetScmCheckoutRetryCount() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        assertEquals(\"Scm retry count should be default.\", j.jenkins.getScmCheckoutRetryCount(), p.getScmCheckoutRetryCount());\n        j.jenkins.setScmCheckoutRetryCount(6);\n        assertEquals(\"Scm retry count should be the same as global scm retry count.\", 6, p.getScmCheckoutRetryCount());\n        HtmlForm form \u003d j.createWebClient().goTo(p.getUrl() + \"/configure\").getFormByName(\"config\");\n        ((HtmlElement) form.querySelectorAll(\".advancedButton\").get(0)).click();\n        // required due to the new default behavior of click\n        form.getInputByName(\"hasCustomScmCheckoutRetryCount\").click(new Event(), false, false, false, true);\n        form.getInputByName(\"scmCheckoutRetryCount\").setValue(\"7\");\n        j.submit(form);\n        assertEquals(\"Scm retry count was set.\", 7, p.getScmCheckoutRetryCount());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.isBuildable:void()","methodSource":"@Test\n    public void isBuildable() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        assertTrue(\"Project should be buildable.\", p.isBuildable());\n        p.disable();\n        assertFalse(\"Project should not be buildable if it is disabled.\", p.isBuildable());\n        p.enable();\n        AbstractProject p2 \u003d (AbstractProject) j.jenkins.copy(j.jenkins.getItem(\"project\"), \"project2\");\n        assertFalse(\"Project should not be buildable until is saved.\", p2.isBuildable());\n        p2.save();\n        assertTrue(\"Project should be buildable after save.\", p2.isBuildable());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testMakeDisabled:void()","methodSource":"@Test\n    public void testMakeDisabled() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.makeDisabled(false);\n        assertFalse(\"Project should be enabled.\", p.isDisabled());\n        p.makeDisabled(true);\n        assertTrue(\"Project should be disabled.\", p.isDisabled());\n        p.makeDisabled(false);\n        p.setAssignedLabel(j.jenkins.getLabel(\"nonExist\"));\n        p.scheduleBuild2(0);\n        p.makeDisabled(true);\n        assertNull(\"Project should be canceled.\", Queue.getInstance().getItem(p));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testAddProperty:void()","methodSource":"@Test\n    public void testAddProperty() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        JobProperty prop \u003d new JobPropertyImp();\n        createAction \u003d true;\n        p.addProperty(prop);\n        assertNotNull(\"Project does not contain added property.\", p.getProperty(prop.getClass()));\n        assertNotNull(\"Project did not update transient actions.\", p.getAction(TransientAction.class));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testScheduleBuild2:void()","methodSource":"@Test\n    public void testScheduleBuild2() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.setAssignedLabel(j.jenkins.getLabel(\"nonExist\"));\n        p.scheduleBuild(0, new UserIdCause());\n        assertNotNull(\"Project should be in queue.\", Queue.getInstance().getItem(p));\n        p.setAssignedLabel(null);\n        int count \u003d 0;\n        while (count \u003c 5 \u0026\u0026 p.getLastBuild() \u003d\u003d null) {\n            Thread.sleep(1000); //give some time to start build\n            count++;\n        }\n        FreeStyleBuild b \u003d p.getLastBuild();\n        assertNotNull(\"Build should be done or in progress.\", b);\n        j.assertBuildStatusSuccess(j.waitForCompletion(b));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testSchedulePolling:void()","methodSource":"@Test\n    public void testSchedulePolling() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        assertFalse(\"Project should not schedule polling because no scm trigger is set.\", p.schedulePolling());\n        SCMTrigger trigger \u003d new SCMTrigger(\"0 0 * * *\");\n        p.addTrigger(trigger);\n        trigger.start(p, true);\n        assertTrue(\"Project should schedule polling.\", p.schedulePolling());\n        p.disable();\n        assertFalse(\"Project should not schedule polling because project is disabled.\", p.schedulePolling());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testSaveAfterSet:void()","methodSource":"@Test\n    public void testSaveAfterSet() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.setScm(new NullSCM());\n        p.setScmCheckoutStrategy(new SCMCheckoutStrategyImpl());\n        p.setQuietPeriod(15);\n        p.setBlockBuildWhenDownstreamBuilding(true);\n        p.setBlockBuildWhenUpstreamBuilding(true);\n        j.jenkins.getJDKs().add(new JDK(\"jdk\", \"path\"));\n        j.jenkins.save();\n        p.setJDK(j.jenkins.getJDK(\"jdk\"));\n        p.setCustomWorkspace(\"/some/path\");\n        j.jenkins.reload();\n        assertNotNull(\"Project did not save scm.\", p.getScm());\n        assertThat(\"Project did not save scm checkout strategy.\", p.getScmCheckoutStrategy(), instanceOf(SCMCheckoutStrategyImpl.class));\n        assertEquals(\"Project did not save quiet period.\", 15, p.getQuietPeriod());\n        assertTrue(\"Project did not save block if downstream is building.\", p.blockBuildWhenDownstreamBuilding());\n        assertTrue(\"Project did not save block if upstream is building.\", p.blockBuildWhenUpstreamBuilding());\n        assertNotNull(\"Project did not save jdk\", p.getJDK());\n        assertEquals(\"Project did not save custom workspace.\", \"/some/path\", p.getCustomWorkspace());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetActions:void()","methodSource":"@Test\n    public void testGetActions() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        createAction \u003d true;\n        p.updateTransientActions();\n        assertNotNull(\"Action should contain transient actions too.\", p.getAction(TransientAction.class));\n        createAction \u003d false;\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetCauseOfBlockage:void()","methodSource":"@Test\n    public void testGetCauseOfBlockage() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"ping -n 10 127.0.0.1 \u003enul\") : new Shell(\"sleep 10\"));\n        QueueTaskFuture\u003cFreeStyleBuild\u003e b1 \u003d waitForStart(p);\n        assertThat(\"Build can not start because previous build has not finished: \" + p.getCauseOfBlockage(), p.getCauseOfBlockage(), instanceOf(BlockedBecauseOfBuildInProgress.class));\n        p.getLastBuild().getExecutor().interrupt();\n        b1.get();   // wait for it to finish\n\n        FreeStyleProject downstream \u003d j.createFreeStyleProject(\"project-downstream\");\n        downstream.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"ping -n 10 127.0.0.1 \u003enul\") : new Shell(\"sleep 10\"));\n        p.getPublishersList().add(new BuildTrigger(Set.of(downstream), Result.SUCCESS));\n        Jenkins.get().rebuildDependencyGraph();\n        p.setBlockBuildWhenDownstreamBuilding(true);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e b2 \u003d waitForStart(downstream);\n        assertThat(\"Build can not start because build of downstream project has not finished.\", p.getCauseOfBlockage(), instanceOf(BecauseOfDownstreamBuildInProgress.class));\n        downstream.getLastBuild().getExecutor().interrupt();\n        b2.get();\n\n        downstream.setBlockBuildWhenUpstreamBuilding(true);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e b3 \u003d waitForStart(p);\n        assertThat(\"Build can not start because build of upstream project has not finished.\", downstream.getCauseOfBlockage(), instanceOf(BecauseOfUpstreamBuildInProgress.class));\n        b3.get();\n        assertTrue(j.jenkins.getQueue().cancel(downstream));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetSubTasks:void()","methodSource":"@Test\n    public void testGetSubTasks() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        p.addProperty(new JobPropertyImp());\n        createSubTask \u003d true;\n        List\u003cSubTask\u003e subtasks \u003d p.getSubTasks();\n        boolean containsSubTaskImpl \u003d false;\n        boolean containsSubTaskImpl2 \u003d false;\n        for (SubTask sub : subtasks) {\n            if (sub instanceof SubTaskImpl)\n                containsSubTaskImpl \u003d true;\n            if (sub instanceof SubTaskImpl2)\n                containsSubTaskImpl2 \u003d true;\n        }\n        createSubTask \u003d false;\n        assertTrue(\"Project should return subtasks provided by SubTaskContributor.\", containsSubTaskImpl2);\n        assertTrue(\"Project should return subtasks provided by JobProperty.\", containsSubTaskImpl);\n\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testCreateExecutable:void()","methodSource":"@Test\n    public void testCreateExecutable() throws IOException {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        Build build \u003d p.createExecutable();\n        assertNotNull(\"Project should create executable.\", build);\n        assertEquals(\"CreatedExecutable should be the last build.\", build, p.getLastBuild());\n        assertEquals(\"Next build number should be increased.\", 2, p.nextBuildNumber);\n        p.disable();\n        build \u003d p.createExecutable();\n        assertNull(\"Disabled project should not create executable.\", build);\n        assertEquals(\"Next build number should not be increased.\", 2, p.nextBuildNumber);\n\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testCheckout:void()","methodSource":"@Test\n    public void testCheckout() throws Exception {\n        SCM scm \u003d new NullSCM();\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        Slave slave \u003d j.createOnlineSlave();\n        AbstractBuild build \u003d p.createExecutable();\n        FilePath ws \u003d slave.getWorkspaceFor(p);\n        assertNotNull(ws);\n        FilePath path \u003d slave.toComputer().getWorkspaceList().allocate(ws, build).path;\n        build.setWorkspace(path);\n        BuildListener listener \u003d new StreamBuildListener(TaskListener.NULL.getLogger(), Charset.defaultCharset());\n        assertTrue(\"Project with null smc should perform checkout without problems.\", p.checkout(build, new RemoteLauncher(listener, slave.getChannel(), true), listener, new File(build.getRootDir(), \"changelog.xml\")));\n        p.setScm(scm);\n        assertTrue(\"Project should perform checkout without problems.\", p.checkout(build, new RemoteLauncher(listener, slave.getChannel(), true), listener, new File(build.getRootDir(), \"changelog.xml\")));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testPoll:void()","methodSource":"@Ignore(\"randomly failed: Project should have polling result no change expected:\u003cNONE\u003e but was:\u003cINCOMPARABLE\u003e\")\n    @Test\n    public void testPoll() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"project\");\n        SCM scm \u003d new NullSCM();\n        p.setScm(null);\n        assertEquals(\"Project with null scm should have have polling result no change.\", PollingResult.Change.NONE, p.poll(TaskListener.NULL).change);\n        p.setScm(scm);\n        p.disable();\n        assertEquals(\"Project which is disabled should have have polling result no change.\", PollingResult.Change.NONE, p.poll(TaskListener.NULL).change);\n        p.enable();\n        assertEquals(\"Project which has no builds should have have polling result incomparable.\", PollingResult.Change.INCOMPARABLE, p.poll(TaskListener.NULL).change);\n        p.setAssignedLabel(j.jenkins.getLabel(\"nonExist\"));\n        p.scheduleBuild2(0);\n        assertEquals(\"Project which build is building should have polling result result no change.\", PollingResult.Change.NONE, p.poll(TaskListener.NULL).change);\n        p.setAssignedLabel(null);\n        while (p.getLastBuild() \u003d\u003d null)\n            Thread.sleep(100); //wait until build start\n        assertEquals(\"Project should have polling result no change\", PollingResult.Change.NONE, p.poll(TaskListener.NULL).change);\n        SCM alwaysChange \u003d new AlwaysChangedSCM();\n        p.setScm(alwaysChange);\n        j.buildAndAssertSuccess(p);\n        assertEquals(\"Project should have polling result significant\", PollingResult.Change.SIGNIFICANT, p.poll(TaskListener.NULL).change);\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testHasParticipant:void()","methodSource":"@Test\n    public void testHasParticipant() throws Exception {\n        User user \u003d User.get(\"John Smith\", true, Collections.emptyMap());\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"project2\");\n        FakeChangeLogSCM scm \u003d new FakeChangeLogSCM();\n        project2.setScm(scm);\n        j.buildAndAssertSuccess(project2);\n        assertFalse(\"Project should not have any participant.\", project2.hasParticipant(user));\n        scm.addChange().withAuthor(user.getId());\n        project.setScm(scm);\n        j.buildAndAssertSuccess(project);\n        assertTrue(\"Project should have participant.\", project.hasParticipant(user));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testGetRelationship:void()","methodSource":"@Test\n    public void testGetRelationship() throws Exception {\n        final FreeStyleProject upstream \u003d j.createFreeStyleProject(\"upstream\");\n        FreeStyleProject downstream \u003d j.createFreeStyleProject(\"downstream\");\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n        assertTrue(\"Project upstream should not have any relationship with downstream\", upstream.getRelationship(downstream).isEmpty());\n\n        upstream.getPublishersList().add(new Fingerprinter(\"change.log\", true));\n        upstream.getBuildersList().add(new WorkspaceWriter(\"change.log\", \"hello\"));\n        upstream.getPublishersList().add(new ArtifactArchiver(\"change.log\"));\n        downstream.getPublishersList().add(new Fingerprinter(\"change.log\", false));\n        downstream.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                for (Run\u003c?, ?\u003e.Artifact a : upstream.getLastBuild().getArtifacts()) {\n                    try {\n                        Files.copy(a.getFile().toPath(), new File(build.getWorkspace().child(a.getFileName()).getRemote()).toPath(), REPLACE_EXISTING);\n                    } catch (IOException e) {\n                        throw new UncheckedIOException(e);\n                    }\n                }\n                return true;\n            }\n        });\n\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n        upstream.getBuildersList().add(new WorkspaceWriter(\"change.log\", \"helloWorld\"));\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n\n        Map\u003cInteger, Fingerprint.RangeSet\u003e relationship \u003d upstream.getRelationship(downstream);\n        assertFalse(\"Project upstream should have relationship with downstream\", relationship.isEmpty());\n        assertTrue(\"Relationship should contain upstream #3\", relationship.containsKey(3));\n        assertFalse(\"Relationship should not contain upstream #4 because previous fingerprinted file was not changed since #3\", relationship.containsKey(4));\n        assertEquals(\"downstream #2 should be the first build which depends on upstream #3\", 2, relationship.get(3).min());\n        assertEquals(\"downstream #3 should be the last build which depends on upstream #3\", 3, relationship.get(3).max() - 1);\n        assertEquals(\"downstream #4 should depend only on upstream #5\", 4, relationship.get(5).min());\n        assertEquals(\"downstream #4 should depend only on upstream #5\", 4, relationship.get(5).max() - 1);\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testDoCancelQueue:void()","methodSource":"@Test\n    public void testDoCancelQueue() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as \u003d ACL.as(user)) {\n            assertThrows(\"User should not have permission to build project\", AccessDeniedException3.class, () -\u003e project.doCancelQueue(null, null));\n        }\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testDoDoDelete:void()","methodSource":"@Test\n    public void testDoDoDelete() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User user \u003d User.getById(\"john\", true);\n        try (ACLContext as \u003d ACL.as(user)) {\n            assertThrows(\"User should not have permission to build project\", AccessDeniedException3.class, () -\u003e project.doDoDelete(null, null));\n        }\n        auth.add(Jenkins.READ, user.getId());\n        auth.add(Item.READ, user.getId());\n        auth.add(Item.DELETE, user.getId());\n\n        // use Basic to speedup the test, normally it\u0027s pure UI testing\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(user.getId());\n        HtmlPage p \u003d wc.goTo(project.getUrl() + \"delete\");\n\n        List\u003cHtmlForm\u003e forms \u003d p.getForms();\n        for (HtmlForm form : forms) {\n            if (\"doDelete\".equals(form.getAttribute(\"action\"))) {\n                j.submit(form);\n            }\n        }\n        assertNull(\"Project should be deleted form memory.\", j.jenkins.getItem(project.getDisplayName()));\n        assertFalse(\"Project should be deleted form disk.\", project.getRootDir().exists());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testDoDoWipeOutWorkspace:void()","methodSource":"@Test\n    public void testDoDoWipeOutWorkspace() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as \u003d ACL.as(user)) {\n            assertThrows(\"User should not have permission to build project\", AccessDeniedException3.class, project::doDoWipeOutWorkspace);\n        }\n        auth.add(Item.READ, user.getId());\n        auth.add(Item.BUILD, user.getId());\n        auth.add(Item.WIPEOUT, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n        Slave slave \u003d j.createOnlineSlave();\n        project.setAssignedLabel(slave.getSelfLabel());\n        String cmd \u003d \"echo hello \u003e change.log\";\n        project.getBuildersList().add(Functions.isWindows() ? new BatchFile(cmd) : new Shell(cmd));\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        WebRequest request \u003d new WebRequest(new URI(wc.getContextPath() + project.getUrl() + \"doWipeOutWorkspace\").toURL(), HttpMethod.POST);\n        HtmlPage p \u003d wc.getPage(request);\n        assertEquals(200, p.getWebResponse().getStatusCode());\n\n        Thread.sleep(500);\n        assertFalse(\"Workspace should not exist.\", project.getSomeWorkspace().exists());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testDoDisable:void()","methodSource":"@Test\n    public void testDoDisable() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as \u003d ACL.as(user)) {\n            assertThrows(\"User should not have permission to build project\", AccessDeniedException3.class, project::doDisable);\n        }\n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p \u003d wc.goTo(project.getUrl());\n\n        List\u003cHtmlForm\u003e forms \u003d p.getForms();\n        for (HtmlForm form : forms) {\n            if (\"disable\".equals(form.getAttribute(\"action\"))) {\n                j.submit(form);\n            }\n        }\n       assertTrue(\"Project should be disabled.\", project.isDisabled());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testDoEnable:void()","methodSource":"@Test\n    public void testDoEnable() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        try (ACLContext as \u003d ACL.as(user)) {\n            project.disable();\n        }\n        try (ACLContext as \u003d ACL.as(user)) {\n            assertThrows(\"User should not have permission to build project\", AccessDeniedException3.class, project::doEnable);\n        }\n        auth.add(Item.READ, user.getId());\n        auth.add(Item.CONFIGURE, user.getId());\n        auth.add(Jenkins.READ, user.getId());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(user.getId(), \"password\");\n        HtmlPage p \u003d wc.goTo(project.getUrl());\n\n        List\u003cHtmlForm\u003e forms \u003d p.getForms();\n        for (HtmlForm form : forms) {\n            if (\"enable\".equals(form.getAttribute(\"action\"))) {\n                j.submit(form);\n            }\n        }\n       assertFalse(\"Project should be enabled.\", project.isDisabled());\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testJobSubmittedShouldSpawnCloud:void()","methodSource":"@Test\n    public void testJobSubmittedShouldSpawnCloud() throws Exception {\n        /*\n         * Setup a project with an SCM. Jenkins should have no executors in itself.\n         */\n        FreeStyleProject proj \u003d j.createFreeStyleProject(\"JENKINS-21394-spawn\");\n        RequiresWorkspaceSCM requiresWorkspaceScm \u003d new RequiresWorkspaceSCM(true);\n        proj.setScm(requiresWorkspaceScm);\n        j.jenkins.setNumExecutors(0);\n        /*\n         * We have a cloud\n         */\n        DummyCloudImpl2 c2 \u003d new DummyCloudImpl2(j, 0);\n        c2.label \u003d new LabelAtom(\"test-cloud-label\");\n        j.jenkins.clouds.add(c2);\n\n        SCMTrigger t \u003d new SCMTrigger(\"@daily\", true);\n        t.start(proj, true);\n        proj.addTrigger(t);\n        t.new Runner().run();\n\n        Thread.sleep(1000);\n        //Assert that the job IS submitted to Queue.\n        assertEquals(1, j.jenkins.getQueue().getItems().length);\n        assertTrue(j.jenkins.getQueue().cancel(proj));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testUnrestrictedJobNoLabelByCloudNoQueue:void()","methodSource":"@Test\n    public void testUnrestrictedJobNoLabelByCloudNoQueue() throws Exception {\n        assertTrue(j.jenkins.clouds.isEmpty());\n        //Create slave. (Online)\n        Slave s1 \u003d j.createOnlineSlave();\n\n        //Create a project, and bind the job to the created slave\n        FreeStyleProject proj \u003d j.createFreeStyleProject(\"JENKINS-21394-noqueue\");\n        proj.setAssignedLabel(s1.getSelfLabel());\n\n        //Add an SCM to the project. We require a workspace for the poll\n        RequiresWorkspaceSCM requiresWorkspaceScm \u003d new RequiresWorkspaceSCM(true);\n        proj.setScm(requiresWorkspaceScm);\n\n        j.buildAndAssertSuccess(proj);\n\n        //Now create another slave. And restrict the job to that slave. The slave is offline, leaving the job with no assignable nodes.\n        //We tell our mock SCM to return that it has got changes. But since there are no agents, we get the desired result.\n        Slave s2 \u003d inboundAgents.createAgent(j, InboundAgentRule.Options.newBuilder().skipStart().build());\n        proj.setAssignedLabel(s2.getSelfLabel());\n        requiresWorkspaceScm.hasChange \u003d true;\n\n        //Poll (We now should have NO online agents, this should now return NO_CHANGES.\n        PollingResult pr \u003d proj.poll(j.createTaskListener());\n        assertFalse(pr.hasChanges());\n\n        SCMTrigger t \u003d new SCMTrigger(\"@daily\", true);\n        t.start(proj, true);\n        proj.addTrigger(t);\n\n        t.new Runner().run();\n\n        /*\n         * Assert that the log contains the correct message.\n         */\n        HtmlPage log \u003d j.createWebClient().getPage(proj, \"scmPollLog\");\n        String logastext \u003d log.asNormalizedText();\n        assertThat(logastext, containsString(\"(\" + AbstractProject.WorkspaceOfflineReason.all_suitable_nodes_are_offline.name() + \")\"));\n\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testRestrictedLabelOnSlaveYesQueue:void()","methodSource":"@Test\n    public void testRestrictedLabelOnSlaveYesQueue() throws Exception {\n        FreeStyleProject proj \u003d j.createFreeStyleProject(\"JENKINS-21394-yesqueue\");\n        RequiresWorkspaceSCM requiresWorkspaceScm \u003d new RequiresWorkspaceSCM(true);\n        proj.setScm(requiresWorkspaceScm);\n        j.jenkins.setNumExecutors(0);\n\n        /*\n         * We have a cloud\n         */\n        DummyCloudImpl2 c2 \u003d new DummyCloudImpl2(j, 0);\n        c2.label \u003d new LabelAtom(\"test-cloud-label\");\n        j.jenkins.clouds.add(c2);\n        proj.setAssignedLabel(c2.label);\n\n        SCMTrigger t \u003d new SCMTrigger(\"@daily\", true);\n        t.start(proj, true);\n        proj.addTrigger(t);\n        t.new Runner().run();\n\n        Thread.sleep(1000);\n        //The job should be in queue\n        assertEquals(1, j.jenkins.getQueue().getItems().length);\n        assertTrue(j.jenkins.getQueue().cancel(proj));\n    }"},{"className":"hudson.model.ProjectTest","methodSignature":"hudson.model.ProjectTest.testMasterJobPutInQueue:void()","methodSource":"@Issue(\"JENKINS-22750\")\n    @Test\n    public void testMasterJobPutInQueue() throws Exception {\n        FreeStyleProject proj \u003d j.createFreeStyleProject(\"JENKINS-21394-yes-master-queue\");\n        RequiresWorkspaceSCM requiresWorkspaceScm \u003d new RequiresWorkspaceSCM(true);\n        proj.setAssignedLabel(null);\n        proj.setScm(requiresWorkspaceScm);\n        j.jenkins.setNumExecutors(1);\n        proj.setScm(requiresWorkspaceScm);\n\n        //First build is not important\n        j.buildAndAssertSuccess(proj);\n\n        SCMTrigger t \u003d new SCMTrigger(\"@daily\", true);\n        t.start(proj, true);\n        proj.addTrigger(t);\n        t.new Runner().run();\n\n\n        assertEquals(1, j.jenkins.getQueue().getItems().length);\n        assertTrue(j.jenkins.getQueue().cancel(proj));\n    }","advisory":"JENKINS-22750"},{"className":"hudson.model.queue.BuildKeepsRunningWhenFaultySubTasksTest","methodSignature":"hudson.model.queue.BuildKeepsRunningWhenFaultySubTasksTest.buildFinishesWhenSubTaskFails:void()","methodSource":"@Ignore(\"Too flaky; sometimes the build fails with java.util.concurrent.ExecutionException: java.lang.InterruptedException\\n\" +\n            \"\\tat hudson.remoting.AsyncFutureImpl.get(AsyncFutureImpl.java:80)\\n\" +\n            \"\\tat org.jvnet.hudson.test.JenkinsRule.assertBuildStatus(JenkinsRule.java:1484)\\n\" +\n            \"\\tat org.jvnet.hudson.test.JenkinsRule.assertBuildStatusSuccess(JenkinsRule.java:1512)\\n\" +\n            \"\\tat org.jvnet.hudson.test.JenkinsRule.buildAndAssertSuccess(JenkinsRule.java:1539)\\n\" +\n            \"\\tat hudson.model.queue.BuildKeepsRunningWhenFaultySubTasksTest.buildFinishesWhenSubTaskFails(BuildKeepsRunningWhenFaultySubTasksTest.java:39)\\n\" +\n            \"\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\\n\" +\n            \"\\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\\n\" +\n            \"\\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\\n\" +\n            \"\\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\\n\" +\n            \"\\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\\n\" +\n            \"\\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\\n\" +\n            \"\\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\\n\" +\n            \"\\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\\n\" +\n            \"\\tat org.jvnet.hudson.test.JenkinsRule$1.evaluate(JenkinsRule.java:618)\\n\" +\n            \"\\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:299)\\n\" +\n            \"\\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:293)\\n\" +\n            \"\\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\\n\" +\n            \"\\tat java.base/java.lang.Thread.run(Thread.java:833)\\n\" +\n            \"Caused by: java.lang.InterruptedException\\n\" +\n            \"\\tat hudson.model.queue.Latch.check(Latch.java:104)\\n\" +\n            \"\\tat hudson.model.queue.Latch.synchronize(Latch.java:83)\\n\" +\n            \"\\tat hudson.model.queue.WorkUnitContext.synchronizeStart(WorkUnitContext.java:132)\\n\" +\n            \"\\tat hudson.model.Executor.run(Executor.java:408)\\n\" +\n            \"Caused by: hudson.AbortException\\n\" +\n            \"\\tat hudson.model.queue.Latch.abort(Latch.java:58)\\n\" +\n            \"\\tat hudson.model.queue.WorkUnitContext.abort(WorkUnitContext.java:204)\\n\" +\n            \"\\tat hudson.model.Executor.finish1(Executor.java:492)\\n\" +\n            \"\\tat hudson.model.Executor.run(Executor.java:471)\\n\" +\n            \"Caused by: java.lang.ArrayIndexOutOfBoundsException: My unexpected exception\\n\" +\n            \"\\tat hudson.model.queue.BuildKeepsRunningWhenFaultySubTasksTest$FailingSubTaskContributor$1$1.run(BuildKeepsRunningWhenFaultySubTasksTest.java:61)\\n\" +\n            \"\\tat hudson.model.ResourceController.execute(ResourceController.java:107)\\n\" +\n            \"\\tat hudson.model.Executor.run(Executor.java:449)\")\n    @Test\n    @Issue(\"JENKINS-59793\")\n    public void buildFinishesWhenSubTaskFails() throws Exception {\n        FreeStyleProject p \u003d j.createProject(FreeStyleProject.class);\n\n        // We don\u0027t get stalled waiting the finalization of the job\n        j.buildAndAssertSuccess(p);\n        assertThat(logging.getMessages(), hasItem(\"Executor threw an exception\"));\n    }","advisory":"JENKINS-59793"},{"className":"hudson.model.queue.LoadPredictorTest","methodSignature":"hudson.model.queue.LoadPredictorTest.test1:void()","methodSource":"@Test\n    public void test1() throws Exception {\n        Task t \u003d mock(Task.class);\n        when(t.getEstimatedDuration()).thenReturn(10000L);\n        when(t.getSubTasks()).thenReturn((Collection) List.of(t));\n\n        Computer c \u003d createMockComputer(1);\n\n        JobOffer o \u003d createMockOffer(c.getExecutors().get(0));\n\n        MappingWorksheet mw \u003d new MappingWorksheet(wrap(t), List.of(o));\n\n        // the test load predictor should have pushed down the executor count to 0\n        assertTrue(mw.executors.isEmpty());\n        assertEquals(1, mw.works.size());\n    }"},{"className":"hudson.model.queue.MaintainCanTakeStrengtheningTest","methodSignature":"hudson.model.queue.MaintainCanTakeStrengtheningTest.testExceptionOnNodeProperty:void()","methodSource":"@Issue(\"JENKINS-59886\")\n    @Test\n    public void testExceptionOnNodeProperty() throws Exception {\n        // A node throwing the exception because of the canTake method of the attached FaultyNodeProperty\n        DumbSlave faultyAgent \u003d r.createOnlineSlave(Label.get(\"faulty\"));\n        faultyAgent.getNodeProperties().add(new FaultyNodeProperty());\n\n        // A good agent\n        r.createOnlineSlave(Label.get(\"good\"));\n\n        // Only the good ones will be run and the latest doesn\u0027t get hung because of the second\n        FreeStyleBuild good1 \u003d scheduleBuild(\"good1\", \"good\").waitForStart();\n        scheduleBuild(\"theFaultyOne\", \"faulty\");\n        FreeStyleBuild good2 \u003d scheduleBuild(\"good2\", \"good\").waitForStart();\n\n        // The faulty one is the only one in the queue\n        assertThat(r.getInstance().getQueue().getBuildableItems().size(), equalTo(1));\n        assertThat(r.getInstance().getQueue().getBuildableItems().get(0).task.getName(), equalTo(\"theFaultyOne\"));\n\n        // The new error is shown in the logs\n        assertThat(logging.getMessages(), hasItem(String.format(\"Exception evaluating if the node \u0027%s\u0027 can take the task \u0027%s\u0027\", faultyAgent.getDisplayName(), \"theFaultyOne\")));\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"theFaultyOne\", FreeStyleProject.class)));\n\n        // Tear down\n        r.assertBuildStatusSuccess(r.waitForCompletion(good1));\n        r.assertBuildStatusSuccess(r.waitForCompletion(good2));\n    }","advisory":"JENKINS-59886"},{"className":"hudson.model.queue.QueueTaskDispatcherTest","methodSignature":"hudson.model.queue.QueueTaskDispatcherTest.canRunBlockageIsDisplayed:void()","methodSource":"@Test\n    public void canRunBlockageIsDisplayed() throws Exception {\n        FreeStyleProject project \u003d r.createFreeStyleProject();\n        r.jenkins.getQueue().schedule(project, 0);\n\n        r.getInstance().getQueue().maintain();\n\n        Item item \u003d r.jenkins.getQueue().getItem(project);\n\n        assertTrue(\"Not blocked\", item.isBlocked());\n        assertEquals(\"Expected CauseOfBlockage to be returned\", \"blocked by canRun\", item.getWhy());\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(project));\n    }"},{"className":"hudson.model.queue.QueueTaskDispatcherTest","methodSignature":"hudson.model.queue.QueueTaskDispatcherTest.canTakeBlockageIsDisplayed:void()","methodSource":"@Issue(\"JENKINS-38514\")\n    @Test\n    public void canTakeBlockageIsDisplayed() throws Exception {\n        FreeStyleProject project \u003d r.createFreeStyleProject();\n\n        r.jenkins.getQueue().schedule(project, 0);\n        r.getInstance().getQueue().maintain();\n\n        Queue.Item item \u003d r.jenkins.getQueue().getItem(project);\n        assertNotNull(item);\n\n        CauseOfBlockage cob \u003d item.getCauseOfBlockage();\n        assertNotNull(cob);\n        assertThat(cob.getShortDescription(), containsString(\"blocked by canTake\"));\n\n        StringWriter w \u003d new StringWriter();\n        TaskListener l \u003d new StreamTaskListener(w);\n        cob.print(l);\n        l.getLogger().flush();\n        assertThat(w.toString(), containsString(\"blocked by canTake\"));\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(project));\n    }","advisory":"JENKINS-38514"},{"className":"hudson.model.queue.WideExecutionTest","methodSignature":"hudson.model.queue.WideExecutionTest.run:void()","methodSource":"@Test\n    public void run() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        assertEquals(\"I was here\", b.getDescription());\n    }"},{"className":"hudson.model.QueueCrashTest","methodSignature":"hudson.model.QueueCrashTest.persistQueueOnCrash:void()","methodSource":"@Test\n    public void persistQueueOnCrash() {\n        rr.thenWithHardShutdown(j -\u003e {\n            // Speed up the test run by shortening the periodic save interval from 60 seconds to 5\n            // seconds.\n            Queue.Saver.DELAY_SECONDS \u003d 5;\n\n            scheduleSomeBuild(j);\n            assertBuildIsScheduled(j);\n\n            // Wait for the periodic save to complete.\n            ExtensionList.lookupSingleton(Queue.Saver.class)\n                    .getNextSave()\n                    .get(30, TimeUnit.SECONDS);\n\n            // Ensure the periodic save process saved the queue, since the cleanup process will not\n            // run on a crash.\n            assertTrue(new File(j.jenkins.getRootDir(), \"queue.xml\").exists());\n        });\n        rr.then(QueueCrashTest::assertBuildIsScheduled);\n    }"},{"className":"hudson.model.QueueCrashTest","methodSignature":"hudson.model.QueueCrashTest.doNotPersistQueueOnCrashBeforeSave:void()","methodSource":"@Test\n    public void doNotPersistQueueOnCrashBeforeSave() {\n        rr.thenWithHardShutdown(j -\u003e {\n            // Avoid periodic save in order to simulate the scenario of a crash before initial save.\n            Queue.Saver.DELAY_SECONDS \u003d (int) TimeUnit.DAYS.toSeconds(1);\n\n            scheduleSomeBuild(j);\n            assertBuildIsScheduled(j);\n\n            // Ensure the queue has not been saved in order to test that a crash in this scenario\n            // results in the queue being lost.\n            assertFalse(new File(j.jenkins.getRootDir(), \"queue.xml\").exists());\n        });\n        rr.then(QueueCrashTest::assertBuildIsNotScheduled);\n    }"},{"className":"hudson.model.QueueRestartTest","methodSignature":"hudson.model.QueueRestartTest.persistQueueOnRestart:void()","methodSource":"@Ignore(\"Pending JENKINS-68319 sometimes fails, in CI \u0026 locally\")\n    @Issue(\"JENKINS-68319\")\n    @LocalData(\"quietDown\")\n    @Test\n    public void persistQueueOnRestart() throws Throwable {\n        // Avoid periodic save in order to test that the cleanup process saves the queue.\n        rr.javaOptions(\"-Dhudson.model.Queue.Saver.DELAY_SECONDS\u003d\" + TimeUnit.DAYS.toSeconds(1));\n\n        rr.then(QueueRestartTest::queueBuild);\n        rr.then(QueueRestartTest::assertBuildFinishes);\n    }","advisory":"JENKINS-68319"},{"className":"hudson.model.QueueRestartTest","methodSignature":"hudson.model.QueueRestartTest.persistQueueOnConsecutiveRestarts:void()","methodSource":"@Ignore(\"Pending JENKINS-68319 sometimes fails, in CI \u0026 locally\")\n    @Issue(\"JENKINS-68319\")\n    @LocalData(\"quietDown\")\n    @Test\n    public void persistQueueOnConsecutiveRestarts() throws Throwable {\n        // Avoid periodic save in order to test that the cleanup process saves the queue.\n        rr.javaOptions(\"-Dhudson.model.Queue.Saver.DELAY_SECONDS\u003d\" + TimeUnit.DAYS.toSeconds(1));\n\n        rr.then(QueueRestartTest::queueBuild);\n        rr.then(QueueRestartTest::assertBuildIsScheduled);\n        rr.then(QueueRestartTest::assertBuildFinishes);\n    }","advisory":"JENKINS-68319"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.persistence:void()","methodSource":"@Test public void persistence() throws Exception {\n        Queue q \u003d r.jenkins.getQueue();\n\n        // prevent execution to push stuff into the queue\n        r.jenkins.setNumExecutors(0);\n\n        FreeStyleProject testProject \u003d r.createFreeStyleProject(\"test\");\n        assertNotNull(testProject.scheduleBuild2(0, new UserIdCause()));\n        q.save();\n\n        System.out.println(Files.readString(r.jenkins.getRootDir().toPath().resolve(\"queue.xml\"), StandardCharsets.UTF_8));\n\n        assertEquals(1, q.getItems().length);\n        q.clear();\n        assertEquals(0, q.getItems().length);\n\n        // load the contents back\n        q.load();\n        assertEquals(1, q.getItems().length);\n\n        // did it bind back to the same object?\n        assertSame(q.getItems()[0].task, testProject);\n\n        // Clear the queue\n        assertTrue(q.cancel(testProject));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.recover_from_legacy_list:void()","methodSource":"@LocalData\n    @Test\n    public void recover_from_legacy_list() {\n        Queue q \u003d r.jenkins.getQueue();\n\n        // loaded the legacy queue.xml from test LocalData located in\n        // resources/hudson/model/QueueTest/recover_from_legacy_list.zip\n        assertEquals(1, q.getItems().length);\n\n        // The current counter should be the id from the item brought back\n        // from the persisted queue.xml.\n        assertEquals(3, Queue.WaitingItem.getCurrentCounterValue());\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"test\", FreeStyleProject.class)));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.persistence2:void()","methodSource":"@Test public void persistence2() throws Exception {\n        Queue q \u003d r.jenkins.getQueue();\n\n        resetQueueState();\n        assertEquals(0, Queue.WaitingItem.getCurrentCounterValue());\n\n        // prevent execution to push stuff into the queue\n        r.jenkins.setNumExecutors(0);\n\n        FreeStyleProject testProject \u003d r.createFreeStyleProject(\"test\");\n        assertNotNull(testProject.scheduleBuild2(0, new UserIdCause()));\n        q.save();\n\n        System.out.println(Files.readString(r.jenkins.getRootDir().toPath().resolve(\"queue.xml\"), StandardCharsets.UTF_8));\n\n        assertEquals(1, q.getItems().length);\n        q.clear();\n        assertEquals(0, q.getItems().length);\n\n        // delete the project before loading the queue back\n        testProject.delete();\n        q.load();\n        assertEquals(0, q.getItems().length);\n\n        // The counter state should be maintained.\n        assertEquals(1, Queue.WaitingItem.getCurrentCounterValue());\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.queue_id_to_run_mapping:void()","methodSource":"@Test\n    public void queue_id_to_run_mapping() throws Exception {\n        FreeStyleProject testProject \u003d r.createFreeStyleProject(\"test\");\n        FreeStyleBuild build \u003d r.buildAndAssertSuccess(testProject);\n        Assert.assertNotEquals(Run.QUEUE_ID_UNKNOWN, build.getQueueId());\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.persistenceBlockedItem:void()","methodSource":"@Test public void persistenceBlockedItem() throws Exception {\n        Queue q \u003d r.jenkins.getQueue();\n        final SequenceLock seq \u003d new SequenceLock();\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                seq.phase(0);   // first, we let one build going\n\n                seq.phase(2);\n                return true;\n            }\n        });\n\n        FreeStyleBuild b1 \u003d p.scheduleBuild2(0).waitForStart();\n        assertNotNull(b1);\n        seq.phase(1);   // and make sure we have one build under way\n\n        // get another going\n        Future\u003cFreeStyleBuild\u003e b2 \u003d p.scheduleBuild2(0);\n        assertNotNull(b2);\n\n        q.scheduleMaintenance().get();\n        Queue.Item[] items \u003d q.getItems();\n        assertEquals(1, items.length);\n        assertThat(items[0], instanceOf(BlockedItem.class));\n\n        q.save();\n\n        assertTrue(q.cancel(items[0]));\n        seq.done();\n        r.assertBuildStatusSuccess(r.waitForCompletion(b1));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.fileItemPersistence:void()","methodSource":"@Test public void fileItemPersistence() throws Exception {\n        // TODO: write a synchronous connector?\n        byte[] testData \u003d new byte[1024];\n        for (int i \u003d 0; i \u003c testData.length; i++)  testData[i] \u003d (byte) i;\n\n\n        Server server \u003d new Server();\n        ServerConnector connector \u003d new ServerConnector(server);\n        server.addConnector(connector);\n\n        ServletHandler handler \u003d new ServletHandler();\n        handler.addServletWithMapping(new ServletHolder(new FileItemPersistenceTestServlet()), \"/\");\n        server.setHandler(handler);\n\n        server.start();\n\n        try {\n            JenkinsRule.WebClient wc \u003d r.createWebClient();\n            @SuppressWarnings(\"deprecation\")\n            HtmlPage p \u003d (HtmlPage) wc.getPage(\"http://localhost:\" + connector.getLocalPort() + \u0027/\u0027);\n            HtmlForm f \u003d p.getFormByName(\"main\");\n            HtmlFileInput input \u003d f.getInputByName(\"test\");\n            input.setData(testData);\n            HtmlFormUtil.submit(f);\n        } finally {\n            server.stop();\n        }\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.foldableCauseAction:void()","methodSource":"@Issue(\"JENKINS-33467\")\n    @Test public void foldableCauseAction() throws Exception {\n        final OneShotEvent buildStarted \u003d new OneShotEvent();\n        final OneShotEvent buildShouldComplete \u003d new OneShotEvent();\n\n        r.setQuietPeriod(0);\n        FreeStyleProject project \u003d r.createFreeStyleProject();\n        // Make build sleep a while so it blocks new builds\n        project.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                buildStarted.signal();\n                buildShouldComplete.block();\n                return true;\n            }\n        });\n\n        // Start one build to block others\n        project.scheduleBuild2(0, new UserIdCause()).waitForStart();\n        buildStarted.block(); // wait for the build to really start\n\n        // Schedule a new build, and trigger it many ways while it sits in queue\n        final Future\u003cFreeStyleBuild\u003e fb \u003d project.scheduleBuild2(0, new UserIdCause());\n        assertNotNull(fb);\n        assertNotNull(project.scheduleBuild2(0, new SCMTriggerCause(\"\")));\n        assertNotNull(project.scheduleBuild2(0, new UserIdCause()));\n        assertNotNull(project.scheduleBuild2(0, new TimerTriggerCause()));\n        assertNotNull(project.scheduleBuild2(0, new RemoteCause(\"1.2.3.4\", \"test\")));\n        assertNotNull(project.scheduleBuild2(0, new RemoteCause(\"4.3.2.1\", \"test\")));\n        assertNotNull(project.scheduleBuild2(0, new SCMTriggerCause(\"\")));\n        assertNotNull(project.scheduleBuild2(0, new RemoteCause(\"1.2.3.4\", \"test\")));\n        assertNotNull(project.scheduleBuild2(0, new RemoteCause(\"1.2.3.4\", \"foo\")));\n        assertNotNull(project.scheduleBuild2(0, new SCMTriggerCause(\"\")));\n        assertNotNull(project.scheduleBuild2(0, new TimerTriggerCause()));\n\n        // Wait for 2nd build to finish\n        buildShouldComplete.signal();\n        FreeStyleBuild build \u003d fb.get();\n\n        // Make sure proper folding happened.\n        CauseAction ca \u003d build.getAction(CauseAction.class);\n        assertNotNull(ca);\n        StringBuilder causes \u003d new StringBuilder();\n        for (Cause c : ca.getCauses()) causes.append(c.getShortDescription()).append(\"\\n\");\n        assertEquals(\"Build causes should have all items, even duplicates\",\n                \"Started by user SYSTEM\\nStarted by user SYSTEM\\n\"\n                + \"Started by an SCM change\\nStarted by an SCM change\\nStarted by an SCM change\\n\"\n                + \"Started by timer\\nStarted by timer\\n\"\n                + \"Started by remote host 1.2.3.4 with note: test\\n\"\n                + \"Started by remote host 1.2.3.4 with note: test\\n\"\n                + \"Started by remote host 4.3.2.1 with note: test\\n\"\n                + \"Started by remote host 1.2.3.4 with note: foo\\n\",\n                causes.toString());\n\n        // View for build should group duplicates\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        String buildPage \u003d wc.getPage(build, \"\").asNormalizedText();\n        assertTrue(\"Build page should combine duplicates and show counts: \" + buildPage,\n                   buildPage.contains(\"Started by user SYSTEM (2 times)\\n\"\n                        + \"Started by an SCM change (3 times)\\n\"\n                        + \"Started by timer (2 times)\\n\"\n                        + \"Started by remote host 1.2.3.4 with note: test (2 times)\\n\"\n                        + \"Started by remote host 4.3.2.1 with note: test\\n\"\n                        + \"Started by remote host 1.2.3.4 with note: foo\"));\n        System.out.println(new XmlFile(new File(build.getRootDir(), \"build.xml\")).asString());\n    }","advisory":"JENKINS-33467"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.flyweightTasks:void()","methodSource":"@Issue(\"JENKINS-8790\")\n    @Test public void flyweightTasks() throws Exception {\n        MatrixProject m \u003d r.jenkins.createProject(MatrixProject.class, \"p\");\n        m.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"FOO\", \"value\")\n        ));\n        if (Functions.isWindows()) {\n            m.getBuildersList().add(new BatchFile(\"ping -n 3 127.0.0.1 \u003enul\"));\n        } else {\n            m.getBuildersList().add(new Shell(\"sleep 3\"));\n        }\n        m.setAxes(new AxisList(new TextAxis(\"DoesntMatter\", \"aaa\", \"bbb\")));\n\n        List\u003cFuture\u003cMatrixBuild\u003e\u003e futures \u003d new ArrayList\u003c\u003e();\n\n        for (int i \u003d 0; i \u003c 3; i++) {\n            futures.add(m.scheduleBuild2(0, new UserIdCause(), new ParametersAction(new StringParameterValue(\"FOO\", \"value\" + i))));\n        }\n\n        for (Future\u003cMatrixBuild\u003e f : futures) {\n            r.assertBuildStatusSuccess(f);\n        }\n    }","advisory":"JENKINS-8790"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.flyweightTasksBlockedByShutdown:void()","methodSource":"@Issue(\"JENKINS-10944\")\n    @Test public void flyweightTasksBlockedByShutdown() throws Exception {\n        r.jenkins.doQuietDown(true, 0, null, false);\n        AtomicInteger cnt \u003d new AtomicInteger();\n        TestFlyweightTask task \u003d new TestFlyweightTask(cnt, null);\n        assertTrue(Queue.isBlockedByShutdown(task));\n        r.jenkins.getQueue().schedule2(task, 0);\n        r.jenkins.getQueue().maintain();\n        r.jenkins.doCancelQuietDown();\n        assertFalse(Queue.isBlockedByShutdown(task));\n        r.waitUntilNoActivity();\n        assertEquals(1, cnt.get());\n        assertNotNull(task.exec);\n        assertThat(task.exec, instanceOf(OneOffExecutor.class));\n    }","advisory":"JENKINS-10944"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.flyweightTasksBlockedBySlave:void()","methodSource":"@Issue(\"JENKINS-24519\")\n    @Test public void flyweightTasksBlockedBySlave() throws Exception {\n        Label label \u003d Label.get(\"myslave\");\n        AtomicInteger cnt \u003d new AtomicInteger();\n        TestFlyweightTask task \u003d new TestFlyweightTask(cnt, label);\n        r.jenkins.getQueue().schedule2(task, 0);\n        r.jenkins.getQueue().maintain();\n        r.createSlave(label);\n        r.waitUntilNoActivity();\n        assertEquals(1, cnt.get());\n        assertNotNull(task.exec);\n        assertThat(task.exec, instanceOf(OneOffExecutor.class));\n    }","advisory":"JENKINS-24519"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.flyweightTasksUnwantedConcurrency:void()","methodSource":"@Issue(\"JENKINS-41127\")\n    @Test public void flyweightTasksUnwantedConcurrency() {\n        Label label \u003d r.jenkins.getSelfLabel();\n        AtomicInteger cnt \u003d new AtomicInteger();\n        TestFlyweightTask task1 \u003d new TestFlyweightTask(cnt, label);\n        TestFlyweightTask task2 \u003d new TestFlyweightTask(cnt, label);\n        assertFalse(task1.isConcurrentBuild());\n        assertFalse(task2.isConcurrentBuild());\n        // We need to call Queue#maintain without any interleaving Queue modification to reproduce the issue.\n        Queue.withLock(() -\u003e {\n            r.jenkins.getQueue().schedule2(task1, 0);\n            r.jenkins.getQueue().maintain();\n            Queue.Item item1 \u003d r.jenkins.getQueue().getItem(task1);\n            assertThat(r.jenkins.getQueue().getPendingItems(), contains(item1));\n            r.jenkins.getQueue().schedule2(task2, 0);\n            r.jenkins.getQueue().maintain();\n            Queue.Item item2 \u003d r.jenkins.getQueue().getItem(task2);\n            // Before the fix, item1 would no longer be present in the pending items (but would\n            // still be assigned to a live executor), and item2 would not be blocked, which would\n            // allow the tasks to execute concurrently.\n            assertThat(r.jenkins.getQueue().getPendingItems(), contains(item1));\n            assertTrue(item2.isBlocked());\n        });\n    }","advisory":"JENKINS-41127"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.inQueueTaskLookupByAPI:void()","methodSource":"@Issue(\"JENKINS-27256\")\n    @Test public void inQueueTaskLookupByAPI() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        Label label \u003d Label.get(\"unknown-slave\");\n\n        // Give the project an \"unknown-slave\" label, forcing it to\n        // stay in the queue after we schedule it, allowing us to query it.\n        p.setAssignedLabel(label);\n        p.scheduleBuild2(0);\n\n        JenkinsRule.WebClient webclient \u003d r.createWebClient();\n\n        XmlPage queueItems \u003d webclient.goToXml(\"queue/api/xml\");\n        String queueTaskId \u003d queueItems.getXmlDocument().getElementsByTagName(\"id\").item(0).getTextContent();\n        assertNotNull(queueTaskId);\n        XmlPage queueItem \u003d webclient.goToXml(\"queue/item/\" + queueTaskId + \"/api/xml\");\n        assertNotNull(queueItem);\n        String tagName \u003d queueItem.getDocumentElement().getTagName();\n        assertTrue(tagName.equals(\"blockedItem\") || tagName.equals(\"buildableItem\"));\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(p));\n    }","advisory":"JENKINS-27256"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.upstreamDownstreamCycle:void()","methodSource":"@Issue(\"JENKINS-28926\")\n    @Test\n    public void upstreamDownstreamCycle() throws Exception {\n        FreeStyleProject trigger \u003d r.createFreeStyleProject();\n        FreeStyleProject chain1 \u003d r.createFreeStyleProject();\n        FreeStyleProject chain2a \u003d r.createFreeStyleProject();\n        FreeStyleProject chain2b \u003d r.createFreeStyleProject();\n        FreeStyleProject chain3 \u003d r.createFreeStyleProject();\n        trigger.getPublishersList().add(new BuildTrigger(String.format(\"%s, %s, %s, %s\", chain1.getName(), chain2a.getName(), chain2b.getName(), chain3.getName()), true));\n        trigger.setQuietPeriod(0);\n        chain1.setQuietPeriod(1);\n        chain2a.setQuietPeriod(1);\n        chain2b.setQuietPeriod(1);\n        chain3.setQuietPeriod(1);\n        chain1.getPublishersList().add(new BuildTrigger(String.format(\"%s, %s\", chain2a.getName(), chain2b.getName()), true));\n        chain2a.getPublishersList().add(new BuildTrigger(chain3.getName(), true));\n        chain2b.getPublishersList().add(new BuildTrigger(chain3.getName(), true));\n        chain1.setBlockBuildWhenDownstreamBuilding(true);\n        chain2a.setBlockBuildWhenDownstreamBuilding(true);\n        chain2b.setBlockBuildWhenDownstreamBuilding(true);\n        chain3.setBlockBuildWhenUpstreamBuilding(true);\n        r.jenkins.rebuildDependencyGraph();\n        r.buildAndAssertSuccess(trigger);\n        // the trigger should build immediately and schedule the cycle\n        r.waitUntilNoActivity();\n        final Queue queue \u003d r.getInstance().getQueue();\n        assertThat(\"The cycle should have been defanged and chain1 executed\", queue.getItem(chain1), nullValue());\n        assertThat(\"The cycle should have been defanged and chain2a executed\", queue.getItem(chain2a), nullValue());\n        assertThat(\"The cycle should have been defanged and chain2b executed\", queue.getItem(chain2b), nullValue());\n        assertThat(\"The cycle should have been defanged and chain3 executed\", queue.getItem(chain3), nullValue());\n    }","advisory":"JENKINS-28926"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.upstreamProjectsInQueueBlock:void()","methodSource":"@Issue(\"JENKINS-68780\")\n    @Test\n    public void upstreamProjectsInQueueBlock() throws Exception {\n\n       FreeStyleProject a \u003d r.createFreeStyleProject(BlockingQueueTaskDispatcher.NAME_OF_BLOCKED_PROJECT);\n       FreeStyleProject b \u003d r.createFreeStyleProject();\n       a.getPublishersList().add(new BuildTrigger(b.getName(), true));\n       b.setBlockBuildWhenUpstreamBuilding(true);\n\n       r.jenkins.rebuildDependencyGraph();\n\n       a.scheduleBuild(0, new UserIdCause());\n\n       Queue q \u003d r.jenkins.getQueue();\n\n       waitUntilWaitingListIsEmpty(q);\n\n       b.scheduleBuild(0, new UserIdCause());\n\n       waitUntilWaitingListIsEmpty(q);\n\n       // This call is necessary because the queue blocks projects\n       // at first only temporarily. By calling the maintain method\n       // all temporarily blocked projects either become buildable or\n       // become permanently blocked\n       q.scheduleMaintenance().get();\n\n       assertEquals(\"Queue should contain two blocked items but didn\u0027t.\", 2, q.getBlockedItems().size());\n\n       //Ensure orderly shutdown\n       q.clear();\n       r.waitUntilNoActivity();\n    }","advisory":"JENKINS-68780"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.downstreamProjectsInQueueBlock:void()","methodSource":"@Issue(\"JENKINS-68780\")\n    @Test\n    public void downstreamProjectsInQueueBlock() throws Exception {\n\n       FreeStyleProject a \u003d r.createFreeStyleProject();\n       FreeStyleProject b \u003d r.createFreeStyleProject(BlockingQueueTaskDispatcher.NAME_OF_BLOCKED_PROJECT);\n       a.getPublishersList().add(new BuildTrigger(b.getName(), true));\n       a.setBlockBuildWhenDownstreamBuilding(true);\n\n       r.jenkins.rebuildDependencyGraph();\n\n       b.scheduleBuild(0, new UserIdCause());\n\n       Queue q \u003d r.jenkins.getQueue();\n\n       waitUntilWaitingListIsEmpty(q);\n\n       a.scheduleBuild(0, new UserIdCause());\n\n       waitUntilWaitingListIsEmpty(q);\n\n       // This call is necessary because the queue blocks projects\n       // at first only temporarily. By calling the maintain method\n       // all temporarily blocked projects either become buildable or\n       // become permanently blocked\n       q.scheduleMaintenance().get();\n\n       assertEquals(\"Queue should contain two blocked items but didn\u0027t.\", 2, q.getBlockedItems().size());\n\n       //Ensure orderly shutdown\n       q.clear();\n       r.waitUntilNoActivity();\n    }","advisory":"JENKINS-68780"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.handleCauseOfBlockageThatIsNull:void()","methodSource":"@Issue(\"JENKINS-69850\")\n    @Test\n    public void handleCauseOfBlockageThatIsNull() throws Exception {\n\n        FreeStyleProject a \u003d r.createFreeStyleProject(BlockingQueueTaskDispatcher.NAME_OF_BLOCKED_PROJECT);\n        FreeStyleProject b \u003d r.createFreeStyleProject(BlockingQueueTaskDispatcher.NAME_OF_ANOTHER_BLOCKED_PROJECT);\n        a.getPublishersList().add(new BuildTrigger(b.getName(), true));\n        a.setBlockBuildWhenDownstreamBuilding(true);\n        b.setBlockBuildWhenUpstreamBuilding(true);\n        r.jenkins.rebuildDependencyGraph();\n\n        Queue q \u003d r.jenkins.getQueue();\n        Queue.withLock(() -\u003e {\n            a.scheduleBuild(0, new UserIdCause());\n            b.scheduleBuild(0, new UserIdCause());\n            // Move both projects from pending to blocked\n            q.maintain();\n\n            q.save();\n            // Loading blocked items sets the CauseOfBlockage to null\n            q.load();\n            // Before JENKINS-69850 was fixed the null CauseOfBlockage caused a stack overflow\n            q.maintain();\n        });\n\n        //Ensure orderly shutdown\n        q.clear();\n        r.waitUntilNoActivity();\n    }","advisory":"JENKINS-69850"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.taskEquality:void()","methodSource":"@Test public void taskEquality() throws Exception {\n        AtomicInteger cnt \u003d new AtomicInteger();\n        TestTask originalTask \u003d new TestTask(cnt, true);\n        ScheduleResult result \u003d r.jenkins.getQueue().schedule2(originalTask, 0);\n        assertTrue(result.isCreated());\n        WaitingItem item \u003d result.getCreateItem();\n        assertFalse(r.jenkins.getQueue().schedule2(new TestTask(cnt), 0).isCreated());\n        originalTask.isBlocked \u003d false;\n        item.getFuture().get();\n        r.waitUntilNoActivity();\n        assertEquals(1, cnt.get());\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.waitForStart:void()","methodSource":"@Test public void waitForStart() throws Exception {\n        final OneShotEvent ev \u003d new OneShotEvent();\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                ev.block();\n                return true;\n            }\n        });\n\n        QueueTaskFuture\u003cFreeStyleBuild\u003e v \u003d p.scheduleBuild2(0);\n        FreeStyleBuild b \u003d v.waitForStart();\n        assertEquals(1, b.getNumber());\n        assertTrue(b.isBuilding());\n        assertSame(p, b.getProject());\n\n        ev.signal();    // let the build complete\n        FreeStyleBuild b2 \u003d r.assertBuildStatusSuccess(v);\n        assertSame(b, b2);\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.accessControl:void()","methodSource":"@Test public void accessControl() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator().authenticate(p.getFullName(), alice));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                assertEquals(alice, Jenkins.getAuthentication2());\n                return true;\n            }\n        });\n        r.buildAndAssertSuccess(p);\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.permissionSensitiveSlaveAllocations:void()","methodSource":"@Test public void permissionSensitiveSlaveAllocations() throws Exception {\n        r.jenkins.setNumExecutors(0); // restrict builds to those agents\n        DumbSlave s1 \u003d r.createSlave();\n        DumbSlave s2 \u003d r.createSlave();\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator().authenticate(p.getFullName(), alice));\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) {\n                assertEquals(alice, Jenkins.getAuthentication2());\n                return true;\n            }\n        });\n\n        final FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        final FreeStyleBuild b2 \u003d r.buildAndAssertSuccess(p);\n\n        // scheduling algorithm would prefer running the same job on the same node\n        // kutzi: \u0027prefer\u0027 !\u003d \u0027enforce\u0027, therefore disabled this assertion: assertSame(b1.getBuiltOn(),b2.getBuiltOn());\n\n        r.jenkins.setAuthorizationStrategy(new AliceCannotBuild(b1.getBuiltOnStr()));\n\n        // now that we prohibit alice to do a build on the same node, the build should run elsewhere\n        for (int i \u003d 0; i \u003c 3; i++) {\n            FreeStyleBuild b3 \u003d r.buildAndAssertSuccess(p);\n            assertNotSame(b3.getBuiltOnStr(), b1.getBuiltOnStr());\n        }\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.pendingsConsistenceAfterErrorDuringMaintain:void()","methodSource":"@Test public void pendingsConsistenceAfterErrorDuringMaintain() throws IOException, InterruptedException {\n        FreeStyleProject project1 \u003d r.createFreeStyleProject(\"project1\");\n        FreeStyleProject project2 \u003d r.createFreeStyleProject(\"project2\");\n        TopLevelItemDescriptor descriptor \u003d new TopLevelItemDescriptor(FreeStyleProject.class) {\n         @Override\n            public FreeStyleProject newInstance(ItemGroup parent, String name) {\n                return new FreeStyleProject(parent, name) {\n                     @Override\n                    public Label getAssignedLabel() {\n                        throw new IllegalArgumentException(\"Test exception\"); //cause dead of executor\n                    }\n\n                    @Override\n                     public void save(){\n                         //do not need save\n                     }\n            };\n        }\n        };\n        FreeStyleProject projectError \u003d (FreeStyleProject) r.jenkins.createProject(descriptor, \"throw-error\");\n        project1.setAssignedLabel(r.jenkins.getSelfLabel());\n        project2.setAssignedLabel(r.jenkins.getSelfLabel());\n        project1.getBuildersList().add(new Shell(\"sleep 2\"));\n        project1.scheduleBuild2(0);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e v \u003d project2.scheduleBuild2(0);\n        projectError.scheduleBuild2(0);\n        Executor e \u003d r.jenkins.toComputer().getExecutors().get(0);\n        Thread.sleep(2000);\n        while (project2.getLastBuild() \u003d\u003d null) {\n             if (!e.isAlive()) {\n                    break; // executor is dead due to exception\n             }\n             if (e.isIdle()) {\n                 assertTrue(\"Node went to idle before project had\" + project2.getDisplayName() + \" been started\", v.isDone());\n             }\n             Thread.sleep(1000);\n        }\n        if (project2.getLastBuild() \u003d\u003d null) {\n            Queue.getInstance().cancel(projectError); // cancel job which cause dead of executor\n            while (!e.isIdle()) { //executor should take project2 from queue\n                Thread.sleep(1000);\n            }\n            //project2 should not be in pendings\n            List\u003cQueue.BuildableItem\u003e items \u003d Queue.getInstance().getPendingItems();\n            for (Queue.BuildableItem item : items) {\n                assertNotEquals(\"Project \" + project2.getDisplayName() + \" stuck in pendings\", item.task.getName(), project2.getName());\n            }\n        }\n        for (var p : r.jenkins.allItems(FreeStyleProject.class)) {\n            for (var b : p.getBuilds()) {\n                r.waitForCompletion(b);\n                b.delete();\n                Logger.getLogger(QueueTest.class.getName()).info(() -\u003e \"Waited for \" + b);\n            }\n            p.delete();\n            Logger.getLogger(QueueTest.class.getName()).info(() -\u003e \"Cleaned up \" + p);\n        }\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.cancelInQueue:void()","methodSource":"@Test public void cancelInQueue() throws Exception {\n        // parepare an offline slave.\n        DumbSlave slave \u003d r.createOnlineSlave();\n        assertFalse(slave.toComputer().isOffline());\n        slave.toComputer().disconnect(null).get();\n        assertTrue(slave.toComputer().isOffline());\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setAssignedNode(slave);\n\n        QueueTaskFuture\u003cFreeStyleBuild\u003e f \u003d p.scheduleBuild2(0);\n        assertThrows(\"Should time out (as the agent is offline)\", TimeoutException.class, () -\u003e f.get(3, TimeUnit.SECONDS));\n\n        Queue.Item item \u003d Queue.getInstance().getItem(p);\n        assertNotNull(item);\n        Queue.getInstance().doCancelItem(item.getId());\n        assertNull(Queue.getInstance().getItem(p));\n\n        assertThrows(\"Should not get (as it is cancelled)\", CancellationException.class, () -\u003e f.get(10, TimeUnit.SECONDS));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.waitForStartAndCancelBeforeStart:void()","methodSource":"@Test public void waitForStartAndCancelBeforeStart() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n\n        QueueTaskFuture\u003cFreeStyleBuild\u003e f \u003d p.scheduleBuild2(30);\n        final Queue.Item item \u003d Queue.getInstance().getItem(p);\n        assertNotNull(item);\n\n        final ScheduledThreadPoolExecutor executor \u003d new ScheduledThreadPoolExecutor(1);\n        executor.schedule(() -\u003e {\n               try {\n                   Queue.getInstance().doCancelItem(item.getId());\n               } catch (IOException e) {\n                   throw new UncheckedIOException(e);\n               } catch (ServletException e) {\n                   throw new RuntimeException(e);\n               }\n        }, 2, TimeUnit.SECONDS);\n\n        assertThrows(CancellationException.class, f::waitForStart);\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.testBlockBuildWhenUpstreamBuildingLock:void()","methodSource":"@Ignore(\"TODO flakes in CI\")\n    @Issue(\"JENKINS-27871\")\n    @Test public void testBlockBuildWhenUpstreamBuildingLock() throws Exception {\n        final String prefix \u003d \"JENKINS-27871\";\n        r.getInstance().setNumExecutors(4);\n\n        final FreeStyleProject projectA \u003d r.createFreeStyleProject(prefix + \"A\");\n        projectA.getBuildersList().add(new SleepBuilder(5000));\n\n        final FreeStyleProject projectB \u003d r.createFreeStyleProject(prefix + \"B\");\n        projectB.getBuildersList().add(new SleepBuilder(10000));\n        projectB.setBlockBuildWhenUpstreamBuilding(true);\n\n        final FreeStyleProject projectC \u003d r.createFreeStyleProject(prefix + \"C\");\n        projectC.getBuildersList().add(new SleepBuilder(10000));\n        projectC.setBlockBuildWhenUpstreamBuilding(true);\n\n        projectA.getPublishersList().add(new BuildTrigger(List.of(projectB), Result.SUCCESS));\n        projectB.getPublishersList().add(new BuildTrigger(List.of(projectC), Result.SUCCESS));\n\n        final QueueTaskFuture\u003cFreeStyleBuild\u003e taskA \u003d projectA.scheduleBuild2(0, new TimerTriggerCause());\n        Thread.sleep(1000);\n        final QueueTaskFuture\u003cFreeStyleBuild\u003e taskB \u003d projectB.scheduleBuild2(0, new TimerTriggerCause());\n        final QueueTaskFuture\u003cFreeStyleBuild\u003e taskC \u003d projectC.scheduleBuild2(0, new TimerTriggerCause());\n\n        final FreeStyleBuild buildA \u003d taskA.get(60, TimeUnit.SECONDS);\n        final FreeStyleBuild buildB \u003d taskB.get(60, TimeUnit.SECONDS);\n        final FreeStyleBuild buildC \u003d taskC.get(60, TimeUnit.SECONDS);\n        long buildBEndTime \u003d buildB.getStartTimeInMillis() + buildB.getDuration();\n        assertTrue(\"Project B build should be finished before the build of project C starts. \" +\n                \"B finished at \" + buildBEndTime + \", C started at \" + buildC.getStartTimeInMillis(),\n                buildC.getStartTimeInMillis() \u003e\u003d buildBEndTime);\n    }","advisory":"JENKINS-27871"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.queueApiOutputShouldBeFilteredByUserPermission:void()","methodSource":"@Issue({\"SECURITY-186\", \"SECURITY-618\"})\n    @Test\n    public void queueApiOutputShouldBeFilteredByUserPermission() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        ProjectMatrixAuthorizationStrategy str \u003d new ProjectMatrixAuthorizationStrategy();\n        str.add(Jenkins.READ, \"bob\");\n        str.add(Jenkins.READ, \"alice\");\n        str.add(Jenkins.READ, \"james\");\n        r.jenkins.setAuthorizationStrategy(str);\n\n        FreeStyleProject project \u003d r.createFreeStyleProject(\"project\");\n\n        Map\u003cPermission, Set\u003cString\u003e\u003e permissions \u003d new HashMap\u003c\u003e();\n        permissions.put(Item.READ, Set.of(\"bob\"));\n        permissions.put(Item.DISCOVER, Set.of(\"james\"));\n        AuthorizationMatrixProperty prop1 \u003d new AuthorizationMatrixProperty(permissions);\n        project.addProperty(prop1);\n        project.getBuildersList().add(new SleepBuilder(10));\n        project.scheduleBuild2(0);\n\n        User alice \u003d User.getById(\"alice\", true);\n        User bob \u003d User.getById(\"bob\", true);\n        User james \u003d User.getById(\"james\", true);\n\n        JenkinsRule.WebClient webClient \u003d r.createWebClient();\n        webClient.withBasicApiToken(bob);\n        XmlPage p \u003d webClient.goToXml(\"queue/api/xml\");\n\n        //bob has permission on the project and will be able to see it in the queue together with information such as the URL and the name.\n        for (DomNode element : p.getFirstChild().getFirstChild().getChildNodes()) {\n            if (element.getNodeName().equals(\"task\")) {\n                for (DomNode child : ((DomElement) element).getChildNodes()) {\n                    if (child.getNodeName().equals(\"name\")) {\n                        assertEquals(\"project\", child.asNormalizedText());\n                    } else if (child.getNodeName().equals(\"url\")) {\n                        assertNotNull(child.asNormalizedText());\n                    }\n                }\n            }\n        }\n\n        webClient \u003d r.createWebClient();\n        webClient.withBasicApiToken(alice);\n        XmlPage p2 \u003d webClient.goToXml(\"queue/api/xml\");\n        //alice does not have permission on the project and will not see it in the queue.\n        assertTrue(p2.getByXPath(\"/queue/node()\").isEmpty());\n\n        webClient \u003d r.createWebClient();\n        webClient.withBasicApiToken(james);\n        XmlPage p3 \u003d webClient.goToXml(\"queue/api/xml\");\n\n        //james has DISCOVER permission on the project and will only be able to see the task name.\n        List projects \u003d p3.getByXPath(\"/queue/discoverableItem/task/name/text()\");\n        assertEquals(1, projects.size());\n        assertEquals(\"project\", projects.get(0).toString());\n\n        // Also check individual item exports.\n        String url \u003d project.getQueueItem().getUrl() + \"api/xml\";\n        r.createWebClient().withBasicApiToken(bob).goToXml(url); // OK, 200\n        r.createWebClient().withBasicApiToken(james).assertFails(url, HttpURLConnection.HTTP_FORBIDDEN); // only DISCOVER → AccessDeniedException\n        r.createWebClient().withBasicApiToken(alice).assertFails(url, HttpURLConnection.HTTP_NOT_FOUND); // not even DISCOVER\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(project));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.testGetCauseOfBlockageForNonConcurrentFreestyle:void()","methodSource":"@Test\n    public void testGetCauseOfBlockageForNonConcurrentFreestyle() throws Exception {\n        Queue queue \u003d r.getInstance().getQueue();\n        FreeStyleProject t1 \u003d r.createFreeStyleProject(\"project\");\n        t1.getBuildersList().add(new SleepBuilder(TimeUnit.SECONDS.toMillis(30)));\n        t1.setConcurrentBuild(false);\n\n        FreeStyleBuild build \u003d t1.scheduleBuild2(0).waitForStart();\n        t1.scheduleBuild2(0);\n\n        queue.maintain();\n\n        assertEquals(1, r.jenkins.getQueue().getBlockedItems().size());\n        CauseOfBlockage actual \u003d r.jenkins.getQueue().getBlockedItems().get(0).getCauseOfBlockage();\n        CauseOfBlockage expected \u003d new BlockedBecauseOfBuildInProgress(t1.getFirstBuild());\n\n        assertEquals(expected.getShortDescription(), actual.getShortDescription());\n        Queue.getInstance().doCancelItem(r.jenkins.getQueue().getBlockedItems().get(0).getId());\n        r.assertBuildStatusSuccess(r.waitForCompletion(build));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.load_queue_xml:void()","methodSource":"@Test @LocalData\n    public void load_queue_xml() {\n        Queue q \u003d r.getInstance().getQueue();\n        Queue.Item[] items \u003d q.getItems();\n        assertEquals(Arrays.asList(items).toString(), 11, items.length);\n        assertEquals(\"Loading the queue should not generate saves\", 0, QueueSaveSniffer.count);\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"a\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"b\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"c\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"d\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"e\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"f\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"g\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"h\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"i\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"j\", FreeStyleProject.class)));\n        assertTrue(r.jenkins.getQueue().cancel(r.jenkins.getItemByFullName(\"k\", FreeStyleProject.class)));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.doCancelItem_PermissionIsChecked:void()","methodSource":"@Test\n    @Issue(\"SECURITY-891\")\n    public void doCancelItem_PermissionIsChecked() throws Exception {\n        checkCancelOperationUsingUrl(item -\u003e \"queue/cancelItem?id\u003d\" + item.getId(), false);\n    }","advisory":"SECURITY-891"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.doCancelQueue_PermissionIsChecked:void()","methodSource":"@Test\n    @Issue(\"SECURITY-891\")\n    public void doCancelQueue_PermissionIsChecked() throws Exception {\n        checkCancelOperationUsingUrl(item -\u003e \"queue/item/\" + item.getId() + \"/cancelQueue\", true);\n    }","advisory":"SECURITY-891"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.flyweightsRunOnMasterIfPossible:void()","methodSource":"@Test\n    public void flyweightsRunOnMasterIfPossible() throws Exception {\n        r.createOnlineSlave();\n        r.jenkins.setNumExecutors(0);\n        List\u003cTestFlyweightTask\u003e tasks \u003d new ArrayList\u003c\u003e();\n        Queue q \u003d r.jenkins.getQueue();\n\n        for (int i \u003d 0; i \u003c 100; i++) {\n            TestFlyweightTask task \u003d new TestFlyweightTask(new AtomicInteger(i), null);\n            tasks.add(task);\n            q.schedule2(task, 0);\n        }\n\n        q.maintain();\n        r.waitUntilNoActivityUpTo(10000);\n        assertThat(tasks, everyItem(hasProperty(\"owner\", equalTo(Jenkins.get().toComputer()))));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.flyweightsRunOnAgentIfNecessary:void()","methodSource":"@Test\n    public void flyweightsRunOnAgentIfNecessary() throws Exception {\n        r.createOnlineSlave();\n        r.jenkins.setNumExecutors(0);\n        r.jenkins.toComputer().setTemporarilyOffline(true, new OfflineCause.UserCause(null, null));\n        List\u003cTestFlyweightTask\u003e tasks \u003d new ArrayList\u003c\u003e();\n        Queue q \u003d r.jenkins.getQueue();\n\n        for (int i \u003d 0; i \u003c 10; i++) {\n            TestFlyweightTask task \u003d new TestFlyweightTask(new AtomicInteger(i), null);\n            tasks.add(task);\n            q.schedule2(task, 0);\n        }\n\n        q.maintain();\n        r.waitUntilNoActivityUpTo(10000);\n        assertThat(tasks, everyItem(hasProperty(\"owner\", not(equalTo(Jenkins.get().toComputer())))));\n    }"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.brokenAffinityKey:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57805\")\n    public void brokenAffinityKey() throws Exception {\n        BrokenAffinityKeyProject brokenProject \u003d r.createProject(BrokenAffinityKeyProject.class, \"broken-project\");\n        // Before the JENKINS-57805 fix, the test times out because the `NullPointerException` repeatedly thrown from\n        // `BrokenAffinityKeyProject.getAffinityKey()` prevents `Queue.maintain()` from completing.\n        r.buildAndAssertSuccess(brokenProject);\n    }","advisory":"JENKINS-57805"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.regularTooltipDisplayedCorrectly:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1537\")\n    public void regularTooltipDisplayedCorrectly() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n\n        String expectedLabel \u003d \"\\\"expected label\\\"\";\n        p.setAssignedLabel(Label.get(expectedLabel));\n\n        p.scheduleBuild2(0);\n\n        String tooltip \u003d buildAndExtractTooltipAttribute();\n        assertThat(tooltip, containsString(expectedLabel.substring(1, expectedLabel.length() - 1)));\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(p));\n    }","advisory":"SECURITY-1537"},{"className":"hudson.model.QueueTest","methodSignature":"hudson.model.QueueTest.preventXssInCauseOfBlocking:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1537\")\n    public void preventXssInCauseOfBlocking() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setAssignedLabel(Label.get(\"\\\"\u003cimg/src\u003d\u0027x\u0027 onerror\u003dalert(123)\u003exss\\\"\"));\n\n        p.scheduleBuild2(0);\n\n        String tooltip \u003d buildAndExtractTooltipAttribute();\n        assertThat(tooltip, not(containsString(\"\u003cimg\")));\n        assertThat(tooltip, containsString(\"\u0026lt;\"));\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(p));\n    }","advisory":"SECURITY-1537"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.absoluteURLsPresentInRSS_evenWithoutRootUrlSetup_View:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59167\")\n    public void absoluteURLsPresentInRSS_evenWithoutRootUrlSetup_View() throws Exception {\n        String pathPrefix \u003d ROOT_PATH_PREFIX;\n        XmlPage page \u003d getRssAllPage(pathPrefix);\n        NodeList allLinks \u003d page.getXmlDocument().getElementsByTagName(\"link\");\n\n        assertEquals(1, allLinks.getLength());\n        assertAllRSSLinksContainRootUrl(allLinks);\n\n        runSuccessfulBuild();\n\n        page \u003d getRssAllPage(pathPrefix);\n        allLinks \u003d page.getXmlDocument().getElementsByTagName(\"link\");\n\n        assertEquals(2, allLinks.getLength());\n        assertAllRSSLinksContainRootUrl(allLinks);\n    }","advisory":"JENKINS-59167"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkInitialContent_Rss_All_AllView:void()","methodSource":"@Test\n    public void checkInitialContent_Rss_All_AllView() throws Exception {\n        String pathPrefix \u003d ROOT_PATH_PREFIX;\n        int expectedNodes \u003d 3;\n        XmlPage page \u003d getRssAllPage(pathPrefix);\n        Node channelNode \u003d checkRssWrapperNodes(page.getXmlDocument());\n        checkRssBasicNodes(channelNode, \"Jenkins:All (all builds)\", expectedNodes, pathPrefix);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkInitialContent_Rss_Failed_AllView:void()","methodSource":"@Test\n    public void checkInitialContent_Rss_Failed_AllView() throws Exception {\n        String pathPrefix \u003d ROOT_PATH_PREFIX;\n        int expectedNodes \u003d 3;\n        XmlPage page \u003d getRssFailedPage(pathPrefix);\n        Node channelNode \u003d checkRssWrapperNodes(page.getXmlDocument());\n        checkRssBasicNodes(channelNode, \"Jenkins:All (failed builds)\", expectedNodes, pathPrefix);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkInitialContent_Atom_All_AllView:void()","methodSource":"@Test\n    public void checkInitialContent_Atom_All_AllView() throws Exception {\n        int expectedNodes \u003d 5;\n        XmlPage page \u003d getRssAllAtomPage();\n        Element documentElement \u003d page.getXmlDocument().getDocumentElement();\n        assertThat(documentElement.getNodeName(), is(\"feed\"));\n        checkAtomBasicNodes(documentElement, \"Jenkins:All (all builds)\", expectedNodes);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_All_AllView:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_All_AllView() throws Exception {\n        runSuccessfulBuild();\n\n        String pathPrefix \u003d ROOT_PATH_PREFIX;\n        String displayName \u003d \"All\";\n        String buildType \u003d ALL_BUILD_TYPE;\n        String buildTitle \u003d STABLE_BUILD_TITLE;\n        XmlPage page \u003d getRssAllPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_Failed_AllView:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_Failed_AllView() throws Exception {\n        runFailingBuild();\n\n        String pathPrefix \u003d ROOT_PATH_PREFIX;\n        String displayName \u003d \"All\";\n        String buildType \u003d FAILED_BUILD_TYPE;\n        String buildTitle \u003d FAILED_BUILD_TITLE;\n        XmlPage page \u003d getRssFailedPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Atom_All_AllView:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Atom_All_AllView() throws Exception {\n        runSuccessfulBuild();\n\n        String displayName \u003d \"All\";\n        String buildType \u003d ALL_BUILD_TYPE;\n        String buildTitle \u003d STABLE_BUILD_TITLE;\n        XmlPage page \u003d getRssAllAtomPage();\n        checkSingleBuild_Atom(page, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.absoluteURLsPresentInAtom_evenWithoutRootUrlSetup_View:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59167\")\n    public void absoluteURLsPresentInAtom_evenWithoutRootUrlSetup_View() throws Exception {\n        XmlPage page \u003d getRssAllAtomPage();\n        NodeList allLinks \u003d page.getXmlDocument().getElementsByTagName(\"link\");\n\n        assertEquals(1, allLinks.getLength());\n        assertAllAtomLinksContainRootUrl(allLinks);\n\n        runSuccessfulBuild();\n\n        page \u003d getRssAllAtomPage();\n        allLinks \u003d page.getXmlDocument().getElementsByTagName(\"link\");\n\n        assertEquals(2, allLinks.getLength());\n        assertAllAtomLinksContainRootUrl(allLinks);\n    }","advisory":"JENKINS-59167"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.latestBuilds_AllView:void()","methodSource":"@Issue(\"JENKINS-60577\")\n    @Test\n    public void latestBuilds_AllView() throws Exception {\n        String pathPrefix \u003d ROOT_PATH_PREFIX;\n        String displayName \u003d \"All\";\n        String buildType \u003d LATEST_BUILD_TYPE;\n        int expectedLinks \u003d 3;\n        int expectedAllLinks \u003d 6;\n        checkLatestBuilds(j.createWebClient(), pathPrefix, displayName, buildType, null, expectedLinks, expectedAllLinks);\n    }","advisory":"JENKINS-60577"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_All_Computer:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_All_Computer() throws Exception {\n        runSuccessfulBuild();\n\n        String pathPrefix \u003d \"computer/(built-in)/\";\n        String displayName \u003d Messages.Hudson_Computer_DisplayName();\n        String buildType \u003d ALL_BUILD_TYPE;\n        String buildTitle \u003d STABLE_BUILD_TITLE;\n        XmlPage page \u003d getRssAllPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_Failed_Computer:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_Failed_Computer() throws Exception {\n        runFailingBuild();\n\n        String pathPrefix \u003d \"computer/(built-in)/\";\n        String displayName \u003d Messages.Hudson_Computer_DisplayName();\n        String buildType \u003d FAILED_BUILD_TYPE;\n        String buildTitle \u003d FAILED_BUILD_TITLE;\n        XmlPage page \u003d getRssFailedPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.latestBuilds_Computer:void()","methodSource":"@Test\n    public void latestBuilds_Computer() throws Exception {\n        String pathPrefix \u003d \"computer/(built-in)/\";\n        String displayName \u003d Messages.Hudson_Computer_DisplayName();\n        String buildType \u003d LATEST_BUILD_TYPE;\n        int expectedLinks \u003d 3;\n        int expectedAllLinks \u003d 6;\n        checkLatestBuilds(j.createWebClient(), pathPrefix, displayName, buildType, null, expectedLinks, expectedAllLinks);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_All_Job:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_All_Job() throws Exception {\n        runSuccessfulBuild();\n\n        String pathPrefix \u003d \"job/test0/\";\n        String displayName \u003d \"test0\";\n        String buildType \u003d ALL_BUILD_TYPE;\n        String buildTitle \u003d STABLE_BUILD_TITLE;\n        XmlPage page \u003d getRssAllPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_Failed_Job:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_Failed_Job() throws Exception {\n        runFailingBuild();\n\n        String pathPrefix \u003d \"job/test0/\";\n        String displayName \u003d \"test0\";\n        String buildType \u003d FAILED_BUILD_TYPE;\n        String buildTitle \u003d FAILED_BUILD_TITLE;\n        XmlPage page \u003d getRssFailedPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_All_NewView:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_All_NewView() throws Exception {\n        FreeStyleProject p \u003d runSuccessfulBuild();\n\n        ListView newView \u003d new ListView(\"newView\");\n        j.jenkins.addView(newView);\n        newView.add(p);\n\n        String pathPrefix \u003d \"view/newView/\";\n        String displayName \u003d \"newView\";\n        String buildType \u003d ALL_BUILD_TYPE;\n        String buildTitle \u003d STABLE_BUILD_TITLE;\n        XmlPage page \u003d getRssAllPage(pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_All_User:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_All_User() throws Exception {\n        String userId \u003d \"alice\";\n        JenkinsRule.WebClient wc \u003d loginAsUser(userId);\n\n        runSuccessfulBuild(userId);\n\n        String pathPrefix \u003d \"user/alice\";\n        String displayName \u003d userId;\n        String buildType \u003d ALL_BUILD_TYPE;\n        String buildTitle \u003d STABLE_BUILD_TITLE;\n        XmlPage page \u003d getRssAllPage(wc, pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkWithSingleBuild_Rss_Failed_User:void()","methodSource":"@Test\n    public void checkWithSingleBuild_Rss_Failed_User() throws Exception {\n        String userId \u003d \"alice\";\n        JenkinsRule.WebClient wc \u003d loginAsUser(userId);\n\n        runFailingBuild(userId);\n\n        String pathPrefix \u003d \"user/alice\";\n        String displayName \u003d userId;\n        String buildType \u003d FAILED_BUILD_TYPE;\n        String buildTitle \u003d FAILED_BUILD_TITLE;\n        XmlPage page \u003d getRssFailedPage(wc, pathPrefix);\n        checkSingleBuild_Rss(page, pathPrefix, displayName, buildType, buildTitle);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.latestBuilds_User:void()","methodSource":"@Test\n    public void latestBuilds_User() throws Exception {\n        String userId \u003d \"alice\";\n        JenkinsRule.WebClient wc \u003d loginAsUser(userId);\n        String pathPrefix \u003d \"user/alice\";\n        String displayName \u003d userId;\n        String buildType \u003d LATEST_BUILD_TYPE;\n        int expectedLinks \u003d 3;\n        int expectedAllLinks \u003d 6;\n        checkLatestBuilds(wc, pathPrefix, displayName, buildType, userId, expectedLinks, expectedAllLinks);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.latestBuilds_User_NotCaused:void()","methodSource":"@Test\n    public void latestBuilds_User_NotCaused() throws Exception {\n        String userId \u003d \"alice\";\n        JenkinsRule.WebClient wc \u003d loginAsUser(userId);\n        String pathPrefix \u003d \"user/alice\";\n        String displayName \u003d userId;\n        String buildType \u003d LATEST_BUILD_TYPE;\n        int expectedLinks \u003d 1;\n        int expectedAllLinks \u003d 1;\n        checkLatestBuilds(wc, pathPrefix, displayName, buildType, null, expectedLinks, expectedAllLinks);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkInitialContent_Atom_AllLog:void()","methodSource":"@Test\n    public void checkInitialContent_Atom_AllLog() throws Exception {\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        XmlPage page \u003d (XmlPage) webClient.goTo(\"log/rss\", \"application/atom+xml\");\n        Document xmlDocument \u003d page.getXmlDocument();\n        Element documentElement \u003d xmlDocument.getDocumentElement();\n        assertThat(documentElement.getNodeName(), is(\"feed\"));\n        int expectedNodes \u003d 5;\n        checkAtomBasicNodes(documentElement, \"Jenkins:log (all entries)\", expectedNodes);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkInitialContent_Atom_SevereLog:void()","methodSource":"@Test\n    public void checkInitialContent_Atom_SevereLog() throws Exception {\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        XmlPage page \u003d (XmlPage) webClient.goTo(\"log/rss?level\u003dSEVERE\", \"application/atom+xml\");\n        Document xmlDocument \u003d page.getXmlDocument();\n        Element documentElement \u003d xmlDocument.getDocumentElement();\n        assertThat(documentElement.getNodeName(), is(\"feed\"));\n        int expectedNodes \u003d 5;\n        checkAtomBasicNodes(documentElement, \"Jenkins:log (SEVERE entries)\", expectedNodes);\n    }"},{"className":"hudson.model.RSSTest","methodSignature":"hudson.model.RSSTest.checkInitialContent_Atom_WarningLog:void()","methodSource":"@Test\n    public void checkInitialContent_Atom_WarningLog() throws Exception {\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        XmlPage page \u003d (XmlPage) webClient.goTo(\"log/rss?level\u003dWARNING\", \"application/atom+xml\");\n        Document xmlDocument \u003d page.getXmlDocument();\n        Element documentElement \u003d xmlDocument.getDocumentElement();\n        assertThat(documentElement.getNodeName(), is(\"feed\"));\n        int expectedNodes \u003d 5;\n        checkAtomBasicNodes(documentElement, \"Jenkins:log (WARNING entries)\", expectedNodes);\n    }"},{"className":"hudson.model.RunActionTest","methodSignature":"hudson.model.RunActionTest.badSerialization:void()","methodSource":"@Issue(\"JENKINS-45892\")\n    @Test\n    public void badSerialization() throws Throwable {\n        sessions.then(j -\u003e {\n                FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n                FreeStyleBuild b1 \u003d j.buildAndAssertSuccess(p);\n                FreeStyleBuild b2 \u003d j.buildAndAssertSuccess(p);\n                b2.addAction(new BadAction(b1));\n                b2.save();\n                String text \u003d new XmlFile(new File(b2.getRootDir(), \"build.xml\")).asString();\n                assertThat(text, not(containsString(\"\u003cowner class\u003d\\\"build\\\"\u003e\")));\n                assertThat(text, containsString(\"\u003cid\u003ep#1\u003c/id\u003e\"));\n        });\n        sessions.then(j -\u003e {\n                FreeStyleProject p \u003d j.jenkins.getItemByFullName(\"p\", FreeStyleProject.class);\n                assertEquals(p.getBuildByNumber(1), p.getBuildByNumber(2).getAction(BadAction.class).owner);\n        });\n    }","advisory":"JENKINS-45892"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.reloadWhileBuildIsInProgress:void()","methodSource":"@Issue(\"JENKNS-12318\")\n    @Test public void reloadWhileBuildIsInProgress() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n\n        // want some completed build records\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n\n        // now create a build that hangs until we signal the OneShotEvent\n        p.getBuildersList().add(new SleepBuilder(Long.MAX_VALUE));\n        FreeStyleBuild b2 \u003d p.scheduleBuild2(0).waitForStart();\n        assertEquals(2, b2.number);\n\n        // now reload\n        p.updateByXml((Source) new StreamSource(p.getConfigFile().getFile()));\n\n        // we should still see the same object for #2 because that\u0027s in progress\n        assertSame(p.getBuildByNumber(b2.number), b2);\n        // build #1 should be reloaded\n        assertNotSame(b1, p.getBuildByNumber(1));\n\n        // and reference gets fixed up\n        b1 \u003d p.getBuildByNumber(1);\n        assertSame(b1.getNextBuild(), b2);\n        assertSame(b2.getPreviousBuild(), b1);\n        b2.doStop();\n        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b2));\n    }","advisory":"JENKNS-12318"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.reloadWhileBuildIsInQueue:void()","methodSource":"@Issue(\"JENKINS-27530\")\n    @Test public void reloadWhileBuildIsInQueue() throws Exception {\n        logs.record(Queue.class, Level.FINE);\n        FreeStyleProject p \u003d r.createFreeStyleProject(\"p\");\n        p.getBuildersList().add(new SleepBuilder(Long.MAX_VALUE));\n        r.jenkins.setNumExecutors(1);\n        assertEquals(1, p.scheduleBuild2(0).waitForStart().number);\n        p.scheduleBuild2(0);\n        // Note that the bug does not reproduce simply from p.doReload(), since in that case Job identity remains intact:\n        r.jenkins.reload();\n        p \u003d r.jenkins.getItemByFullName(\"p\", FreeStyleProject.class);\n        FreeStyleBuild b1 \u003d p.getLastBuild();\n        assertEquals(1, b1.getNumber());\n        /* Currently fails since Run.project is final. But anyway that is not the problem:\n        assertEquals(p, b1.getParent());\n        */\n        Queue.Item[] items \u003d Queue.getInstance().getItems();\n        assertEquals(1, items.length);\n        assertEquals(p, items[0].task); // the real issue: assignBuildNumber was being called on the wrong Job\n        QueueTaskFuture\u003cQueue.Executable\u003e b2f \u003d items[0].getFuture();\n        b1.getExecutor().interrupt();\n        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b1));\n        FreeStyleBuild b2 \u003d (FreeStyleBuild) b2f.waitForStart();\n        assertEquals(2, b2.getNumber());\n        assertEquals(p, b2.getParent());\n        b2.getExecutor().interrupt();\n        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b2));\n        FreeStyleBuild b3 \u003d p.scheduleBuild2(0).waitForStart();\n        assertEquals(3, b3.getNumber());\n        assertEquals(p, b3.getParent());\n        b3.getExecutor().interrupt();\n        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b3));\n    }","advisory":"JENKINS-27530"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.runtimeExceptionInUnmarshalling:void()","methodSource":"@Issue(\"JENKINS-15533\")\n    @Test public void runtimeExceptionInUnmarshalling() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        b.addAction(new BombAction());\n        b.save();\n\n        p._getRuns().purgeCache();\n        b \u003d p.getBuildByNumber(b.number);\n        // Original test assumed that b \u003d\u003d null, but after JENKINS-21024 this is no longer true,\n        // so this may not really be testing anything interesting:\n        assertNotNull(b);\n        assertNull(b.getAction(BombAction.class));\n        assertTrue(bombed);\n    }","advisory":"JENKINS-15533"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.remove:void()","methodSource":"@Issue(\"JENKINS-25788\")\n    @Test public void remove() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        FreeStyleBuild b2 \u003d r.buildAndAssertSuccess(p);\n        RunMap\u003cFreeStyleBuild\u003e runs \u003d p._getRuns();\n        assertEquals(2, runs.size());\n        assertTrue(runs.remove(b1));\n        assertEquals(1, runs.size());\n        assertFalse(runs.remove(b1));\n        assertEquals(1, runs.size());\n        assertTrue(runs.remove(b2));\n        assertEquals(0, runs.size());\n        assertFalse(runs.remove(b2));\n        assertEquals(0, runs.size());\n    }","advisory":"JENKINS-25788"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.stream:void()","methodSource":"@Test\n    public void stream() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        SortedMap\u003cInteger, FreeStyleBuild\u003e builds \u003d new TreeMap\u003c\u003e(Collections.reverseOrder());\n        for (int i \u003d 0; i \u003c 10; i++) {\n            FreeStyleBuild build \u003d r.buildAndAssertSuccess(p);\n            builds.put(build.number, build);\n        }\n        RunMap\u003cFreeStyleBuild\u003e runMap \u003d p._getRuns();\n\n        assertEquals(builds.size(), runMap.entrySet().size());\n        assertTrue(\n                runMap.entrySet().stream().spliterator().hasCharacteristics(Spliterator.DISTINCT));\n        assertTrue(\n                runMap.entrySet().stream().spliterator().hasCharacteristics(Spliterator.ORDERED));\n        assertFalse(runMap.entrySet().stream().spliterator().hasCharacteristics(Spliterator.SIZED));\n        assertFalse(\n                runMap.entrySet().stream().spliterator().hasCharacteristics(Spliterator.SORTED));\n        assertThrows(\n                IllegalStateException.class,\n                () -\u003e runMap.entrySet().stream().spliterator().getComparator());\n\n        assertEquals(new ArrayList\u003c\u003e(builds.keySet()), new ArrayList\u003c\u003e(runMap.keySet()));\n        Comparator\u003c? super Integer\u003e comparator \u003d\n                runMap.keySet().stream().spliterator().getComparator();\n        assertNotNull(comparator);\n        List\u003cInteger\u003e origOrder \u003d new ArrayList\u003c\u003e(builds.keySet());\n        List\u003cInteger\u003e sorted \u003d new ArrayList\u003c\u003e(origOrder);\n        sorted.sort(comparator);\n        assertEquals(origOrder, sorted);\n        assertTrue(runMap.keySet().stream().spliterator().hasCharacteristics(Spliterator.DISTINCT));\n        assertTrue(runMap.keySet().stream().spliterator().hasCharacteristics(Spliterator.ORDERED));\n        assertFalse(runMap.keySet().stream().spliterator().hasCharacteristics(Spliterator.SIZED));\n        assertTrue(runMap.keySet().stream().spliterator().hasCharacteristics(Spliterator.SORTED));\n\n        assertEquals(new ArrayList\u003c\u003e(builds.values()), new ArrayList\u003c\u003e(runMap.values()));\n        assertTrue(runMap.values().stream().spliterator().hasCharacteristics(Spliterator.DISTINCT));\n        assertTrue(runMap.values().stream().spliterator().hasCharacteristics(Spliterator.ORDERED));\n        assertFalse(runMap.values().stream().spliterator().hasCharacteristics(Spliterator.SIZED));\n        assertFalse(runMap.values().stream().spliterator().hasCharacteristics(Spliterator.SORTED));\n        assertThrows(\n                IllegalStateException.class,\n                () -\u003e runMap.values().stream().spliterator().getComparator());\n    }"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.runLoadCounterFirst:void()","methodSource":"@Test\n    public void runLoadCounterFirst() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        for (int i \u003d 0; i \u003c 10; i++) {\n            r.buildAndAssertSuccess(p);\n        }\n        assertEquals(\n                10,\n                RunLoadCounter.assertMaxLoads(p, 2, () -\u003e p.getBuilds().stream().findFirst().orElse(null).number).intValue());\n    }"},{"className":"hudson.model.RunMapTest","methodSignature":"hudson.model.RunMapTest.runLoadCounterLimit:void()","methodSource":"@Test\n    public void runLoadCounterLimit() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        for (int i \u003d 0; i \u003c 10; i++) {\n            r.buildAndAssertSuccess(p);\n        }\n        assertEquals(\n                6,\n                RunLoadCounter.assertMaxLoads(p, 6, () -\u003e Streams.findLast(p.getBuilds().stream().limit(5)).orElse(null).number).intValue());\n    }"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.configRoundtrip:void()","methodSource":"@Issue(\"JENKINS-31954\")\n    @Test public void configRoundtrip() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(new ParametersDefinitionProperty(new RunParameterDefinition(\"build\", \"p\", \"\", RunParameterFilter.COMPLETED)));\n        j.configRoundtrip(p);\n        RunParameterDefinition rpd \u003d (RunParameterDefinition) p.getProperty(ParametersDefinitionProperty.class).getParameterDefinition(\"build\");\n        assertEquals(\"p\", rpd.getProjectName());\n        assertEquals(RunParameterFilter.COMPLETED, rpd.getFilter());\n    }","advisory":"JENKINS-31954"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.inFolders:void()","methodSource":"@Issue(\"JENKINS-16462\")\n    @Test public void inFolders() throws Exception {\n        MockFolder dir \u003d j.createFolder(\"dir\");\n        MockFolder subdir \u003d dir.createProject(MockFolder.class, \"sub dir\");\n        FreeStyleProject p \u003d subdir.createProject(FreeStyleProject.class, \"some project\");\n        j.buildAndAssertSuccess(p);\n        FreeStyleBuild build2 \u003d j.buildAndAssertSuccess(p);\n        j.buildAndAssertSuccess(p);\n        String id \u003d build2.getExternalizableId();\n        assertEquals(\"dir/sub dir/some project#2\", id);\n        assertEquals(build2, Run.fromExternalizableId(id));\n        RunParameterDefinition def \u003d new RunParameterDefinition(\"build\", \"dir/sub dir/some project\", \"my build\", null);\n        assertEquals(\"dir/sub dir/some project\", def.getProjectName());\n        assertEquals(p, def.getProject());\n        EnvVars env \u003d new EnvVars();\n        def.getDefaultParameterValue().buildEnvironment(null, env);\n        assertEquals(j.jenkins.getRootUrl() + \"job/dir/job/sub%20dir/job/some%20project/3/\", env.get(\"build\"));\n        RunParameterValue val \u003d def.createValue(id);\n        assertEquals(build2, val.getRun());\n        assertEquals(\"dir/sub dir/some project\", val.getJobName());\n        assertEquals(\"2\", val.getNumber());\n        val.buildEnvironment(null, env);\n        assertEquals(j.jenkins.getRootUrl() + \"job/dir/job/sub%20dir/job/some%20project/2/\", env.get(\"build\"));\n        assertEquals(\"dir/sub dir/some project\", env.get(\"build.jobName\"));\n        assertEquals(\"dir/sub dir/some project\", env.get(\"build_JOBNAME\"));\n        assertEquals(\"2\", env.get(\"build.number\"));\n        assertEquals(\"2\", env.get(\"build_NUMBER\"));\n    }","advisory":"JENKINS-16462"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.testNULLFilter:void()","methodSource":"@Test\n    public void testNULLFilter() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild successfulBuild \u003d j.buildAndAssertSuccess(project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.UNSTABLE)));\n        FreeStyleBuild unstableBuild \u003d j.buildAndAssertStatus(Result.UNSTABLE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.FAILURE)));\n        FreeStyleBuild failedBuild \u003d j.buildAndAssertStatus(Result.FAILURE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.NOT_BUILT)));\n        FreeStyleBuild notBuiltBuild \u003d j.buildAndAssertStatus(Result.NOT_BUILT, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.ABORTED)));\n        FreeStyleBuild abortedBuild \u003d j.buildAndAssertStatus(Result.ABORTED, project);\n\n        FreeStyleProject paramProject \u003d j.createFreeStyleProject(\"paramProject\");\n        ParametersDefinitionProperty pdp \u003d\n                new ParametersDefinitionProperty(new RunParameterDefinition(\"RUN\",\n                                                                             project.getName(),\n                                                                             \"run description\",\n                                                                             null));\n        paramProject.addProperty(pdp);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(paramProject);\n        assertEquals(Integer.toString(project.getLastBuild().getNumber()),\n                     build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"RUN_NUMBER\"));\n    }"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.testALLFilter:void()","methodSource":"@Test\n    public void testALLFilter() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild successfulBuild \u003d j.buildAndAssertSuccess(project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.UNSTABLE)));\n        FreeStyleBuild unstableBuild \u003d j.buildAndAssertStatus(Result.UNSTABLE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.FAILURE)));\n        FreeStyleBuild failedBuild \u003d j.buildAndAssertStatus(Result.FAILURE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.NOT_BUILT)));\n        FreeStyleBuild notBuiltBuild \u003d j.buildAndAssertStatus(Result.NOT_BUILT, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.ABORTED)));\n        FreeStyleBuild abortedBuild \u003d j.buildAndAssertStatus(Result.ABORTED, project);\n\n        FreeStyleProject paramProject \u003d j.createFreeStyleProject(\"paramProject\");\n        ParametersDefinitionProperty pdp \u003d\n                new ParametersDefinitionProperty(new RunParameterDefinition(\"RUN\",\n                                                                             project.getName(),\n                                                                             \"run description\",\n                                                                             RunParameterFilter.ALL));\n        paramProject.addProperty(pdp);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(paramProject);\n        assertEquals(Integer.toString(project.getLastBuild().getNumber()),\n                     build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"RUN_NUMBER\"));\n    }"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.testCOMPLETEDFilter:void()","methodSource":"@Test\n    public void testCOMPLETEDFilter() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild successfulBuild \u003d j.buildAndAssertSuccess(project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.UNSTABLE)));\n        FreeStyleBuild unstableBuild \u003d j.buildAndAssertStatus(Result.UNSTABLE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.FAILURE)));\n        FreeStyleBuild failedBuild \u003d j.buildAndAssertStatus(Result.FAILURE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.NOT_BUILT)));\n        FreeStyleBuild notBuiltBuild \u003d j.buildAndAssertStatus(Result.NOT_BUILT, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.ABORTED)));\n        FreeStyleBuild abortedBuild \u003d j.buildAndAssertStatus(Result.ABORTED, project);\n\n        FreeStyleProject paramProject \u003d j.createFreeStyleProject(\"paramProject\");\n        ParametersDefinitionProperty pdp \u003d\n                new ParametersDefinitionProperty(new RunParameterDefinition(\"RUN\",\n                                                                             project.getName(),\n                                                                             \"run description\",\n                                                                             RunParameterFilter.COMPLETED));\n        paramProject.addProperty(pdp);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(paramProject);\n        assertEquals(Integer.toString(abortedBuild.getNumber()),\n                     build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"RUN_NUMBER\"));\n    }"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.testSUCCESSFULFilter:void()","methodSource":"@Test\n    public void testSUCCESSFULFilter() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild successfulBuild \u003d j.buildAndAssertSuccess(project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.UNSTABLE)));\n        FreeStyleBuild unstableBuild \u003d j.buildAndAssertStatus(Result.UNSTABLE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.FAILURE)));\n        FreeStyleBuild failedBuild \u003d j.buildAndAssertStatus(Result.FAILURE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.NOT_BUILT)));\n        FreeStyleBuild notBuiltBuild \u003d j.buildAndAssertStatus(Result.NOT_BUILT, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.ABORTED)));\n        FreeStyleBuild abortedBuild \u003d j.buildAndAssertStatus(Result.ABORTED, project);\n\n        FreeStyleProject paramProject \u003d j.createFreeStyleProject(\"paramProject\");\n        ParametersDefinitionProperty pdp \u003d\n                new ParametersDefinitionProperty(new RunParameterDefinition(\"RUN\",\n                                                                             project.getName(),\n                                                                             \"run description\",\n                                                                             RunParameterFilter.SUCCESSFUL));\n        paramProject.addProperty(pdp);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(paramProject);\n        assertEquals(Integer.toString(unstableBuild.getNumber()),\n                     build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"RUN_NUMBER\"));\n    }"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.testSTABLEFilter:void()","methodSource":"@Test\n    public void testSTABLEFilter() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild successfulBuild \u003d j.buildAndAssertSuccess(project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.UNSTABLE)));\n        FreeStyleBuild unstableBuild \u003d j.buildAndAssertStatus(Result.UNSTABLE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.FAILURE)));\n        FreeStyleBuild failedBuild \u003d j.buildAndAssertStatus(Result.FAILURE, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.NOT_BUILT)));\n        FreeStyleBuild notBuiltBuild \u003d j.buildAndAssertStatus(Result.NOT_BUILT, project);\n\n        project.getPublishersList().replaceBy(Set.of(new ResultPublisher(Result.ABORTED)));\n        FreeStyleBuild abortedBuild \u003d j.buildAndAssertStatus(Result.ABORTED, project);\n\n        FreeStyleProject paramProject \u003d j.createFreeStyleProject(\"paramProject\");\n        ParametersDefinitionProperty pdp \u003d\n                new ParametersDefinitionProperty(new RunParameterDefinition(\"RUN\",\n                                                                             project.getName(),\n                                                                             \"run description\",\n                                                                             RunParameterFilter.STABLE));\n        paramProject.addProperty(pdp);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(paramProject);\n        assertEquals(Integer.toString(successfulBuild.getNumber()),\n                     build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"RUN_NUMBER\"));\n    }"},{"className":"hudson.model.RunParameterDefinitionTest","methodSignature":"hudson.model.RunParameterDefinitionTest.testLoadEnvironmentVariablesWhenRunParameterJobHasBeenDeleted:void()","methodSource":"@Test\n    public void testLoadEnvironmentVariablesWhenRunParameterJobHasBeenDeleted() throws Exception {\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"project\");\n        FreeStyleBuild successfulBuild \u003d j.buildAndAssertSuccess(project);\n\n        FreeStyleProject paramProject \u003d j.createFreeStyleProject(\"paramProject\");\n        ParametersDefinitionProperty pdp \u003d\n                new ParametersDefinitionProperty(new RunParameterDefinition(\"RUN\",\n                                                                             project.getName(),\n                                                                             \"run description\",\n                                                                             RunParameterFilter.ALL));\n        paramProject.addProperty(pdp);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(paramProject);\n        assertEquals(Integer.toString(project.getLastBuild().getNumber()),\n                     build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"RUN_NUMBER\"));\n\n        successfulBuild.delete();\n        // We should still be able to retrieve non RunParameter environment variables for the parameterized build\n        // even when the selected RunParameter build has been deleted.\n        assertEquals(\"paramProject\", build.getEnvironment(new LogTaskListener(LOGGER, Level.INFO)).get(\"JOB_NAME\"));\n    }"},{"className":"hudson.model.RunTest","methodSignature":"hudson.model.RunTest.getDynamicInvisibleTransientAction:void()","methodSource":"@Issue(\"JENKINS-17935\")\n    @Test public void getDynamicInvisibleTransientAction() throws Exception {\n        TransientBuildActionFactory.all().add(0, new TransientBuildActionFactory() {\n            @Override public Collection\u003c? extends Action\u003e createFor(Run target) {\n                return Collections.singleton(new Action() {\n                    @Override public String getDisplayName() {\n                        return \"Test\";\n                    }\n\n                    @Override public String getIconFileName() {\n                        return null;\n                    }\n\n                    @Override public String getUrlName() {\n                        return null;\n                    }\n                });\n            }\n        });\n        j.buildAndAssertSuccess(j.createFreeStyleProject(\"stuff\"));\n        j.createWebClient().assertFails(\"job/stuff/1/nonexistent\", HttpURLConnection.HTTP_NOT_FOUND);\n    }","advisory":"JENKINS-17935"},{"className":"hudson.model.RunTest","methodSignature":"hudson.model.RunTest.getBadgeActions:void()","methodSource":"@Issue(\"JENKINS-40281\")\n    @Test public void getBadgeActions() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        assertEquals(0, b.getBadgeActions().size());\n        assertTrue(b.canToggleLogKeep());\n        b.keepLog();\n        List\u003cBuildBadgeAction\u003e badgeActions \u003d b.getBadgeActions();\n        assertEquals(1, badgeActions.size());\n        assertEquals(Run.KeepLogBuildBadge.class, badgeActions.get(0).getClass());\n    }","advisory":"JENKINS-40281"},{"className":"hudson.model.RunTest","methodSignature":"hudson.model.RunTest.deleteArtifactsCustom:void()","methodSource":"@Issue(\"JENKINS-51819\")\n    @Test public void deleteArtifactsCustom() throws Exception {\n        ArtifactManagerConfiguration.get().getArtifactManagerFactories().add(new Mgr.Factory());\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        j.jenkins.getWorkspaceFor(p).child(\"f\").write(\"\", null);\n        p.getPublishersList().add(new ArtifactArchiver(\"f\"));\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        b.delete();\n        assertTrue(Mgr.deleted.get());\n    }","advisory":"JENKINS-51819"},{"className":"hudson.model.RunTest","methodSignature":"hudson.model.RunTest.preventXssInBadgeTooltip:void()","methodSource":"@Issue(\"SECURITY-1902\")\n    @Test public void preventXssInBadgeTooltip() throws Exception {\n        j.jenkins.setQuietPeriod(0);\n        /*\n         * The scenario to trigger is to have a build protected from deletion because of an upstream protected build.\n         * Once we have that condition, we need to ensure the upstream project has a dangerous name\n         */\n        FreeStyleProject up \u003d j.createFreeStyleProject(\"up\");\n        up.getBuildersList().add(new WriteFileStep());\n        up.getPublishersList().add(new Fingerprinter(\"**/*\"));\n\n        FullNameChangingProject down \u003d j.createProject(FullNameChangingProject.class, \"down\");\n        down.getBuildersList().add(new WriteFileStep());\n        down.getPublishersList().add(new Fingerprinter(\"**/*\"));\n        // protected field, we are in the same package\n        down.keepDependencies \u003d true;\n\n        up.getPublishersList().add(new BuildTrigger(down.getFullName(), false));\n\n        j.jenkins.rebuildDependencyGraph();\n\n        FreeStyleBuild upBuild \u003d j.buildAndAssertSuccess(up);\n        j.waitUntilNoActivity();\n        CustomBuild downBuild \u003d down.getBuilds().getLastBuild();\n        assertNotNull(\"The down build must exist, otherwise the up\u0027s one is not protected.\", downBuild);\n\n        // updating the name before the build is problematic under Windows\n        // so we are updating internal stuff manually\n        String newName \u003d \"Down\u003cimg src\u003dx onerror\u003dalert(123)\u003eProject\";\n        down.setVirtualName(newName);\n        Fingerprint f \u003d upBuild.getAction(Fingerprinter.FingerprintAction.class).getFingerprints().get(\"test.txt\");\n        f.add(newName, 1);\n\n        // keeping the minimum to validate it\u0027s working and it\u0027s not exploitable as there are some modifications\n        // like adding double quotes\n        ensureXssIsPrevented(up, \"Down\", \"\u003cimg\");\n    }","advisory":"SECURITY-1902"},{"className":"hudson.model.SimpleJobTest","methodSignature":"hudson.model.SimpleJobTest.testGetEstimatedDuration:void()","methodSource":"@Test\n    public void testGetEstimatedDuration() throws Exception {\n        var project \u003d r.createFreeStyleProject(\"testGetEstimatedDuration\");\n\n        var b1 \u003d r.buildAndAssertSuccess(project);\n        b1.duration \u003d 200;\n        assertEquals(200, project.getEstimatedDuration());\n\n        var b2 \u003d r.buildAndAssertSuccess(project);\n        b2.duration \u003d 150;\n        assertEquals(175, project.getEstimatedDuration());\n\n        var b3 \u003d r.buildAndAssertSuccess(project);\n        b3.duration \u003d 400;\n        assertEquals(250, project.getEstimatedDuration());\n    }"},{"className":"hudson.model.SimpleJobTest","methodSignature":"hudson.model.SimpleJobTest.testGetEstimatedDurationWithOneRun:void()","methodSource":"@Test\n    public void testGetEstimatedDurationWithOneRun() throws Exception {\n        var project \u003d r.createFreeStyleProject(\"testGetEstimatedDurationWithOneRun\");\n\n        var b1 \u003d r.buildAndAssertSuccess(project);\n        b1.duration \u003d 420;\n        assertEquals(420, project.getEstimatedDuration());\n    }"},{"className":"hudson.model.SimpleJobTest","methodSignature":"hudson.model.SimpleJobTest.testGetEstimatedDurationWithFailedRun:void()","methodSource":"@Test\n    public void testGetEstimatedDurationWithFailedRun() throws Exception {\n        var project \u003d r.createFreeStyleProject(\"testGetEstimatedDurationWithFailedRun\");\n\n        var b1 \u003d r.buildAndAssertSuccess(project);\n        b1.result \u003d Result.FAILURE;\n        b1.duration \u003d 420;\n        assertEquals(420, project.getEstimatedDuration());\n    }"},{"className":"hudson.model.SimpleJobTest","methodSignature":"hudson.model.SimpleJobTest.testGetEstimatedDurationWithNoRuns:void()","methodSource":"@Test\n    public void testGetEstimatedDurationWithNoRuns() throws Exception {\n        var project \u003d r.createFreeStyleProject(\"testGetEstimatedDurationWithNoRuns\");\n\n        assertEquals(-1, project.getEstimatedDuration());\n    }"},{"className":"hudson.model.SimpleJobTest","methodSignature":"hudson.model.SimpleJobTest.testGetEstimatedDurationIfPrevious3BuildsFailed:void()","methodSource":"@Test\n    public void testGetEstimatedDurationIfPrevious3BuildsFailed() throws Exception {\n        var project \u003d r.createFreeStyleProject(\"testGetEstimatedDurationIfPrevious3BuildsFailed\");\n\n        var b1 \u003d r.buildAndAssertSuccess(project);\n        b1.result \u003d Result.UNSTABLE;\n        b1.duration \u003d 100;\n        assertEquals(100, project.getEstimatedDuration());\n\n        var b2 \u003d r.buildAndAssertSuccess(project);\n        b2.duration \u003d 200;\n        assertEquals(150, project.getEstimatedDuration());\n\n        var b3 \u003d r.buildAndAssertSuccess(project);\n        b3.duration \u003d 300;\n        assertEquals(200, project.getEstimatedDuration());\n\n        var b4 \u003d r.buildAndAssertSuccess(project);\n        b4.result \u003d Result.FAILURE;\n        b4.duration \u003d 500;\n        assertEquals(200, project.getEstimatedDuration());\n\n        var b5 \u003d r.buildAndAssertSuccess(project);\n        b5.result \u003d Result.FAILURE;\n        b5.duration \u003d 500;\n        assertEquals(200, project.getEstimatedDuration());\n\n        var b6 \u003d r.buildAndAssertSuccess(project);\n        b6.result \u003d Result.FAILURE;\n        b6.duration \u003d 500;\n        assertEquals(200, project.getEstimatedDuration());\n    }"},{"className":"hudson.model.SimpleJobTest","methodSignature":"hudson.model.SimpleJobTest.testGetEstimatedDurationIfNoSuccessfulBuildTakeDurationOfFailedBuild:void()","methodSource":"@Test\n    public void testGetEstimatedDurationIfNoSuccessfulBuildTakeDurationOfFailedBuild() throws Exception {\n        var project \u003d r.createFreeStyleProject(\"testGetEstimatedDurationIfNoSuccessfulBuildTakeDurationOfFailedBuild\");\n\n        var b1 \u003d r.buildAndAssertSuccess(project);\n        b1.result \u003d Result.FAILURE;\n        b1.duration \u003d 500;\n        assertEquals(500, project.getEstimatedDuration());\n    }"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.formValidation:void()","methodSource":"@Test\n    public void formValidation() throws Exception {\n        j.executeOnServer(() -\u003e {\n            assertNotNull(j.jenkins.getDescriptor(DumbSlave.class).getCheckUrl(\"remoteFS\"));\n            return null;\n        });\n    }"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.slaveConfigDotXml:void()","methodSource":"@Test\n    public void slaveConfigDotXml() throws Exception {\n        DumbSlave s \u003d j.createSlave();\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        Page p \u003d wc.goTo(\"computer/\" + s.getNodeName() + \"/config.xml\", \"application/xml\");\n        String xml \u003d p.getWebResponse().getContentAsString();\n        new XmlSlurper().parseText(xml); // verify that it is XML\n\n        // make sure it survives the roundtrip\n        post(\"computer/\" + s.getNodeName() + \"/config.xml\", xml);\n\n        assertNotNull(j.jenkins.getNode(s.getNodeName()));\n\n        xml \u003d IOUtils.toString(getClass().getResource(\"SlaveTest/slave.xml\").openStream());\n        xml \u003d xml.replace(\"NAME\", s.getNodeName());\n        post(\"computer/\" + s.getNodeName() + \"/config.xml\", xml);\n\n        s \u003d (DumbSlave) j.jenkins.getNode(s.getNodeName());\n        assertNotNull(s);\n        assertEquals(\"some text\", s.getNodeDescription());\n        assertEquals(JNLPLauncher.class, s.getLauncher().getClass());\n    }"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.remoteFsCheck:void()","methodSource":"@Test\n    public void remoteFsCheck() throws Exception {\n        DumbSlave.DescriptorImpl d \u003d j.jenkins.getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        assertEquals(FormValidation.ok(), d.doCheckRemoteFS(\"c:\\\\\"));\n        assertEquals(FormValidation.ok(), d.doCheckRemoteFS(\"/tmp\"));\n        assertEquals(FormValidation.Kind.WARNING, d.doCheckRemoteFS(\"relative/path\").kind);\n        assertEquals(FormValidation.Kind.WARNING, d.doCheckRemoteFS(\"/net/foo/bar/zot\").kind);\n        assertEquals(FormValidation.Kind.WARNING, d.doCheckRemoteFS(\"\\\\\\\\machine\\\\folder\\\\foo\").kind);\n    }"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.shouldNotEscapeJnlpSlavesResources:void()","methodSource":"@Test\n    @Issue(\"SECURITY-195\")\n    public void shouldNotEscapeJnlpSlavesResources() throws Exception {\n        Slave slave \u003d j.createSlave();\n\n        // Spot-check correct requests\n        assertJnlpJarUrlIsAllowed(slave, \"agent.jar\");\n        assertJnlpJarUrlIsAllowed(slave, \"slave.jar\");\n        assertJnlpJarUrlIsAllowed(slave, \"remoting.jar\");\n        assertJnlpJarUrlIsAllowed(slave, \"jenkins-cli.jar\");\n        assertJnlpJarUrlIsAllowed(slave, \"hudson-cli.jar\");\n\n        // Check that requests to other WEB-INF contents fail\n        assertJnlpJarUrlFails(slave, \"web.xml\");\n        assertJnlpJarUrlFails(slave, \"web.xml\");\n        assertJnlpJarUrlFails(slave, \"classes/bundled-plugins.txt\");\n        assertJnlpJarUrlFails(slave, \"classes/dependencies.txt\");\n        assertJnlpJarUrlFails(slave, \"plugins/ant.hpi\");\n        assertJnlpJarUrlFails(slave, \"nonexistentfolder/something.txt\");\n\n        // Try various kinds of folder escaping (SECURITY-195)\n        assertJnlpJarUrlFails(slave, \"../\");\n        assertJnlpJarUrlFails(slave, \"..\");\n        assertJnlpJarUrlFails(slave, \"..\\\\\");\n        assertJnlpJarUrlFails(slave, \"../foo/bar\");\n        assertJnlpJarUrlFails(slave, \"..\\\\foo\\\\bar\");\n        assertJnlpJarUrlFails(slave, \"foo/../../bar\");\n        assertJnlpJarUrlFails(slave, \"./../foo/bar\");\n    }","advisory":"SECURITY-195"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.launcherFiltering:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36280\")\n    public void launcherFiltering() {\n        DumbSlave.DescriptorImpl descriptor \u003d\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList\u003cComputerLauncher, Descriptor\u003cComputerLauncher\u003e\u003e descriptors \u003d\n                j.getInstance().getDescriptorList(ComputerLauncher.class);\n        assumeThat(\"we need at least two launchers to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.computerLauncherDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor\u003cComputerLauncher\u003e victim \u003d descriptors.iterator().next();\n        assertThat(descriptor.computerLauncherDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.computerLauncherDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.computerLauncherDescriptors(null), hasItem(victim));\n    }","advisory":"JENKINS-36280"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.retentionFiltering:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36280\")\n    public void retentionFiltering() {\n        DumbSlave.DescriptorImpl descriptor \u003d\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList\u003cRetentionStrategy\u003c?\u003e, Descriptor\u003cRetentionStrategy\u003c?\u003e\u003e\u003e descriptors \u003d RetentionStrategy.all();\n        assumeThat(\"we need at least two retention strategies to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.retentionStrategyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        Descriptor\u003cRetentionStrategy\u003c?\u003e\u003e victim \u003d descriptors.iterator().next();\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.retentionStrategyDescriptors(null), hasItem(victim));\n    }","advisory":"JENKINS-36280"},{"className":"hudson.model.SlaveTest","methodSignature":"hudson.model.SlaveTest.propertyFiltering:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36280\")\n    public void propertyFiltering() {\n        j.jenkins.setAuthorizationStrategy(new ProjectMatrixAuthorizationStrategy()); // otherwise node descriptor is not available\n        DumbSlave.DescriptorImpl descriptor \u003d\n                j.getInstance().getDescriptorByType(DumbSlave.DescriptorImpl.class);\n        DescriptorExtensionList\u003cNodeProperty\u003c?\u003e, NodePropertyDescriptor\u003e descriptors \u003d NodeProperty.all();\n        assumeThat(\"we need at least two node properties to test this\", descriptors.size(), not(anyOf(is(0), is(1))));\n        assertThat(descriptor.nodePropertyDescriptors(null), containsInAnyOrder(descriptors.toArray(new Descriptor[descriptors.size()])));\n\n        NodePropertyDescriptor victim \u003d descriptors.iterator().next();\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n        DynamicFilter.descriptors().add(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), not(hasItem(victim)));\n        DynamicFilter.descriptors().remove(victim);\n        assertThat(descriptor.nodePropertyDescriptors(null), hasItem(victim));\n    }","advisory":"JENKINS-36280"},{"className":"hudson.model.TimeZonePropertyTest","methodSignature":"hudson.model.TimeZonePropertyTest.testEnsureTimeZoneIsNullByDefault:void()","methodSource":"@Test\n    public void testEnsureTimeZoneIsNullByDefault() {\n        String timeZone \u003d TimeZoneProperty.forCurrentUser();\n        assertNull(timeZone);\n    }"},{"className":"hudson.model.TimeZonePropertyTest","methodSignature":"hudson.model.TimeZonePropertyTest.testEnsureInvalidTimeZoneDefaultsToNull:void()","methodSource":"@Test\n    public void testEnsureInvalidTimeZoneDefaultsToNull() throws IOException {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.get(\"John Smith\", true, Collections.emptyMap());\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n\n        TimeZoneProperty tzp \u003d new TimeZoneProperty(\"InvalidTimeZoneName\");\n        user.addProperty(tzp);\n\n        assertNull(TimeZoneProperty.forCurrentUser());\n    }"},{"className":"hudson.model.TimeZonePropertyTest","methodSignature":"hudson.model.TimeZonePropertyTest.testSetUserDefinedTimeZone:void()","methodSource":"@Test\n    public void testSetUserDefinedTimeZone() throws IOException {\n        String timeZone \u003d TimeZone.getDefault().getID();\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.get(\"John Smith\", true, Collections.emptyMap());\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n\n        assertNull(TimeZoneProperty.forCurrentUser());\n        TimeZoneProperty tzp \u003d new TimeZoneProperty(timeZone);\n        user.addProperty(tzp);\n        assertEquals(TimeZone.getDefault().getID(), TimeZoneProperty.forCurrentUser());\n    }"},{"className":"hudson.model.UpdateCenter2Test","methodSignature":"hudson.model.UpdateCenter2Test.install:void()","methodSource":"@Ignore(\"TODO randomly fails: SocketTimeoutException from goTo due to GET http://localhost:…/update-center.json?…; or: Downloaded file …/changelog-history.jpi.tmp does not match expected SHA-256, expected \u0027…\u0027, actual \u0027…\u0027\")\n    @Test public void install() throws Exception {\n        UpdateSite.neverUpdate \u003d false;\n        j.jenkins.pluginManager.doCheckUpdatesServer(); // load the metadata\n        UpdateSite.Plugin plugin \u003d j.jenkins.getUpdateCenter().getPlugin(\"changelog-history\");\n        assumeNotNull(plugin);\n        DownloadJob job \u003d (DownloadJob) plugin.deploy().get(); // this seems like one of the smallest plugin\n        System.out.println(job.status);\n        assertThat(job.status, instanceOf(Success.class));\n    }"},{"className":"hudson.model.UpdateCenter2Test","methodSignature":"hudson.model.UpdateCenter2Test.getLastUpdatedString:void()","methodSource":"@Test public void getLastUpdatedString() {\n        UpdateSite.neverUpdate \u003d false;\n        assertTrue(j.jenkins.getUpdateCenter().getById(\"default\").isDue());\n        assertEquals(Messages.UpdateCenter_n_a(), j.jenkins.getUpdateCenter().getLastUpdatedString());\n    }"},{"className":"hudson.model.UpdateCenter2Test","methodSignature":"hudson.model.UpdateCenter2Test.installInvalidChecksum:void()","methodSource":"@Ignore(\"TODO times out when UC is down with SocketTimeoutException\")\n    @Issue(\"SECURITY-234\")\n    @Test public void installInvalidChecksum() throws Exception {\n        UpdateSite.neverUpdate \u003d false;\n        j.jenkins.pluginManager.doCheckUpdatesServer(); // load the metadata\n        String wrongChecksum \u003d \"ABCDEFG1234567890\";\n\n        // usually the problem is the file having a wrong checksum, but changing the expected one works just the same\n        UpdateSite.Plugin plugin \u003d j.jenkins.getUpdateCenter().getSite(\"default\").getPlugin(\"changelog-history\");\n        assumeNotNull(plugin);\n        plugin.sha512 \u003d wrongChecksum;\n        DownloadJob job \u003d (DownloadJob) plugin.deploy().get();\n        assertThat(job.status, instanceOf(Failure.class));\n        assertTrue(\"error message references checksum\", ((Failure) job.status).problem.getMessage().contains(wrongChecksum));\n    }","advisory":"SECURITY-234"},{"className":"hudson.model.UpdateCenterConnectionStatusTest","methodSignature":"hudson.model.UpdateCenterConnectionStatusTest.doConnectionStatus_default_site:void()","methodSource":"@Test\n    public void doConnectionStatus_default_site() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"updateCenter/connectionStatus\").getJSONObject();\n\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        JSONObject statusObj \u003d response.getJSONObject(\"data\");\n        Assert.assertTrue(statusObj.has(\"updatesite\"));\n        Assert.assertTrue(statusObj.has(\"internet\"));\n\n        // The following is equivalent to the above\n        response \u003d jenkinsRule.getJSON(\"updateCenter/connectionStatus?siteId\u003ddefault\").getJSONObject();\n\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        statusObj \u003d response.getJSONObject(\"data\");\n        Assert.assertTrue(statusObj.has(\"updatesite\"));\n        Assert.assertTrue(statusObj.has(\"internet\"));\n    }"},{"className":"hudson.model.UpdateCenterConnectionStatusTest","methodSignature":"hudson.model.UpdateCenterConnectionStatusTest.doConnectionStatus_unknown_site:void()","methodSource":"@Test\n    public void doConnectionStatus_unknown_site() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"updateCenter/connectionStatus?siteId\u003dblahblah\").getJSONObject();\n\n        Assert.assertEquals(\"error\", response.getString(\"status\"));\n        Assert.assertEquals(\"Cannot check connection status of the update site with ID\u003d\u0027blahblah\u0027. This update center cannot be resolved\", response.getString(\"message\"));\n    }"},{"className":"hudson.model.UpdateCenterConnectionStatusTest","methodSignature":"hudson.model.UpdateCenterConnectionStatusTest.test_states_allok:void()","methodSource":"@Test\n    public void test_states_allok() {\n        UpdateCenter updateCenter \u003d new UpdateCenter(new TestConfig());\n        UpdateCenter.ConnectionCheckJob job \u003d updateCenter.newConnectionCheckJob(updateSite);\n\n        Assert.assertEquals(ConnectionStatus.PRECHECK, job.connectionStates.get(ConnectionStatus.INTERNET));\n        Assert.assertEquals(ConnectionStatus.PRECHECK, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));\n\n        job.run();\n\n        Assert.assertEquals(ConnectionStatus.OK, job.connectionStates.get(ConnectionStatus.INTERNET));\n        Assert.assertEquals(ConnectionStatus.OK, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));\n    }"},{"className":"hudson.model.UpdateCenterConnectionStatusTest","methodSignature":"hudson.model.UpdateCenterConnectionStatusTest.test_states_internet_failed:void()","methodSource":"@Test\n    public void test_states_internet_failed() {\n        UpdateCenter updateCenter \u003d new UpdateCenter(new TestConfig().failInternet());\n        UpdateCenter.ConnectionCheckJob job \u003d updateCenter.newConnectionCheckJob(updateSite);\n\n        job.run();\n\n        Assert.assertEquals(ConnectionStatus.FAILED, job.connectionStates.get(ConnectionStatus.INTERNET));\n        Assert.assertEquals(ConnectionStatus.OK, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));\n    }"},{"className":"hudson.model.UpdateCenterConnectionStatusTest","methodSignature":"hudson.model.UpdateCenterConnectionStatusTest.test_states_uc_failed_timeout:void()","methodSource":"@Test\n    public void test_states_uc_failed_timeout() {\n        UpdateCenter updateCenter \u003d new UpdateCenter(new TestConfig().failUCConnect());\n        UpdateCenter.ConnectionCheckJob job \u003d updateCenter.newConnectionCheckJob(updateSite);\n\n        job.run();\n\n        Assert.assertEquals(ConnectionStatus.OK, job.connectionStates.get(ConnectionStatus.INTERNET));\n        Assert.assertEquals(ConnectionStatus.FAILED, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));\n    }"},{"className":"hudson.model.UpdateCenterConnectionStatusTest","methodSignature":"hudson.model.UpdateCenterConnectionStatusTest.test_states_uc_failed_UnknownHost:void()","methodSource":"@Test\n    public void test_states_uc_failed_UnknownHost() {\n        UpdateCenter updateCenter \u003d new UpdateCenter(new TestConfig().failUCResolve());\n        UpdateCenter.ConnectionCheckJob job \u003d updateCenter.newConnectionCheckJob(updateSite);\n\n        job.run();\n\n        Assert.assertEquals(ConnectionStatus.OK, job.connectionStates.get(ConnectionStatus.INTERNET));\n        Assert.assertEquals(ConnectionStatus.FAILED, job.connectionStates.get(ConnectionStatus.UPDATE_SITE));\n    }"},{"className":"hudson.model.UpdateCenterCustomTest","methodSignature":"hudson.model.UpdateCenterCustomTest.shouldStartupWithCustomUpdateCenter:void()","methodSource":"@Test\n    public void shouldStartupWithCustomUpdateCenter() {\n        UpdateCenter uc \u003d j.jenkins.getUpdateCenter();\n        assertThat(\"Update Center must be a custom instance\", uc, instanceOf(CustomUpdateCenter.class));\n    }"},{"className":"hudson.model.UpdateCenterPluginInstallTest","methodSignature":"hudson.model.UpdateCenterPluginInstallTest.test_installUnknownPlugin:void()","methodSource":"@Test\n    public void test_installUnknownPlugin() throws IOException, SAXException {\n        setup();\n        JenkinsRule.JSONWebResponse response \u003d jenkinsRule.postJSON(\"pluginManager/installPlugins\", buildInstallPayload(\"unknown_plugin_xyz\"));\n        JSONObject json \u003d response.getJSONObject();\n\n        Assert.assertEquals(\"error\", json.get(\"status\"));\n        Assert.assertEquals(\"No such plugin: unknown_plugin_xyz\", json.get(\"message\"));\n        Assert.assertEquals(\"error\", json.get(\"status\"));\n        Assert.assertEquals(\"No such plugin: unknown_plugin_xyz\", json.get(\"message\"));\n    }"},{"className":"hudson.model.UpdateCenterPluginInstallTest","methodSignature":"hudson.model.UpdateCenterPluginInstallTest.test_installKnownPlugins:void()","methodSource":"@Test\n    public void test_installKnownPlugins() throws IOException, SAXException {\n        setup();\n        JenkinsRule.JSONWebResponse installResponse \u003d jenkinsRule.postJSON(\"pluginManager/installPlugins\", buildInstallPayload(\"changelog-history\", \"git\"));\n        JSONObject json \u003d installResponse.getJSONObject();\n\n        Assert.assertEquals(\"ok\", json.get(\"status\"));\n        JSONObject data \u003d json.getJSONObject(\"data\");\n        Assert.assertTrue(data.has(\"correlationId\"));\n\n        String correlationId \u003d data.getString(\"correlationId\");\n        JSONObject installStatus \u003d jenkinsRule.getJSON(\"updateCenter/installStatus?correlationId\u003d\" + correlationId).getJSONObject();\n        Assert.assertEquals(\"ok\", json.get(\"status\"));\n        JSONObject status \u003d installStatus.getJSONObject(\"data\");\n        JSONArray states \u003d status.getJSONArray(\"jobs\");\n        Assert.assertEquals(states.toString(), 2, states.size());\n\n        JSONObject pluginInstallState \u003d states.getJSONObject(0);\n        Assert.assertEquals(\"changelog-history\", pluginInstallState.get(\"name\"));\n        pluginInstallState \u003d states.getJSONObject(1);\n        Assert.assertEquals(\"git\", pluginInstallState.get(\"name\"));\n    }"},{"className":"hudson.model.UpdateCenterTest","methodSignature":"hudson.model.UpdateCenterTest.data:void()","methodSource":"@Test public void data() {\n        try {\n            doData(\"https://updates.jenkins.io/update-center.json?version\u003dbuild\");\n            doData(\"https://updates.jenkins.io/stable/update-center.json?version\u003dbuild\");\n        } catch (Exception x) {\n            // TODO this should not be in core at all; should be in repo built by a separate job somewhere\n            assumeNoException(\"Might be no Internet connectivity, or might start failing due to expiring certificate through no fault of code changes\", x);\n        }\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.relativeURLs:void()","methodSource":"@Test public void relativeURLs() throws Exception {\n        URL url \u003d new URL(baseUrl, \"/plugins/htmlpublisher-update-center.json\");\n        UpdateSite site \u003d new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        overrideUpdateSite(site);\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        Data data \u003d site.getData();\n        assertNotNull(data);\n        assertEquals(new URL(url, \"jenkins.war\").toString(), data.core.url);\n        assertEquals(new HashSet\u003c\u003e(Arrays.asList(\"htmlpublisher\", \"dummy\")), data.plugins.keySet());\n        assertEquals(new URL(url, \"htmlpublisher.jpi\").toString(), data.plugins.get(\"htmlpublisher\").url);\n        assertEquals(\"http://nowhere.net/dummy.hpi\", data.plugins.get(\"dummy\").url);\n\n        UpdateSite.Plugin htmlPublisherPlugin \u003d data.plugins.get(\"htmlpublisher\");\n        assertEquals(\"Wrong name of plugin found\", \"HTML Publisher\", htmlPublisherPlugin.getDisplayName());\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.wikiUrlFromSingleSite:void()","methodSource":"@Test public void wikiUrlFromSingleSite() throws Exception {\n        UpdateSite site \u003d getUpdateSite(\"/plugins/htmlpublisher-update-center.json\");\n        overrideUpdateSite(site);\n        PluginWrapper wrapper \u003d buildPluginWrapper(\"dummy\", \"https://wiki.jenkins.io/display/JENKINS/dummy\");\n        assertEquals(\"https://plugins.jenkins.io/dummy\", wrapper.getUrl());\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.wikiUrlFromMoreSites:void()","methodSource":"@Test public void wikiUrlFromMoreSites() throws Exception {\n        UpdateSite site \u003d getUpdateSite(\"/plugins/htmlpublisher-update-center.json\");\n        UpdateSite alternativeSite \u003d getUpdateSite(\"/plugins/alternative-update-center.json\", \"alternative\");\n        overrideUpdateSite(site, alternativeSite);\n        // sites use different Wiki URL for dummy -\u003e use URL from manifest\n        PluginWrapper wrapper \u003d buildPluginWrapper(\"dummy\", \"https://wiki.jenkins.io/display/JENKINS/dummy\");\n        assertEquals(\"https://wiki.jenkins.io/display/JENKINS/dummy\", wrapper.getUrl());\n        // sites use the same Wiki URL for HTML Publisher -\u003e use it\n        wrapper \u003d buildPluginWrapper(\"htmlpublisher\", \"https://plugins.jenkins.io/htmlpublisher\");\n        assertEquals(\"https://plugins.jenkins.io/htmlpublisher\", wrapper.getUrl());\n        // only one site has it\n        wrapper \u003d buildPluginWrapper(\"foo\", \"https://wiki.jenkins.io/display/JENKINS/foo\");\n        assertEquals(\"https://plugins.jenkins.io/foo\", wrapper.getUrl());\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.updateDirectlyWithJson:void()","methodSource":"@Test public void updateDirectlyWithJson() throws Exception {\n        UpdateSite us \u003d new UpdateSite(\"default\", new URL(baseUrl, \"update-center.json\").toExternalForm());\n        assertNull(us.getPlugin(\"AdaptivePlugin\"));\n        assertEquals(FormValidation.ok(), us.updateDirectly(/* TODO the certificate is now expired, and downloading a fresh copy did not seem to help */false).get());\n        assertNotNull(us.getPlugin(\"AdaptivePlugin\"));\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.lackOfDataDoesNotFailWarningsCode:void()","methodSource":"@Test public void lackOfDataDoesNotFailWarningsCode() {\n        assertNull(\"plugin data is not present\", j.jenkins.getUpdateCenter().getSite(\"default\").getData());\n\n        // nothing breaking?\n        j.jenkins.getExtensionList(UpdateSiteWarningsMonitor.class).get(0).getActivePluginWarningsByPlugin();\n        j.jenkins.getExtensionList(UpdateSiteWarningsMonitor.class).get(0).getActiveCoreWarnings();\n        j.jenkins.getExtensionList(UpdateSiteWarningsConfiguration.class).get(0).getAllWarnings();\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.incompleteWarningsJson:void()","methodSource":"@Test public void incompleteWarningsJson() throws Exception {\n        UpdateSite site \u003d getUpdateSite(\"/plugins/warnings-update-center-malformed.json\");\n        overrideUpdateSite(site);\n        assertEquals(\"number of warnings\", 7, site.getData().getWarnings().size());\n        assertNotEquals(\"plugin data is present\", Collections.emptyMap(), site.getData().plugins);\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.getAvailables:void()","methodSource":"@Test public void getAvailables() throws Exception {\n        UpdateSite site \u003d getUpdateSite(\"/plugins/available-update-center.json\");\n        List\u003cUpdateSite.Plugin\u003e available \u003d site.getAvailables();\n        assertEquals(\"ALowTitle\", available.get(0).getDisplayName());\n        assertEquals(\"TheHighTitle\", available.get(1).getDisplayName());\n    }"},{"className":"hudson.model.UpdateSiteTest","methodSignature":"hudson.model.UpdateSiteTest.deprecations:void()","methodSource":"@Test public void deprecations() throws Exception {\n        UpdateSite site \u003d getUpdateSite(\"/plugins/deprecations-update-center.json\");\n\n        // present in plugins section of update-center.json, not deprecated\n        UpdateSite.Plugin credentials \u003d site.getPlugin(\"credentials\");\n        assertNotNull(credentials);\n        assertFalse(credentials.isDeprecated());\n        assertNull(credentials.getDeprecation());\n        assertNull(site.getData().getDeprecations().get(\"credentials\"));\n\n        // present in plugins section of update-center.json, deprecated via label and top-level list\n        UpdateSite.Plugin iconShim \u003d site.getPlugin(\"icon-shim\");\n        assertNotNull(iconShim);\n        assertTrue(iconShim.isDeprecated());\n        assertEquals(\"https://www.jenkins.io/deprecations/icon-shim/\", iconShim.getDeprecation().url);\n        assertEquals(\"https://www.jenkins.io/deprecations/icon-shim/\", site.getData().getDeprecations().get(\"icon-shim\").url);\n\n        // present in plugins section of update-center.json, deprecated via label only\n        UpdateSite.Plugin tokenMacro \u003d site.getPlugin(\"token-macro\");\n        assertNotNull(tokenMacro);\n        assertTrue(tokenMacro.isDeprecated());\n        assertEquals(\"https://wiki.jenkins-ci.org/display/JENKINS/Token+Macro+Plugin\", tokenMacro.getDeprecation().url);\n        assertEquals(\"https://wiki.jenkins-ci.org/display/JENKINS/Token+Macro+Plugin\", site.getData().getDeprecations().get(\"token-macro\").url);\n\n        // not in plugins section of update-center.json, deprecated via top-level list\n        UpdateSite.Plugin variant \u003d site.getPlugin(\"variant\");\n        assertNull(variant);\n        assertEquals(\"https://www.jenkins.io/deprecations/variant/\", site.getData().getDeprecations().get(\"variant\").url);\n    }"},{"className":"hudson.model.UsageStatisticsTest","methodSignature":"hudson.model.UsageStatisticsTest.roundtrip:void()","methodSource":"@Test\n    public void roundtrip() throws Exception {\n        j.createOnlineSlave();\n        warmUpNodeMonitorCache();\n\n        // key pair for testing\n        String privateKey \u003d\n                \"30820276020100300d06092a864886f70d0101010500048202603082025c0201000281810084cababd\"\n                    + \"b38040f659c2cb07a36d758f46e84ebc3d6ba39d967aedf1d396b0788ed3ab868d45ce280b11\"\n                    + \"02b434c2a250ddc3254defe1785ab4f94d7038cf69ecca16753d2de3f6ad8976b3f74902d86341\"\n                    + \"11d730982da74e1a6e3fc0bc3523bba53e45b8a8cbfd0321b94efc9f7fefbe66ad85281e3d0323\"\n                    + \"d87f4426ec51204f0203010001028180784deaacdea8bd31f2d44578601954be3f714b93c2d977\"\n                    + \"dbd76efb8f71303e249ad12dbeb2d2a1192a1d7923a6010768d7e06a3597b3df83de1d5688eb0f\"\n                    + \"0e58c76070eddd696682730c93890dc727564c65dc8416bfbde5aad4eb7a97ed923efb55a291da\"\n                    + \"f3c00810c0e43851298472fd539aab355af8cedcf1e9a0cbead661024100c498375102b068806c\"\n                    + \"71dec838dc8dfa5624fb8a524a49cffadc19d10689a8c9c26db514faba6f96e50a605122abd3c9\"\n                    + \"af16e82f2b7565f384528c9f31ea5947024100aceafd31d7f4872a873c7e5fe88f20c2fb086a05\"\n                    + \"3c6970026b3ce364768e2033100efb1ad8f2010fe53454a29decedc23a8a0c8df347742b1f13e1\"\n                    + \"1bd3a284b9024100931321470cd0f6cd24d4278bf8e61f9d69b6ef2bf3163a944aa340f91c7ffd\"\n                    + \"f33aeea22b18cc43514af6714a21bb148d6cdca14530a8fa65acd7a8f62bfc9b5f024067452059\"\n                    + \"f8438dc61466488336fce3f00ec483ad04db638dce45daf850e5a8cd5635dc39b87f2fab329402\"\n                    + \"47ec5167ddabe06e870858104500967ac687aa73e102407e3b7997503e18d8d0f094d5e0bd5d57\"\n                    + \"cb93cb39a2fc42cec1ea9a1562786438b61139e45813204d72c919f5397e139ad051d98e4d0f8a\"\n                    + \"06d237f42c0d8440fb\";\n        String publicKey \u003d\n                \"30819f300d06092a864886f70d010101050003818d003081890281810084cababdb38040f659c2cb07\"\n                    + \"a36d758f46e84ebc3d6ba39d967aedf1d396b0788ed3ab868d45ce280b1102b434c2a250ddc3\"\n                    + \"254defe1785ab4f94d7038cf69ecca16753d2de3f6ad8976b3f74902d8634111d730982da74e1a\"\n                    + \"6e3fc0bc3523bba53e45b8a8cbfd0321b94efc9f7fefbe66ad85281e3d0323d87f4426ec51204f\"\n                    + \"0203010001\";\n\n        String data \u003d new UsageStatistics(publicKey).getStatData();\n\n        KeyFactory keyFactory \u003d KeyFactory.getInstance(\"RSA\");\n        RSAPrivateKey priv \u003d (RSAPrivateKey) keyFactory.generatePrivate(new PKCS8EncodedKeySpec(Util.fromHexString(privateKey)));\n\n        byte[] cipherText \u003d Base64.getDecoder().decode(data.getBytes(StandardCharsets.UTF_8));\n        InputStreamReader r \u003d new InputStreamReader(new GZIPInputStream(\n                new CombinedCipherInputStream(new ByteArrayInputStream(cipherText), priv, \"AES\")), StandardCharsets.UTF_8);\n        JSONObject o \u003d JSONObject.fromObject(IOUtils.toString(r));\n        Jenkins jenkins \u003d j.jenkins;\n        // A bit intrusive with UsageStatistics internals, but done to prevent undetected changes\n        // that would cause issues with parsing/analyzing uploaded usage statistics\n        assertEquals(1, o.getInt(\"stat\"));\n        assertEquals(jenkins.getLegacyInstanceId(), o.getString(\"install\"));\n        assertEquals(jenkins.servletContext.getServerInfo(), o.getString(\"servletContainer\"));\n        assertEquals(Jenkins.VERSION, o.getString(\"version\"));\n\n        assertTrue(o.has(\"plugins\"));\n        assertTrue(o.has(\"jobs\"));\n        assertTrue(o.has(\"nodes\"));\n\n        // Validate the plugins format\n        List\u003cJSONObject\u003e plugins \u003d sortPlugins((List\u003cJSONObject\u003e) o.get(\"plugins\"));\n        Set\u003cString\u003e keys \u003d new TreeSet\u003c\u003e();\n        keys.add(\"name\");\n        keys.add(\"version\");\n        Set\u003cString\u003e reported \u003d new TreeSet\u003c\u003e();\n        for (JSONObject plugin : plugins) {\n            assertThat(plugin.keySet(), is(keys));\n            assertThat(plugin.get(\"name\"), instanceOf(String.class));\n            assertThat(plugin.get(\"version\"), instanceOf(String.class));\n            String name \u003d plugin.getString(\"name\");\n            assertThat(\"No duplicates\", reported.contains(name), is(false));\n            reported.add(name);\n        }\n        assertThat(reported, hasItem(\"matrix-auth\"));\n\n        // Compare content to watch out for backwards compatibility\n        compareWithFile(\"jobs.json\", sortJobTypes((JSONObject) o.get(\"jobs\")));\n        JSONArray nodes \u003d o.getJSONArray(\"nodes\");\n        for (Object node : nodes) {\n            ((JSONObject) node).remove(\"os\"); // depends on timing of AbstractNodeMonitorDescriptor.get whether or not this will be present\n        }\n        compareWithFile(\"nodes.json\", nodes);\n    }"},{"className":"hudson.model.UserIdMigratorTest","methodSignature":"hudson.model.UserIdMigratorTest.migrateSimpleUser:void()","methodSource":"@Test\n    @LocalData\n    public void migrateSimpleUser() {\n        String userId \u003d \"fred\";\n        User fred \u003d User.getById(userId, false);\n        assertThat(fred.getFullName(), is(\"Fred Smith\"));\n    }"},{"className":"hudson.model.UserIdMigratorTest","methodSignature":"hudson.model.UserIdMigratorTest.migrateMultipleUsers:void()","methodSource":"@Test\n    @LocalData\n    public void migrateMultipleUsers() {\n        assertThat(User.getAll().size(), is(3));\n        User fred \u003d User.getById(\"fred\", false);\n        assertThat(fred.getFullName(), is(\"Fred Smith\"));\n        User legacyUser \u003d User.getById(\"foo/bar\", false);\n        assertThat(legacyUser.getFullName(), is(\"Foo Bar\"));\n        User oldLegacyUser \u003d User.getById(\"zzzက\", false);\n        assertThat(oldLegacyUser.getFullName(), is(\"Old Legacy\"));\n    }"},{"className":"hudson.model.UserPropertyTest","methodSignature":"hudson.model.UserPropertyTest.test:void()","methodSource":"@Test\n    @Issue(\"JENKINS-9062\")\n    public void test() throws Exception {\n        User u \u003d User.get(\"foo\");\n        u.addProperty(new UserProperty1());\n        j.configRoundtrip(u);\n        for (UserProperty p : u.getAllProperties())\n            assertNotNull(p);\n    }","advisory":"JENKINS-9062"},{"className":"hudson.model.UserPropertyTest","methodSignature":"hudson.model.UserPropertyTest.nestedUserReference:void()","methodSource":"@Test\n    @LocalData\n    public void nestedUserReference() throws Exception {\n        // first time it loads from FS into object\n        User user \u003d User.get(\"nestedUserReference\", false, emptyMap());\n        assertThat(\"nested reference should be updated after jenkins start\", user, nestedUserSet());\n\n        SetUserUserProperty property \u003d user.getProperty(SetUserUserProperty.class);\n        File testFile \u003d property.getInnerUserClass().userFile;\n        List\u003cString\u003e fileLines \u003d Files.readAllLines(testFile.toPath(), StandardCharsets.US_ASCII);\n        assertThat(fileLines, hasSize(1));\n\n        j.configRoundtrip(user);\n\n        user \u003d User.get(\"nestedUserReference\", false, Collections.emptyMap());\n        assertThat(\"nested reference should exist after user configuration change\", user, nestedUserSet());\n\n        fileLines \u003d Files.readAllLines(testFile.toPath(), StandardCharsets.US_ASCII);\n        assertThat(fileLines, hasSize(1));\n    }"},{"className":"hudson.model.UserRestartTest","methodSignature":"hudson.model.UserRestartTest.persistedUsers:void()","methodSource":"@Test public void persistedUsers() throws Throwable {\n        sessions.then(r -\u003e {\n            User bob \u003d User.getById(\"bob\", true);\n            bob.setFullName(\"Bob\");\n            bob.addProperty(new Mailer.UserProperty(\"bob@nowhere.net\"));\n        });\n        sessions.then(r -\u003e {\n            User bob \u003d User.getById(\"bob\", false);\n            assertNotNull(bob);\n            assertEquals(\"Bob\", bob.getFullName());\n            Mailer.UserProperty email \u003d bob.getProperty(Mailer.UserProperty.class);\n            assertNotNull(email);\n            assertEquals(\"bob@nowhere.net\", email.getAddress());\n        });\n    }"},{"className":"hudson.model.UserRestartTest","methodSignature":"hudson.model.UserRestartTest.badSerialization:void()","methodSource":"@Issue(\"JENKINS-45892\")\n    @Test\n    public void badSerialization() throws Throwable {\n        sessions.then(r -\u003e {\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            FreeStyleProject p \u003d r.createFreeStyleProject(\"p\");\n            User u \u003d User.get(\"pqhacker\");\n            u.setFullName(\"Pat Q. Hacker\");\n            u.save();\n            p.addProperty(new BadProperty(u));\n            String text \u003d p.getConfigFile().asString();\n            assertThat(text, not(containsString(\"\u003cfullName\u003ePat Q. Hacker\u003c/fullName\u003e\")));\n            assertThat(text, containsString(\"\u003cid\u003epqhacker\u003c/id\u003e\"));\n        });\n        sessions.then(r -\u003e {\n            FreeStyleProject p \u003d r.jenkins.getItemByFullName(\"p\", FreeStyleProject.class);\n            /*\n             * User.Replacer.readResolve() is racy, as its comments acknowledge. The loading of jobs\n             * and the initialization of UserIdMapper run concurrently, and UserIdMapper may not\n             * have been initialized yet when we are loading the job. The only way for this test to\n             * work reliably is to reload the job after UserIdMapper has been initialized, thus\n             * assuring that the job\u0027s reference to the user can be properly deserialized.\n             */\n            p.doReload();\n            User u \u003d p.getProperty(BadProperty.class).user; // do not inline: call User.get second\n            assertEquals(User.get(\"pqhacker\"), u);\n        });\n    }","advisory":"JENKINS-45892"},{"className":"hudson.model.UserRestartTest","methodSignature":"hudson.model.UserRestartTest.legacyConfigMoveCannotEscapeUserFolder:void()","methodSource":"@Test\n    @Issue(\"SECURITY-897\")\n    public void legacyConfigMoveCannotEscapeUserFolder() throws Throwable {\n        sessions.then(r -\u003e {\n                r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n                assertThat(r.jenkins.isUseSecurity(), equalTo(true));\n\n                // in order to create the folder \"users\"\n                User.getById(\"admin\", true).save();\n\n                { // attempt with \"..\"\n                    JenkinsRule.WebClient wc \u003d r.createWebClient()\n                            .withThrowExceptionOnFailingStatusCode(false);\n\n                    WebRequest request \u003d new WebRequest(new URI(r.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"..\", \"any-password\"));\n                    wc.getPage(request);\n                }\n                { // attempt with \"../users/..\"\n                    JenkinsRule.WebClient wc \u003d r.createWebClient()\n                            .withThrowExceptionOnFailingStatusCode(false);\n\n                    WebRequest request \u003d new WebRequest(new URI(r.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"../users/..\", \"any-password\"));\n                    wc.getPage(request);\n                }\n\n                // security is still active\n                assertThat(r.jenkins.isUseSecurity(), equalTo(true));\n                // but, the config file was moved\n                FilePath rootPath \u003d r.jenkins.getRootPath();\n                assertThat(rootPath.child(\"config.xml\").exists(), equalTo(true));\n        });\n        sessions.then(r -\u003e {\n                assertThat(r.jenkins.isUseSecurity(), equalTo(true));\n                FilePath rootPath \u003d r.jenkins.getRootPath();\n                assertThat(rootPath.child(\"config.xml\").exists(), equalTo(true));\n        });\n    }","advisory":"SECURITY-897"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.userPropertySummaryAndActionAreShownInUserPage:void()","methodSource":"@Issue(\"JENKINS-2331\")\n    @Test public void userPropertySummaryAndActionAreShownInUserPage() throws Exception {\n\n        UserProperty property \u003d new UserPropertyImpl(\"NeedleInPage\");\n        UserProperty.all().add(property.getDescriptor());\n\n        User user \u003d User.get(\"user-test-case\");\n        user.addProperty(property);\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"user/user-test-case\");\n\n        WebAssert.assertTextPresentInElement(page, \"NeedleInPage\", \"main-panel\");\n        WebAssert.assertTextPresentInElement(page, ((Action) property).getDisplayName(), \"side-panel\");\n\n    }","advisory":"JENKINS-2331"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.defaultUserAvatarCanBeFetched:void()","methodSource":"@Issue(\"JENKINS-7494\")\n    @Test public void defaultUserAvatarCanBeFetched() throws Exception {\n        User user \u003d User.get(\"avatar-user\", true);\n        HtmlPage page \u003d j.createWebClient().goTo(\"user/\" + user.getDisplayName());\n        j.assertAllImageLoadSuccessfully(page);\n    }","advisory":"JENKINS-7494"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.getAuthorities:void()","methodSource":"@Test public void getAuthorities() {\n        JenkinsRule.DummySecurityRealm realm \u003d j.createDummySecurityRealm();\n        realm.addGroups(\"administrator\", \"admins\");\n        realm.addGroups(\"alice\", \"users\");\n        realm.addGroups(\"bob\", \"users\", \"lpadmin\", \"bob\");\n        j.jenkins.setSecurityRealm(realm);\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        auth.add(Jenkins.ADMINISTER, \"admins\");\n        auth.add(Permission.READ, \"users\");\n        j.jenkins.setAuthorizationStrategy(auth);\n        SecurityContext seccon \u003d SecurityContextHolder.getContext();\n        Authentication orig \u003d seccon.getAuthentication();\n        try {\n            seccon.setAuthentication(User.get(\"administrator\").impersonate2());\n            assertEquals(\"[admins]\", User.get(\"administrator\").getAuthorities().toString());\n            assertEquals(\"[users]\", User.get(\"alice\").getAuthorities().toString());\n            assertEquals(\"[lpadmin, users]\", User.get(\"bob\").getAuthorities().toString());\n            assertEquals(\"[]\", User.get(\"MasterOfXaos\").getAuthorities().toString());\n            seccon.setAuthentication(User.get(\"alice\").impersonate2());\n            assertEquals(\"[]\", User.get(\"alice\").getAuthorities().toString());\n            assertEquals(\"[]\", User.get(\"bob\").getAuthorities().toString());\n        } finally {\n            seccon.setAuthentication(orig);\n        }\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testGetUser:void()","methodSource":"@Test\n    public void testGetUser() throws Exception {\n        {\n        User user \u003d User.get(\"John Smith\");\n        User user2 \u003d User.get(\"John Smith2\");\n        user2.setFullName(\"John Smith\");\n        assertNotSame(\"Users should not have the same id.\", user.getId(), user2.getId());\n        }\n        j.jenkins.reload();\n        {\n        User user3 \u003d User.get(\"John Smith\");\n        user3.setFullName(\"Alice Smith\");\n        assertEquals(\"What was this asserting exactly?\", \"John Smith\", user3.getId());\n        User user4 \u003d User.get(\"Marie\", false, Collections.EMPTY_MAP);\n        assertNull(\"User should not be created because Marie does not exists.\", user4);\n        }\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.caseInsensitivity:void()","methodSource":"@Test\n    public void caseInsensitivity() {\n        j.jenkins.setSecurityRealm(new IdStrategySpecifyingSecurityRealm(new IdStrategy.CaseInsensitive()));\n        User user \u003d User.get(\"john smith\");\n        User user2 \u003d User.get(\"John Smith\");\n        assertSame(\"Users should have the same id.\", user.getId(), user2.getId());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.caseSensitivity:void()","methodSource":"@Test\n    public void caseSensitivity() {\n        j.jenkins.setSecurityRealm(new IdStrategySpecifyingSecurityRealm(new IdStrategy.CaseSensitive()));\n        User user \u003d User.get(\"john smith\");\n        User user2 \u003d User.get(\"John Smith\");\n        assertNotSame(\"Users should not have the same id.\", user.getId(), user2.getId());\n        assertEquals(\"john smith\", User.idStrategy().keyFor(user.getId()));\n        assertEquals(\"John Smith\", User.idStrategy().keyFor(user2.getId()));\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.caseSensitivityEmail:void()","methodSource":"@Test\n    public void caseSensitivityEmail() {\n        j.jenkins.setSecurityRealm(new IdStrategySpecifyingSecurityRealm(new IdStrategy.CaseSensitiveEmailAddress()));\n        User user \u003d User.get(\"john.smith@acme.org\");\n        User user2 \u003d User.get(\"John.Smith@acme.org\");\n        assertNotSame(\"Users should not have the same id.\", user.getId(), user2.getId());\n        assertEquals(\"john.smith@acme.org\", User.idStrategy().keyFor(user.getId()));\n        assertEquals(\"John.Smith@acme.org\", User.idStrategy().keyFor(user2.getId()));\n        user2 \u003d User.get(\"john.smith@ACME.ORG\");\n        assertEquals(\"Users should have the same id.\", user.getId(), user2.getId());\n        assertEquals(\"john.smith@acme.org\", User.idStrategy().keyFor(user2.getId()));\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testAddAndGetProperty:void()","methodSource":"@Test\n    public void testAddAndGetProperty() throws Exception {\n        {\n        User user \u003d User.get(\"John Smith\");\n        UserProperty prop \u003d new SomeUserProperty();\n        user.addProperty(prop);\n        assertNotNull(\"User should have SomeUserProperty property.\", user.getProperty(SomeUserProperty.class));\n        assertEquals(\"UserProperty1 should be assigned to its descriptor\", prop, user.getProperties().get(prop.getDescriptor()));\n        assertTrue(\"User should should contain SomeUserProperty.\", user.getAllProperties().contains(prop));\n        }\n        j.jenkins.reload();\n        {\n        assertNotNull(\"User should have SomeUserProperty property.\", User.getById(\"John Smith\", false).getProperty(SomeUserProperty.class));\n        }\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testImpersonateAndCurrent:void()","methodSource":"@Test\n    public void testImpersonateAndCurrent() {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User user \u003d User.get(\"John Smith\");\n        assertNotSame(\"User John Smith should not be the current user.\", User.current().getId(), user.getId());\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertEquals(\"User John Smith should be the current user.\", user.getId(), User.current().getId());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testGetUnknown:void()","methodSource":"@Test\n    public void testGetUnknown() {\n        User user \u003d User.get(\"John Smith\");\n        assertNotNull(\"User should not be null.\", user);\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testGetAndGetAll:void()","methodSource":"@Test\n    public void testGetAndGetAll() {\n        User user \u003d User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User John Smith should not be created.\", user);\n        assertFalse(\"Jenkins should not contain user John Smith.\", User.getAll().contains(user));\n        User user2 \u003d User.get(\"John Smith2\", true, Collections.emptyMap());\n        assertNotNull(\"User John Smith2 should be created.\", user2);\n        assertTrue(\"Jenkins should contain user John Smith2.\", User.getAll().contains(user2));\n        user \u003d User.get(\"John Smith2\", false, Collections.emptyMap());\n        assertNotNull(\"User John Smith should be created.\", user);\n        assertTrue(\"Jenkins should contain user John Smith.\", User.getAll().contains(user));\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testReload:void()","methodSource":"@Test\n    public void testReload() throws Exception {\n        String originalName \u003d \"John Smith\";\n        User user \u003d User.get(originalName, true, Collections.emptyMap());\n        user.save();\n        String temporaryName \u003d \"Alice Smith\";\n        user.setFullName(temporaryName);\n\n        j.jenkins.reload();\n\n        user \u003d User.get(originalName, false, Collections.emptyMap());\n        assertEquals(\"User should have original name.\", originalName, user.getFullName());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testGetBuildsAndGetProjects:void()","methodSource":"@Test\n    public void testGetBuildsAndGetProjects() throws Exception {\n        User user \u003d User.get(\"John Smith\", true, Collections.emptyMap());\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"free\");\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(\"free2\");\n        project.save();\n        FakeChangeLogSCM scm \u003d new FakeChangeLogSCM();\n        scm.addChange().withAuthor(user.getId());\n        project.setScm(scm);\n        j.buildAndAssertSuccess(project);\n        j.buildAndAssertSuccess(project2);\n        Build build \u003d project.getLastBuild();\n        Build build2 \u003d project2.getLastBuild();\n        assertTrue(\"User should participate in the last build of project free.\", user.getBuilds().contains(build));\n        assertFalse(\"User should not participate in the last build of project free2.\", user.getBuilds().contains(build2));\n        assertTrue(\"User should participate in the project free.\", user.getProjects().contains(project));\n        assertFalse(\"User should not participate in the project free2.\", user.getProjects().contains(project2));\n\n        //JENKINS-16178: build should include also builds scheduled by user\n\n        build2.replaceAction(new CauseAction(new Cause.UserIdCause()));\n        assertFalse(\"User should not participate in the last build of project free2.\", user.getBuilds().contains(build2));\n        assertFalse(\"Current user should not participate in the last build of project free.\", User.current().getBuilds().contains(build));\n        assertTrue(\"Current user should participate in the last build of project free2.\", User.current().getBuilds().contains(build2));\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testSave:void()","methodSource":"@Test\n    public void testSave() throws Exception {\n        {\n        User user \u003d User.get(\"John Smith\", true, Collections.emptyMap());\n        }\n        j.jenkins.reload();\n        {\n        User user \u003d User.get(\"John Smith\", false, Collections.emptyMap());\n        assertNull(\"User should be null.\", user);\n        user \u003d User.get(\"John Smithl\", true, Collections.emptyMap());\n        user.addProperty(new SomeUserProperty());\n        user.save();\n        }\n        j.jenkins.reload();\n        {\n        User user \u003d User.get(\"John Smithl\", false, Collections.emptyMap());\n        assertNotNull(\"User should not be null.\", user);\n        assertNotNull(\"User should be saved with all changes.\", user.getProperty(SomeUserProperty.class));\n        }\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.unrecoverableFullName:void()","methodSource":"@Issue(\"JENKINS-16332\")\n    @Test public void unrecoverableFullName() throws Throwable {\n        String id;\n        {\n        User u \u003d User.get(\"John Smith \u003cjsmith@nowhere.net\u003e\");\n        assertEquals(\"jsmith@nowhere.net\", MailAddressResolver.resolve(u));\n        id \u003d u.getId();\n        }\n        j.jenkins.reload();\n        {\n        User u \u003d User.get(id);\n        assertEquals(\"jsmith@nowhere.net\", MailAddressResolver.resolve(u));\n        }\n    }","advisory":"JENKINS-16332"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testDelete:void()","methodSource":"@Test\n    public void testDelete() throws Exception {\n        {\n         User user \u003d User.get(\"John Smith\", true, Collections.emptyMap());\n         user.save();\n         File configFolder \u003d user.getUserFolder();\n         user.delete();\n         assertFalse(\"User should be deleted with his persistent data.\", configFolder.exists());\n         assertFalse(\"User should be deleted from memory.\", User.getAll().contains(user));\n         user \u003d User.get(\"John Smith\", false, Collections.emptyMap());\n         assertNull(\"User should be deleted from memory.\", user);\n        }\n        j.jenkins.reload();\n        {\n         boolean contained \u003d false;\n         for (User u : User.getAll()) {\n             if (u.getId().equals(\"John Smith\")) {\n                 contained \u003d true;\n                 break;\n             }\n         }\n         assertFalse(\"User should not be loaded.\", contained);\n        }\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testDoConfigSubmit:void()","methodSource":"@Test\n    public void testDoConfigSubmit() throws Exception {\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        User user2 \u003d realm.createAccount(\"John Smith2\", \"password\");\n        user2.save();\n        auth.add(Jenkins.ADMINISTER, user.getId());\n        auth.add(Jenkins.READ, user2.getId());\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        HtmlForm form \u003d j.createWebClient().withBasicCredentials(user.getId(), \"password\").goTo(user2.getUrl() + \"/configure\").getFormByName(\"config\");\n        form.getInputByName(\"_.fullName\").setValue(\"Alice Smith\");\n        j.submit(form);\n        assertEquals(\"User should have full name Alice Smith.\", \"Alice Smith\", user2.getFullName());\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        assertThrows(\"User should not have permission to configure another user.\", AccessDeniedException3.class, () -\u003e user.doConfigSubmit(null, null));\n        form \u003d j.createWebClient().withBasicCredentials(user2.getId(), \"password\").goTo(user2.getUrl() + \"/configure\").getFormByName(\"config\");\n\n        form.getInputByName(\"_.fullName\").setValue(\"John\");\n        j.submit(form);\n        assertEquals(\"User should be albe to configure himself.\", \"John\", user2.getFullName());\n\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testHasPermission:void()","methodSource":"@Test\n    public void testHasPermission() throws IOException {\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        User user2 \u003d realm.createAccount(\"John Smith2\", \"password\");\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"Current user should not have permission read.\", user2.hasPermission(Permission.READ));\n        assertTrue(\"Current user should always have permission read to himself.\", user.hasPermission(Permission.READ));\n        auth.add(Jenkins.ADMINISTER, user.getId());\n        assertTrue(\"Current user should have permission read, because he has permission administer.\", user2.hasPermission(Permission.READ));\n        SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS2);\n        user2 \u003d User.get(\"anonymous\");\n        assertFalse(\"Current user should not have permission read, because does not have global permission read and authentication is anonymous.\", user2.hasPermission(Permission.READ));\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.testCanDelete:void()","methodSource":"@Test\n    public void testCanDelete() throws IOException {\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false);\n        j.jenkins.setSecurityRealm(realm);\n        User user \u003d realm.createAccount(\"John Smith\", \"password\");\n        User user2 \u003d realm.createAccount(\"John Smith2\", \"password\");\n        user2.save();\n\n        SecurityContextHolder.getContext().setAuthentication(user.impersonate2());\n        assertFalse(\"Ordinary user cannot delete somebody else\", user2.canDelete());\n        auth.add(Jenkins.ADMINISTER, user.getId());\n        assertTrue(\"Administrator can delete anybody else\", user2.canDelete());\n        assertFalse(\"User (even admin) cannot delete himself\", user.canDelete());\n\n        SecurityContextHolder.getContext().setAuthentication(user2.impersonate2());\n        auth.add(Jenkins.ADMINISTER, user2.getId());\n        User user3 \u003d User.get(\"Random Somebody\");\n        assertFalse(\"Storage-less temporary user cannot be deleted\", user3.canDelete());\n        user3.save();\n        assertTrue(\"But once storage is allocated, he can be deleted\", user3.canDelete());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.security180:void()","methodSource":"@Test\n    // @Issue(\"SECURITY-180\")\n    public void security180() throws Exception {\n        final GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User alice \u003d User.get(\"alice\");\n        User bob \u003d User.get(\"bob\");\n        User admin \u003d User.get(\"admin\");\n\n        auth.add(Jenkins.READ, alice.getId());\n        auth.add(Jenkins.READ, bob.getId());\n        auth.add(Jenkins.ADMINISTER, admin.getId());\n\n        // Admin can change everyone\u0027s token\n        SecurityContextHolder.getContext().setAuthentication(admin.impersonate2());\n        admin.getProperty(ApiTokenProperty.class).changeApiToken();\n        alice.getProperty(ApiTokenProperty.class).changeApiToken();\n\n        // User can change only own token\n        SecurityContextHolder.getContext().setAuthentication(bob.impersonate2());\n        bob.getProperty(ApiTokenProperty.class).changeApiToken();\n        assertThrows(\"Bob should not be authorized to change alice\u0027s token\", AccessDeniedException3.class, () -\u003e alice.getProperty(ApiTokenProperty.class).changeApiToken());\n\n        // ANONYMOUS2 can not change any token\n        SecurityContextHolder.getContext().setAuthentication(Jenkins.ANONYMOUS2);\n        assertThrows(\"Anonymous should not be authorized to change alice\u0027s token\", AccessDeniedException3.class, () -\u003e alice.getProperty(ApiTokenProperty.class).changeApiToken());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.resolveByIdThenName:void()","methodSource":"@Issue(\"SECURITY-243\")\n    @Test\n    public void resolveByIdThenName() throws Exception {\n        j.jenkins.setSecurityRealm(new HudsonPrivateSecurityRealm(true, false, null));\n\n        User u1 \u003d User.get(\"user1\");\n        u1.setFullName(\"User One\");\n        u1.save();\n\n        User u2 \u003d User.get(\"user2\");\n        u2.setFullName(\"User Two\");\n        u2.save();\n\n        assertNotSame(\"Users should not have the same id.\", u1.getId(), u2.getId());\n\n        User u \u003d User.get(\"User One\");\n        assertEquals(\"\u0027User One\u0027 should resolve to u1\", u1.getId(), u.getId());\n\n        u \u003d User.get(\"User Two\");\n        assertEquals(\"\u0027User Two\u0027 should resolve to u2\", u2.getId(), u.getId());\n\n        u \u003d User.get(\"user1\");\n        assertEquals(\"\u0027user1\u0027 should resolve to u1\", u1.getId(), u.getId());\n\n        u \u003d User.get(\"user2\");\n        assertEquals(\"\u0027user2\u0027 should resolve to u2\", u2.getId(), u.getId());\n\n        u1.setFullName(\"user2\");\n        u1.save();\n        u \u003d User.get(\"user2\");\n        assertEquals(\"\u0027user2\u0027 should resolve to u2\", u2.getId(), u.getId());\n        u \u003d User.get(\"user1\");\n        assertEquals(\"\u0027user1\u0027 should resolve to u1\", u1.getId(), u.getId());\n\n\n        u1.setFullName(\"user1\");\n        u1.save();\n        u2.setFullName(\"user1\");\n        u2.save();\n        u \u003d User.get(\"user1\");\n        assertEquals(\"\u0027user1\u0027 should resolve to u1\", u1.getId(), u.getId());\n        u \u003d User.get(\"user2\");\n        assertEquals(\"\u0027user2\u0027 should resolve to u2\", u2.getId(), u.getId());\n    }","advisory":"SECURITY-243"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.resolveByUnloadedIdThenName:void()","methodSource":"@Issue(\"SECURITY-243\")\n    @Test\n    public void resolveByUnloadedIdThenName() {\n        j.jenkins.setSecurityRealm(new ExternalSecurityRealm());\n        // do *not* call this here: User.get(\"victim\");\n        User attacker1 \u003d User.get(\"attacker1\");\n        attacker1.setFullName(\"victim1\");\n        User victim1 \u003d User.get(\"victim1\");\n        assertEquals(\"victim1 is a real user ID, we must ignore the attacker1’s fullName\", \"victim1\", victim1.getId());\n        assertNull(\"a recursive call to User.get was OK\", victim1.getProperty(MyViewsProperty.class).getPrimaryViewName());\n        assertEquals(\"(though the realm mistakenly added metadata to the attacker)\", \"victim1\", attacker1.getProperty(MyViewsProperty.class).getPrimaryViewName());\n        User.get(\"attacker2\").setFullName(\"nonexistent\");\n        assertEquals(\"but if we cannot find such a user ID, allow the fullName\", \"attacker2\", User.get(\"nonexistent\").getId());\n        User.get(\"attacker3\").setFullName(\"unknown\");\n        assertEquals(\"or if we are not sure, allow the fullName\", \"attacker3\", User.get(\"unknown\").getId());\n        User.get(\"attacker4\").setFullName(\"Victim2\");\n        assertEquals(\"victim2 is a real (canonical) user ID\", \"victim2\", User.get(\"Victim2\").getId());\n\n    }","advisory":"SECURITY-243"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.resolveById:void()","methodSource":"@Test\n    public void resolveById() throws Exception {\n        User u1 \u003d User.get(\"user1\");\n        u1.setFullName(\"User One\");\n        u1.save();\n\n        User u2 \u003d User.get(\"user2\");\n        u2.setFullName(\"User Two\");\n        u2.save();\n\n        assertNotSame(\"Users should not have the same id.\", u1.getId(), u2.getId());\n\n        // We can get the same user back.\n        User u \u003d User.getById(\"user1\", false);\n        assertSame(\"\u0027user1\u0027 should return u1\", u1, u);\n\n        // passing true should not create a new user if it does not exist.\n        u \u003d User.getById(\"user1\", true);\n        assertSame(\"\u0027user1\u0027 should return u1\", u1, u);\n\n        // should not lookup by name.\n        u \u003d User.getById(\"User One\", false);\n        assertNull(\"\u0027User One\u0027 should not resolve to any user\", u);\n\n        // We can get the same user back.\n        u \u003d User.getById(\"user2\", false);\n        assertSame(\"\u0027user2\u0027 should return u2\", u2, u);\n\n        // passing true should not create a new user if it does not exist.\n        u \u003d User.getById(\"user2\", true);\n        assertSame(\"\u0027user2\u0027 should return u1\", u2, u);\n\n        // should not lookup by name.\n        u \u003d User.getById(\"User Two\", false);\n        assertNull(\"\u0027User Two\u0027 should not resolve to any user\", u);\n\n        u1.setFullName(\"user1\");\n        u1.save();\n        u2.setFullName(\"user1\");\n        u2.save();\n        u \u003d User.getById(\"user1\", false);\n        assertSame(\"\u0027user1\u0027 should resolve to u1\", u1, u);\n        u \u003d User.getById(\"user2\", false);\n        assertSame(\"\u0027user2\u0027 should resolve to u2\", u2, u);\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.getAllPropertiesRequiresAdmin:void()","methodSource":"@Test\n    @Issue(\"SECURITY-514\")\n    public void getAllPropertiesRequiresAdmin() {\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\")\n                .grant(Jenkins.READ).everywhere().toEveryone());\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User admin \u003d User.get(\"admin\");\n        User alice \u003d User.get(\"alice\");\n        User bob \u003d User.get(\"bob\");\n\n        // Admin can access user properties for all users\n        try (ACLContext as \u003d ACL.as(admin)) {\n            assertThat(alice.getAllProperties(), not(empty()));\n            assertThat(bob.getAllProperties(), not(empty()));\n            assertThat(admin.getAllProperties(), not(empty()));\n        }\n\n        // Non admins can only view their own\n        try (ACLContext as \u003d ACL.as(alice)) {\n            assertThat(alice.getAllProperties(), not(empty()));\n            assertThat(bob.getAllProperties(), empty());\n            assertThat(admin.getAllProperties(), empty());\n        }\n    }","advisory":"SECURITY-514"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.differentUserIdInConfigFileIsIgnored:void()","methodSource":"@Test\n    @LocalData\n    public void differentUserIdInConfigFileIsIgnored() {\n        String fredUserId \u003d \"fred\";\n        User fred \u003d User.getById(fredUserId, false);\n        assertThat(fred, notNullValue());\n        assertThat(fred.getId(), is(fredUserId));\n        assertThat(fred.getFullName(), is(\"Fred Smith\"));\n        User jane \u003d User.getById(\"jane\", false);\n        assertThat(jane, nullValue());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.corruptConfigFile:void()","methodSource":"@Test\n    @LocalData\n    public void corruptConfigFile() {\n        String fredUserId \u003d \"fred\";\n        User fred \u003d User.getById(fredUserId, true);\n        assertThat(fred, notNullValue());\n        assertThat(fred.getFullName(), is(\"fred\"));\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.parentDirectoryUserDoesNotExist:void()","methodSource":"@Test\n    public void parentDirectoryUserDoesNotExist() {\n        String userId \u003d \"admin\";\n        User admin \u003d User.getById(userId, true);\n        assertNotNull(admin);\n        assertThat(admin.getId(), is(userId));\n        User parentDirectoryUserId \u003d User.getById(\"../\" + admin, false);\n        assertThat(parentDirectoryUserId, nullValue());\n    }"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.missingDescriptor:void()","methodSource":"@Issue(\"JENKINS-45977\")\n    @Test\n    public void missingDescriptor() throws Exception {\n        ExtensionList.lookup(Descriptor.class).remove(j.jenkins.getDescriptor(SomeUserProperty.class));\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to(\"alice\"));\n        User alice \u003d User.get(\"alice\");\n        alice.addProperty(new SomeUserProperty());\n        assertThat(alice.getProperties().values(), not(empty()));\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        final List\u003cURL\u003e failingResources \u003d new ArrayList\u003c\u003e();\n        new WebConnectionWrapper(wc) { // https://stackoverflow.com/a/18853796/12916\n            @Override\n            public WebResponse getResponse(WebRequest request) throws IOException {\n                WebResponse r \u003d super.getResponse(request);\n                if (r.getStatusCode() \u003e\u003d 400) {\n                    failingResources.add(request.getUrl());\n                }\n                return r;\n            }\n        };\n        wc.login(\"alice\").goTo(\"me/configure\");\n        assertThat(failingResources, empty());\n    }","advisory":"JENKINS-45977"},{"className":"hudson.model.UserTest","methodSignature":"hudson.model.UserTest.legacyCallerGetsUserMayOrMayNotExistException:void()","methodSource":"@Test\n    public void legacyCallerGetsUserMayOrMayNotExistException() {\n        final SecurityRealm realm \u003d new NonEnumeratingAcegiSecurityRealm();\n        assertThrows(UserMayOrMayNotExistException.class, () -\u003e realm.loadUserByUsername(\"unknown\"));\n\n        final SecurityRealm realm2 \u003d new NonEnumeratingSpringSecurityRealm();\n        assertThrows(UserMayOrMayNotExistException.class, () -\u003e realm2.loadUserByUsername(\"unknown\"));\n    }"},{"className":"hudson.model.ViewDescriptorTest","methodSignature":"hudson.model.ViewDescriptorTest.canAdd:void()","methodSource":"@Test\n    public void canAdd() throws Exception {\n        MockFolder d1 \u003d r.createFolder(\"d1\");\n        d1.createProject(MockFolder.class, \"sub\");\n        d1.createProject(FreeStyleProject.class, \"prj\");\n        MockFolder d2 \u003d r.jenkins.createProject(RestrictiveFolder.class, \"d2\");\n        assertContains(r.jenkins.getDescriptorByType(AllView.DescriptorImpl.class).doAutoCompleteCopyNewItemFrom(\"../d1/\", d2), \"../d1/prj\");\n    }"},{"className":"hudson.model.ViewDescriptorTest","methodSignature":"hudson.model.ViewDescriptorTest.invisiblePropertiesOnViewShoudBePersisted:void()","methodSource":"@Test\n    @Issue(\"JENKINS-60579\")\n    public void invisiblePropertiesOnViewShoudBePersisted() throws Exception {\n\n        //GIVEN a listView that have an invisible property\n        ListView myListView \u003d new ListView(\"Rock\");\n        myListView.setRecurse(true);\n        myListView.setIncludeRegex(\".*\");\n\n        CustomInvisibleProperty invisibleProperty \u003d new CustomInvisibleProperty();\n        invisibleProperty.setSomeProperty(\"You cannot see me.\");\n        invisibleProperty.setView(myListView);\n        myListView.getProperties().add(invisibleProperty);\n\n        r.jenkins.addView(myListView);\n\n        assertEquals(\n                \"You cannot see me.\",\n                r.jenkins\n                        .getView(\"Rock\")\n                        .getProperties()\n                        .get(CustomInvisibleProperty.class)\n                        .getSomeProperty());\n\n        //WHEN the users goes with \"Edit View\" on the configure page\n        JenkinsRule.WebClient client \u003d r.createWebClient();\n        HtmlPage editViewPage \u003d client.getPage(myListView, \"configure\");\n\n        //THEN the invisible property is not displayed on page\n        assertFalse(\"CustomInvisibleProperty should not be displayed on the View edition page UI.\",\n                    editViewPage.asNormalizedText().contains(\"CustomInvisibleProperty\"));\n\n\n        HtmlForm editViewForm \u003d editViewPage.getFormByName(\"viewConfig\");\n        editViewForm.getTextAreaByName(\"_.description\").setText(\"This list view is awesome !\");\n        r.submit(editViewForm);\n\n        //Check that the description is updated on view\n        assertThat(client.getPage(myListView).asNormalizedText(), containsString(\"This list view is awesome !\"));\n\n        //AND THEN after View save, the invisible property is still persisted with the View.\n        assertNotNull(\"The CustomInvisibleProperty should be persisted on the View.\",\n                      r.jenkins.getView(\"Rock\").getProperties().get(CustomInvisibleProperty.class));\n        assertEquals(\n                \"You cannot see me.\",\n                r.jenkins\n                        .getView(\"Rock\")\n                        .getProperties()\n                        .get(CustomInvisibleProperty.class)\n                        .getSomeProperty());\n\n    }","advisory":"JENKINS-60579"},{"className":"hudson.model.ViewJobTest","methodSignature":"hudson.model.ViewJobTest.removeRun:void()","methodSource":"@Issue(\"JENKINS-19377\")\n    @Test public void removeRun() throws Exception {\n        J j \u003d rule.jenkins.createProject(J.class, \"j\");\n        R r1 \u003d j.nue();\n        R r2 \u003d j.nue();\n        assertEquals(\"[2, 1]\", j.getBuildsAsMap().keySet().toString());\n        j.removeRun(r1);\n        assertEquals(\"[2]\", j.getBuildsAsMap().keySet().toString());\n    }","advisory":"JENKINS-19377"},{"className":"hudson.model.ViewPropertyTest","methodSignature":"hudson.model.ViewPropertyTest.testRoundtrip:void()","methodSource":"@Test\n    public void testRoundtrip() throws Exception {\n        ListView foo \u003d new ListView(\"foo\");\n        j.jenkins.addView(foo);\n\n        // make sure it renders as optionalBlock\n        HtmlForm f \u003d j.createWebClient().getPage(foo, \"configure\").getFormByName(\"viewConfig\");\n        ((HtmlLabel) DomNodeUtil.selectSingleNode(f, \".//LABEL[text()\u003d\u0027ViewPropertyImpl\u0027]\")).click();\n        j.submit(f);\n        ViewPropertyImpl vp \u003d foo.getProperties().get(ViewPropertyImpl.class);\n        assertEquals(\"Duke\", vp.name);\n\n        // make sure it roundtrips correctly\n        vp.name \u003d \"Kohsuke\";\n        j.configRoundtrip(foo);\n        ViewPropertyImpl vp2 \u003d foo.getProperties().get(ViewPropertyImpl.class);\n        assertNotSame(vp, vp2);\n        j.assertEqualDataBoundBeans(vp, vp2);\n    }"},{"className":"hudson.model.ViewPropertyTest","methodSignature":"hudson.model.ViewPropertyTest.testInvisibleProperty:void()","methodSource":"@Test\n    public void testInvisibleProperty() throws Exception {\n        ListView foo \u003d new ListView(\"foo\");\n        j.jenkins.addView(foo);\n\n        // test the rendering (or the lack thereof) of an invisible property\n        j.configRoundtrip(foo);\n        assertNull(foo.getProperties().get(InvisiblePropertyImpl.class));\n\n        // do the same but now with a configured instance\n        InvisiblePropertyImpl vp \u003d new InvisiblePropertyImpl();\n        foo.getProperties().add(vp);\n        j.configRoundtrip(foo);\n        assertSame(vp, foo.getProperties().get(InvisiblePropertyImpl.class));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.roundTrip:void()","methodSource":"@Test\n    public void roundTrip() throws Exception {\n        ListView view \u003d new ListView(\"foo\");\n        view.setDescription(\"Some description\");\n        view.setFilterExecutors(true);\n        view.setFilterQueue(true);\n        j.jenkins.addView(view);\n        j.configRoundtrip(view);\n\n        assertEquals(\"Some description\", view.getDescription());\n        assertEquals(true, view.isFilterExecutors());\n        assertEquals(true, view.isFilterQueue());\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.xHudsonHeader:void()","methodSource":"@Issue(\"JENKINS-7100\")\n    @Test public void xHudsonHeader() throws Exception {\n        assertNotNull(j.createWebClient().goTo(\"\").getWebResponse().getResponseHeaderValue(\"X-Hudson\"));\n    }","advisory":"JENKINS-7100"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testNoCacheHeadersAreSet:void()","methodSource":"@Issue(\"JENKINS-43848\")\n    @Test public void testNoCacheHeadersAreSet() throws Exception {\n        List\u003cNameValuePair\u003e responseHeaders \u003d j.createWebClient()\n                .goTo(\"view/all/itemCategories\", \"application/json\")\n                .getWebResponse()\n                .getResponseHeaders();\n\n\n        final Map\u003cString, String\u003e values \u003d new HashMap\u003c\u003e();\n\n        for (NameValuePair p : responseHeaders) {\n            values.put(p.getName(), p.getValue());\n        }\n\n        String resp \u003d values.get(\"Cache-Control\");\n        assertThat(resp, is(\"no-cache, no-store, must-revalidate\"));\n        assertThat(values.get(\"Expires\"), is(\"0\"));\n        assertThat(values.get(\"Pragma\"), is(\"no-cache\"));\n    }","advisory":"JENKINS-43848"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.conflictingName:void()","methodSource":"@Email(\"http://d.hatena.ne.jp/ssogabe/20090101/1230744150\")\n    @Test public void conflictingName() throws Exception {\n        assertNull(j.jenkins.getView(\"foo\"));\n\n        WebClient wc \u003d j.createWebClient();\n        HtmlForm form \u003d wc.goTo(\"newView\").getFormByName(\"createItem\");\n        form.getInputByName(\"name\").setValue(\"foo\");\n        form.getRadioButtonsByName(\"mode\").get(0).setChecked(true);\n        j.submit(form);\n        assertNotNull(j.jenkins.getView(\"foo\"));\n\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        // do it again and verify an error\n        Page page \u003d j.submit(form);\n        assertEquals(\"shouldn\u0027t be allowed to create two views of the same name.\",\n                HttpURLConnection.HTTP_BAD_REQUEST,\n                page.getWebResponse().getStatusCode());\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.privateView:void()","methodSource":"@Test public void privateView() throws Exception {\n        j.createFreeStyleProject(\"project1\");\n        User user \u003d User.get(\"me\", true); // create user\n\n        WebClient wc \u003d j.createWebClient();\n        HtmlPage userPage \u003d wc.goTo(\"user/me\");\n        HtmlAnchor privateViewsLink \u003d userPage.getAnchorByText(\"My Views\");\n        assertNotNull(\"My Views link not available\", privateViewsLink);\n\n        HtmlPage privateViewsPage \u003d privateViewsLink.click();\n\n        Text viewLabel \u003d privateViewsPage.getFirstByXPath(\"//div[@class\u003d\u0027tabBar\u0027]//div[@class\u003d\u0027tab active\u0027]/a/text()\");\n        assertTrue(\"\u0027All\u0027 view should be selected\", viewLabel.getTextContent().contains(Hudson_ViewName()));\n\n        View listView \u003d listView(\"listView\");\n\n        HtmlPage newViewPage \u003d wc.goTo(\"user/me/my-views/newView\");\n        HtmlForm form \u003d newViewPage.getFormByName(\"createItem\");\n        form.getInputByName(\"name\").setValue(\"proxy-view\");\n        form.getInputByValue(\"hudson.model.ProxyView\").setChecked(true);\n        HtmlPage proxyViewConfigurePage \u003d j.submit(form);\n        View proxyView \u003d user.getProperty(MyViewsProperty.class).getView(\"proxy-view\");\n        assertNotNull(proxyView);\n        form \u003d proxyViewConfigurePage.getFormByName(\"viewConfig\");\n        form.getSelectByName(\"proxiedViewName\").setSelectedAttribute(\"listView\", true);\n        j.submit(form);\n\n        assertThat(proxyView, instanceOf(ProxyView.class));\n        assertEquals(\"listView\", ((ProxyView) proxyView).getProxiedViewName());\n        assertEquals(((ProxyView) proxyView).getProxiedView(), listView);\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.persistence:void()","methodSource":"@Issue(\"JENKINS-9367\")\n    @Test public void persistence() throws Exception {\n        ListView view \u003d listView(\"foo\");\n\n        ListView v \u003d (ListView) Jenkins.XSTREAM.fromXML(Jenkins.XSTREAM.toXML(view));\n        System.out.println(v.getProperties());\n        assertNotNull(v.getProperties());\n    }","advisory":"JENKINS-9367"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.allImagesCanBeLoaded:void()","methodSource":"@Issue(\"JENKINS-9367\")\n    @Test public void allImagesCanBeLoaded() throws Exception {\n        User.get(\"user\", true);\n\n        // as long as the cloudbees-folder is included as test dependency, its Folder will load icon\n        boolean folderPluginActive \u003d j.jenkins.getPlugin(\"cloudbees-folder\") !\u003d null;\n        // link to Folder class is done here to ensure if we remove the dependency, this code will fail and so will be removed\n        boolean folderPluginClassesLoaded \u003d j.jenkins.getDescriptor(Folder.class) !\u003d null;\n        // this could be written like this to avoid the hard dependency:\n        // boolean folderPluginClassesLoaded \u003d (j.jenkins.getDescriptor(\"com.cloudbees.hudson.plugins.folder.Folder\") !\u003d null);\n        if (!folderPluginActive \u0026\u0026 folderPluginClassesLoaded) {\n            // reset the icon added by Folder because the plugin resources are not reachable\n            IconSet.icons.addIcon(new Icon(\"icon-folder icon-md\", \"svgs/folder.svg\", \"width: 24px; height: 24px;\"));\n        }\n\n        WebClient webClient \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        webClient.getOptions().setJavaScriptEnabled(false);\n        j.assertAllImageLoadSuccessfully(webClient.goTo(\"asynchPeople\"));\n    }","advisory":"JENKINS-9367"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.notAllowedName:void()","methodSource":"@Issue(\"JENKINS-16608\")\n    @Test public void notAllowedName() throws Exception {\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlForm form \u003d wc.goTo(\"newView\").getFormByName(\"createItem\");\n        form.getInputByName(\"name\").setValue(\"..\");\n        form.getRadioButtonsByName(\"mode\").get(0).setChecked(true);\n\n        HtmlPage page \u003d j.submit(form);\n        assertEquals(\"\\\"..\\\" should not be allowed.\",\n                HttpURLConnection.HTTP_BAD_REQUEST,\n                page.getWebResponse().getStatusCode());\n    }","advisory":"JENKINS-16608"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.unicodeName:void()","methodSource":"@Ignore(\"verified manually in Winstone but org.mortbay.JettyResponse.sendRedirect (6.1.26) seems to mangle the location\")\n    @Issue(\"JENKINS-18373\")\n    @Test public void unicodeName() throws Exception {\n        HtmlForm form \u003d j.createWebClient().goTo(\"newView\").getFormByName(\"createItem\");\n        String name \u003d \"I ♥ NY\";\n        form.getInputByName(\"name\").setValue(name);\n        form.getRadioButtonsByName(\"mode\").get(0).setChecked(true);\n        j.submit(form);\n        View view \u003d j.jenkins.getView(name);\n        assertNotNull(view);\n        j.submit(j.createWebClient().getPage(view, \"configure\").getFormByName(\"viewConfig\"));\n    }","advisory":"JENKINS-18373"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.doConfigDotXml:void()","methodSource":"@Issue(\"JENKINS-17302\")\n    @Test public void doConfigDotXml() throws Exception {\n        ListView view \u003d listView(\"v\");\n        view.description \u003d \"one\";\n        WebClient wc \u003d j.createWebClient();\n        String xml \u003d wc.goToXml(\"view/v/config.xml\").getWebResponse().getContentAsString();\n        assertTrue(xml, xml.contains(\"\u003cdescription\u003eone\u003c/description\u003e\"));\n        xml \u003d xml.replace(\"\u003cdescription\u003eone\u003c/description\u003e\", \"\u003cdescription\u003etwo\u003c/description\u003e\");\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"view/v/config.xml\"), HttpMethod.POST);\n        req.setRequestBody(xml);\n        req.setEncodingType(null);\n        wc.getPage(req);\n        assertEquals(\"two\", view.getDescription());\n        xml \u003d new XmlFile(Jenkins.XSTREAM, new File(j.jenkins.getRootDir(), \"config.xml\")).asString();\n        assertTrue(xml, xml.contains(\"\u003cdescription\u003etwo\u003c/description\u003e\"));\n    }","advisory":"JENKINS-17302"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.doConfigDotXmlReset:void()","methodSource":"@Issue(\"JENKINS-21017\")\n    @Test public void doConfigDotXmlReset() throws Exception {\n        ListView view \u003d listView(\"v\");\n        view.description \u003d \"one\";\n        WebClient wc \u003d j.createWebClient();\n        String xml \u003d wc.goToXml(\"view/v/config.xml\").getWebResponse().getContentAsString();\n        assertThat(xml, containsString(\"\u003cdescription\u003eone\u003c/description\u003e\"));\n        xml \u003d xml.replace(\"\u003cdescription\u003eone\u003c/description\u003e\", \"\");\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"view/v/config.xml\"), HttpMethod.POST);\n        req.setRequestBody(xml);\n        req.setEncodingType(null);\n        wc.getPage(req);\n        assertNull(view.getDescription()); // did not work\n        xml \u003d new XmlFile(Jenkins.XSTREAM, new File(j.jenkins.getRootDir(), \"config.xml\")).asString();\n        assertThat(xml, not(containsString(\"\u003cdescription\u003e\"))); // did not work\n        assertEquals(j.jenkins, view.getOwner());\n    }","advisory":"JENKINS-21017"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetQueueItems:void()","methodSource":"@Test\n    public void testGetQueueItems() throws Exception {\n        ListView view1 \u003d listView(\"view1\");\n        view1.filterQueue \u003d true;\n        ListView view2 \u003d listView(\"view2\");\n        view2.filterQueue \u003d true;\n\n        FreeStyleProject inView1 \u003d j.createFreeStyleProject(\"in-view1\");\n        inView1.setAssignedLabel(j.jenkins.getLabelAtom(\"without-any-slave\"));\n        view1.add(inView1);\n\n        MatrixProject inView2 \u003d j.jenkins.createProject(MatrixProject.class, \"in-view2\");\n        inView2.setAssignedLabel(j.jenkins.getLabelAtom(\"without-any-slave\"));\n        view2.add(inView2);\n\n        FreeStyleProject notInView \u003d j.createFreeStyleProject(\"not-in-view\");\n        notInView.setAssignedLabel(j.jenkins.getLabelAtom(\"without-any-slave\"));\n\n        FreeStyleProject inBothViews \u003d j.createFreeStyleProject(\"in-both-views\");\n        inBothViews.setAssignedLabel(j.jenkins.getLabelAtom(\"without-any-slave\"));\n        view1.add(inBothViews);\n        view2.add(inBothViews);\n\n        Queue.getInstance().schedule(notInView, 0);\n        Queue.getInstance().schedule(inView1, 0);\n        Queue.getInstance().schedule(inView2, 0);\n        Queue.getInstance().schedule(inBothViews, 0);\n\n        Thread.sleep(1000);\n\n        assertContainsItems(view1, inView1, inBothViews);\n        assertNotContainsItems(view1, notInView, inView2);\n        assertContainsItems(view2, inView2, inBothViews);\n        assertNotContainsItems(view2, notInView, inView1);\n\n        // Clear the queue\n        assertTrue(j.jenkins.getQueue().cancel(notInView));\n        assertTrue(j.jenkins.getQueue().cancel(inView1));\n        assertTrue(j.jenkins.getQueue().cancel(inView2));\n        assertTrue(j.jenkins.getQueue().cancel(inBothViews));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetComputers:void()","methodSource":"@Test\n    public void testGetComputers() throws Exception {\n        ListView view1 \u003d listView(\"view1\");\n        ListView view2 \u003d listView(\"view2\");\n        ListView view3 \u003d listView(\"view3\");\n        view1.filterExecutors \u003d true;\n        view2.filterExecutors \u003d true;\n        view3.filterExecutors \u003d true;\n\n        Slave slave0 \u003d j.createOnlineSlave(j.jenkins.getLabel(\"label0\"));\n        Slave slave1 \u003d j.createOnlineSlave(j.jenkins.getLabel(\"label1\"));\n        Slave slave2 \u003d j.createOnlineSlave(j.jenkins.getLabel(\"label2\"));\n        Slave slave3 \u003d j.createOnlineSlave(j.jenkins.getLabel(\"label0\"));\n        Slave slave4 \u003d j.createOnlineSlave(j.jenkins.getLabel(\"label4\"));\n\n        FreeStyleProject freestyleJob \u003d j.createFreeStyleProject(\"free\");\n        view1.add(freestyleJob);\n        freestyleJob.setAssignedLabel(j.jenkins.getLabel(\"label0||label2\"));\n\n        MatrixProject matrixJob \u003d j.jenkins.createProject(MatrixProject.class, \"matrix\");\n        view1.add(matrixJob);\n        matrixJob.setAxes(new AxisList(\n                new LabelAxis(\"label\", List.of(\"label1\"))\n        ));\n\n        FreeStyleProject noLabelJob \u003d j.createFreeStyleProject(\"not-assigned-label\");\n        view3.add(noLabelJob);\n        noLabelJob.setAssignedLabel(null);\n\n        FreeStyleProject foreignJob \u003d j.createFreeStyleProject(\"in-other-view\");\n        view2.add(foreignJob);\n        foreignJob.setAssignedLabel(j.jenkins.getLabel(\"label0||label1\"));\n\n        // contains all agents having labels associated with freestyleJob or matrixJob\n        assertContainsNodes(view1, slave0, slave1, slave2, slave3);\n        assertNotContainsNodes(view1, slave4);\n\n        // contains all agents having labels associated with foreignJob\n        assertContainsNodes(view2, slave0, slave1, slave3);\n        assertNotContainsNodes(view2, slave2, slave4);\n\n        // contains all slaves as it contains noLabelJob that can run everywhere\n        assertContainsNodes(view3, slave0, slave1, slave2, slave3, slave4);\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetComputersNPE:void()","methodSource":"@Test\n    @Issue(\"JENKINS-21474\")\n    public void testGetComputersNPE() throws Exception {\n        ListView view \u003d listView(\"aView\");\n        view.filterExecutors \u003d true;\n\n        DumbSlave dedicatedSlave \u003d j.createOnlineSlave();\n        dedicatedSlave.setMode(Mode.EXCLUSIVE);\n        view.add(j.createFreeStyleProject());\n\n        FreeStyleProject tiedJob \u003d j.createFreeStyleProject();\n        tiedJob.setAssignedNode(dedicatedSlave);\n        view.add(tiedJob);\n\n        DumbSlave notIncludedSlave \u003d j.createOnlineSlave();\n        notIncludedSlave.setMode(Mode.EXCLUSIVE);\n\n        assertContainsNodes(view, j.jenkins, dedicatedSlave);\n        assertNotContainsNodes(view, notIncludedSlave);\n    }","advisory":"JENKINS-21474"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetItem:void()","methodSource":"@Test\n    public void testGetItem() throws Exception {\n        ListView view \u003d listView(\"foo\");\n        FreeStyleProject job1 \u003d j.createFreeStyleProject(\"free\");\n        MatrixProject job2 \u003d j.jenkins.createProject(MatrixProject.class, \"matrix\");\n        FreeStyleProject job3 \u003d j.createFreeStyleProject(\"not-included\");\n        view.jobNames.add(job2.getDisplayName());\n        view.jobNames.add(job1.getDisplayName());\n        assertEquals(\"View should return job \" + job1.getDisplayName(), job1,  view.getItem(\"free\"));\n        assertNotNull(\"View should return null.\", view.getItem(\"not-included\"));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testRename:void()","methodSource":"@Test\n    public void testRename() throws Exception {\n        ListView view \u003d listView(\"foo\");\n        view.rename(\"renamed\");\n        assertEquals(\"View should have name foo.\", \"renamed\", view.getDisplayName());\n        ListView view2 \u003d listView(\"foo\");\n        assertThrows(\"Attempt to rename job with a name used by another view with the same owner should throw exception\", Descriptor.FormException.class, () -\u003e view2.rename(\"renamed\"));\n        assertEquals(\"View should not be renamed if required name has another view with the same owner\", \"foo\", view2.getDisplayName());\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetOwnerItemGroup:void()","methodSource":"@Test\n    public void testGetOwnerItemGroup() throws Exception {\n        ListView view \u003d listView(\"foo\");\n        assertEquals(\"View should have owner jenkins.\", j.jenkins.getItemGroup(), view.getOwner().getItemGroup());\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetOwnerPrimaryView:void()","methodSource":"@Test\n    public void testGetOwnerPrimaryView() throws Exception {\n        ListView view \u003d listView(\"foo\");\n        j.jenkins.setPrimaryView(view);\n        assertEquals(\"View should have primary view \" + view.getDisplayName(), view, view.getOwner().getPrimaryView());\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testSave:void()","methodSource":"@Test\n    public void testSave() throws Exception {\n        ListView view \u003d listView(\"foo\");\n        FreeStyleProject job \u003d j.createFreeStyleProject(\"free\");\n        view.jobNames.add(\"free\");\n        view.save();\n        j.jenkins.doReload();\n        //wait until all configuration are reloaded\n        if (j.jenkins.servletContext.getAttribute(\"app\") instanceof HudsonIsLoading) {\n            Thread.sleep(500);\n        }\n        assertTrue(\"View does not contains job free after load.\", j.jenkins.getView(view.getDisplayName()).contains(j.jenkins.getItem(job.getName())));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testGetProperties:void()","methodSource":"@Test\n    public void testGetProperties() throws Exception {\n        View view \u003d listView(\"foo\");\n        Thread.sleep(1000);\n        HtmlForm f \u003d j.createWebClient().getPage(view, \"configure\").getFormByName(\"viewConfig\");\n        ((HtmlLabel) DomNodeUtil.selectSingleNode(f, \".//LABEL[text()\u003d\u0027Test property\u0027]\")).click();\n        j.submit(f);\n        assertNotNull(\"View should contain ViewPropertyImpl property.\", view.getProperties().get(PropertyImpl.class));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.checkJobName:void()","methodSource":"@Issue(\"JENKINS-20509\")\n    @Test public void checkJobName() throws Exception {\n        j.createFreeStyleProject(\"topprj\");\n        final MockFolder d1 \u003d j.createFolder(\"d1\");\n        d1.createProject(FreeStyleProject.class, \"subprj\");\n        final MockFolder d2 \u003d j.createFolder(\"d2\");\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").\n            grant(Jenkins.READ).everywhere().toEveryone().\n            grant(Item.READ).everywhere().toEveryone().\n            grant(Item.CREATE).onFolders(d1).to(\"dev\")); // not on root or d2\n        ACL.impersonate2(Jenkins.ANONYMOUS2, new NotReallyRoleSensitiveCallable\u003cVoid, Exception\u003e() {\n            @Override\n            public Void call() {\n                try {\n                    assertCheckJobName(j.jenkins, \"whatever\", FormValidation.Kind.OK);\n                    fail(\"should not have been allowed\");\n                } catch (AccessDeniedException3 x) {\n                    // OK\n                }\n                return null;\n            }\n        });\n        ACL.impersonate2(User.get(\"dev\").impersonate2(), new NotReallyRoleSensitiveCallable\u003cVoid, Exception\u003e() {\n            @Override\n            public Void call() {\n                try {\n                    assertCheckJobName(j.jenkins, \"whatever\", FormValidation.Kind.OK);\n                    fail(\"should not have been allowed\");\n                } catch (AccessDeniedException3 x) {\n                    // OK\n                }\n                try {\n                    assertCheckJobName(d2, \"whatever\", FormValidation.Kind.OK);\n                    fail(\"should not have been allowed\");\n                } catch (AccessDeniedException3 x) {\n                    // OK\n                }\n                assertCheckJobName(d1, \"whatever\", FormValidation.Kind.OK);\n                return null;\n            }\n        });\n        ACL.impersonate2(User.get(\"admin\").impersonate2(), new NotReallyRoleSensitiveCallable\u003cVoid, Exception\u003e() {\n            @Override\n            public Void call() {\n                assertCheckJobName(j.jenkins, \"whatever\", FormValidation.Kind.OK);\n                assertCheckJobName(d1, \"whatever\", FormValidation.Kind.OK);\n                assertCheckJobName(d2, \"whatever\", FormValidation.Kind.OK);\n                assertCheckJobName(j.jenkins, \"d1\", FormValidation.Kind.ERROR);\n                assertCheckJobName(j.jenkins, \"topprj\", FormValidation.Kind.ERROR);\n                assertCheckJobName(d1, \"subprj\", FormValidation.Kind.ERROR);\n                assertCheckJobName(j.jenkins, \"\", FormValidation.Kind.OK);\n                assertCheckJobName(j.jenkins, \"foo/bie\", FormValidation.Kind.ERROR);\n                assertCheckJobName(d2, \"New\", FormValidation.Kind.OK);\n                j.jenkins.setProjectNamingStrategy(new ProjectNamingStrategy.PatternProjectNamingStrategy(\"[a-z]+\", \"\", true));\n                assertCheckJobName(d2, \"New\", FormValidation.Kind.ERROR);\n                assertCheckJobName(d2, \"new\", FormValidation.Kind.OK);\n                return null;\n            }\n        });\n        JenkinsRule.WebClient wc \u003d j.createWebClient().withBasicCredentials(\"admin\");\n        assertEquals(\"original ${rootURL}/checkJobName still supported\", \"\u003cdiv/\u003e\", wc.goTo(\"checkJobName?value\u003dstuff\").getWebResponse().getContentAsString());\n        assertEquals(\"but now possible on a view in a folder\", \"\u003cdiv/\u003e\", wc.goTo(\"job/d1/view/All/checkJobName?value\u003dstuff\").getWebResponse().getContentAsString());\n    }","advisory":"JENKINS-20509"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.brokenGetItems:void()","methodSource":"@Issue(\"JENKINS-41825\")\n    @Test\n    public void brokenGetItems() throws Exception {\n        logging.capture(100).record(\"\", Level.INFO);\n        j.jenkins.addView(new BrokenView());\n        j.createWebClient().goTo(\"view/broken/\");\n        boolean found \u003d false;\n        LOGS: for (LogRecord record : logging.getRecords()) {\n            for (Throwable t \u003d record.getThrown(); t !\u003d null; t \u003d t.getCause()) {\n                if (t instanceof IllegalStateException \u0026\u0026 BrokenView.ERR.equals(t.getMessage())) {\n                    found \u003d true;\n                    break LOGS;\n                }\n            }\n        }\n        assertTrue(found);\n    }","advisory":"JENKINS-41825"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testAllViewCreatedIfNoPrimary:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36908\")\n    @LocalData\n    public void testAllViewCreatedIfNoPrimary() {\n        assertNotNull(j.getInstance().getView(\"All\"));\n    }","advisory":"JENKINS-36908"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.testAllViewNotCreatedIfPrimary:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36908\")\n    @LocalData\n    public void testAllViewNotCreatedIfPrimary() {\n        assertNull(j.getInstance().getView(\"All\"));\n    }","advisory":"JENKINS-36908"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.shouldFindNestedViewByName:void()","methodSource":"@Test\n    @Issue(\"JENKINS-43322\")\n    public void shouldFindNestedViewByName() throws Exception {\n        //given\n        String testNestedViewName \u003d \"right2ndNestedView\";\n        View right2ndNestedView \u003d new ListView(testNestedViewName);\n        //and\n        View left2ndNestedView \u003d new ListView(\"left2ndNestedView\");\n        DummyCompositeView rightNestedGroupView \u003d new DummyCompositeView(\"rightNestedGroupView\", left2ndNestedView, right2ndNestedView);\n        //and\n        listView(\"leftTopLevelView\");\n        j.jenkins.addView(rightNestedGroupView);\n        //when\n        View foundNestedView \u003d j.jenkins.getView(testNestedViewName);\n        //then\n        assertEquals(right2ndNestedView, foundNestedView);\n    }","advisory":"JENKINS-43322"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.simplifiedOriginalDescription:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1923\")\n    public void simplifiedOriginalDescription() throws Exception {\n        this.prepareSec1923();\n\n        /*  This is a simplified version of the original report in SECURITY-1923.\n            The XML is broken, because the root element doesn\u0027t have a matching end.\n            The last line is almost a matching end, but it lacks the slash character.\n            Instead that line gets interpreted as another contained element, one that\n            doesn\u0027t actually exist on the class. This causes it to get logged by the\n            old data monitor. */\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(CREATE_VIEW);\n\n        /*  The view to create has to be nonexistent, otherwise a different code path is followed\n            and the vulnerability doesn\u0027t manifest. */\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"createView?name\u003dnonexistent\"), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        req.setRequestBody(ORIGINAL_BAD_USER_XML);\n\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n        // This really shouldn\u0027t return 500, but that\u0027s what it does now.\n        assertThat(e.getStatusCode(), equalTo(500));\n\n        // This should have a different message, but this is the current behavior demonstrating the problem.\n        assertThat(e.getResponse().getContentAsString(), containsString(\"A problem occurred while processing the request\"));\n\n        OldDataMonitor odm \u003d ExtensionList.lookupSingleton(OldDataMonitor.class);\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n\n        assertThat(data.size(), equalTo(0));\n\n        odm.doDiscard(null, null);\n\n        View view \u003d j.getInstance().getView(\"nonexistent\");\n\n        // The view should still be nonexistent, as we gave it a user and not a view.\n        assertNull(\"Should not have created view.\", view);\n\n        User.AllUsers.scanAll();\n        boolean createUser \u003d false;\n        User badUser \u003d User.getById(\"foo\", createUser);\n\n        assertNull(\"Should not have created user.\", badUser);\n    }","advisory":"SECURITY-1923"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.simplifiedWithValidXmlAndBadField:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1923\")\n    public void simplifiedWithValidXmlAndBadField() throws Exception {\n        this.prepareSec1923();\n\n        /*  This is the same thing as the original report, except it uses valid XML.\n            It just adds in additional invalid field, which gets picked up by the old data monitor.\n            Way too much duplicated code here, but this is just for demonstration. */\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(CREATE_VIEW);\n\n        /*  The view to create has to be nonexistent, otherwise a different code path is followed\n            and the vulnerability doesn\u0027t manifest. */\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"createView?name\u003dnonexistent\"), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        req.setRequestBody(VALID_XML_BAD_FIELD_USER_XML);\n\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n        // This really shouldn\u0027t return 500, but that\u0027s what it does now.\n        assertThat(e.getStatusCode(), equalTo(500));\n\n        // This should have a different message, but this is the current behavior demonstrating the problem.\n        assertThat(e.getResponse().getContentAsString(), containsString(\"A problem occurred while processing the request\"));\n\n        OldDataMonitor odm \u003d ExtensionList.lookupSingleton(OldDataMonitor.class);\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n\n        assertThat(data.size(), equalTo(0));\n\n        odm.doDiscard(null, null);\n\n        View view \u003d j.getInstance().getView(\"nonexistent\");\n\n        // The view should still be nonexistent, as we gave it a user and not a view.\n        assertNull(\"Should not have created view.\", view);\n\n        User.AllUsers.scanAll();\n        boolean createUser \u003d false;\n        User badUser \u003d User.getById(\"foo\", createUser);\n\n        assertNull(\"Should not have created user.\", badUser);\n    }","advisory":"SECURITY-1923"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.configDotXmlWithValidXmlAndBadField:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1923\")\n    public void configDotXmlWithValidXmlAndBadField() throws Exception {\n        this.prepareSec1923();\n\n        ListView view \u003d new ListView(\"view1\", j.jenkins);\n        j.jenkins.addView(view);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(CONFIGURATOR);\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(String.format(\"%s/config.xml\", view.getUrl())), HttpMethod.POST);\n        req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n        req.setRequestBody(VALID_XML_BAD_FIELD_USER_XML);\n\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(req));\n        // This really shouldn\u0027t return 500, but that\u0027s what it does now.\n        assertThat(e.getStatusCode(), equalTo(500));\n\n        OldDataMonitor odm \u003d ExtensionList.lookupSingleton(OldDataMonitor.class);\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n\n        assertThat(data.size(), equalTo(0));\n\n        odm.doDiscard(null, null);\n\n        User.AllUsers.scanAll();\n        boolean createUser \u003d false;\n        User badUser \u003d User.getById(\"foo\", createUser);\n\n        assertNull(\"Should not have created user.\", badUser);\n    }","advisory":"SECURITY-1923"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.newJob_xssPreventedInId:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2171\")\n    public void newJob_xssPreventedInId() throws Exception {\n        CustomizableTLID customizableTLID \u003d j.jenkins.getExtensionList(TopLevelItemDescriptor.class).get(CustomizableTLID.class);\n        customizableTLID.customId \u003d \"regularclass\\\" onclick\u003dalert(123) other\u003d\\\"\";\n        customizableTLID.customDisplayName \u003d \"DN-xss-id\";\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"view/all/newJob\");\n\n        Object result \u003d page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027.label\u0027)).filter(el \u003d\u003e el.innerText.indexOf(\u0027\" + customizableTLID.customDisplayName + \"\u0027) !\u003d\u003d -1)[0].parentElement.parentElement\").getJavaScriptResult();\n        assertThat(result, instanceOf(HTMLElement.class));\n        HTMLElement resultElement \u003d (HTMLElement) result;\n        assertThat(resultElement.getAttribute(\"onclick\", null), nullValue());\n    }","advisory":"SECURITY-2171"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.newJob_xssPreventedInDisplayName:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2171\")\n    public void newJob_xssPreventedInDisplayName() throws Exception {\n        CustomizableTLID customizableTLID \u003d j.jenkins.getExtensionList(TopLevelItemDescriptor.class).get(CustomizableTLID.class);\n        customizableTLID.customId \u003d \"xss-dn\";\n        customizableTLID.customDisplayName \u003d \"DN \u003cimg src\u003dx onerror\u003dconsole.warn(123)\u003e\";\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"view/all/newJob\");\n\n        Object result \u003d page.executeJavaScript(\"document.querySelector(\u0027.xss-dn .label\u0027).innerHTML\").getJavaScriptResult();\n        assertThat(result, instanceOf(String.class));\n        String resultString \u003d (String) result;\n        assertThat(resultString, not(containsString(\"\u003c\")));\n    }","advisory":"SECURITY-2171"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.newJob_descriptionSupportsHtml:void()","methodSource":"@Test\n    public void newJob_descriptionSupportsHtml() throws Exception {\n        CustomizableTLID customizableTLID \u003d j.jenkins.getExtensionList(TopLevelItemDescriptor.class).get(CustomizableTLID.class);\n        customizableTLID.customId \u003d \"html-desc\";\n        customizableTLID.customDescription \u003d \"Super \u003cstrong\u003elooong\u003c/strong\u003e description\";\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"view/all/newJob\");\n\n        Object result \u003d page.executeJavaScript(\"document.querySelector(\u0027.html-desc .desc strong\u0027)\").getJavaScriptResult();\n        assertThat(result, instanceOf(HTMLElement.class));\n        assertThat(((HTMLElement) result).getTagName(), is(\"STRONG\"));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.newJob_xssPreventedInGetIconFilePathPattern:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2171\")\n    public void newJob_xssPreventedInGetIconFilePathPattern() throws Exception {\n        CustomizableTLID customizableTLID \u003d j.jenkins.getExtensionList(TopLevelItemDescriptor.class).get(CustomizableTLID.class);\n        customizableTLID.customId \u003d \"xss-ifpp\";\n        customizableTLID.customIconClassName \u003d null;\n        customizableTLID.customIconFilePathPattern \u003d \"\\\"\u003e\u003cimg src\u003dx onerror\u003d\\\"alert(123)\";\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"view/all/newJob\");\n\n        Object resultIconChildrenCount \u003d page.executeJavaScript(\"document.querySelector(\u0027.\" + customizableTLID.customId + \" .icon\u0027).children.length\").getJavaScriptResult();\n        assertThat(resultIconChildrenCount, instanceOf(Integer.class));\n        int resultIconChildrenCountInt \u003d (int) resultIconChildrenCount;\n        assertEquals(1, resultIconChildrenCountInt);\n\n        Object resultImgAttributesCount \u003d page.executeJavaScript(\"document.querySelector(\u0027.\" + customizableTLID.customId + \" .icon img\u0027).attributes.length\").getJavaScriptResult();\n        assertThat(resultImgAttributesCount, instanceOf(Integer.class));\n        int resultImgAttributesCountInt \u003d (int) resultImgAttributesCount;\n        assertEquals(1, resultImgAttributesCountInt);\n    }","advisory":"SECURITY-2171"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.shouldNotAllowInconsistentViewName:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1871\")\n    public void shouldNotAllowInconsistentViewName() throws IOException {\n        assertNull(j.jenkins.getView(\"ViewName\"));\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"createView\"), HttpMethod.POST);\n        req.setEncodingType(FormEncodingType.URL_ENCODED);\n        req.setRequestBody(\"name\u003dViewName\u0026mode\u003dhudson.model.ListView\u0026json\u003d\" + URLEncoder.encode(\"{\\\"mode\\\":\\\"hudson.model.ListView\\\",\\\"name\\\":\\\"DifferentViewName\\\"}\", StandardCharsets.UTF_8));\n        wc.getPage(req);\n        assertNull(j.jenkins.getView(\"DifferentViewName\"));\n        assertNotNull(j.jenkins.getView(\"ViewName\"));\n    }","advisory":"SECURITY-1871"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.newJob_iconClassName:void()","methodSource":"@Test\n    public void newJob_iconClassName() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"view/all/newJob\");\n\n        Object resultClassNames \u003d page.executeJavaScript(\"document.querySelector(\u0027.hudson_model_FreeStyleProject .icon img\u0027).className\").getJavaScriptResult();\n        assertThat(resultClassNames, instanceOf(String.class));\n        String resultClassNamesString \u003d (String) resultClassNames;\n        List\u003cString\u003e resultClassNamesList \u003d Arrays.asList(resultClassNamesString.split(\" \"));\n        assertThat(resultClassNamesList, hasItem(\"icon-xlg\"));\n        assertThat(resultClassNamesList, hasItem(\"icon-freestyle-project\"));\n\n        Object resultSrc \u003d page.executeJavaScript(\"document.querySelector(\u0027.hudson_model_FreeStyleProject .icon img\u0027).src\").getJavaScriptResult();\n        assertThat(resultSrc, instanceOf(String.class));\n        String resultSrcString \u003d (String) resultSrc;\n        assertThat(resultSrcString, containsString(\"48x48\"));\n        assertThat(resultSrcString, containsString(\"freestyleproject.png\"));\n    }"},{"className":"hudson.model.ViewTest","methodSignature":"hudson.model.ViewTest.newJob_twoLetterIcon:void()","methodSource":"@Test\n    public void newJob_twoLetterIcon() throws Exception {\n        CustomizableTLID customizableTLID \u003d j.jenkins.getExtensionList(TopLevelItemDescriptor.class).get(CustomizableTLID.class);\n        customizableTLID.customId \u003d \"two-letters-desc\";\n        customizableTLID.customDisplayName \u003d \"Two words\";\n        customizableTLID.customIconClassName \u003d null;\n        customizableTLID.customIconFilePathPattern \u003d null;\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"view/all/newJob\");\n\n        Object result \u003d page.executeJavaScript(\"document.querySelector(\u0027.\" + customizableTLID.customId + \" .default-icon\u0027)\").getJavaScriptResult();\n        assertThat(result, instanceOf(HTMLElement.class));\n        HTMLElement resultHtml \u003d (HTMLElement) result;\n        HTMLElement spanA \u003d (HTMLElement) resultHtml.getFirstElementChild();\n        HTMLElement spanB \u003d (HTMLElement) resultHtml.getLastElementChild();\n        assertThat(spanA.getClassName_js(), is(\"a\"));\n        assertThat(spanA.getInnerText(), is(\"T\"));\n        assertThat(spanB.getClassName_js(), is(\"b\"));\n        assertThat(spanB.getInnerText(), is(\"w\"));\n    }"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.cleanUpSlaves:void()","methodSource":"@Test public void cleanUpSlaves() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n\n        FilePath ws1 \u003d createOldWorkspaceOn(r.createOnlineSlave(), p);\n\n        p.setAssignedNode(r.jenkins);\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        assertEquals(r.jenkins, b.getBuiltOn());\n        FilePath ws2 \u003d b.getWorkspace();\n\n        FilePath ws3 \u003d createOldWorkspaceOn(r.createOnlineSlave(), p);\n\n        performCleanup();\n\n        assertFalse(ws1.exists()); // Old one - deleted\n        assertTrue(ws2.exists()); // Not old enough - kept\n        assertTrue(ws3.exists()); // Latest - kept\n    }"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.modernMasterWorkspaceLocation:void()","methodSource":"@Issue(\"JENKINS-21023\")\n    @Test public void modernMasterWorkspaceLocation() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n\n        FilePath ws1 \u003d createOldWorkspaceOn(r.jenkins, p);\n\n        DumbSlave s \u003d r.createOnlineSlave();\n        FilePath ws2 \u003d createOldWorkspaceOn(s, p);\n        assertEquals(s, p.getLastBuiltOn());\n\n        performCleanup();\n\n        assertFalse(ws1.exists());\n        assertTrue(ws2.exists());\n    }","advisory":"JENKINS-21023"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.jobInFolder:void()","methodSource":"@Issue(\"JENKINS-21023\")\n    @Test public void jobInFolder() throws Exception {\n        MockFolder d \u003d r.createFolder(\"d\");\n        FreeStyleProject p1 \u003d d.createProject(FreeStyleProject.class, \"p\");\n        FilePath ws1 \u003d createOldWorkspaceOn(r.jenkins, p1);\n\n        DumbSlave s1 \u003d r.createOnlineSlave();\n        FilePath ws2 \u003d createOldWorkspaceOn(s1, p1);\n        DumbSlave s2 \u003d r.createOnlineSlave();\n        FilePath ws3 \u003d createOldWorkspaceOn(s2, p1);\n        assertEquals(s2, p1.getLastBuiltOn());\n\n        FreeStyleProject p2 \u003d d.createProject(FreeStyleProject.class, \"p2\");\n        FilePath ws4 \u003d createOldWorkspaceOn(s1, p2);\n        assertEquals(s1, p2.getLastBuiltOn());\n        ws2.getParent().act(new Touch(0)); // ${s1.rootPath}/workspace/d/\n\n        performCleanup();\n\n        assertFalse(ws1.exists());\n        assertFalse(ws2.exists());\n        assertTrue(ws3.exists());\n        assertTrue(ws4.exists());\n    }","advisory":"JENKINS-21023"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.doNothingIfDisabled:void()","methodSource":"@Test public void doNothingIfDisabled() throws Exception {\n        WorkspaceCleanupThread.disabled \u003d true;\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n\n        FilePath ws \u003d createOldWorkspaceOn(r.jenkins, p);\n        createOldWorkspaceOn(r.createOnlineSlave(), p);\n\n        performCleanup();\n\n        assertTrue(ws.exists());\n\n        WorkspaceCleanupThread.disabled \u003d false;\n        performCleanup();\n\n        assertFalse(ws.exists());\n    }"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.removeOnlyWhatIsOldEnough:void()","methodSource":"@Test public void removeOnlyWhatIsOldEnough() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FilePath ws \u003d createOldWorkspaceOn(r.jenkins, p);\n        createOldWorkspaceOn(r.createOnlineSlave(), p);\n\n        long twoDaysOld \u003d System.currentTimeMillis() - TimeUnit.DAYS.toMillis(2);\n        ws.act(new Touch(twoDaysOld));\n\n        WorkspaceCleanupThread.retainForDays \u003d 3;\n        performCleanup();\n\n        assertTrue(ws.exists());\n\n        WorkspaceCleanupThread.retainForDays \u003d 1;\n        performCleanup();\n\n        assertFalse(ws.exists());\n    }"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.recurrencePeriodIsInHours:void()","methodSource":"@Test @WithoutJenkins public void recurrencePeriodIsInHours() {\n        assertEquals(\n                TimeUnit.HOURS.toMillis(WorkspaceCleanupThread.recurrencePeriodHours),\n                new WorkspaceCleanupThread().getRecurrencePeriod()\n        );\n    }"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.vetoByScm:void()","methodSource":"@Test public void vetoByScm() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FilePath ws \u003d createOldWorkspaceOn(r.jenkins, p);\n        createOldWorkspaceOn(r.createOnlineSlave(), p);\n\n        p.setScm(new VetoSCM(false));\n        performCleanup();\n\n        assertTrue(ws.exists());\n\n        p.setScm(new VetoSCM(true));\n        performCleanup();\n\n        assertFalse(ws.exists());\n    }"},{"className":"hudson.model.WorkspaceCleanupThreadTest","methodSignature":"hudson.model.WorkspaceCleanupThreadTest.deleteTemporaryDirectory:void()","methodSource":"@Issue(\"JENKINS-27152\")\n    @Test\n    public void deleteTemporaryDirectory() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FilePath ws \u003d createOldWorkspaceOn(r.jenkins, p);\n        FilePath tmp \u003d WorkspaceList.tempDir(ws);\n        tmp.child(\"stuff\").write(\"content\", null);\n        createOldWorkspaceOn(r.createOnlineSlave(), p);\n        performCleanup();\n        assertFalse(ws.exists());\n        assertFalse(\"temporary directory should be cleaned up as well\", tmp.exists());\n    }","advisory":"JENKINS-27152"},{"className":"hudson.node_monitors.ClockMonitorDescriptorTest","methodSignature":"hudson.node_monitors.ClockMonitorDescriptorTest.testClockMonitor:void()","methodSource":"@Test\n    public void testClockMonitor() throws Exception {\n        DumbSlave s \u003d jenkins.createOnlineSlave();\n        SlaveComputer c \u003d s.getComputer();\n        if (c.isOffline())\n            fail(\"Slave failed to go online: \" + c.getLog());\n\n        ClockDifference cd \u003d ClockMonitor.DESCRIPTOR.monitor(c);\n        long diff \u003d cd.diff;\n        assertTrue(diff \u003c TimeUnit.SECONDS.toMillis(5));\n        assertTrue(diff \u003e TimeUnit.SECONDS.toMillis(-5));\n        assertTrue(cd.abs() \u003e\u003d 0);\n        assertTrue(cd.abs() \u003c TimeUnit.SECONDS.toMillis(5));\n        assertFalse(cd.isDangerous());\n        assertFalse(\"html output too short\", cd.toHtml().isEmpty());\n    }"},{"className":"hudson.node_monitors.DiskSpaceMonitorDescriptorTest","methodSignature":"hudson.node_monitors.DiskSpaceMonitorDescriptorTest.remoteDiskSpaceUsage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3381\")\n    public void remoteDiskSpaceUsage() throws Exception {\n        DumbSlave s \u003d j.createSlave();\n        SlaveComputer c \u003d s.getComputer();\n        c.connect(false).get(); // wait until it\u0027s connected\n        if (c.isOffline())\n            fail(\"Slave failed to go online: \" + c.getLog());\n\n        DiskSpace du \u003d TemporarySpaceMonitor.DESCRIPTOR.monitor(c);\n        du.toHtml();\n        assertTrue(du.size \u003e 0);\n    }","advisory":"JENKINS-3381"},{"className":"hudson.node_monitors.DiskSpaceMonitorDescriptorTest","methodSignature":"hudson.node_monitors.DiskSpaceMonitorDescriptorTest.parse:void()","methodSource":"@Test\n    @WithoutJenkins\n    public void parse() throws Exception {\n        assertEquals(1, DiskSpace.parse(\"1\").size);\n        assertEquals(1024, DiskSpace.parse(\"1KB\").size);\n        assertEquals(1024, DiskSpace.parse(\"1K\").size);\n        assertEquals(1024, DiskSpace.parse(\"1kb\").size);\n        assertEquals(1024, DiskSpace.parse(\"1kib\").size);\n        assertEquals(1024 * 1024, DiskSpace.parse(\"1MB\").size);\n        assertEquals(1024 * 1024, DiskSpace.parse(\"1MIB\").size);\n        assertEquals(1024 * 1024 * 1024, DiskSpace.parse(\"1GB\").size);\n        assertEquals(512 * 1024 * 1024, DiskSpace.parse(\"0.5GB\").size);\n    }"},{"className":"hudson.node_monitors.DiskSpaceMonitorDescriptorTest","methodSignature":"hudson.node_monitors.DiskSpaceMonitorDescriptorTest.string:void()","methodSource":"@Test\n    @WithoutJenkins\n    @Issue(\"JENKINS-59383\")\n    public void string() {\n        DiskSpace du \u003d new DiskSpace(\"/tmp\", 123 * 1024 * 1024);\n        du.setTotalSize(300 * 1024 * 1024);\n        du.setThreshold(100 * 1024 * 1024);\n        assertEquals(\"123.00 MiB out of 300.00 MiB left on /tmp.\", du.toString());\n        du.setThreshold(200 * 1024 * 1024);\n        assertEquals(\"Disk space is below threshold of 200.00 MiB. Only 123.00 MiB out of 300.00 MiB left on /tmp.\", du.toString());\n    }","advisory":"JENKINS-59383"},{"className":"hudson.node_monitors.ResponseTimeMonitorTest","methodSignature":"hudson.node_monitors.ResponseTimeMonitorTest.skipOfflineAgent:void()","methodSource":"@Test\n    @Issue(\"JENKINS-20272\")\n    public void skipOfflineAgent() throws Exception {\n        DumbSlave s \u003d j.createSlave();\n        SlaveComputer c \u003d s.getComputer();\n        c.connect(false).get(); // wait until it\u0027s connected\n\n        // Try as temporarily offline first.\n        c.setTemporarilyOffline(true, new OfflineCause.UserCause(User.getUnknown(), \"Temporarily offline\"));\n        assertNotNull(ResponseTimeMonitor.DESCRIPTOR.monitor(c));\n\n        // Now try as actually disconnected.\n        c.setTemporarilyOffline(false, null);\n        j.disconnectSlave(s);\n        assertNull(ResponseTimeMonitor.DESCRIPTOR.monitor(c));\n\n        // Now reconnect and make sure we get a non-null response.\n        c.connect(false).get(); // wait until it\u0027s connected\n\n        assertNotNull(ResponseTimeMonitor.DESCRIPTOR.monitor(c));\n    }","advisory":"JENKINS-20272"},{"className":"hudson.node_monitors.ResponseTimeMonitorTest","methodSignature":"hudson.node_monitors.ResponseTimeMonitorTest.doNotDisconnectBeforeLaunched:void()","methodSource":"@Test\n    public void doNotDisconnectBeforeLaunched() throws Exception {\n        Slave slave \u003d inboundAgents.createAgent(j, InboundAgentRule.Options.newBuilder().skipStart().build());\n        Computer c \u003d slave.toComputer();\n        assertNotNull(c);\n        OfflineCause originalOfflineCause \u003d c.getOfflineCause();\n        assertNotNull(originalOfflineCause);\n\n        ResponseTimeMonitor rtm \u003d ComputerSet.getMonitors().get(ResponseTimeMonitor.class);\n        for (int i \u003d 0; i \u003c 10; i++) {\n            rtm.triggerUpdate().join();\n            System.out.println(rtm.getDescriptor().get(c));\n            assertEquals(originalOfflineCause, c.getOfflineCause());\n        }\n    }"},{"className":"hudson.pages.SystemConfigurationTestCase","methodSignature":"hudson.pages.SystemConfigurationTestCase.pageDecoratorIsListedInPage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2289\")\n    public void pageDecoratorIsListedInPage() throws Exception {\n        pageDecoratorImpl \u003d new PageDecoratorImpl();\n        PageDecorator.ALL.add(pageDecoratorImpl);\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"configure\");\n        j.assertXPath(page, \"//div[@name\u003d\u0027hudson-pages-SystemConfigurationTestCase$PageDecoratorImpl\u0027]\");\n\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        form.getInputByName(\"_.decoratorId\").setValue(\"this_is_a_profile\");\n        j.submit(form);\n        assertEquals(\"The decorator field was incorrect\", \"this_is_a_profile\", pageDecoratorImpl.getDecoratorId());\n    }","advisory":"JENKINS-2289"},{"className":"hudson.PluginManagerCheckUpdateCenterTest","methodSignature":"hudson.PluginManagerCheckUpdateCenterTest.updateSiteReturn502Test:void()","methodSource":"@Test\n    public void updateSiteReturn502Test() throws Exception {\n        checkUpdateSite(Jenkins.get().getRootUrl() + \"updateSite502/getJson\", \"IOException: Server returned HTTP response code: 502 for URL\", false);\n    }"},{"className":"hudson.PluginManagerCheckUpdateCenterTest","methodSignature":"hudson.PluginManagerCheckUpdateCenterTest.updateSiteWrongJsonTest:void()","methodSource":"@Test\n    public void updateSiteWrongJsonTest() throws Exception {\n        checkUpdateSite(Jenkins.get().getRootUrl() + \"updateSiteWrongJson/getJson\", \"JSONException: Unquotted string \u0027wrongjson\u0027\", false);\n    }"},{"className":"hudson.PluginManagerCheckUpdateCenterTest","methodSignature":"hudson.PluginManagerCheckUpdateCenterTest.updateSiteRightJsonTest:void()","methodSource":"@Test\n    public void updateSiteRightJsonTest() throws Exception {\n        // Save the actual value to leave it so, when the test finish, just in case it is needed for other tests\n        boolean oldValueSignatureCheck \u003d DownloadService.signatureCheck;\n        try {\n            //Avoid CertPathValidatorException: Algorithm constraints check failed on signature algorithm: MD5withRSA\n            DownloadService.signatureCheck \u003d false;\n            // Have to end in update-center.json or it fails. See UpdateSite#getMetadataUrlForDownloadable\n            checkUpdateSite(Jenkins.get().getRootUrl() + \"updateSiteRightJson/update-center.json\", \"\", true);\n        } finally {\n            DownloadService.signatureCheck \u003d oldValueSignatureCheck;\n        }\n    }"},{"className":"hudson.PluginManagerCheckUpdateCenterTest","methodSignature":"hudson.PluginManagerCheckUpdateCenterTest.changeLogLevelInLog:void()","methodSource":"@Test\n    public void changeLogLevelInLog() throws Exception {\n        Logger pmLogger \u003d Logger.getLogger(PluginManager.class.getName());\n        Logger rLogger \u003d Logger.getLogger(Retrier.class.getName());\n\n        // save current level (to avoid interfering other tests)\n        Level pmLevel \u003d pmLogger.getLevel();\n        Level rLevel \u003d rLogger.getLevel();\n\n        try {\n            // set level to record\n            pmLogger.setLevel(Level.SEVERE);\n            rLogger.setLevel(Level.SEVERE);\n\n            // check with more than 1 attempt and level \u003e WARNING\n            PluginManager.CHECK_UPDATE_ATTEMPTS \u003d 2;\n            updateSiteWrongJsonTest();\n\n            // the messages has been recorded in the log\n            assertThat(logging, LoggerRule.recorded(is(Messages.PluginManager_UpdateSiteChangeLogLevel(Retrier.class.getName()))));\n        } finally {\n            // restore level\n            pmLogger.setLevel(pmLevel);\n            rLogger.setLevel(rLevel);\n        }\n    }"},{"className":"hudson.PluginManagerInstalledGUITest","methodSignature":"hudson.PluginManagerInstalledGUITest.test_enable_disable_uninstall:void()","methodSource":"@Issue(\"JENKINS-33843\")\n    @Test\n    public void test_enable_disable_uninstall() throws IOException, SAXException {\n        InstalledPlugins installedPlugins \u003d new InstalledPlugins();\n\n        InstalledPlugin matrixAuthPlugin \u003d installedPlugins.get(\"matrix-auth\");\n        InstalledPlugin dependeePlugin \u003d installedPlugins.get(\"dependee\");\n        InstalledPlugin dependerPlugin \u003d installedPlugins.get(\"depender\");\n        InstalledPlugin mandatoryDependerPlugin \u003d installedPlugins.get(\"mandatory-depender\");\n\n        // As a detached plugin, it is an optional dependency of others built against a newer baseline.\n        matrixAuthPlugin.assertHasNoDependents();\n        // Has a mandatory dependency:\n        dependeePlugin.assertHasDependents();\n        // Leaf plugins:\n        dependerPlugin.assertHasNoDependents();\n        mandatoryDependerPlugin.assertHasNoDependents();\n\n        // This plugin should be enabled and it should be possible to disable it\n        // because no other plugins depend on it.\n        mandatoryDependerPlugin.assertEnabled();\n        mandatoryDependerPlugin.assertEnabledStateChangeable();\n        mandatoryDependerPlugin.assertUninstallable();\n\n        // This plugin should be enabled, but it should not be possible to disable or uninstall it\n        // because another plugin depends on it.\n        dependeePlugin.assertEnabled();\n        dependeePlugin.assertEnabledStateNotChangeable();\n        dependeePlugin.assertNotUninstallable();\n\n        // Disable one plugin\n        mandatoryDependerPlugin.clickEnabledWidget();\n\n        // Now that plugin should be disabled, but it should be possible to re-enable it\n        // and it should still be uninstallable.\n        mandatoryDependerPlugin.assertNotEnabled(); // this is different to earlier\n        mandatoryDependerPlugin.assertEnabledStateChangeable();\n        mandatoryDependerPlugin.assertUninstallable();\n\n        // The dependee plugin should still be enabled, but it should now be possible to disable it because\n        // the mandatory depender plugin is no longer enabled. Should still not be possible to uninstall it.\n        // Note that the depender plugin does not block its disablement.\n        dependeePlugin.assertEnabled();\n        dependeePlugin.assertEnabledStateChangeable(); // this is different to earlier\n        dependeePlugin.assertNotUninstallable();\n        dependerPlugin.assertEnabled();\n\n        // Disable the dependee plugin\n        dependeePlugin.clickEnabledWidget();\n\n        // Now it should NOT be possible to change the enable state of the depender plugin because one\n        // of the plugins it depends on is not enabled.\n        mandatoryDependerPlugin.assertNotEnabled();\n        mandatoryDependerPlugin.assertEnabledStateNotChangeable();  // this is different to earlier\n        mandatoryDependerPlugin.assertUninstallable();\n        dependerPlugin.assertEnabled();\n\n        // You can disable a detached plugin if there is no explicit dependency on it.\n        matrixAuthPlugin.assertEnabled();\n        matrixAuthPlugin.assertEnabledStateChangeable();\n        matrixAuthPlugin.assertUninstallable();\n        matrixAuthPlugin.clickEnabledWidget();\n        matrixAuthPlugin.assertNotEnabled();\n        matrixAuthPlugin.assertEnabledStateChangeable();\n        matrixAuthPlugin.assertUninstallable();\n    }","advisory":"JENKINS-33843"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.uploadJpi:void()","methodSource":"@Test public void uploadJpi() throws Exception {\n        HtmlPage page \u003d r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f \u003d page.getFormByName(\"uploadPlugin\");\n        File dir \u003d tmp.newFolder();\n        File plugin \u003d new File(dir, \"htmlpublisher.jpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/htmlpublisher.jpi\"), plugin);\n        f.getInputByName(\"name\").setValue(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertTrue(new File(r.jenkins.getRootDir(), \"plugins/htmlpublisher.jpi\").exists());\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.uploadHpi:void()","methodSource":"@Test public void uploadHpi() throws Exception {\n        HtmlPage page \u003d r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f \u003d page.getFormByName(\"uploadPlugin\");\n        File dir \u003d tmp.newFolder();\n        File plugin \u003d new File(dir, \"legacy.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/legacy.hpi\"), plugin);\n        f.getInputByName(\"name\").setValue(plugin.getAbsolutePath());\n        r.submit(f);\n\n        // uploaded legacy plugins get renamed to *.jpi\n        assertTrue(new File(r.jenkins.getRootDir(), \"plugins/legacy.jpi\").exists());\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.deployJpiFromUrl:void()","methodSource":"@Test public void deployJpiFromUrl() throws Exception {\n        HtmlPage page \u003d r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f \u003d page.getFormByName(\"uploadPlugin\");\n        f.getInputByName(\"pluginUrl\").setValue(Jenkins.get().getRootUrl() + \"pluginManagerGetPlugin/htmlpublisher.jpi\");\n        r.submit(f);\n\n        assertTrue(new File(r.jenkins.getRootDir(), \"plugins/htmlpublisher.jpi\").exists());\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.withRecipeJpi:void()","methodSource":"@WithPlugin(\"htmlpublisher.jpi\")\n    @Test public void withRecipeJpi() {\n        assertNotNull(r.jenkins.getPlugin(\"htmlpublisher\"));\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.withRecipeHpi:void()","methodSource":"@WithPlugin(\"legacy.hpi\")\n    @Test public void withRecipeHpi() {\n        assertNotNull(r.jenkins.getPlugin(\"legacy\"));\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.uberClassLoaderIsAvailableDuringStart:void()","methodSource":"@WithPlugin(\"htmlpublisher.jpi\")\n    @WithPluginManager(PluginManagerImpl_for_testUberClassLoaderIsAvailableDuringStart.class)\n    @Test public void uberClassLoaderIsAvailableDuringStart() {\n        assertTrue(((PluginManagerImpl_for_testUberClassLoaderIsAvailableDuringStart) r.jenkins.pluginManager).tested);\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.uberClassLoaderDoesntUseContextClassLoader:void()","methodSource":"@Url(\"http://jenkins.361315.n4.nabble.com/channel-example-and-plugin-classes-gives-ClassNotFoundException-td3756092.html\")\n    @Test public void uberClassLoaderDoesntUseContextClassLoader() throws Exception {\n        Thread t \u003d Thread.currentThread();\n\n        URLClassLoader ucl \u003d new URLClassLoader(new URL[0], r.jenkins.pluginManager.uberClassLoader);\n\n        ClassLoader old \u003d t.getContextClassLoader();\n        t.setContextClassLoader(ucl);\n        try {\n            assertThrows(ClassNotFoundException.class, () -\u003e ucl.loadClass(\"No such class\"));\n\n            ucl.loadClass(Hudson.class.getName());\n        } finally {\n            t.setContextClassLoader(old);\n        }\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installWithoutRestart:void()","methodSource":"@Test public void installWithoutRestart() throws Exception {\n        URL res \u003d getClass().getClassLoader().getResource(\"plugins/htmlpublisher.jpi\");\n        File f \u003d new File(r.jenkins.getRootDir(), \"plugins/htmlpublisher.jpi\");\n        FileUtils.copyURLToFile(res, f);\n        r.jenkins.pluginManager.dynamicLoad(f);\n\n        Class c \u003d r.jenkins.getPluginManager().uberClassLoader.loadClass(\"htmlpublisher.HtmlPublisher$DescriptorImpl\");\n        assertNotNull(r.jenkins.getDescriptorByType(c));\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.prevalidateConfig:void()","methodSource":"@Test public void prevalidateConfig() throws Exception {\n        assumeFalse(\"TODO: Implement this test on Windows\", Functions.isWindows());\n        PersistedList\u003cUpdateSite\u003e sites \u003d r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url \u003d PluginManagerTest.class.getResource(\"/plugins/htmlpublisher-update-center.json\");\n        UpdateSite site \u003d new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n        assertEquals(Collections.emptyList(), r.jenkins.getPluginManager().prevalidateConfig(new ByteArrayInputStream(\"\u003cwhatever\u003e\u003crunant plugin\u003d\\\"ant@1.1\\\"/\u003e\u003c/whatever\u003e\".getBytes(StandardCharsets.UTF_8))));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"htmlpublisher\"));\n        List\u003cFuture\u003cUpdateCenterJob\u003e\u003e jobs \u003d r.jenkins.getPluginManager().prevalidateConfig(new ByteArrayInputStream(\"\u003cwhatever\u003e\u003chtmlpublisher plugin\u003d\\\"htmlpublisher@0.7\\\"/\u003e\u003c/whatever\u003e\".getBytes(StandardCharsets.UTF_8)));\n        assertEquals(1, jobs.size());\n        UpdateCenterJob job \u003d jobs.get(0).get(); // blocks for completion\n        assertEquals(\"InstallationJob\", job.getType());\n        UpdateCenter.InstallationJob ijob \u003d (UpdateCenter.InstallationJob) job;\n        assertEquals(\"htmlpublisher\", ijob.plugin.name);\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"htmlpublisher\"));\n        // TODO restart scheduled (SuccessButRequiresRestart) after upgrade or Support-Dynamic-Loading: false\n        // TODO dependencies installed or upgraded too\n        // TODO required plugin installed but inactive\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installDependingPluginWithoutRestart:void()","methodSource":"@Test public void installDependingPluginWithoutRestart() throws Exception {\n        // Load dependee.\n        {\n            dynamicLoad(\"dependee.hpi\");\n        }\n\n        // before load depender, of course failed to call Depender.getValue()\n        assertThrows(ClassNotFoundException.class, this::callDependerValue);\n\n        // No extensions exist.\n        assertTrue(r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint\").isEmpty());\n\n        // Load depender.\n        {\n            dynamicLoad(\"depender.hpi\");\n        }\n\n        // depender successfully accesses to dependee.\n        assertEquals(\"dependee\", callDependerValue());\n\n        // Extension in depender is loaded.\n        assertFalse(r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint\").isEmpty());\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installDependedPluginWithoutRestart:void()","methodSource":"@Issue(\"JENKINS-19976\")\n    @Test public void installDependedPluginWithoutRestart() throws Exception {\n        // Load depender.\n        {\n            dynamicLoad(\"depender.hpi\");\n        }\n\n        // before load dependee, depender does not access to dependee.\n        assertEquals(\"depender\", callDependerValue());\n\n        // before load dependee, of course failed to list extensions for dependee.\n        assertThrows(ClassNotFoundException.class, () -\u003e r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint\"));\n        // Extension extending a dependee class can\u0027t be loaded either\n        assertThrows(NoClassDefFoundError.class, () -\u003e r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.depender.DependerExtension\"));\n\n        // Load dependee.\n        {\n            dynamicLoad(\"dependee.hpi\");\n        }\n\n        // (MUST) Not throws an exception\n        // (SHOULD) depender successfully accesses to dependee.\n        assertEquals(\"dependee\", callDependerValue());\n\n        // Extensions in depender are loaded.\n        assertEquals(1, r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.depender.DependerExtension\").size());\n    }","advisory":"JENKINS-19976"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installDependedOptionalPluginWithoutRestart:void()","methodSource":"@Issue(\"JENKINS-60449\")\n    @WithPlugin(\"variant.hpi\")\n    @Test public void installDependedOptionalPluginWithoutRestart() throws Exception {\n        // Load optional-depender.\n        {\n            dynamicLoad(\"optional-depender-0.0.2.hpi\");\n        }\n        // Extension depending on dependee class isn\u0027t loaded\n        assertTrue(r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.optionaldepender.OptionalDependerExtension\").isEmpty());\n        // Load dependee.\n        {\n            dynamicLoad(\"dependee-0.0.2.hpi\");\n        }\n\n        // Extensions in depender are loaded.\n        assertEquals(1, r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.optionaldepender.OptionalDependerExtension\").size());\n    }","advisory":"JENKINS-60449"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installPluginWithObsoleteDependencyFails:void()","methodSource":"@Issue(\"JENKINS-21486\")\n    @Test public void installPluginWithObsoleteDependencyFails() throws Exception {\n        // Load dependee 0.0.1.\n        {\n            dynamicLoad(\"dependee.hpi\");\n        }\n\n        // Load mandatory-depender 0.0.2, depending on dependee 0.0.2\n        assertThrows(IOException.class, () -\u003e dynamicLoad(\"mandatory-depender-0.0.2.hpi\"));\n    }","advisory":"JENKINS-21486"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installPluginWithDisabledOptionalDependencySucceeds:void()","methodSource":"@Issue(\"JENKINS-21486\")\n    @Test public void installPluginWithDisabledOptionalDependencySucceeds() throws Exception {\n        // Load dependee 0.0.2.\n        {\n            dynamicLoadAndDisable(\"dependee-0.0.2.hpi\");\n        }\n\n        // Load depender 0.0.2, depending optionally on dependee 0.0.2\n        {\n            dynamicLoad(\"depender-0.0.2.hpi\");\n        }\n\n        // dependee is not loaded so we cannot list any extension for it.\n        assertThrows(ClassNotFoundException.class, () -\u003e r.jenkins.getExtensionList(\"org.jenkinsci.plugins.dependencytest.dependee.DependeeExtensionPoint\"));\n    }","advisory":"JENKINS-21486"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installPluginWithDisabledDependencyFails:void()","methodSource":"@Issue(\"JENKINS-21486\")\n    @Test public void installPluginWithDisabledDependencyFails() throws Exception {\n        // Load dependee 0.0.2.\n        {\n            dynamicLoadAndDisable(\"dependee-0.0.2.hpi\");\n        }\n\n        // Load mandatory-depender 0.0.2, depending on dependee 0.0.2\n        assertThrows(IOException.class, () -\u003e dynamicLoad(\"mandatory-depender-0.0.2.hpi\"));\n    }","advisory":"JENKINS-21486"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.clearDisabledStatusAfterUninstall:void()","methodSource":"@Issue(\"JENKINS-68194\")\n    @WithPlugin(\"dependee.hpi\")\n    @Test public void clearDisabledStatusAfterUninstall() throws Exception {\n        PluginWrapper pw \u003d r.jenkins.pluginManager.getPlugin(\"dependee\");\n        assertNotNull(pw);\n\n        pw.doMakeDisabled();\n        pw.doDoUninstall();\n\n        File disabledHpi \u003d new File(r.jenkins.getRootDir(), \"plugins/dependee.hpi.disabled\");\n        assertFalse(disabledHpi.exists());  // `.disabled` file should be deleted after uninstall\n    }","advisory":"JENKINS-68194"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installPluginWithObsoleteOptionalDependencyFails:void()","methodSource":"@Issue(\"JENKINS-21486\")\n    @Test public void installPluginWithObsoleteOptionalDependencyFails() throws Exception {\n        // Load dependee 0.0.1.\n        {\n            dynamicLoad(\"dependee.hpi\");\n        }\n\n        // Load depender 0.0.2, depending optionally on dependee 0.0.2\n        assertThrows(IOException.class, () -\u003e dynamicLoad(\"depender-0.0.2.hpi\"));\n    }","advisory":"JENKINS-21486"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.dynamicLoadRestartRequiredException:void()","methodSource":"@Issue(\"JENKINS-12753\")\n    @WithPlugin(\"htmlpublisher.jpi\")\n    @Test public void dynamicLoadRestartRequiredException() throws Exception {\n        File jpi \u003d new File(r.jenkins.getRootDir(), \"plugins/htmlpublisher.jpi\");\n        assertTrue(jpi.isFile());\n        FileUtils.touch(jpi);\n        File timestamp \u003d new File(r.jenkins.getRootDir(), \"plugins/htmlpublisher/.timestamp2\");\n        assertTrue(timestamp.isFile());\n        long lastMod \u003d timestamp.lastModified();\n        assertThrows(RestartRequiredException.class, () -\u003e r.jenkins.getPluginManager().dynamicLoad(jpi));\n        assertEquals(\"should not have tried to delete \u0026 unpack\", lastMod, timestamp.lastModified());\n    }","advisory":"JENKINS-12753"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.pluginListJSONApi:void()","methodSource":"@WithPlugin(\"htmlpublisher.jpi\")\n    @Test public void pluginListJSONApi() throws IOException {\n        JSONObject response \u003d r.getJSON(\"pluginManager/plugins\").getJSONObject();\n\n        // Check that the basic API endpoint invocation works.\n        assertEquals(\"ok\", response.getString(\"status\"));\n        JSONArray data \u003d response.getJSONArray(\"data\");\n        assertThat(data, not(empty()));\n\n        // Check that there was some data in the response and that the first entry\n        // at least had some of the expected fields.\n        JSONObject pluginInfo \u003d data.getJSONObject(0);\n        assertNotNull(pluginInfo.getString(\"name\"));\n        assertNotNull(pluginInfo.getString(\"title\"));\n        assertNotNull(pluginInfo.getString(\"dependencies\"));\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.requireSystemDuringLoad:void()","methodSource":"@Issue(\"JENKINS-41684\")\n    @Test\n    public void requireSystemDuringLoad() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        try (ACLContext context \u003d ACL.as2(User.getById(\"underprivileged\", true).impersonate2())) {\n            dynamicLoad(\"require-system-during-load.hpi\");\n        }\n    }","advisory":"JENKINS-41684"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.requireSystemDuringStart:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59775\")\n    public void requireSystemDuringStart() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName \u003d \"require-system-during-load\";\n        dynamicLoad(pluginShortName + \".hpi\");\n        try (ACLContext context \u003d ACL.as2(User.getById(\"underprivileged\", true).impersonate2())) {\n            r.jenkins.pluginManager.start(List.of(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }","advisory":"JENKINS-59775"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.requireSystemInInitializer:void()","methodSource":"@Issue(\"JENKINS-61071\")\n    @Test\n    public void requireSystemInInitializer() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        String pluginShortName \u003d \"require-system-in-initializer\";\n        dynamicLoad(pluginShortName + \".jpi\");\n        try (ACLContext context \u003d ACL.as2(User.getById(\"underprivileged\", true).impersonate2())) {\n            r.jenkins.pluginManager.start(List.of(r.jenkins.pluginManager.getPlugin(pluginShortName)));\n        }\n    }","advisory":"JENKINS-61071"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.uploadDependencyResolution:void()","methodSource":"@Test public void uploadDependencyResolution() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList\u003cUpdateSite\u003e sites \u003d r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url \u003d PluginManagerTest.class.getResource(\"/plugins/upload-test-update-center.json\");\n        UpdateSite site \u003d new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n\n        // neither of the following plugins should be installed\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"mandatory-depender\"));\n        assertNull(r.jenkins.getPluginManager().getPlugin(\"dependee\"));\n\n        HtmlPage page \u003d r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f \u003d page.getFormByName(\"uploadPlugin\");\n        File dir \u003d tmp.newFolder();\n        File plugin \u003d new File(dir, \"mandatory-depender-0.0.2.hpi\");\n        FileUtils.copyURLToFile(getClass().getClassLoader().getResource(\"plugins/mandatory-depender-0.0.2.hpi\"), plugin);\n        f.getInputByName(\"name\").setValue(plugin.getAbsolutePath());\n        r.submit(f);\n\n        assertThat(r.jenkins.getUpdateCenter().getJobs(), not(empty()));\n\n        // wait for all the download jobs to complete\n        boolean done \u003d true;\n        boolean passed \u003d true;\n        do {\n            Thread.sleep(100);\n            done \u003d true;\n            for (UpdateCenterJob job : r.jenkins.getUpdateCenter().getJobs()) {\n                if (job instanceof UpdateCenter.DownloadJob) {\n                    UpdateCenter.DownloadJob j \u003d (UpdateCenter.DownloadJob) job;\n                    assertFalse(j.status instanceof UpdateCenter.DownloadJob.Failure);\n                    done \u0026\u003d !(j.status instanceof UpdateCenter.DownloadJob.Pending ||\n                            j.status instanceof UpdateCenter.DownloadJob.Installing);\n                }\n            }\n        } while (!done);\n\n        // the files get renamed to .jpi\n        assertTrue(new File(r.jenkins.getRootDir(), \"plugins/mandatory-depender.jpi\").exists());\n        assertTrue(new File(r.jenkins.getRootDir(), \"plugins/dependee.jpi\").exists());\n\n        // now the other plugins should have been found as dependencies and downloaded\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"mandatory-depender\"));\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"dependee\"));\n    }"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.findResourceForPluginFirstClassLoader:void()","methodSource":"@Issue(\"JENKINS-44898\")\n    @WithPlugin(\"plugin-first.hpi\")\n    @Test\n    public void findResourceForPluginFirstClassLoader() {\n        PluginWrapper w \u003d r.jenkins.getPluginManager().getPlugin(\"plugin-first\");\n        assertNotNull(w);\n\n        URL fromPlugin \u003d w.classLoader.getResource(\"org/jenkinsci/plugins/pluginfirst/HelloWorldBuilder/config.jelly\");\n        assertNotNull(fromPlugin);\n\n        // This is how UberClassLoader.findResource functions.\n        URL fromToolkit \u003d ClassLoaderReflectionToolkit._findResource(w.classLoader, \"org/jenkinsci/plugins/pluginfirst/HelloWorldBuilder/config.jelly\");\n\n        assertEquals(fromPlugin, fromToolkit);\n    }","advisory":"JENKINS-44898"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.optionalExtensionCanBeFoundAfterDynamicLoadOfVariant:void()","methodSource":"@Issue(\"JENKINS-50336\")\n    @Test\n    public void optionalExtensionCanBeFoundAfterDynamicLoadOfVariant() throws Exception {\n        dynamicLoad(\"variant.hpi\");\n        assertNotNull(r.jenkins.getPluginManager().getPlugin(\"variant\"));\n        dynamicLoad(\"jenkins-50336.hpi\");\n        assertTrue(ExtensionList.lookup(GlobalConfiguration.class).stream().anyMatch(gc -\u003e \"io.jenkins.plugins.MyGlobalConfiguration\".equals(gc.getClass().getName())));\n    }","advisory":"JENKINS-50336"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.doNotThrowWithUnknownPlugins:void()","methodSource":"@Issue(\"JENKINS-62622\")\n    @Test\n    @WithPlugin(\"legacy.hpi\")\n    public void doNotThrowWithUnknownPlugins() throws Exception {\n        final UpdateCenter uc \u003d Jenkins.get().getUpdateCenter();\n        Assert.assertNull(\"This test requires the plugin with ID \u0027legacy\u0027 to not exist in update sites\", uc.getPlugin(\"legacy\"));\n\n        // ensure data is loaded - probably unnecessary, but closer to reality\n        Assert.assertSame(FormValidation.Kind.OK, uc.getSite(\"default\").updateDirectlyNow().kind);\n    }","advisory":"JENKINS-62622"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.searchMultipleUpdateSites:void()","methodSource":"@Test @Issue(\"JENKINS-64840\")\n    public void searchMultipleUpdateSites() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        PersistedList\u003cUpdateSite\u003e sites \u003d r.jenkins.getUpdateCenter().getSites();\n        sites.clear();\n        URL url \u003d PluginManagerTest.class.getResource(\"/plugins/search-test-update-center1.json\");\n        UpdateSite site \u003d new UpdateSite(UpdateCenter.ID_DEFAULT, url.toString());\n        sites.add(site);\n        assertEquals(FormValidation.ok(), site.updateDirectly(false).get());\n        assertNotNull(site.getData());\n        url \u003d PluginManagerTest.class.getResource(\"/plugins/search-test-update-center2.json\");\n        site \u003d new UpdateSite(\"secondary\", url.toString());\n        sites.add(site);\n        final Future\u003cFormValidation\u003e future \u003d site.updateDirectly(false);\n        if (future !\u003d null) {\n            assertEquals(FormValidation.ok(), future.get());\n        }\n        assertNotNull(site.getData());\n\n        //Dummy plugin is found in the second site (should have worked before the fix)\n        JenkinsRule.JSONWebResponse response \u003d r.getJSON(\"pluginManager/pluginsSearch?query\u003ddummy\u0026limit\u003d5\");\n        JSONObject json \u003d response.getJSONObject();\n        assertTrue(json.has(\"data\"));\n        JSONArray data \u003d json.getJSONArray(\"data\");\n        assertEquals(\"Should be one search hit for dummy\", 1, data.size());\n\n        //token-macro plugin is found in the first site (didn\u0027t work before the fix)\n        response \u003d r.getJSON(\"pluginManager/pluginsSearch?query\u003dtoken\u0026limit\u003d5\");\n        json \u003d response.getJSONObject();\n        assertTrue(json.has(\"data\"));\n        data \u003d json.getJSONArray(\"data\");\n        assertEquals(\"Should be one search hit for token\", 1, data.size());\n\n        //hello-world plugin is found in the first site and hello-huston in the second (didn\u0027t work before the fix)\n        response \u003d r.getJSON(\"pluginManager/pluginsSearch?query\u003dhello\u0026limit\u003d5\");\n        json \u003d response.getJSONObject();\n        assertTrue(json.has(\"data\"));\n        data \u003d json.getJSONArray(\"data\");\n        assertEquals(\"Should be two search hits for hello\", 2, data.size());\n    }","advisory":"JENKINS-64840"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.installNecessaryPluginsTest:void()","methodSource":"@Issue(\"JENKINS-70599\")\n    @Test\n    public void installNecessaryPluginsTest() throws Exception {\n        String jenkinsUrl \u003d r.getURL().toString();\n\n        // Define a cookie handler\n        CookieHandler.setDefault(new CookieManager());\n        HttpCookie sessionCookie \u003d new HttpCookie(\"session\", \"test-session-cookie\");\n        sessionCookie.setPath(\"/\");\n        sessionCookie.setVersion(0);\n        ((CookieManager) CookieHandler.getDefault())\n                .getCookieStore()\n                .add(new URI(jenkinsUrl), sessionCookie);\n\n        // Initialize the cookie handler and get the crumb\n        URI crumbIssuer \u003d new URI(jenkinsUrl + \"crumbIssuer/api/json\");\n        HttpRequest httpGet \u003d\n                HttpRequest.newBuilder()\n                        .uri(crumbIssuer)\n                        .header(\"Accept\", \"application/json\")\n                        .timeout(Duration.ofSeconds(7))\n                        .GET()\n                        .build();\n        HttpClient clientGet \u003d\n                HttpClient.newBuilder()\n                        .cookieHandler(CookieHandler.getDefault())\n                        .connectTimeout(Duration.ofSeconds(2))\n                        .build();\n        HttpResponse\u003cString\u003e responseGet \u003d clientGet.send(httpGet, HttpResponse.BodyHandlers.ofString());\n        assertEquals(\"Bad response for crumb issuer\", 200, responseGet.statusCode());\n        String body \u003d responseGet.body();\n        assertTrue(\"crumbRequestField not in response\", body.contains(\"crumbRequestField\"));\n        org.json.JSONObject jsonObject \u003d new org.json.JSONObject(body);\n        String crumb \u003d (String) jsonObject.get(\"crumb\");\n        String crumbRequestField \u003d (String) jsonObject.get(\"crumbRequestField\");\n\n        // Call installNecessaryPlugins XML API for git client plugin 4.0.0 with crumb\n        URI installNecessaryPlugins \u003d new URI(jenkinsUrl + \"pluginManager/installNecessaryPlugins\");\n        String xmlRequest \u003d \"\u003cjenkins\u003e\u003cinstall plugin\u003d\\\"git-client@4.0.0\\\"\u003e\u003c/install\u003e\u003c/jenkins\u003e\";\n        HttpRequest request \u003d\n                HttpRequest.newBuilder()\n                        .uri(installNecessaryPlugins)\n                        .timeout(Duration.ofSeconds(20))\n                        .header(\"Content-Type\", \"application/xml\")\n                        .header(crumbRequestField, crumb)\n                        .POST(HttpRequest.BodyPublishers.ofString(xmlRequest))\n                        .build();\n        HttpClient client \u003d\n                HttpClient.newBuilder()\n                        .cookieHandler(CookieHandler.getDefault())\n                        .followRedirects(HttpClient.Redirect.ALWAYS)\n                        .connectTimeout(Duration.ofSeconds(2))\n                        .build();\n        HttpResponse\u003cString\u003e response \u003d client.send(request, HttpResponse.BodyHandlers.ofString());\n\n        // Redirect reported 404 before bug was fixed\n        assertEquals(\"Bad response for installNecessaryPlugins\", 200, response.statusCode());\n    }","advisory":"JENKINS-70599"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.verifyUploadedPluginPermission:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2823\")\n    public void verifyUploadedPluginPermission() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        HtmlPage page \u003d r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f \u003d page.getFormByName(\"uploadPlugin\");\n        File dir \u003d tmp.newFolder();\n        File plugin \u003d new File(dir, \"htmlpublisher.jpi\");\n        FileUtils.copyURLToFile(Objects.requireNonNull(getClass().getClassLoader().getResource(\"plugins/htmlpublisher.jpi\")), plugin);\n        f.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        r.submit(f);\n\n        File filesRef \u003d Files.createTempFile(\"tmp\", \".tmp\").toFile();\n        File filesTmpDir \u003d filesRef.getParentFile();\n        filesRef.deleteOnExit();\n\n        final Set\u003cPosixFilePermission\u003e[] filesPermission \u003d new Set[]{new HashSet\u003c\u003e()};\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e {\n                    Optional\u003cFile\u003e lastUploadedPluginDir \u003d Arrays.stream(Objects.requireNonNull(\n                                    filesTmpDir.listFiles((file, fileName) -\u003e\n                                            fileName.startsWith(\"uploadDir\")))).\n                            max(Comparator.comparingLong(File::lastModified));\n                    if (lastUploadedPluginDir.isPresent()) {\n                        filesPermission[0] \u003d Files.getPosixFilePermissions(lastUploadedPluginDir.get().toPath(), LinkOption.NOFOLLOW_LINKS);\n                        Optional\u003cFile\u003e pluginFile \u003d Arrays.stream(Objects.requireNonNull(\n                                        lastUploadedPluginDir.get().listFiles((file, fileName) -\u003e\n                                                fileName.startsWith(\"uploaded\")))).\n                                max(Comparator.comparingLong(File::lastModified));\n                        assertTrue(pluginFile.isPresent());\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n        assertEquals(EnumSet.of(OWNER_EXECUTE, OWNER_READ, OWNER_WRITE), filesPermission[0]);\n    }","advisory":"SECURITY-2823"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.noInjectionOnAvailablePluginsPage:void()","methodSource":"@Test\n    @Issue(\"SECURITY-3037\")\n    public void noInjectionOnAvailablePluginsPage() throws Exception {\n        DownloadService.signatureCheck \u003d false;\n        Jenkins.get().getUpdateCenter().getSites().clear();\n        UpdateSite us \u003d new UpdateSite(\"Security3037\", Jenkins.get().getRootUrl() + \"security3037UpdateCenter/security3037-update-center.json\");\n        Jenkins.get().getUpdateCenter().getSites().add(us);\n\n        try (JenkinsRule.WebClient wc \u003d r.createWebClient()) {\n            HtmlPage p \u003d wc.goTo(\"pluginManager\");\n\n            AlertHandlerImpl alertHandler \u003d new AlertHandlerImpl();\n            wc.setAlertHandler(alertHandler);\n\n            PluginManagerUtil.getCheckForUpdatesButton(p).click();\n            HtmlPage available \u003d wc.goTo(\"pluginManager/available\");\n            assertTrue(available.querySelector(\".alert-danger\")\n                    .getTextContent().contains(\"This plugin is built for Jenkins 9999999\"));\n            wc.waitForBackgroundJavaScript(100);\n\n            HtmlAnchor anchor \u003d available.querySelector(\".jenkins-table__link\");\n            anchor.click(true, false, false);\n            wc.waitForBackgroundJavaScript(100);\n            assertTrue(alertHandler.messages.isEmpty());\n        }\n    }","advisory":"SECURITY-3037"},{"className":"hudson.PluginManagerTest","methodSignature":"hudson.PluginManagerTest.verifyUploadedPluginFromURLPermission:void()","methodSource":"@Test\n    @Issue(\"SECURITY-3072\")\n    public void verifyUploadedPluginFromURLPermission() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        HtmlPage page \u003d r.createWebClient().goTo(\"pluginManager/advanced\");\n        HtmlForm f \u003d page.getFormByName(\"uploadPlugin\");\n        f.getInputByName(\"pluginUrl\").setValue(Jenkins.get().getRootUrl() + \"pluginManagerGetPlugin/htmlpublisher.jpi\");\n        r.submit(f);\n\n        File filesRef \u003d Files.createTempFile(\"tmp\", \".tmp\").toFile();\n        File filesTmpDir \u003d filesRef.getParentFile();\n        filesRef.deleteOnExit();\n\n        final Set\u003cPosixFilePermission\u003e[] filesPermission \u003d new Set[]{new HashSet\u003c\u003e()};\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e {\n                    Optional\u003cFile\u003e lastUploadedPluginDir \u003d Arrays.stream(Objects.requireNonNull(\n                                    filesTmpDir.listFiles((file, fileName) -\u003e\n                                            fileName.startsWith(\"uploadDir\")))).\n                            max(Comparator.comparingLong(File::lastModified));\n                    if (lastUploadedPluginDir.isPresent()) {\n                        filesPermission[0] \u003d Files.getPosixFilePermissions(lastUploadedPluginDir.get().toPath(), LinkOption.NOFOLLOW_LINKS);\n                        Optional\u003cFile\u003e pluginFile \u003d Arrays.stream(Objects.requireNonNull(\n                                        lastUploadedPluginDir.get().listFiles((file, fileName) -\u003e\n                                                fileName.startsWith(\"uploaded\")))).\n                                max(Comparator.comparingLong(File::lastModified));\n                        assertTrue(pluginFile.isPresent());\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n        assertEquals(EnumSet.of(OWNER_EXECUTE, OWNER_READ, OWNER_WRITE), filesPermission[0]);\n    }","advisory":"SECURITY-3072"},{"className":"hudson.PluginManagerWhichTest","methodSignature":"hudson.PluginManagerWhichTest.whichPlugin:void()","methodSource":"@Test\n    public void whichPlugin() throws Exception {\n        PluginWrapper expected \u003d r.getPluginManager().getPlugin(\"cloudbees-folder\");\n        assertNotNull(expected);\n        assertEquals(expected, r.getPluginManager().whichPlugin(Folder.class));\n    }"},{"className":"hudson.PluginTest","methodSignature":"hudson.PluginTest.doDynamic:void()","methodSource":"@Issue({\"SECURITY-131\", \"SECURITY-155\", \"SECURITY-705\"})\n    @Test public void doDynamic() throws Exception {\n        r.createWebClient().goTo(\"plugin/cloudbees-folder/images/svgs/folder.svg\", \"image/svg+xml\");\n        r.createWebClient().goTo(\"plugin/cloudbees-folder/images/../images/svgs/folder.svg\", \"image/svg+xml\"); // collapsed somewhere before it winds up in restOfPath\n        /* TODO https://github.com/apache/httpcomponents-client/commit/8c04c6ae5e5ba1432e40684428338ce68431766b#r32873542\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/%2E%2E/images/user-disabled.png\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR); // IAE from TokenList.\u003cinit\u003e\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/%252E%252E/images/user-disabled.png\", HttpServletResponse.SC_BAD_REQUEST); // SECURITY-131\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/%25252E%25252E/images/user-disabled.png\", HttpServletResponse.SC_BAD_REQUEST); // just checking\n        */\n        // SECURITY-705:\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/..%2fWEB-INF/licenses.xml\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/./matrix-auth.jpi\", /* Path collapsed to simply `credentials.jpi` before entering */ HttpServletResponse.SC_NOT_FOUND);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/%2e%2e%2fWEB-INF/licenses.xml\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/%2e.%2fWEB-INF/licenses.xml\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/images/..%2f..%2f..%2f\" + r.jenkins.getRootDir().getName() + \"%2fsecrets%2fmaster.key\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/\" + r.jenkins.getRootDir() + \"/secrets/master.key\", /* ./ prepended anyway */ HttpServletResponse.SC_NOT_FOUND);\n        // SECURITY-155:\n        r.createWebClient().assertFails(\"plugin/matrix-auth/WEB-INF/licenses.xml\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/META-INF/MANIFEST.MF\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/web-inf/licenses.xml\", HttpServletResponse.SC_BAD_REQUEST);\n        r.createWebClient().assertFails(\"plugin/matrix-auth/meta-inf/manifest.mf\", HttpServletResponse.SC_BAD_REQUEST);\n    }"},{"className":"hudson.PluginTest","methodSignature":"hudson.PluginTest.preventTimestamp2_toBeServed:void()","methodSource":"@Ignore(\"TODO observed to fail in CI with 404 due to external UC issues\")\n    @Test\n    @Issue(\"SECURITY-925\")\n    public void preventTimestamp2_toBeServed() throws Exception {\n        // impossible to use installDetachedPlugin(\"credentials\") since we want to have it exploded like with WAR\n        Jenkins.get().getUpdateCenter().getSites().get(0).updateDirectlyNow(false);\n        List\u003cFuture\u003cUpdateCenter.UpdateCenterJob\u003e\u003e pluginInstalled \u003d r.jenkins.pluginManager.install(List.of(\"credentials\"), true);\n\n        for (Future\u003cUpdateCenter.UpdateCenterJob\u003e job : pluginInstalled) {\n            job.get();\n        }\n        r.createWebClient().assertFails(\"plugin/matrix-auth/.timestamp2\", HttpServletResponse.SC_BAD_REQUEST);\n    }","advisory":"SECURITY-925"},{"className":"hudson.ProcStarterTest","methodSignature":"hudson.ProcStarterTest.testNonInitializedEnvsNPE:void()","methodSource":"@Test\n    @Issue(\"JENKINS-20559\")\n    public void testNonInitializedEnvsNPE() throws Exception {\n        // Create nodes and other test stuff\n        rule.jenkins.setNumExecutors(0);\n        rule.createSlave();\n\n        // Create a job with test build wrappers\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildWrappersList().add(new DecoratedWrapper());\n        project.getBuildWrappersList().add(new EchoWrapper());\n\n        // Run the build. If NPE occurs, the test will fail\n        rule.buildAndAssertSuccess(project);\n    }","advisory":"JENKINS-20559"},{"className":"hudson.ProcStarterTest","methodSignature":"hudson.ProcStarterTest.testNonExistingPwd:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36277\")\n    public void testNonExistingPwd() throws Exception {\n        rule.jenkins.setNumExecutors(0);\n        rule.createSlave();\n\n        FreeStyleProject project \u003d rule.createFreeStyleProject();\n        project.getBuildersList().add(new EchoBuilder());\n        FreeStyleBuild run \u003d rule.buildAndAssertStatus(Result.FAILURE, project);\n\n        rule.assertLogContains(\"java.io.IOException: Process working directory\", run);\n    }","advisory":"JENKINS-36277"},{"className":"hudson.ProcTest","methodSignature":"hudson.ProcTest.remoteProcOutputSync:void()","methodSource":"@Test\n    public void remoteProcOutputSync() throws Exception {\n        VirtualChannel ch \u003d createSlaveChannel();\n\n        // keep the pipe fairly busy\n        final Pipe p \u003d Pipe.createRemoteToLocal();\n        for (int i \u003d 0; i \u003c 10; i++)\n            ch.callAsync(new ChannelFiller(p.getOut()));\n        new Thread(() -\u003e {\n            try {\n                IOUtils.drain(p.getIn());\n            } catch (IOException e) {\n            }\n        }).start();\n\n        RemoteLauncher launcher \u003d new RemoteLauncher(TaskListener.NULL, ch, !Functions.isWindows());\n\n        StringBuilder str \u003d new StringBuilder();\n        str.append(\"oxox\".repeat(256));\n\n        for (int i \u003d 0; i \u003c 1000; i++) {\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            if (Functions.isWindows()) {\n                launcher.launch().cmds(new String[] {\"cmd\", \"/c\", \"echo \", str.toString()}).stdout(baos).join();\n            }\n            else {\n                launcher.launch().cmds(\"echo\", str.toString()).stdout(baos).join();\n            }\n            assertEquals(str.toString(), baos.toString(Charset.defaultCharset()).trim());\n        }\n\n        ch.close();\n    }"},{"className":"hudson.ProcTest","methodSignature":"hudson.ProcTest.ioPumpingWithLocalLaunch:void()","methodSource":"@Test\n    public void ioPumpingWithLocalLaunch() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        doIoPumpingTest(new LocalLauncher(new StreamTaskListener(System.out, Charset.defaultCharset())));\n    }"},{"className":"hudson.ProcTest","methodSignature":"hudson.ProcTest.ioPumpingWithRemoteLaunch:void()","methodSource":"@Test\n    public void ioPumpingWithRemoteLaunch() throws Exception {\n        assumeFalse(\"TODO: Implement this test for Windows\", Functions.isWindows());\n        doIoPumpingTest(new RemoteLauncher(\n                new StreamTaskListener(System.out, Charset.defaultCharset()),\n                createSlaveChannel(), true));\n    }"},{"className":"hudson.ProxyConfigurationManagerTest","methodSignature":"hudson.ProxyConfigurationManagerTest.serialForm:void()","methodSource":"@LocalData\n    @Test public void serialForm() throws Exception {\n        /* Set up this way:\n        r.jenkins.proxy \u003d new ProxyConfiguration(\"proxy.mycorp\", 80);\n        r.jenkins.proxy.save();\n        */\n        ProxyConfiguration pc \u003d r.jenkins.proxy;\n        assertNotNull(pc);\n        assertEquals(\"proxy.mycorp\", pc.name);\n    }"},{"className":"hudson.ProxyConfigurationTest","methodSignature":"hudson.ProxyConfigurationTest.httpClientExecutor:void()","methodSource":"@Ignore(\"prone to timing out on CI\")\n    @Test\n    public void httpClientExecutor() throws Exception {\n        for (int i \u003d 0; i \u003c 50_000; i++) {\n            if (i % 1_000 \u003d\u003d 0) {\n                System.err.println(\"#\" + i);\n            }\n            assertThat(ProxyConfiguration.newHttpClient().send(ProxyConfiguration.newHttpRequestBuilder(URI.create(r.getURL() + \"ping/\")).build(),\n                    java.net.http.HttpResponse.BodyHandlers.discarding()).statusCode(),\n                is(200));\n        }\n    }"},{"className":"hudson.RelativePathTest","methodSignature":"hudson.RelativePathTest.testRelativePath:void()","methodSource":"@Issue(\"JENKINS-18776\")\n    @Test\n    public void testRelativePath() throws Exception {\n        // I was having trouble causing annotation processing on test stubs\n//        jenkins.getDescriptorOrDie(RelativePathTest.class);\n//        jenkins.getDescriptorOrDie(Model.class);\n\n        j.createWebClient().goTo(\"self/\");\n        assertTrue(j.jenkins.getDescriptorByType(Model.DescriptorImpl.class).touched);\n    }","advisory":"JENKINS-18776"},{"className":"hudson.scm.AbstractScmTagActionTest","methodSignature":"hudson.scm.AbstractScmTagActionTest.regularTextDisplayedCorrectly:void()","methodSource":"@Test\n    public void regularTextDisplayedCorrectly() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        String tagToKeep \u003d \"Nice tag with space\";\n        p.setScm(new FakeSCM(tagToKeep));\n\n        j.buildAndAssertSuccess(p);\n\n        String tooltip \u003d buildAndExtractTooltipAttribute(p);\n        assertEquals(tagToKeep, tooltip);\n    }"},{"className":"hudson.scm.ChangeLogSetTest","methodSignature":"hudson.scm.ChangeLogSetTest.catchingExceptionDuringAnnotation:void()","methodSource":"@Test\n    @Issue(\"JENKINS-17084\")\n    public void catchingExceptionDuringAnnotation() {\n        FakeChangeLogSCM.EntryImpl change \u003d new FakeChangeLogSCM.EntryImpl();\n        change.setParent(ChangeLogSet.createEmpty(null)); // otherwise test would actually test only NPE thrown when accessing parent.build\n        try {\n            change.getMsgAnnotated();\n        } catch (Throwable t) {\n            fail(t.getMessage());\n        }\n        assertEquals(new FakeChangeLogSCM.EntryImpl().getMsg(), change.getMsg());\n    }","advisory":"JENKINS-17084"},{"className":"hudson.scm.ScmTest","methodSignature":"hudson.scm.ScmTest.projectDeletionAndCallback:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2271\")\n    public void projectDeletionAndCallback() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        final boolean[] callback \u003d new boolean[1];\n        p.setScm(new NullSCM() {\n            @Override\n            public boolean processWorkspaceBeforeDeletion(AbstractProject\u003c?, ?\u003e project, FilePath workspace, Node node) {\n                callback[0] \u003d true;\n                return true;\n            }\n\n            private Object writeReplace() { // don\u0027t really care about save\n                return new NullSCM();\n            }\n        });\n        j.buildAndAssertSuccess(p);\n        p.delete();\n        assertTrue(callback[0]);\n    }","advisory":"JENKINS-2271"},{"className":"hudson.scm.ScmTest","methodSignature":"hudson.scm.ScmTest.abortDuringCheckoutMarksBuildAsAborted:void()","methodSource":"@Test\n    @Issue(\"JENKINS-4605\")\n    public void abortDuringCheckoutMarksBuildAsAborted() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setScm(new NullSCM() {\n            @Override\n            public boolean checkout(AbstractBuild\u003c?, ?\u003e build,\n                    Launcher launcher, FilePath remoteDir,\n                    BuildListener listener, File changeLogFile)\n                    throws InterruptedException {\n                throw new InterruptedException();\n            }\n\n            private Object writeReplace() { // don\u0027t really care about save\n                return new NullSCM();\n            }\n        });\n\n        j.buildAndAssertStatus(Result.ABORTED, p);\n    }","advisory":"JENKINS-4605"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testFailure:void()","methodSource":"@Test\n    public void testFailure() throws Exception {\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage resultPage \u003d wc.search(\"no-such-thing\");\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, resultPage.getWebResponse().getStatusCode());\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testXSS:void()","methodSource":"@Issue(\"JENKINS-3415\")\n    @Test\n    public void testXSS() throws Exception {\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        wc.setAlertHandler((page, message) -\u003e {\n            throw new AssertionError();\n        });\n        HtmlPage resultPage \u003d wc.search(\"\u003cscript\u003ealert(\u0027script\u0027);\u003c/script\u003e\");\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, resultPage.getWebResponse().getStatusCode());\n    }","advisory":"JENKINS-3415"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearchByProjectName:void()","methodSource":"@Test\n    public void testSearchByProjectName() throws Exception {\n        final String projectName \u003d \"testSearchByProjectName\";\n\n        j.createFreeStyleProject(projectName);\n\n        Page result \u003d j.search(projectName);\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        // make sure we\u0027ve fetched the testSearchByDisplayName project page\n        String contents \u003d result.getWebResponse().getContentAsString();\n        assertTrue(contents.contains(String.format(\"\u003ctitle\u003e%s [Jenkins]\u003c/title\u003e\", projectName)));\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearchByProjectNameBehindAFolder:void()","methodSource":"@Issue(\"JENKINS-24433\")\n    @Test\n    public void testSearchByProjectNameBehindAFolder() throws Exception {\n        FreeStyleProject myFreeStyleProject \u003d j.createFreeStyleProject(\"testSearchByProjectName\");\n        MockFolder myMockFolder \u003d j.createFolder(\"my-folder-1\");\n\n        Page result \u003d j.createWebClient().goTo(myMockFolder.getUrl() + \"search?q\u003d\" + myFreeStyleProject.getName());\n\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        URL resultUrl \u003d result.getUrl();\n        assertEquals(j.getInstance().getRootUrl() + myFreeStyleProject.getUrl(), resultUrl.toString());\n    }","advisory":"JENKINS-24433"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearchByProjectNameInAFolder:void()","methodSource":"@Issue(\"JENKINS-24433\")\n    @Test\n    public void testSearchByProjectNameInAFolder() throws Exception {\n\n        MockFolder myMockFolder \u003d j.createFolder(\"my-folder-1\");\n        FreeStyleProject myFreeStyleProject \u003d myMockFolder.createProject(FreeStyleProject.class, \"my-job-1\");\n\n        Page result \u003d j.createWebClient().goTo(myMockFolder.getUrl() + \"search?q\u003d\" + myFreeStyleProject.getFullName());\n\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        URL resultUrl \u003d result.getUrl();\n        assertEquals(j.getInstance().getRootUrl() + myFreeStyleProject.getUrl(), resultUrl.toString());\n    }","advisory":"JENKINS-24433"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearchByDisplayName:void()","methodSource":"@Test\n    public void testSearchByDisplayName() throws Exception {\n        final String displayName \u003d \"displayName9999999\";\n\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"testSearchByDisplayName\");\n        project.setDisplayName(displayName);\n\n        Page result \u003d j.search(displayName);\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        // make sure we\u0027ve fetched the testSearchByDisplayName project page\n        String contents \u003d result.getWebResponse().getContentAsString();\n        assertTrue(contents.contains(String.format(\"\u003ctitle\u003e%s [Jenkins]\u003c/title\u003e\", displayName)));\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearch2ProjectsWithSameDisplayName:void()","methodSource":"@Test\n    public void testSearch2ProjectsWithSameDisplayName() throws Exception {\n        // create 2 freestyle projects with the same display name\n        final String projectName1 \u003d \"projectName1\";\n        final String projectName2 \u003d \"projectName2\";\n        final String projectName3 \u003d \"projectName3\";\n        final String displayName \u003d \"displayNameFoo\";\n        final String otherDisplayName \u003d \"otherDisplayName\";\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(projectName1);\n        project1.setDisplayName(displayName);\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(projectName2);\n        project2.setDisplayName(displayName);\n        FreeStyleProject project3 \u003d j.createFreeStyleProject(projectName3);\n        project3.setDisplayName(otherDisplayName);\n\n        // make sure that on search we get back one of the projects, it doesn\u0027t\n        // matter which one as long as the one that is returned has displayName\n        // as the display name\n        Page result \u003d j.search(displayName);\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        // make sure we\u0027ve fetched the testSearchByDisplayName project page\n        String contents \u003d result.getWebResponse().getContentAsString();\n        assertTrue(contents.contains(String.format(\"\u003ctitle\u003e%s [Jenkins]\u003c/title\u003e\", displayName)));\n        assertFalse(contents.contains(otherDisplayName));\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testProjectNamePrecedesDisplayName:void()","methodSource":"@Test\n    public void testProjectNamePrecedesDisplayName() throws Exception {\n        final String project1Name \u003d \"foo\";\n        final String project1DisplayName \u003d \"project1DisplayName\";\n        final String project2Name \u003d \"project2Name\";\n        final String project2DisplayName \u003d project1Name;\n        final String project3Name \u003d \"project3Name\";\n        final String project3DisplayName \u003d \"project3DisplayName\";\n\n        // create 1 freestyle project with the name foo\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(project1Name);\n        project1.setDisplayName(project1DisplayName);\n\n        // create another with the display name foo\n        FreeStyleProject project2 \u003d j.createFreeStyleProject(project2Name);\n        project2.setDisplayName(project2DisplayName);\n\n        // create a third project and make sure it\u0027s not picked up by search\n        FreeStyleProject project3 \u003d j.createFreeStyleProject(project3Name);\n        project3.setDisplayName(project3DisplayName);\n\n        // search for foo\n        Page result \u003d j.search(project1Name);\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        // make sure we get the project with the name foo\n        String contents \u003d result.getWebResponse().getContentAsString();\n        assertTrue(contents.contains(String.format(\"\u003ctitle\u003e%s [Jenkins]\u003c/title\u003e\", project1DisplayName)));\n        // make sure projects 2 and 3 were not picked up\n        assertFalse(contents.contains(project2Name));\n        assertFalse(contents.contains(project3Name));\n        assertFalse(contents.contains(project3DisplayName));\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testGetSuggestionsHasBothNamesAndDisplayNames:void()","methodSource":"@Test\n    public void testGetSuggestionsHasBothNamesAndDisplayNames() throws Exception {\n        final String projectName \u003d \"project name\";\n        final String displayName \u003d \"display name\";\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(projectName);\n        project1.setDisplayName(displayName);\n\n        WebClient wc \u003d j.createWebClient();\n        Page result \u003d wc.goTo(\"search/suggest?query\u003dname\", \"application/json\");\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        String content \u003d result.getWebResponse().getContentAsString();\n        System.out.println(content);\n        JSONObject jsonContent \u003d (JSONObject) JSONSerializer.toJSON(content);\n        assertNotNull(jsonContent);\n        JSONArray jsonArray \u003d jsonContent.getJSONArray(\"suggestions\");\n        assertNotNull(jsonArray);\n\n        assertEquals(2, jsonArray.size());\n\n        boolean foundProjectName \u003d false;\n        boolean foundDisplayName \u003d false;\n        for (Object suggestion : jsonArray) {\n            JSONObject jsonSuggestion \u003d (JSONObject) suggestion;\n\n            String name \u003d (String) jsonSuggestion.get(\"name\");\n            if (projectName.equals(name)) {\n                foundProjectName \u003d true;\n            }\n            else if (displayName.equals(name)) {\n                foundDisplayName \u003d true;\n            }\n        }\n\n        assertTrue(foundProjectName);\n        assertTrue(foundDisplayName);\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testProjectNameBehindAFolderDisplayName:void()","methodSource":"@Issue(\"JENKINS-24433\")\n    @Test\n    public void testProjectNameBehindAFolderDisplayName() throws Exception {\n        final String projectName1 \u003d \"job-1\";\n        final String displayName1 \u003d \"job-1 display\";\n\n        final String projectName2 \u003d \"job-2\";\n        final String displayName2 \u003d \"job-2 display\";\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(projectName1);\n        project1.setDisplayName(displayName1);\n\n        MockFolder myMockFolder \u003d j.createFolder(\"my-folder-1\");\n\n        FreeStyleProject project2 \u003d myMockFolder.createProject(FreeStyleProject.class, projectName2);\n        project2.setDisplayName(displayName2);\n\n        WebClient wc \u003d j.createWebClient();\n        Page result \u003d wc.goTo(myMockFolder.getUrl() + \"search/suggest?query\u003d\" + projectName1, \"application/json\");\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        String content \u003d result.getWebResponse().getContentAsString();\n        JSONObject jsonContent \u003d (JSONObject) JSONSerializer.toJSON(content);\n        assertNotNull(jsonContent);\n        JSONArray jsonArray \u003d jsonContent.getJSONArray(\"suggestions\");\n        assertNotNull(jsonArray);\n\n        assertEquals(2, jsonArray.size());\n\n        boolean foundDisplayName \u003d false;\n        for (Object suggestion : jsonArray) {\n            JSONObject jsonSuggestion \u003d (JSONObject) suggestion;\n\n            String name \u003d (String) jsonSuggestion.get(\"name\");\n            if (projectName1.equals(name)) {\n                foundDisplayName \u003d true;\n            }\n        }\n\n        assertTrue(foundDisplayName);\n    }","advisory":"JENKINS-24433"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testProjectNameInAFolderDisplayName:void()","methodSource":"@Issue(\"JENKINS-24433\")\n    @Test\n    public void testProjectNameInAFolderDisplayName() throws Exception {\n        final String projectName1 \u003d \"job-1\";\n        final String displayName1 \u003d \"job-1 display\";\n\n        final String projectName2 \u003d \"job-2\";\n        final String displayName2 \u003d \"my-folder-1 job-2\";\n\n        FreeStyleProject project1 \u003d j.createFreeStyleProject(projectName1);\n        project1.setDisplayName(displayName1);\n\n        MockFolder myMockFolder \u003d j.createFolder(\"my-folder-1\");\n\n        FreeStyleProject project2 \u003d myMockFolder.createProject(FreeStyleProject.class, projectName2);\n        project2.setDisplayName(displayName2);\n\n        WebClient wc \u003d j.createWebClient();\n        Page result \u003d wc.goTo(myMockFolder.getUrl() + \"search/suggest?query\u003d\" + projectName2, \"application/json\");\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        String content \u003d result.getWebResponse().getContentAsString();\n        JSONObject jsonContent \u003d (JSONObject) JSONSerializer.toJSON(content);\n        assertNotNull(jsonContent);\n        JSONArray jsonArray \u003d jsonContent.getJSONArray(\"suggestions\");\n        assertNotNull(jsonArray);\n\n        assertEquals(1, jsonArray.size());\n\n        boolean foundDisplayName \u003d false;\n        for (Object suggestion : jsonArray) {\n            JSONObject jsonSuggestion \u003d (JSONObject) suggestion;\n\n            String name \u003d (String) jsonSuggestion.get(\"name\");\n\n            if (displayName2.equals(name)) {\n                foundDisplayName \u003d true;\n            }\n        }\n\n        assertTrue(foundDisplayName);\n    }","advisory":"JENKINS-24433"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testDisabledJobShouldBeSearchable:void()","methodSource":"@Issue(\"JENKINS-13148\")\n    @Test\n    public void testDisabledJobShouldBeSearchable() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo-bar\");\n        assertTrue(suggest(j.jenkins.getSearchIndex(), \"foo\").contains(p));\n\n        p.disable();\n        assertTrue(suggest(j.jenkins.getSearchIndex(), \"foo\").contains(p));\n    }","advisory":"JENKINS-13148"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testCompletionOutsideView:void()","methodSource":"@Issue(\"JENKINS-13148\")\n    @Test\n    public void testCompletionOutsideView() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"foo-bar\");\n        ListView v \u003d new ListView(\"empty1\", j.jenkins);\n        ListView w \u003d new ListView(\"empty2\", j.jenkins);\n        j.jenkins.addView(v);\n        j.jenkins.addView(w);\n        j.jenkins.setPrimaryView(w);\n\n        // new view should be empty\n        assertFalse(v.contains(p));\n        assertFalse(w.contains(p));\n        assertFalse(j.jenkins.getPrimaryView().contains(p));\n\n        assertTrue(suggest(j.jenkins.getSearchIndex(), \"foo\").contains(p));\n    }","advisory":"JENKINS-13148"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testInaccessibleViews:void()","methodSource":"@Issue(\"SECURITY-385\")\n    @Test\n    public void testInaccessibleViews() throws IOException {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        GlobalMatrixAuthorizationStrategy strategy \u003d new GlobalMatrixAuthorizationStrategy();\n        strategy.add(Jenkins.READ, \"alice\");\n        j.jenkins.setAuthorizationStrategy(strategy);\n\n        j.jenkins.addView(new ListView(\"foo\", j.jenkins));\n\n        // SYSTEM can see all the views\n        assertEquals(\"two views exist\", 2, Jenkins.get().getViews().size());\n        List\u003cSearchItem\u003e results \u003d new ArrayList\u003c\u003e();\n        j.jenkins.getSearchIndex().suggest(\"foo\", results);\n        assertEquals(\"nonempty results list\", 1, results.size());\n\n\n        // Alice can\u0027t\n        assertFalse(\"no permission\", j.jenkins.getView(\"foo\").hasPermission2(User.get(\"alice\").impersonate2(), View.READ));\n        ACL.impersonate2(User.get(\"alice\").impersonate2(), () -\u003e {\n            assertEquals(\"no visible views\", 0, Jenkins.get().getViews().size());\n\n            List\u003cSearchItem\u003e results1 \u003d new ArrayList\u003c\u003e();\n            j.jenkins.getSearchIndex().suggest(\"foo\", results1);\n            assertEquals(\"empty results list\", Collections.emptyList(), results1);\n        });\n    }","advisory":"SECURITY-385"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearchWithinFolders:void()","methodSource":"@Test\n    public void testSearchWithinFolders() throws Exception {\n        MockFolder folder1 \u003d j.createFolder(\"folder1\");\n        FreeStyleProject p1 \u003d folder1.createProject(FreeStyleProject.class, \"myjob\");\n        MockFolder folder2 \u003d j.createFolder(\"folder2\");\n        FreeStyleProject p2 \u003d folder2.createProject(FreeStyleProject.class, \"myjob\");\n        List\u003cSearchItem\u003e suggest \u003d suggest(j.jenkins.getSearchIndex(), \"myjob\");\n        assertTrue(suggest.contains(p1));\n        assertTrue(suggest.contains(p2));\n    }"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.adminOnlyLinksNotShownToRegularUser:void()","methodSource":"@Test\n    @Issue(\"JENKINS-7874\")\n    public void adminOnlyLinksNotShownToRegularUser() {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy mas \u003d new MockAuthorizationStrategy();\n        mas.grant(Jenkins.READ).onRoot().toEveryone();\n        j.jenkins.setAuthorizationStrategy(mas);\n\n        try (ACLContext acl \u003d ACL.as(User.get(\"alice\"))) {\n            List\u003cSearchItem\u003e results \u003d new ArrayList\u003c\u003e();\n            j.jenkins.getSearchIndex().find(\"config\", results);\n            j.jenkins.getSearchIndex().find(\"manage\", results);\n            j.jenkins.getSearchIndex().find(\"log\", results);\n            assertEquals(\"empty results list\", 0, results.size());\n        }\n    }","advisory":"JENKINS-7874"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testProjectNameInAListView:void()","methodSource":"@Issue(\"JENKINS-35459\")\n    @Test\n    public void testProjectNameInAListView() throws Exception {\n        MockFolder myMockFolder \u003d j.createFolder(\"folder\");\n        FreeStyleProject freeStyleProject \u003d myMockFolder.createProject(FreeStyleProject.class, \"myJob\");\n\n        ListView listView \u003d new ListView(\"ListView\", j.jenkins);\n        listView.setRecurse(true);\n        listView.add(myMockFolder);\n        listView.add(freeStyleProject);\n\n        j.jenkins.addView(listView);\n        j.jenkins.setPrimaryView(listView);\n\n        assertEquals(2, j.jenkins.getPrimaryView().getAllItems().size());\n\n        WebClient wc \u003d j.createWebClient();\n        Page result \u003d wc.goTo(\"search/suggest?query\u003d\" + freeStyleProject.getName(), \"application/json\");\n\n        assertNotNull(result);\n        j.assertGoodStatus(result);\n\n        String content \u003d result.getWebResponse().getContentAsString();\n        JSONObject jsonContent \u003d (JSONObject) JSONSerializer.toJSON(content);\n        assertNotNull(jsonContent);\n        JSONArray jsonArray \u003d jsonContent.getJSONArray(\"suggestions\");\n        assertNotNull(jsonArray);\n\n        assertEquals(2, jsonArray.size());\n\n        Page searchResult \u003d wc.goTo(\"search?q\u003d\" + myMockFolder.getName() + \"%2F\" + freeStyleProject.getName());\n\n        assertNotNull(searchResult);\n        j.assertGoodStatus(searchResult);\n\n        URL resultUrl \u003d searchResult.getUrl();\n        assertEquals(j.getInstance().getRootUrl() + freeStyleProject.getUrl(), resultUrl.toString());\n    }","advisory":"JENKINS-35459"},{"className":"hudson.search.SearchTest","methodSignature":"hudson.search.SearchTest.testSearchBound:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2399\")\n    public void testSearchBound() throws Exception {\n\n        final String projectName1 \u003d \"projectName1\";\n        final String projectName2 \u003d \"projectName2\";\n        final String projectName3 \u003d \"projectName3\";\n\n        j.createFreeStyleProject(projectName1);\n        j.createFreeStyleProject(projectName2);\n        j.createFreeStyleProject(projectName3);\n\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        Page result \u003d wc.goTo(\"search/suggest?query\u003dprojectName\", \"application/json\");\n        JSONArray suggestions \u003d getSearchJson(result);\n        assertEquals(3, suggestions.size());\n\n        Field declaredField \u003d Search.class.getDeclaredField(\"MAX_SEARCH_SIZE\");\n        declaredField.setAccessible(true);\n        declaredField.set(null, 2);\n\n        Page maximizedResult \u003d wc.goTo(\"search/suggest?query\u003dprojectName\", \"application/json\");\n        JSONArray maximizedSuggestions \u003d getSearchJson(maximizedResult);\n        assertEquals(2, maximizedSuggestions.size());\n    }","advisory":"SECURITY-2399"},{"className":"hudson.security.AccessDeniedException3Test","methodSignature":"hudson.security.AccessDeniedException3Test.youAreInGroupHeaders:void()","methodSource":"@Issue(\"JENKINS-39402\")\n    @Test\n    public void youAreInGroupHeaders() {\n        JenkinsRule.DummySecurityRealm realm \u003d r.createDummySecurityRealm();\n        String[] groups \u003d new String[1000];\n        for (int i \u003d 0; i \u003c groups.length; i++) {\n            groups[i] \u003d \"group\" + i;\n        }\n        realm.addGroups(\"user\", groups);\n        r.jenkins.setSecurityRealm(realm);\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        FailingHttpStatusCodeException x \u003d assertThrows(\"should not have been allowed to access anything\", FailingHttpStatusCodeException.class, () -\u003e r.createWebClient().login(\"user\"));\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());\n        assertNotNull(x.getResponse().getResponseHeaderValue(\"X-You-Are-In-Group-Disabled\"));\n    }","advisory":"JENKINS-39402"},{"className":"hudson.security.AccessDeniedException3Test","methodSignature":"hudson.security.AccessDeniedException3Test.redirectPermissionErrorsToLogin:void()","methodSource":"@Test\n    @Issue(\"JENKINS-61905\")\n    public void redirectPermissionErrorsToLogin() throws Exception {\n        JenkinsRule.DummySecurityRealm realm \u003d r.createDummySecurityRealm();\n        r.jenkins.setSecurityRealm(realm);\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toEveryone());\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        wc.setRedirectEnabled(true);\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        final HtmlPage configure \u003d wc.goTo(\"configure\");\n        Assert.assertTrue(configure.getUrl().getPath().contains(\"login\"));\n        Assert.assertTrue(configure.getUrl().getQuery().startsWith(\"from\"));\n\n        final HtmlPage configureSecurity \u003d wc.goTo(\"configureSecurity/\");\n        Assert.assertTrue(configureSecurity.getUrl().getPath().contains(\"login\"));\n        Assert.assertTrue(configureSecurity.getUrl().getQuery().startsWith(\"from\"));\n    }","advisory":"JENKINS-61905"},{"className":"hudson.security.AccessDeniedException3Test","methodSignature":"hudson.security.AccessDeniedException3Test.captureException:void()","methodSource":"@Issue(\"JENKINS-5303\")\n    @Test\n    public void captureException() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toEveryone());\n        JenkinsRule.WebClient wc \u003d r.createWebClient().login(\"user\");\n        FailingHttpStatusCodeException x \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"fails/accessDeniedException3\"));\n        assertEquals(\"should send a 403 from AccessDeniedException3\", HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());\n        assertEquals(\"should report X-You-Are-Authenticated-As from AccessDeniedException3\", \"user\", x.getResponse().getResponseHeaderValue(\"X-You-Are-Authenticated-As\"));\n\n        x \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"fails/accessDeniedException2\"));\n        assertEquals(\"should send a 403 from AccessDeniedException2\", HttpURLConnection.HTTP_FORBIDDEN, x.getStatusCode());\n        assertEquals(\"should report X-You-Are-Authenticated-As from AccessDeniedException2\", \"user\", x.getResponse().getResponseHeaderValue(\"X-You-Are-Authenticated-As\"));\n    }","advisory":"JENKINS-5303"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.bypassStrategyOnSystem:void()","methodSource":"@Issue(\"JENKINS-20474\")\n    @Test\n    public void bypassStrategyOnSystem() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new DoNotBotherMe());\n        assertTrue(p.hasPermission(Item.CONFIGURE));\n        assertTrue(p.hasPermission2(ACL.SYSTEM2, Item.CONFIGURE));\n        p.checkPermission(Item.CONFIGURE);\n        p.checkAbortPermission();\n        assertEquals(List.of(p), r.jenkins.getAllItems());\n    }","advisory":"JENKINS-20474"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionPassedIfOneIsValid:void()","methodSource":"@Test\n    public void checkAnyPermissionPassedIfOneIsValid() {\n        Jenkins jenkins \u003d r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager \u003d User.getOrCreateByIdOrFullName(\"manager\");\n        try (ACLContext ignored \u003d ACL.as2(manager.impersonate2())) {\n            jenkins.getACL().checkAnyPermission(Jenkins.MANAGE);\n        }\n    }"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionThrowsIfPermissionIsMissing:void()","methodSource":"@Test\n    public void checkAnyPermissionThrowsIfPermissionIsMissing() {\n        Jenkins jenkins \u003d r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager \u003d User.getOrCreateByIdOrFullName(\"manager\");\n\n        try (ACLContext ignored \u003d ACL.as2(manager.impersonate2())) {\n            Exception e \u003d Assert.assertThrows(AccessDeniedException.class,\n                    () -\u003e jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER));\n            Assert.assertEquals(\"manager is missing the Overall/Administer permission\", e.getMessage());\n        }\n    }"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionThrowsIfMissingMoreThanOne:void()","methodSource":"@Test\n    public void checkAnyPermissionThrowsIfMissingMoreThanOne() {\n        Jenkins jenkins \u003d r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        final User manager \u003d User.getOrCreateByIdOrFullName(\"manager\");\n\n        try (ACLContext ignored \u003d ACL.as2(manager.impersonate2())) {\n            Exception e \u003d Assert.assertThrows(AccessDeniedException.class,\n                    () -\u003e jenkins.getACL().checkAnyPermission(Jenkins.ADMINISTER, Jenkins.READ));\n            Assert.assertEquals(\"manager is missing a permission, one of Overall/Administer, Overall/Read is required\", e.getMessage());\n        }\n    }"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionDoesNotShowDisabledPermissionsInError:void()","methodSource":"@Test\n    @Issue(\"JENKINS-61467\")\n    public void checkAnyPermissionDoesNotShowDisabledPermissionsInError() {\n        Jenkins jenkins \u003d r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"manager\")\n        );\n\n        final User manager \u003d User.getOrCreateByIdOrFullName(\"manager\");\n\n        try (ACLContext ignored \u003d ACL.as2(manager.impersonate2())) {\n            Exception e \u003d Assert.assertThrows(AccessDeniedException.class,\n                    () -\u003e jenkins.getACL().checkAnyPermission(Jenkins.MANAGE, Jenkins.SYSTEM_READ));\n            Assert.assertEquals(\"manager is missing the Overall/Administer permission\", e.getMessage());\n        }\n    }","advisory":"JENKINS-61467"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionShouldShowDisabledPermissionsIfNotImplied:void()","methodSource":"@Test\n    @Issue(\"JENKINS-61467\")\n    public void checkAnyPermissionShouldShowDisabledPermissionsIfNotImplied() {\n        Jenkins jenkins \u003d r.jenkins;\n        jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"manager\")\n        );\n\n        final User manager \u003d User.getOrCreateByIdOrFullName(\"manager\");\n\n        try (ACLContext ignored \u003d ACL.as2(manager.impersonate2())) {\n            Exception e \u003d Assert.assertThrows(AccessDeniedException.class,\n                    () -\u003e jenkins.getACL().checkAnyPermission(Item.WIPEOUT, Run.ARTIFACTS));\n            Assert.assertEquals(\"manager is missing a permission, one of Job/WipeOut, Run/Artifacts is required\", e.getMessage());\n        }\n    }","advisory":"JENKINS-61467"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.hasAnyPermissionThrowsIfNoPermissionProvided:void()","methodSource":"@Test\n    public void hasAnyPermissionThrowsIfNoPermissionProvided() {\n        Assert.assertThrows(IllegalArgumentException.class, () -\u003e r.jenkins.getACL().hasAnyPermission());\n    }"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionThrowsIfNoPermissionProvided:void()","methodSource":"@Test\n    public void checkAnyPermissionThrowsIfNoPermissionProvided() {\n        Assert.assertThrows(IllegalArgumentException.class, () -\u003e r.jenkins.getACL().checkAnyPermission());\n    }"},{"className":"hudson.security.ACLTest","methodSignature":"hudson.security.ACLTest.checkAnyPermissionOnNonAccessControlled:void()","methodSource":"@Test\n    @Issue(\"JENKINS-61465\")\n    public void checkAnyPermissionOnNonAccessControlled() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().toEveryone());\n\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"either\"));\n        assertEquals(403, ex.getStatusCode());\n\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().toEveryone());\n\n        wc.goTo(\"either\"); // expected to work\n    }","advisory":"JENKINS-61465"},{"className":"hudson.security.csrf.CrumbExclusionTest","methodSignature":"hudson.security.csrf.CrumbExclusionTest.pathInfo:void()","methodSource":"@Issue(\"SECURITY-1774\")\n    @Test\n    public void pathInfo() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().to(\"admin\"));\n        for (String path : new String[] {/* control */ \"scriptText\", /* test */ \"scriptText/..;/cli\"}) {\n            try {\n                fail(path + \" should have been rejected: \" + r.createWebClient().login(\"admin\").getPage(new WebRequest(new URL(r.getURL(), path + \"?script\u003d11*11\"), HttpMethod.POST)).getWebResponse().getContentAsString());\n            } catch (FailingHttpStatusCodeException x) {\n                switch (x.getStatusCode()) {\n                case 403:\n                    assertThat(\"error message using \" + path, x.getResponse().getContentAsString(), containsString(\"No valid crumb was included in the request\"));\n                    break;\n                case 400: // from Jetty\n                    assertThat(\"error message using \" + path, x.getResponse().getContentAsString(), containsString(\"path parameter\"));\n                    break;\n                default:\n                    fail(\"unexpected error code\");\n                }\n            }\n        }\n    }","advisory":"SECURITY-1774"},{"className":"hudson.security.csrf.CrumbExclusionTest","methodSignature":"hudson.security.csrf.CrumbExclusionTest.regular:void()","methodSource":"@Test\n    public void regular() throws Exception {\n        r.createWebClient().getPage(new WebRequest(new URL(r.getURL(), \"root/\"), HttpMethod.POST));\n        Assert.assertTrue(ExtensionList.lookupSingleton(RootActionImpl.class).posted);\n    }"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.clientIPFromHeader:void()","methodSource":"@Issue(\"JENKINS-3854\")\n    @Test public void clientIPFromHeader() throws Exception {\n        WebClient wc \u003d r.createWebClient();\n\n        wc.addRequestHeader(HEADER_NAME, testData[0]);\n        HtmlPage p \u003d wc.goTo(\"configure\");\n        r.submit(p.getFormByName(\"config\"));\n    }","advisory":"JENKINS-3854"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.headerChange:void()","methodSource":"@Issue(\"JENKINS-3854\")\n    @Test public void headerChange() throws Exception {\n        WebClient wc \u003d r.createWebClient();\n\n        wc.addRequestHeader(HEADER_NAME, testData[0]);\n        HtmlPage p \u003d wc.goTo(\"configure\");\n\n        wc.removeRequestHeader(HEADER_NAME);\n\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        // The crumb should no longer match if we remove the proxy info\n        Page page \u003d r.submit(p.getFormByName(\"config\"));\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, page.getWebResponse().getStatusCode());\n    }","advisory":"JENKINS-3854"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.proxyIPChanged:void()","methodSource":"@Issue(\"JENKINS-3854\")\n    @Test public void proxyIPChanged() throws Exception {\n        WebClient wc \u003d r.createWebClient();\n\n        wc.addRequestHeader(HEADER_NAME, testData[1]);\n        HtmlPage p \u003d wc.goTo(\"configure\");\n\n        wc.removeRequestHeader(HEADER_NAME);\n        wc.addRequestHeader(HEADER_NAME, testData[2]);\n\n        // The crumb should be the same even if the proxy IP changes\n        r.submit(p.getFormByName(\"config\"));\n    }","advisory":"JENKINS-3854"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.proxyIPChain:void()","methodSource":"@Issue(\"JENKINS-3854\")\n    @Test public void proxyIPChain() throws Exception {\n        WebClient wc \u003d r.createWebClient();\n\n        wc.addRequestHeader(HEADER_NAME, testData[3]);\n        HtmlPage p \u003d wc.goTo(\"configure\");\n        r.submit(p.getFormByName(\"config\"));\n    }","advisory":"JENKINS-3854"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.proxyCompatibilityMode:void()","methodSource":"@Issue(\"JENKINS-7518\")\n    @Test public void proxyCompatibilityMode() throws Exception {\n        CrumbIssuer issuer \u003d new DefaultCrumbIssuer(true);\n        assertNotNull(issuer);\n        r.jenkins.setCrumbIssuer(issuer);\n\n        WebClient wc \u003d r.createWebClient();\n        wc.addRequestHeader(HEADER_NAME, testData[0]);\n        HtmlPage p \u003d wc.goTo(\"configure\");\n\n        wc.removeRequestHeader(HEADER_NAME);\n        // The crumb should still match if we remove the proxy info\n        r.submit(p.getFormByName(\"config\"));\n   }","advisory":"JENKINS-7518"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.apiXml:void()","methodSource":"@Test public void apiXml() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().toEveryone()\n        );\n        WebClient wc \u003d r.createWebClient();\n        r.assertXPathValue(wc.goToXml(\"crumbIssuer/api/xml\"), \"//crumbRequestField\", r.jenkins.getCrumbIssuer().getCrumbRequestField());\n        String text \u003d wc.goTo(\"crumbIssuer/api/xml?xpath\u003dconcat(//crumbRequestField,\u0027\u003d\u0027,//crumb)\", \"text/plain\").getWebResponse().getContentAsString();\n        assertTrue(text, text.matches(\"\\\\Q\" + r.jenkins.getCrumbIssuer().getCrumbRequestField() + \"\\\\E\u003d[0-9a-f]+\"));\n        text \u003d wc.goTo(\"crumbIssuer/api/xml?xpath\u003dconcat(//crumbRequestField,\\\":\\\",//crumb)\", \"text/plain\").getWebResponse().getContentAsString();\n        assertTrue(text, text.matches(\"\\\\Q\" + r.jenkins.getCrumbIssuer().getCrumbRequestField() + \"\\\\E:[0-9a-f]+\"));\n        text \u003d wc.goTo(\"crumbIssuer/api/xml?xpath\u003d/*/crumbRequestField/text()\", \"text/plain\").getWebResponse().getContentAsString();\n        assertEquals(r.jenkins.getCrumbIssuer().getCrumbRequestField(), text);\n        text \u003d wc.goTo(\"crumbIssuer/api/xml?xpath\u003d/*/crumb/text()\", \"text/plain\").getWebResponse().getContentAsString();\n        assertTrue(text, text.matches(\"[0-9a-f]+\"));\n        wc.assertFails(\"crumbIssuer/api/xml?xpath\u003dconcat(\u0027hack\u003d\\\"\u0027,//crumb,\u0027\\\"\u0027)\", HttpURLConnection.HTTP_FORBIDDEN);\n        wc.assertFails(\"crumbIssuer/api/xml?xpath\u003dconcat(\\\"hack\u003d\u0027\\\",//crumb,\\\"\u0027\\\")\", HttpURLConnection.HTTP_FORBIDDEN);\n        wc.assertFails(\"crumbIssuer/api/xml?xpath\u003dconcat(\u0027{\u0027,//crumb,\u0027:1}\u0027)\", HttpURLConnection.HTTP_FORBIDDEN); // 37.5% chance that crumb ~ /[a-f].+/\n        wc.assertFails(\"crumbIssuer/api/xml?xpath\u003dconcat(\u0027hack.\u0027,//crumb,\u0027\u003d1\u0027)\", HttpURLConnection.HTTP_FORBIDDEN); // ditto\n        r.jenkins.getCrumbIssuer().getDescriptor().setCrumbRequestField(\"_crumb\");\n        wc.assertFails(\"crumbIssuer/api/xml?xpath\u003dconcat(//crumbRequestField,\u0027\u003d\u0027,//crumb)\", HttpURLConnection.HTTP_FORBIDDEN); // perhaps interpretable as JS number\n    }"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.apiJson:void()","methodSource":"@Test public void apiJson() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().toEveryone()\n        );\n        WebClient wc \u003d r.createWebClient();\n        String json \u003d wc.goTo(\"crumbIssuer/api/json\", \"application/json\").getWebResponse().getContentAsString();\n        JSONObject jsonObject \u003d JSONObject.fromObject(json);\n        assertEquals(r.jenkins.getCrumbIssuer().getCrumbRequestField(), jsonObject.getString(\"crumbRequestField\"));\n        assertTrue(jsonObject.getString(\"crumb\").matches(\"[0-9a-f]+\"));\n        wc.assertFails(\"crumbIssuer/api/json?jsonp\u003dhack\", HttpURLConnection.HTTP_FORBIDDEN);\n    }"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.testRequirePostErrorPageCrumb:void()","methodSource":"@Issue(\"JENKINS-34254\")\n    @Test public void testRequirePostErrorPageCrumb() throws Exception {\n        r.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));\n        WebClient wc \u003d r.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        Page page \u003d wc.goTo(\"quietDown\");\n        assertEquals(\"expect HTTP 405 method not allowed\",\n                HttpURLConnection.HTTP_BAD_METHOD,\n                page.getWebResponse().getStatusCode());\n\n        HtmlPage retry \u003d (HtmlPage) wc.getCurrentWindow().getEnclosedPage();\n        HtmlPage success \u003d r.submit(retry.getFormByName(\"retry\"));\n        assertEquals(HttpURLConnection.HTTP_OK, success.getWebResponse().getStatusCode());\n        assertTrue(\"quieting down\", r.jenkins.isQuietingDown());\n    }","advisory":"JENKINS-34254"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.crumbOnlyValidForOneSession:void()","methodSource":"@Test\n    @Issue(\"SECURITY-626\")\n    @WithTimeout(300)\n    public void crumbOnlyValidForOneSession() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        DefaultCrumbIssuer issuer \u003d new DefaultCrumbIssuer(false);\n        r.jenkins.setCrumbIssuer(issuer);\n\n        User.getById(\"foo\", true);\n\n        DefaultCrumbIssuer.EXCLUDE_SESSION_ID \u003d true;\n        compareDifferentSessions_tokenAreEqual(true);\n\n        DefaultCrumbIssuer.EXCLUDE_SESSION_ID \u003d false;\n        compareDifferentSessions_tokenAreEqual(false);\n    }","advisory":"SECURITY-626"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.sessionIncludedEvenForAnonymousCall:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1491\")\n    public void sessionIncludedEvenForAnonymousCall() throws Exception {\n        boolean previousValue \u003d DefaultCrumbIssuer.EXCLUDE_SESSION_ID;\n\n        try {\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n\n            // let anonymous user have read access\n            MockAuthorizationStrategy authorizationStrategy \u003d new MockAuthorizationStrategy();\n            authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();\n            r.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n            DefaultCrumbIssuer issuer \u003d new DefaultCrumbIssuer(true);\n            r.jenkins.setCrumbIssuer(issuer);\n\n            DefaultCrumbIssuer.EXCLUDE_SESSION_ID \u003d true;\n            sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(true, \"job_noSession\");\n\n            DefaultCrumbIssuer.EXCLUDE_SESSION_ID \u003d false;\n            sameCrumbUsedOnDifferentAnonymousRequest_tokenAreEqual(false, \"job_session\");\n        } finally {\n            DefaultCrumbIssuer.EXCLUDE_SESSION_ID \u003d previousValue;\n        }\n    }","advisory":"SECURITY-1491"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.twoRequestsWithoutSessionGetDifferentCrumbs:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1491\")\n    public void twoRequestsWithoutSessionGetDifferentCrumbs() throws Exception {\n        String responseForCrumb \u003d r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath\u003dconcat(//crumbRequestField,\u0027\u003d\u0027,//crumb)\", \"text/plain\")\n                .getWebResponse().getContentAsString();\n        // responseForCrumb \u003d Jenkins-Crumb\u003dxxxx\n        String crumb1 \u003d responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"\u003d\".length());\n\n        responseForCrumb \u003d r.createWebClient().goTo(\"crumbIssuer/api/xml?xpath\u003dconcat(//crumbRequestField,\u0027\u003d\u0027,//crumb)\", \"text/plain\")\n                .getWebResponse().getContentAsString();\n        // responseForCrumb \u003d Jenkins-Crumb\u003dxxxx\n        String crumb2 \u003d responseForCrumb.substring(CrumbIssuer.DEFAULT_CRUMB_NAME.length() + \"\u003d\".length());\n\n        Assert.assertNotEquals(\"should be different crumbs\", crumb1, crumb2);\n    }","advisory":"SECURITY-1491"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.anonCanStillPostRequestUsingBrowsers:void()","methodSource":"@Test\n    public void anonCanStillPostRequestUsingBrowsers() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n\n        MockAuthorizationStrategy authorizationStrategy \u003d new MockAuthorizationStrategy();\n        authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();\n        r.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        DefaultCrumbIssuer issuer \u003d new DefaultCrumbIssuer(true);\n        r.jenkins.setCrumbIssuer(issuer);\n\n        HtmlPage p \u003d r.createWebClient().goTo(\"configure\");\n        r.submit(p.getFormByName(\"config\"));\n    }"},{"className":"hudson.security.csrf.DefaultCrumbIssuerTest","methodSignature":"hudson.security.csrf.DefaultCrumbIssuerTest.custom_notExposedToIFrame:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1704\")\n    public void custom_notExposedToIFrame() throws Exception {\n        ensureXmlIsNotExposedToIFrame(\"crumbIssuer/\");\n        ensureJsonIsNotExposedToIFrame(\"crumbIssuer/\");\n        ensurePythonIsNotExposedToIFrame(\"crumbIssuer/\");\n    }","advisory":"SECURITY-1704"},{"className":"hudson.security.ExtendedReadPermissionTest","methodSignature":"hudson.security.ExtendedReadPermissionTest.readOnlyConfigAccessWithPermissionEnabled:void()","methodSource":"@Test public void readOnlyConfigAccessWithPermissionEnabled() throws Exception {\n        setPermissionEnabled(true);\n\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        wc.withBasicCredentials(\"charlie\");\n\n        HtmlPage page \u003d wc.goTo(\"job/a/configure\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        HtmlButton saveButton \u003d r.getButtonByCaption(form, \"Save\");\n        assertNull(saveButton);\n    }"},{"className":"hudson.security.ExtendedReadPermissionTest","methodSignature":"hudson.security.ExtendedReadPermissionTest.readOnlyConfigAccessWithPermissionDisabled:void()","methodSource":"@Ignore(\n            \"This was actually testing a design of matrix-auth rather than core: that permissions, though formerly granted, are ignored if currently disabled.\"\n                + \" Permission.enabled Javadoc only discusses visibility.\"\n                + \" MockAuthorizationStrategy does not implement this check.\")\n    @Test public void readOnlyConfigAccessWithPermissionDisabled() throws Exception {\n        setPermissionEnabled(false);\n\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        wc.withBasicCredentials(\"charlie\");\n\n        wc.assertFails(\"job/a/configure\", HttpURLConnection.HTTP_FORBIDDEN);\n    }"},{"className":"hudson.security.ExtendedReadPermissionTest","methodSignature":"hudson.security.ExtendedReadPermissionTest.noConfigAccessWithPermissionEnabled:void()","methodSource":"@Test public void noConfigAccessWithPermissionEnabled() throws Exception {\n        setPermissionEnabled(true);\n\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        wc.withBasicCredentials(\"bob\");\n\n        wc.assertFails(\"job/a/configure\", HttpURLConnection.HTTP_FORBIDDEN);\n    }"},{"className":"hudson.security.HMACConfidentialKeyFIPSTest","methodSignature":"hudson.security.HMACConfidentialKeyFIPSTest.testTruncatedMacOnFips:void()","methodSource":"@Test\n    public void testTruncatedMacOnFips() {\n        HMACConfidentialKey key1 \u003d new HMACConfidentialKey(\"test\", 16);\n        IllegalArgumentException  iae \u003d assertThrows(IllegalArgumentException.class, () -\u003e key1.mac(\"Hello World\"));\n        assertEquals(\"Supplied length can\u0027t be less than 32 on FIPS mode\", iae.getMessage());\n    }"},{"className":"hudson.security.HMACConfidentialKeyFIPSTest","methodSignature":"hudson.security.HMACConfidentialKeyFIPSTest.testCompleteMacOnFips:void()","methodSource":"@Test\n    public void testCompleteMacOnFips() {\n        HMACConfidentialKey key1 \u003d new HMACConfidentialKey(\"test\", 32);\n        String str \u003d key1.mac(\"Hello World\");\n        String pattern \u003d \"[0-9A-Fa-f]{64}\";\n        assertThat(str, matchesPattern(pattern));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmFIPSTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmFIPSTest.generalLogin:void()","methodSource":"@Test\n    public void generalLogin() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        User u1 \u003d securityRealm.createAccount(\"user\", \"password\");\n        u1.setFullName(\"A User\");\n        u1.save();\n\n        // we should be using PBKDF2 hasher\n        String hashedPassword \u003d u1.getProperty(Details.class).getPassword();\n        assertThat(hashedPassword, startsWith(\"$PBKDF2$HMACSHA512:210000:\"));\n\n        WebClient wc \u003d j.createWebClient();\n        wc.login(\"user\", \"password\");\n\n        assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.login(\"user\", \"wrongPass\"));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmFIPSTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmFIPSTest.userCreationWithHashedPasswords:void()","methodSource":"@Test\n    public void userCreationWithHashedPasswords() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        // \"password\" after it has gone through the KDF\n        securityRealm.createAccountWithHashedPassword(\"user_hashed\",\n                \"$PBKDF2$HMACSHA512:210000:ffbb207b847010af98cdd2b09c79392c$f67c3b985daf60db83a9088bc2439f7b77016d26c1439a9877c4f863c377272283ce346edda4578a5607ea620a4beb662d853b800f373297e6f596af797743a6\");\n        WebClient wc \u003d j.createWebClient();\n\n        // login should succeed\n        wc.login(\"user_hashed\", \"password\");\n\n        assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.login(\"user_hashed\", \"password2\"));\n        assertThat(lr, not(hasIncorrectHashingLogEntry()));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmFIPSTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmFIPSTest.userLoginAfterEnablingFIPS:void()","methodSource":"@Test\n    public void userLoginAfterEnablingFIPS() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        User u1 \u003d securityRealm.createAccount(\"user\", \"a\");\n        u1.setFullName(\"A User\");\n        // overwrite the password property using an password created using an incorrect algorithm\n        u1.addProperty(Details.fromHashedPassword(JBCRYPT_ENCODED_PASSWORD));\n\n        u1.save();\n        assertThat(u1.getProperty(Details.class).getPassword(), is(JBCRYPT_ENCODED_PASSWORD));\n\n        try (WebClient wc \u003d j.createWebClient()) {\n            assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.login(\"user\", \"a\"));\n        }\n        assertThat(lr, hasIncorrectHashingLogEntry());\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmFIPSTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmFIPSTest.userCreationWithJBCryptPasswords:void()","methodSource":"@Test\n    public void userCreationWithJBCryptPasswords() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n\n        IllegalArgumentException illegalArgumentException \u003d assertThrows(IllegalArgumentException.class,\n                () -\u003e securityRealm.createAccountWithHashedPassword(\"user_hashed_incorrect_algorithm\", JBCRYPT_ENCODED_PASSWORD));\n        assertThat(illegalArgumentException.getMessage(),\n                is(\"The hashed password was hashed with an incorrect algorithm. Jenkins is expecting $PBKDF2\"));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmSEC2566Test","methodSignature":"hudson.security.HudsonPrivateSecurityRealmSEC2566Test.noTimingDifferenceForInternalSecurityRealm:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2566\")\n    @Ignore(\"too fragile to run\")\n    public void noTimingDifferenceForInternalSecurityRealm() throws Exception {\n        final HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(realm);\n        realm.createAccount(\"admin\", \"admin\");\n        final FullControlOnceLoggedInAuthorizationStrategy a \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        a.setAllowAnonymousRead(false);\n        j.jenkins.setAuthorizationStrategy(a);\n\n        final URL url \u003d j.getURL();\n\n        long[] correctUserTimings \u003d new long[20];\n        long[] incorrectUserTimings \u003d new long[20];\n\n        { // Authenticate with correct user, incorrect password\n            for (int i \u003d 0; i \u003c correctUserTimings.length; i++) {\n                final URLConnection urlConnection \u003d url.openConnection();\n                urlConnection.setRequestProperty(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(\"admin:wrong\".getBytes(StandardCharsets.UTF_8)));\n                long start \u003d System.nanoTime();\n                try {\n                    urlConnection.getContent(); // send request\n                } catch (Exception ex) {\n                    // don\u0027t care\n                }\n                long end \u003d System.nanoTime();\n                correctUserTimings[i] \u003d end - start;\n            }\n        }\n\n        { // Authenticate with wrong user\n            for (int i \u003d 0; i \u003c incorrectUserTimings.length; i++) {\n                final URLConnection urlConnection \u003d url.openConnection();\n                urlConnection.setRequestProperty(\"Authorization\", \"Basic \" + Base64.getEncoder().encodeToString(\"wrong:wrong\".getBytes(StandardCharsets.UTF_8)));\n                long start \u003d System.nanoTime();\n                try {\n                    urlConnection.getContent(); // send request\n                } catch (Exception ex) {\n                    // don\u0027t care\n                }\n                long end \u003d System.nanoTime();\n                incorrectUserTimings[i] \u003d end - start;\n            }\n        }\n\n        // Compute the averages, ignoring the 2 fastest and slowest times in an attempt to weed out outliers\n        double incorrectAvg \u003d Arrays.stream(incorrectUserTimings).sorted().skip(2).limit(16).average().orElse(0.0);\n        double correctAvg \u003d Arrays.stream(correctUserTimings).sorted().skip(2).limit(16).average().orElse(0.0);\n        // expect roughly the same average times\n        Assert.assertEquals(correctAvg, incorrectAvg, correctAvg * 0.1);\n    }","advisory":"SECURITY-2566"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.fullNameCollisionPassword:void()","methodSource":"@Issue(\"SECURITY-243\")\n    @Test\n    public void fullNameCollisionPassword() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        User u1 \u003d securityRealm.createAccount(\"user1\", \"password1\");\n        u1.setFullName(\"User One\");\n        u1.save();\n\n        User u2 \u003d securityRealm.createAccount(\"user2\", \"password2\");\n        u2.setFullName(\"User Two\");\n        u2.save();\n\n        WebClient wc1 \u003d j.createWebClient();\n        wc1.login(\"user1\", \"password1\");\n\n        WebClient wc2 \u003d j.createWebClient();\n        wc2.login(\"user2\", \"password2\");\n\n\n        // Check both users can use their token\n        XmlPage w1 \u003d (XmlPage) wc1.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w1, hasXPath(\"//name\", is(\"user1\")));\n\n        XmlPage w2 \u003d (XmlPage) wc2.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w2, hasXPath(\"//name\", is(\"user2\")));\n\n        u1.setFullName(\"user2\");\n        u1.save();\n\n        // check the tokens still work\n        wc1 \u003d j.createWebClient();\n        wc1.login(\"user1\", \"password1\");\n\n        wc2 \u003d j.createWebClient();\n        // throws FailingHttpStatusCodeException on login failure\n        wc2.login(\"user2\", \"password2\");\n\n        // belt and braces in case the failed login no longer throws exceptions.\n        w1 \u003d (XmlPage) wc1.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w1, hasXPath(\"//name\", is(\"user1\")));\n\n        w2 \u003d (XmlPage) wc2.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w2, hasXPath(\"//name\", is(\"user2\")));\n    }","advisory":"SECURITY-243"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.fullNameCollisionToken:void()","methodSource":"@Issue(\"SECURITY-243\")\n    @Test\n    public void fullNameCollisionToken() throws Exception {\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setTokenGenerationOnCreationEnabled(true);\n\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        User u1 \u003d securityRealm.createAccount(\"user1\", \"password1\");\n        u1.setFullName(\"User One\");\n        u1.save();\n        String u1Token \u003d u1.getProperty(ApiTokenProperty.class).getApiToken();\n\n        User u2 \u003d securityRealm.createAccount(\"user2\", \"password2\");\n        u2.setFullName(\"User Two\");\n        u2.save();\n        String u2Token \u003d u2.getProperty(ApiTokenProperty.class).getApiToken();\n\n        WebClient wc1 \u003d j.createWebClient();\n        wc1.addRequestHeader(\"Authorization\", basicHeader(\"user1\", u1Token));\n        //wc1.setCredentialsProvider(new FixedCredentialsProvider(\"user1\", u1Token));\n\n        WebClient wc2 \u003d j.createWebClient();\n        wc2.addRequestHeader(\"Authorization\", basicHeader(\"user2\", u2Token));\n        //wc2.setCredentialsProvider(new FixedCredentialsProvider(\"user2\", u1Token));\n\n        // Check both users can use their token\n        XmlPage w1 \u003d (XmlPage) wc1.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w1, hasXPath(\"//name\", is(\"user1\")));\n\n        XmlPage w2 \u003d (XmlPage) wc2.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w2, hasXPath(\"//name\", is(\"user2\")));\n\n\n        u1.setFullName(\"user2\");\n        u1.save();\n        // check the tokens still work\n        w1 \u003d (XmlPage) wc1.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w1, hasXPath(\"//name\", is(\"user1\")));\n\n        w2 \u003d (XmlPage) wc2.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w2, hasXPath(\"//name\", is(\"user2\")));\n    }","advisory":"SECURITY-243"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.signup:void()","methodSource":"@Test\n    public void signup() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        SignupPage signup \u003d new SignupPage(wc.goTo(\"signup\"));\n        signup.enterUsername(\"alice\");\n        signup.enterPassword(\"alice\");\n        signup.enterFullName(\"Alice User\");\n        signup.enterEmail(\"alice@nowhere.com\");\n        HtmlPage success \u003d signup.submit(j);\n        assertThat(success.getElementById(\"main-panel\").getTextContent(), containsString(\"Success\"));\n        assertThat(success.getAnchorByHref(\"/jenkins/user/alice\").getTextContent(), containsString(\"Alice User\"));\n\n\n        assertEquals(\"Alice User\", securityRealm.getUser(\"alice\").getDisplayName());\n\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.anonymousCantSignup:void()","methodSource":"@Issue(\"SECURITY-166\")\n    @Test\n    public void anonymousCantSignup() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        SignupPage signup \u003d new SignupPage(wc.goTo(\"signup\"));\n        signup.enterUsername(\"anonymous\");\n        signup.enterFullName(\"Bob\");\n        signup.enterPassword(\"nothing\");\n        signup.enterEmail(\"noone@nowhere.com\");\n        signup \u003d new SignupPage(signup.submit(j));\n        signup.assertErrorContains(\"prohibited as a username\");\n        assertNull(User.get(\"anonymous\", false, Collections.emptyMap()));\n    }","advisory":"SECURITY-166"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.systemCantSignup:void()","methodSource":"@Issue(\"SECURITY-166\")\n    @Test\n    public void systemCantSignup() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        SignupPage signup \u003d new SignupPage(wc.goTo(\"signup\"));\n        signup.enterUsername(\"system\");\n        signup.enterFullName(\"Bob\");\n        signup.enterPassword(\"nothing\");\n        signup.enterEmail(\"noone@nowhere.com\");\n        signup \u003d new SignupPage(signup.submit(j));\n        signup.assertErrorContains(\"prohibited as a username\");\n        assertNull(User.get(\"system\", false, Collections.emptyMap()));\n    }","advisory":"SECURITY-166"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.fullNameOfUnknownCantSignup:void()","methodSource":"@Issue(\"SECURITY-166\")\n    @Test\n    public void fullNameOfUnknownCantSignup() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        SignupPage signup \u003d new SignupPage(wc.goTo(\"signup\"));\n        signup.enterUsername(\"unknown2\");\n        signup.enterPassword(\"unknown2\");\n        signup.enterFullName(\"unknown\");\n        signup.enterEmail(\"noone@nowhere.com\");\n        signup \u003d new SignupPage(signup.submit(j));\n        signup.assertErrorContains(\"prohibited as a full name\");\n        assertNull(User.get(\"unknown2\", false, Collections.emptyMap()));\n    }","advisory":"SECURITY-166"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.selfRegistrationTriggerLoggedIn:void()","methodSource":"@Issue(\"JENKINS-48383\")\n    @Test\n    public void selfRegistrationTriggerLoggedIn() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        j.jenkins.setCrumbIssuer(null);\n\n        assertTrue(spySecurityListener.loggedInUsernames.isEmpty());\n\n        createFirstAccount(\"admin\");\n        assertEquals(\"admin\", spySecurityListener.loggedInUsernames.get(0));\n\n        createAccountByAdmin(\"alice\");\n        // no new event in such case\n        assertTrue(spySecurityListener.loggedInUsernames.isEmpty());\n\n        selfRegistration(\"bob\");\n        assertEquals(\"bob\", spySecurityListener.loggedInUsernames.get(0));\n    }","advisory":"JENKINS-48383"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.selfRegistrationTriggerUserCreation:void()","methodSource":"@Issue(\"JENKINS-55307\")\n    @Test\n    public void selfRegistrationTriggerUserCreation() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        j.jenkins.setCrumbIssuer(null);\n\n        spySecurityListener.createdUsers.clear();\n        assertTrue(spySecurityListener.createdUsers.isEmpty());\n\n        selfRegistration(\"bob\");\n        selfRegistration(\"charlie\");\n        assertEquals(\"bob\", spySecurityListener.createdUsers.get(0));\n        assertEquals(\"charlie\", spySecurityListener.createdUsers.get(1));\n    }","advisory":"JENKINS-55307"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.userCreationFromRealm:void()","methodSource":"@Issue(\"JENKINS-55307\")\n    @Test\n    public void userCreationFromRealm() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        spySecurityListener.createdUsers.clear();\n        assertTrue(spySecurityListener.createdUsers.isEmpty());\n\n        User u1 \u003d securityRealm.createAccount(\"alice\", \"alicePassword\");\n        u1.setFullName(\"Alice User\");\n        u1.save();\n\n        User u2 \u003d securityRealm.createAccount(\"debbie\", \"debbiePassword\");\n        u2.setFullName(\"Debbie User\");\n        u2.save();\n\n        assertEquals(\"alice\", spySecurityListener.createdUsers.get(0));\n        assertEquals(\"debbie\", spySecurityListener.createdUsers.get(1));\n    }","advisory":"JENKINS-55307"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.userCreationWithHashedPasswords:void()","methodSource":"@Issue(\"JENKINS-55307\")\n    @Test\n    public void userCreationWithHashedPasswords() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        spySecurityListener.createdUsers.clear();\n        assertTrue(spySecurityListener.createdUsers.isEmpty());\n\n        securityRealm.createAccountWithHashedPassword(\"charlie_hashed\", \"#jbcrypt:\" + BCrypt.hashpw(\"charliePassword\", BCrypt.gensalt()));\n\n        assertEquals(\"charlie_hashed\", spySecurityListener.createdUsers.get(0));\n    }","advisory":"JENKINS-55307"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.controlCharacterAreNoMoreValid:void()","methodSource":"@Issue(\"SECURITY-786\")\n    @Test\n    public void controlCharacterAreNoMoreValid() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        String password \u003d \"testPwd\";\n        String email \u003d \"test@test.com\";\n        int i \u003d 0;\n\n        // regular case \u003d only accepting a-zA-Z0-9 + \"-_\"\n        checkUserCanBeCreatedWith(securityRealm, \"test\" + i, password, \"Test\" + i, email);\n        assertNotNull(User.getById(\"test\" + i, false));\n        i++;\n        checkUserCanBeCreatedWith(securityRealm, \"te-st_123\" + i, password, \"Test\" + i, email);\n        assertNotNull(User.getById(\"te-st_123\" + i, false));\n        i++;\n        { // user id that contains invalid characters\n            checkUserCannotBeCreatedWith(securityRealm, \"test \" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"te@st\" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"test.com\" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"test,com\" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"test,com\" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"testécom\" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"Stargåte\" + i, password, \"Test\" + i, email);\n            i++;\n            checkUserCannotBeCreatedWith(securityRealm, \"te\\u0000st\" + i, password, \"Test\" + i, email);\n        }\n    }","advisory":"SECURITY-786"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.controlCharacterAreNoMoreValid_CustomRegex:void()","methodSource":"@Issue(\"SECURITY-786\")\n    @Test\n    public void controlCharacterAreNoMoreValid_CustomRegex() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        String currentRegex \u003d \"^[A-Z]+[0-9]*$\";\n\n        Field field \u003d HudsonPrivateSecurityRealm.class.getDeclaredField(\"ID_REGEX\");\n        field.setAccessible(true);\n        field.set(null, currentRegex);\n\n        String password \u003d \"testPwd\";\n        String email \u003d \"test@test.com\";\n        int i \u003d 0;\n\n        // regular case \u003d only accepting a-zA-Z0-9 + \"-_\"\n        checkUserCanBeCreatedWith(securityRealm, \"TEST\" + i, password, \"Test\" + i, email);\n        assertNotNull(User.getById(\"TEST\" + i, false));\n        i++;\n        checkUserCanBeCreatedWith(securityRealm, \"TEST123\" + i, password, \"Test\" + i, email);\n        assertNotNull(User.getById(\"TEST123\" + i, false));\n        i++;\n        { // user id that do not follow custom regex\n            checkUserCannotBeCreatedWith_custom(securityRealm, \"test \" + i, password, \"Test\" + i, email, currentRegex);\n            i++;\n            checkUserCannotBeCreatedWith_custom(securityRealm, \"@\" + i, password, \"Test\" + i, email, currentRegex);\n            i++;\n            checkUserCannotBeCreatedWith_custom(securityRealm, \"T2A\" + i, password, \"Test\" + i, email, currentRegex);\n            i++;\n        }\n        { // we can even change regex on the fly\n            currentRegex \u003d \"^[0-9]*$\";\n            field.set(null, currentRegex);\n\n            checkUserCanBeCreatedWith(securityRealm, \"125213\" + i, password, \"Test\" + i, email);\n            assertNotNull(User.getById(\"125213\" + i, false));\n            i++;\n            checkUserCannotBeCreatedWith_custom(securityRealm, \"TEST12\" + i, password, \"Test\" + i, email, currentRegex);\n        }\n    }","advisory":"SECURITY-786"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.createAccountSupportsHashedPasswords:void()","methodSource":"@Test\n    public void createAccountSupportsHashedPasswords() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        securityRealm.createAccountWithHashedPassword(\"user_hashed\", \"#jbcrypt:\" + BCrypt.hashpw(\"password\", BCrypt.gensalt()));\n\n        WebClient wc \u003d j.createWebClient();\n        wc.login(\"user_hashed\", \"password\");\n\n\n        XmlPage w2 \u003d (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");\n        assertThat(w2, hasXPath(\"//name\", is(\"user_hashed\")));\n        assertThat(lr, not(hasIncorrectHashingLogEntry()));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.createAccountWithHashedPasswordRequiresPrefix:void()","methodSource":"@Test\n    public void createAccountWithHashedPasswordRequiresPrefix() {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        assertThrows(IllegalArgumentException.class, () -\u003e securityRealm.createAccountWithHashedPassword(\"user_hashed\", BCrypt.hashpw(\"password\", BCrypt.gensalt())));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.hashedPasswordTest:void()","methodSource":"@Test\n    public void hashedPasswordTest() {\n        assertTrue(\"password is hashed\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:\" + BCrypt.hashpw(\"password\", BCrypt.gensalt())));\n        assertFalse(\"password is not hashed\", PASSWORD_ENCODER.isPasswordHashed(\"password\"));\n        assertFalse(\"only valid hashed passwords allowed\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2a$blah\"));\n        assertFalse(\"only valid hashed passwords allowed\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:password\"));\n\n        // real examples\n        // password \u003d a\n        assertTrue(PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2a$06$m0CrhHm10qJ3lXRY.5zDGO3rS2KdeeWLuGmsfGlMfOxih58VYVfxe\"));\n        // password \u003d a\n        assertTrue(PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2a$12$8NJH3LsPrANStV6XtBakCez0cKHXVxmvxIlcz785vxAIZrihHZpeS\"));\n\n        // password \u003d password\n        assertFalse(\"too big number of iterations\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2a208$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\n\n        // until https://github.com/jeremyh/jBCrypt/pull/16 is merged, the lib released and the dep updated, only the version 2a is supported\n        assertFalse(\"unsupported version\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2x$08$Ro0CUfOqk6cXEKf3dyaM7OhSCvnwM9s4wIX9JeLapehKK5YdLxKcm\"));\n        assertFalse(\"unsupported version\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2y$06$m0CrhHm10qJ3lXRY.5zDGO3rS2KdeeWLuGmsfGlMfOxih58VYVfxe\"));\n\n        assertFalse(\"invalid version\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$2t$10$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\n        assertFalse(\"invalid version\", PASSWORD_ENCODER.isPasswordHashed(\"#jbcrypt:$3t$10$aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.ensureHashingVersion_2a_isSupported:void()","methodSource":"@Test\n    public void ensureHashingVersion_2a_isSupported() {\n        assertTrue(\"version 2a is supported\", BCrypt.checkpw(\"a\", \"$2a$06$m0CrhHm10qJ3lXRY.5zDGO3rS2KdeeWLuGmsfGlMfOxih58VYVfxe\"));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.ensureHashingVersion_2x_isNotSupported:void()","methodSource":"@Test\n    public void ensureHashingVersion_2x_isNotSupported() {\n        assertThrows(IllegalArgumentException.class, () -\u003e BCrypt.checkpw(\"abc\", \"$2x$08$Ro0CUfOqk6cXEKf3dyaM7OhSCvnwM9s4wIX9JeLapehKK5YdLxKcm\"));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.ensureHashingVersion_2y_isNotSupported:void()","methodSource":"@Test\n    public void ensureHashingVersion_2y_isNotSupported() {\n        assertThrows(IllegalArgumentException.class, () -\u003e BCrypt.checkpw(\"a\", \"$2y$08$cfcvVd2aQ8CMvoMpP2EBfeodLEkkFJ9umNEfPD18.hUF62qqlC/V.\"));\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.singupNoLongerVulnerableToSessionFixation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1158\")\n    public void singupNoLongerVulnerableToSessionFixation() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(true, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        // to trigger the creation of a session\n        wc.goTo(\"\");\n        Cookie sessionBefore \u003d wc.getCookieManager().getCookie(\"JSESSIONID\");\n        String sessionIdBefore \u003d sessionBefore.getValue();\n\n        SignupPage signup \u003d new SignupPage(wc.goTo(\"signup\"));\n        signup.enterUsername(\"alice\");\n        signup.enterPassword(\"alice\");\n        signup.enterFullName(\"Alice User\");\n        signup.enterEmail(\"alice@nowhere.com\");\n        HtmlPage success \u003d signup.submit(j);\n        assertThat(success.getElementById(\"main-panel\").getTextContent(), containsString(\"Success\"));\n        assertThat(success.getAnchorByHref(\"/jenkins/user/alice\").getTextContent(), containsString(\"Alice User\"));\n\n        assertEquals(\"Alice User\", securityRealm.getUser(\"alice\").getDisplayName());\n\n        Cookie sessionAfter \u003d wc.getCookieManager().getCookie(\"JSESSIONID\");\n        String sessionIdAfter \u003d sessionAfter.getValue();\n\n        assertNotEquals(sessionIdAfter, sessionIdBefore);\n    }","advisory":"SECURITY-1158"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.changingPassword_mustInvalidateAllSessions:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1245\")\n    public void changingPassword_mustInvalidateAllSessions() throws Exception {\n        User alice \u003d prepareRealmAndAlice();\n        String initialSeed \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n\n        WebClient wc \u003d j.createWebClient();\n        WebClient wc_anotherTab \u003d j.createWebClient();\n\n        wc.login(alice.getId());\n        assertUserConnected(wc, alice.getId());\n\n        wc_anotherTab.login(alice.getId());\n        assertUserConnected(wc_anotherTab, alice.getId());\n\n        HtmlPage configurePage \u003d wc.goTo(alice.getUrl() + \"/configure\");\n        HtmlPasswordInput password1 \u003d configurePage.getElementByName(\"user.password\");\n        HtmlPasswordInput password2 \u003d configurePage.getElementByName(\"user.password2\");\n\n        password1.setText(\"alice2\");\n        password2.setText(\"alice2\");\n\n        HtmlForm form \u003d configurePage.getFormByName(\"config\");\n        j.submit(form);\n\n        assertUserNotConnected(wc, alice.getId());\n        assertUserNotConnected(wc_anotherTab, alice.getId());\n\n        String seedAfter \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n        assertThat(seedAfter, not(is(initialSeed)));\n    }","advisory":"SECURITY-1245"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.notChangingPassword_hasNoImpactOnSeed:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1245\")\n    public void notChangingPassword_hasNoImpactOnSeed() throws Exception {\n        User alice \u003d prepareRealmAndAlice();\n        String initialSeed \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n\n        WebClient wc \u003d j.createWebClient();\n        WebClient wc_anotherTab \u003d j.createWebClient();\n\n        wc.login(alice.getId());\n        assertUserConnected(wc, alice.getId());\n\n        wc_anotherTab.login(alice.getId());\n        assertUserConnected(wc_anotherTab, alice.getId());\n\n        HtmlPage configurePage \u003d wc.goTo(alice.getUrl() + \"/configure\");\n        // not changing password this time\n        HtmlForm form \u003d configurePage.getFormByName(\"config\");\n        j.submit(form);\n\n        assertUserConnected(wc, alice.getId());\n        assertUserConnected(wc_anotherTab, alice.getId());\n\n        String seedAfter \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n        assertThat(seedAfter, is(initialSeed));\n    }","advisory":"SECURITY-1245"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.changingPassword_withSeedDisable_hasNoImpact:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1245\")\n    public void changingPassword_withSeedDisable_hasNoImpact() throws Exception {\n        boolean previousConfig \u003d UserSeedProperty.DISABLE_USER_SEED;\n        try {\n            UserSeedProperty.DISABLE_USER_SEED \u003d true;\n\n            User alice \u003d prepareRealmAndAlice();\n\n            WebClient wc \u003d j.createWebClient();\n            WebClient wc_anotherTab \u003d j.createWebClient();\n\n            wc.login(alice.getId());\n            assertUserConnected(wc, alice.getId());\n\n            wc_anotherTab.login(alice.getId());\n            assertUserConnected(wc_anotherTab, alice.getId());\n\n            HtmlPage configurePage \u003d wc.goTo(alice.getUrl() + \"/configure\");\n            HtmlPasswordInput password1 \u003d configurePage.getElementByName(\"user.password\");\n            HtmlPasswordInput password2 \u003d configurePage.getElementByName(\"user.password2\");\n\n            password1.setText(\"alice2\");\n            password2.setText(\"alice2\");\n\n            HtmlForm form \u003d configurePage.getFormByName(\"config\");\n            j.submit(form);\n\n            assertUserConnected(wc, alice.getId());\n            assertUserConnected(wc_anotherTab, alice.getId());\n        } finally {\n            UserSeedProperty.DISABLE_USER_SEED \u003d previousConfig;\n        }\n    }","advisory":"SECURITY-1245"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.userLoginAfterDisablingFIPS:void()","methodSource":"@Test\n    public void userLoginAfterDisablingFIPS() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        User u1 \u003d securityRealm.createAccount(\"user\", \"password\");\n        u1.setFullName(\"A User\");\n        // overwrite the password property using an password created using an incorrect algorithm\n        u1.addProperty(Details.fromHashedPassword(PBKDF_ENDOCED_PASSWORD));\n\n        u1.save();\n        assertThat(u1.getProperty(Details.class).getPassword(), is(PBKDF_ENDOCED_PASSWORD));\n\n        try (WebClient wc \u003d j.createWebClient()) {\n            assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.login(\"user\", \"password\"));\n        }\n        assertThat(lr, hasIncorrectHashingLogEntry());\n    }"},{"className":"hudson.security.HudsonPrivateSecurityRealmTest","methodSignature":"hudson.security.HudsonPrivateSecurityRealmTest.userCreationWithPBKDFPasswords:void()","methodSource":"@Test\n    public void userCreationWithPBKDFPasswords() throws Exception {\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n\n        IllegalArgumentException illegalArgumentException \u003d assertThrows(IllegalArgumentException.class,\n                () -\u003e securityRealm.createAccountWithHashedPassword(\"user_hashed_incorrect_algorithm\", PBKDF_ENDOCED_PASSWORD));\n        assertThat(illegalArgumentException.getMessage(),\n                is(\"The hashed password was hashed with an incorrect algorithm. Jenkins is expecting #jbcrypt:\"));\n    }"},{"className":"hudson.security.LoginTest","methodSignature":"hudson.security.LoginTest.loginErrorRedirect1:void()","methodSource":"@Test\n    public void loginErrorRedirect1() throws Exception {\n        verifyNotError(j.createWebClient());\n    }"},{"className":"hudson.security.LoginTest","methodSignature":"hudson.security.LoginTest.loginErrorRedirect2:void()","methodSource":"@Test\n    @PresetData(DataSet.ANONYMOUS_READONLY)\n    public void loginErrorRedirect2() throws Exception {\n        // in a secured Hudson, the error page should render.\n        WebClient wc \u003d j.createWebClient();\n        wc.assertFails(\"loginError\", SC_UNAUTHORIZED);\n        // but not once the user logs in.\n        verifyNotError(wc.withBasicApiToken(User.getById(\"alice\", true)));\n    }"},{"className":"hudson.security.LoginTest","methodSignature":"hudson.security.LoginTest.loginError:void()","methodSource":"@Test\n    public void loginError() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().toAuthenticated());\n        WebClient wc \u003d j.createWebClient();\n        HtmlPage page \u003d wc.goTo(\"login\");\n        HtmlForm form \u003d page.getFormByName(\"login\");\n        form.getInputByName(\"j_username\").setValue(\"alice\");\n        form.getInputByName(\"j_password\").setValue(\"oops I forgot\");\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        page \u003d (HtmlPage) HtmlFormUtil.submit(form, null);\n        assertThat(page.asNormalizedText(), containsString(\"Invalid username or password\"));\n    }"},{"className":"hudson.security.LoginTest","methodSignature":"hudson.security.LoginTest.loginRememberMe:void()","methodSource":"@Test\n    @PresetData(DataSet.SECURED_ACEGI)\n    public void loginRememberMe() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n\n        HtmlFormUtil.submit(prepareLoginFormWithRememberMeChecked(wc), null);\n\n        assertNotNull(getRememberMeCookie(wc));\n    }"},{"className":"hudson.security.LoginTest","methodSignature":"hudson.security.LoginTest.loginDisabledRememberMe:void()","methodSource":"@Test\n    @PresetData(DataSet.SECURED_ACEGI)\n    public void loginDisabledRememberMe() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n\n        HtmlForm form \u003d prepareLoginFormWithRememberMeChecked(wc);\n        j.jenkins.setDisableRememberMe(true);\n        HtmlFormUtil.submit(form, null);\n\n        assertNull(getRememberMeCookie(wc));\n    }"},{"className":"hudson.security.PermissionGroupTest","methodSignature":"hudson.security.PermissionGroupTest.order:void()","methodSource":"@Email(\"http://jenkins-ci.361315.n4.nabble.com/Master-slave-refactor-tp391495.html\")\n    @Test public void order() {\n        assertSame(Jenkins.PERMISSIONS, PermissionGroup.getAll().get(0));\n    }"},{"className":"hudson.security.PermissionGroupTest","methodSignature":"hudson.security.PermissionGroupTest.duplicatedGroups:void()","methodSource":"@SuppressWarnings(\"ResultOfObjectAllocationIgnored\")\n    @Test public void duplicatedGroups() {\n        assertThrows(IllegalStateException.class, () -\u003e new PermissionGroup(Hudson.class, Messages._Hudson_Permissions_Title()));\n    }"},{"className":"hudson.security.PermissionGroupTest","methodSignature":"hudson.security.PermissionGroupTest.duplicatedPermissions:void()","methodSource":"@SuppressWarnings(\"ResultOfObjectAllocationIgnored\")\n    @Test public void duplicatedPermissions() {\n        assertThrows(IllegalStateException.class, () -\u003e new Permission(Jenkins.PERMISSIONS, \"Read\", Messages._Hudson_ReadPermission_Description(), Permission.READ, PermissionScope.JENKINS));\n    }"},{"className":"hudson.security.SecurityRealmSecurity2371Test","methodSignature":"hudson.security.SecurityRealmSecurity2371Test.testSessionChangeOnLogin:void()","methodSource":"@Test\n    public void testSessionChangeOnLogin() throws Exception {\n        if (mode !\u003d null) {\n            System.setProperty(SecurityRealm.class.getName() + \".sessionFixationProtectionMode\", String.valueOf(mode));\n        }\n        try {\n            j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n            j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toEveryone().grant(Jenkins.ADMINISTER).everywhere().to(USERNAME));\n            final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n            webClient.goTo(\"\");\n            assertThrows(\"anonymous session should not be able to go to /manage\", FailingHttpStatusCodeException.class, () -\u003e webClient.goTo(\"manage\"));\n            final Cookie anonymousCookie \u003d webClient.getCookieManager().getCookie(SESSION_COOKIE_NAME); // dynamic cookie names are only set when run through Winstone\n            webClient.login(USERNAME);\n            webClient.goTo(\"\");\n            final Cookie aliceCookie \u003d webClient.getCookieManager().getCookie(SESSION_COOKIE_NAME);\n\n            // Confirm the session cookie changed\n            // We cannot just call #assertNotEquals(Cookie, Cookie) because it doesn\u0027t actually look at #getValue()\n            Assert.assertNotEquals(anonymousCookie.getValue(), aliceCookie.getValue());\n\n            // Now ensure the old session was actually invalidated / is not associated with the new auth\n            webClient.getCookieManager().clearCookies();\n            webClient.getCookieManager().addCookie(anonymousCookie);\n            assertThrows(\"anonymous session should not be able to go to /manage\", FailingHttpStatusCodeException.class, () -\u003e webClient.goTo(\"manage\"));\n        } finally {\n            System.clearProperty(SecurityRealm.class.getName() + \".sessionFixationProtectionMode\");\n        }\n    }"},{"className":"hudson.security.SecurityRealmSecurity2371Test","methodSignature":"hudson.security.SecurityRealmSecurity2371Test.optOut:void()","methodSource":"@Test\n    public void optOut() throws Exception {\n        System.setProperty(SecurityRealm.class.getName() + \".sessionFixationProtectionMode\", String.valueOf(0));\n        try {\n            j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n            j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().toEveryone().grant(Jenkins.ADMINISTER).everywhere().to(USERNAME));\n            final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n            webClient.goTo(\"\");\n\n            final Cookie anonymousCookie \u003d webClient.getCookieManager().getCookie(SESSION_COOKIE_NAME); // dynamic cookie names are only set when run through Winstone\n            webClient.login(USERNAME);\n            webClient.goTo(\"\");\n            final Cookie aliceCookie \u003d webClient.getCookieManager().getCookie(SESSION_COOKIE_NAME);\n\n            // Confirm the session cookie did not change\n            Assert.assertEquals(anonymousCookie.getValue(), aliceCookie.getValue());\n        } finally {\n            System.clearProperty(SecurityRealm.class.getName() + \".sessionFixationProtectionMode\");\n        }\n    }"},{"className":"hudson.security.SecurityRealmTest","methodSignature":"hudson.security.SecurityRealmTest.testCacheHeaderInResponse:void()","methodSource":"@Test\n    @Issue(\"JENKINS-43852\")\n    public void testCacheHeaderInResponse() throws Exception {\n        SecurityRealm securityRealm \u003d j.createDummySecurityRealm();\n        j.jenkins.setSecurityRealm(securityRealm);\n\n        WebResponse response \u003d j.createWebClient()\n                .goTo(\"securityRealm/captcha\", \"\")\n                .getWebResponse();\n        assertEquals(\"\", response.getContentAsString());\n\n        securityRealm.setCaptchaSupport(new DummyCaptcha());\n\n        response \u003d j.createWebClient()\n                .goTo(\"securityRealm/captcha\", \"image/png\")\n                .getWebResponse();\n\n        assertThat(response.getResponseHeaderValue(\"Cache-Control\"), is(\"no-cache, no-store, must-revalidate\"));\n        assertThat(response.getResponseHeaderValue(\"Pragma\"), is(\"no-cache\"));\n        assertThat(response.getResponseHeaderValue(\"Expires\"), is(\"0\"));\n    }","advisory":"JENKINS-43852"},{"className":"hudson.security.SecurityRealmTest","methodSignature":"hudson.security.SecurityRealmTest.many_sessions_logout:void()","methodSource":"@Test\n    public void many_sessions_logout() throws Exception {\n        final String WILL_NOT_BE_SENT \u003d \"/will-not-be-sent\";\n        final String LOCALHOST \u003d \"localhost\";\n        final String JSESSIONID \u003d \"JSESSIONID\";\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        CookieManager manager \u003d wc.getCookieManager();\n        manager.setCookiesEnabled(true);\n        wc.goTo(\"login\");\n\n        Calendar calendar \u003d Calendar.getInstance();\n        calendar.add(Calendar.DAY_OF_YEAR, 1);\n        Date tomorrow \u003d calendar.getTime();\n        Collections.nCopies(8, 1)\n                .forEach(i -\u003e addSessionCookie(manager, LOCALHOST, \"/jenkins\", tomorrow));\n        addSessionCookie(manager, LOCALHOST, WILL_NOT_BE_SENT, tomorrow);\n\n        HtmlPage page \u003d wc.goTo(\"logout\");\n\n        int unexpectedSessionCookies \u003d 2;\n\n        StringBuilder builder \u003d new StringBuilder();\n        builder.append(\"Session cookies: \");\n\n        for (Cookie cookie : manager.getCookies()) {\n            if (cookie.getName().startsWith(JSESSIONID)) {\n                String path \u003d cookie.getPath();\n\n                builder.append(cookie.getName());\n                if (path !\u003d null)\n                    builder.append(\"; Path\u003d\").append(path);\n                builder.append(\"\\n\");\n\n                if (WILL_NOT_BE_SENT.equals(path)) {\n                    // Because it wasn\u0027t sent and thus wasn\u0027t deleted.\n                    --unexpectedSessionCookies;\n                } else if (JSESSIONID.equals(cookie.getName())) {\n                    // Because this test harness isn\u0027t winstone and the cleaning\n                    // code is only responsible for deleting \"JSESSIONID.\" cookies.\n                    --unexpectedSessionCookies;\n                }\n            }\n        }\n        System.err.println(builder);\n        assertThat(unexpectedSessionCookies, is(0));\n    }"},{"className":"hudson.security.SecurityRealmTest","methodSignature":"hudson.security.SecurityRealmTest.getPostLogOutUrl:void()","methodSource":"@SuppressWarnings(\"deprecation\")\n    @Test\n    public void getPostLogOutUrl() throws Exception {\n        OldSecurityRealm osr \u003d new OldSecurityRealm();\n        j.jenkins.setSecurityRealm(osr);\n        j.executeOnServer(() -\u003e {\n            assertEquals(\"/jenkins/\", j.jenkins.getSecurityRealm().getPostLogOutUrl(Stapler.getCurrentRequest(), Jenkins.ANONYMOUS));\n            assertEquals(\"/jenkins/\", j.jenkins.getSecurityRealm().getPostLogOutUrl2(Stapler.getCurrentRequest(), Jenkins.ANONYMOUS2));\n            osr.special \u003d true;\n            assertEquals(\"/jenkins/custom\", j.jenkins.getSecurityRealm().getPostLogOutUrl(Stapler.getCurrentRequest(), Jenkins.ANONYMOUS));\n            assertEquals(\"/jenkins/custom\", j.jenkins.getSecurityRealm().getPostLogOutUrl2(Stapler.getCurrentRequest(), Jenkins.ANONYMOUS2));\n            return null;\n        });\n    }"},{"className":"hudson.security.SecurityRealmTest","methodSignature":"hudson.security.SecurityRealmTest.submitPossibleWithoutJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void submitPossibleWithoutJellyTrace() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage htmlPage \u003d wc.goTo(\"configureSecurity\");\n        HtmlForm configForm \u003d htmlPage.getFormByName(\"config\");\n        j.assertGoodStatus(j.submit(configForm));\n    }","advisory":"JENKINS-65288"},{"className":"hudson.security.SecurityRealmTest","methodSignature":"hudson.security.SecurityRealmTest.submitPossibleWithJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void submitPossibleWithJellyTrace() throws Exception {\n        boolean currentValue \u003d JellyFacet.TRACE;\n        try {\n            JellyFacet.TRACE \u003d true;\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            HtmlPage htmlPage \u003d wc.goTo(\"configureSecurity\");\n            HtmlForm configForm \u003d htmlPage.getFormByName(\"config\");\n            j.assertGoodStatus(j.submit(configForm));\n        } finally {\n            JellyFacet.TRACE \u003d currentValue;\n        }\n    }","advisory":"JENKINS-65288"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeAutoLoginFailure:void()","methodSource":"@Test\n    public void rememberMeAutoLoginFailure() throws Exception {\n        j.jenkins.setSecurityRealm(new InvalidUserWhenLoggingBackInRealm());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(\"alice\", \"alice\", true);\n\n        // we should see a remember me cookie\n        Cookie c \u003d getRememberMeCookie(wc);\n        assertNotNull(c);\n\n        // start a new session and attempt to access Jenkins,\n        // which should cause autoLogin failures\n        wc \u003d j.createWebClient();\n        wc.getCookieManager().addCookie(c);\n\n        // even if SecurityRealm chokes, it shouldn\u0027t kill the page\n        wc.goTo(\"\");\n\n        // make sure that the server recorded this failure\n        assertTrue(failureInduced);\n        // and the problematic cookie should have been removed\n        assertNull(getRememberMeCookie(wc));\n    }"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.basicFlow:void()","methodSource":"@Test\n    public void basicFlow() throws Exception {\n        j.jenkins.setSecurityRealm(new StupidRealm());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(\"bob\", \"bob\", true);\n\n        // we should see a remember me cookie\n        Cookie c \u003d getRememberMeCookie(wc);\n        assertNotNull(c);\n\n        // start a new session and attempt to access Jenkins,\n        wc \u003d j.createWebClient();\n        wc.getCookieManager().addCookie(c);\n\n        // this will trigger remember me\n        wc.goTo(\"\");\n\n        // make sure that our security realm failed to report the info correctly\n        assertTrue(failureInduced);\n        // but we should have logged in\n        wc.executeOnServer(() -\u003e {\n            Authentication a \u003d Jenkins.getAuthentication2();\n            assertEquals(\"bob\", a.getName());\n            assertEquals(Arrays.asList(\"authenticated\", \"myteam\"), a.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()));\n            return null;\n        });\n    }"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeToken_invalid_afterUserSeedReset:void()","methodSource":"@Test\n    @Issue(\"SECURITY-868\")\n    @For(UserSeedProperty.class)\n    public void rememberMeToken_invalid_afterUserSeedReset() throws Exception {\n        j.jenkins.setDisableRememberMe(false);\n\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(realm);\n\n        String username \u003d \"alice\";\n        hudson.model.User alice \u003d realm.createAccount(username, username);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        wc.login(username, username, true);\n        CookieManager cm \u003d wc.getCookieManager();\n\n        cm.removeCookie(cm.getCookie(\"JSESSIONID\"));\n        assertUserConnected(wc, username);\n\n        alice.getProperty(UserSeedProperty.class).renewSeed();\n\n        cm.removeCookie(cm.getCookie(\"JSESSIONID\"));\n        assertUserNotConnected(wc, username);\n    }","advisory":"SECURITY-868"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeToken_stillValid_afterUserSeedReset_ifUserSeedDisabled:void()","methodSource":"@Test\n    @Issue(\"SECURITY-868\")\n    @For(UserSeedProperty.class)\n    public void rememberMeToken_stillValid_afterUserSeedReset_ifUserSeedDisabled() throws Exception {\n        boolean currentStatus \u003d UserSeedProperty.DISABLE_USER_SEED;\n        try {\n            UserSeedProperty.DISABLE_USER_SEED \u003d true;\n\n            j.jenkins.setDisableRememberMe(false);\n\n            HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n            j.jenkins.setSecurityRealm(realm);\n\n            String username \u003d \"alice\";\n            hudson.model.User alice \u003d realm.createAccount(username, username);\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            wc.login(username, username, true);\n            CookieManager cm \u003d wc.getCookieManager();\n\n            cm.removeCookie(cm.getCookie(\"JSESSIONID\"));\n            assertUserConnected(wc, username);\n\n            alice.getProperty(UserSeedProperty.class).renewSeed();\n\n            cm.removeCookie(cm.getCookie(\"JSESSIONID\"));\n            // as userSeed disabled, no care about the renew\n            assertUserConnected(wc, username);\n        } finally {\n            UserSeedProperty.DISABLE_USER_SEED \u003d currentStatus;\n        }\n    }","advisory":"SECURITY-868"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeToken_shouldNotAccept_expirationDurationLargerThanConfigured:void()","methodSource":"@Test\n    @Issue(\"SECURITY-868\")\n    public void rememberMeToken_shouldNotAccept_expirationDurationLargerThanConfigured() throws Exception {\n        j.jenkins.setDisableRememberMe(false);\n\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        TokenBasedRememberMeServices2 tokenService \u003d (TokenBasedRememberMeServices2) realm.getSecurityComponents().rememberMe2;\n        j.jenkins.setSecurityRealm(realm);\n\n        String username \u003d \"alice\";\n        hudson.model.User alice \u003d realm.createAccount(username, username);\n\n        { // a malicious cookie with expiration too far in the future should not work\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            // by default we have 14 days of validity,\n            // here we increase artificially the duration of validity, that could be used to have permanent access\n            long oneDay \u003d TimeUnit.DAYS.toMillis(1);\n            Cookie cookie \u003d createRememberMeCookie(tokenService, oneDay, alice);\n            wc.getCookieManager().addCookie(cookie);\n\n            // the application should not use the cookie to connect\n            assertUserNotConnected(wc, username);\n        }\n\n        { // a hand crafted cookie with regular expiration duration works\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            // by default we have 14 days of validity,\n            // here we reduce a bit the expiration date to simulate an \"old\" cookie (regular usage)\n            long minusFiveMinutes \u003d TimeUnit.MINUTES.toMillis(-5);\n            Cookie cookie \u003d createRememberMeCookie(tokenService, minusFiveMinutes, alice);\n            wc.getCookieManager().addCookie(cookie);\n\n            // if we reactivate the remember me feature, it\u0027s ok\n            assertUserConnected(wc, username);\n        }\n    }","advisory":"SECURITY-868"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeToken_skipExpirationCheck:void()","methodSource":"@Test\n    @Issue(\"SECURITY-868\")\n    public void rememberMeToken_skipExpirationCheck() throws Exception {\n        boolean previousConfig \u003d TokenBasedRememberMeServices2.SKIP_TOO_FAR_EXPIRATION_DATE_CHECK;\n        try {\n            TokenBasedRememberMeServices2.SKIP_TOO_FAR_EXPIRATION_DATE_CHECK \u003d true;\n\n            j.jenkins.setDisableRememberMe(false);\n\n            HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n            TokenBasedRememberMeServices2 tokenService \u003d (TokenBasedRememberMeServices2) realm.getSecurityComponents().rememberMe2;\n            j.jenkins.setSecurityRealm(realm);\n\n            String username \u003d \"alice\";\n            hudson.model.User alice \u003d realm.createAccount(username, username);\n\n            { // a malicious cookie with expiration too far in the future should not work\n                JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n                // by default we have 14 days of validity,\n                // here we increase artificially the duration of validity, that could be used to have permanent access\n                long oneDay \u003d TimeUnit.DAYS.toMillis(1);\n                Cookie cookie \u003d createRememberMeCookie(tokenService, oneDay, alice);\n                wc.getCookieManager().addCookie(cookie);\n\n                // the application should not use the cookie to connect\n                assertUserConnected(wc, username);\n            }\n\n            { // a hand crafted cookie with regular expiration duration works\n                JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n                // by default we have 14 days of validity,\n                // here we reduce a bit the expiration date to simulate an \"old\" cookie (regular usage)\n                long minusFiveMinutes \u003d TimeUnit.MINUTES.toMillis(-5);\n                Cookie cookie \u003d createRememberMeCookie(tokenService, minusFiveMinutes, alice);\n                wc.getCookieManager().addCookie(cookie);\n\n                // if we reactivate the remember me feature, it\u0027s ok\n                assertUserConnected(wc, username);\n            }\n        } finally {\n            TokenBasedRememberMeServices2.SKIP_TOO_FAR_EXPIRATION_DATE_CHECK \u003d previousConfig;\n        }\n    }","advisory":"SECURITY-868"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeToken_shouldLoadUserDetailsOnlyOnce:void()","methodSource":"@Test\n    @Issue(\"JENKINS-56243\")\n    public void rememberMeToken_shouldLoadUserDetailsOnlyOnce() throws Exception {\n        j.jenkins.setDisableRememberMe(false);\n        LoadUserCountingSecurityRealm realm \u003d new LoadUserCountingSecurityRealm();\n        realm.createAccount(\"alice\");\n        j.jenkins.setSecurityRealm(realm);\n        User alice \u003d User.getOrCreateByIdOrFullName(\"alice\");\n        realm.verifyInvocations(1);\n\n        // first, start a session with a remember me token\n        Cookie cookie \u003d getRememberMeCookie(j.createWebClient().login(\"alice\", \"alice\", true));\n        // next, start a new session with that token\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getCookieManager().addCookie(cookie);\n        // trigger remember me\n        String sessionSeed \u003d wc.executeOnServer(() -\u003e Stapler.getCurrentRequest().getSession(false).getAttribute(UserSeedProperty.USER_SESSION_SEED).toString());\n        realm.verifyInvocations(1);\n        String userSeed \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n\n        assertEquals(userSeed, sessionSeed);\n\n        // finally, ensure that loadUserByUsername2 is not being called anymore\n        wc.goTo(\"\");\n        assertUserConnected(wc, \"alice\");\n        realm.verifyInvocations(0);\n    }","advisory":"JENKINS-56243"},{"className":"hudson.security.TokenBasedRememberMeServices2Test","methodSignature":"hudson.security.TokenBasedRememberMeServices2Test.rememberMeToken_shouldNotBeRead_ifOptionIsDisabled:void()","methodSource":"@Test\n    @Issue(\"SECURITY-996\")\n    public void rememberMeToken_shouldNotBeRead_ifOptionIsDisabled() throws Exception {\n        j.jenkins.setDisableRememberMe(false);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        Cookie rememberMeCookie \u003d null;\n        {\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(\"alice\", \"alice\", true);\n\n\n            // we should see a remember me cookie\n            rememberMeCookie \u003d getRememberMeCookie(wc);\n            assertNotNull(rememberMeCookie);\n            assertThat(rememberMeCookie.getValue(), not(is(emptyString())));\n        }\n\n        j.jenkins.setDisableRememberMe(true);\n        {\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            wc.getCookieManager().addCookie(rememberMeCookie);\n\n            // the application should not use the cookie to connect\n            XmlPage page \u003d (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");\n            assertThat(page, hasXPath(\"//name\", not(is(\"alice\"))));\n        }\n\n        j.jenkins.setDisableRememberMe(false);\n        {\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            wc.getCookieManager().addCookie(rememberMeCookie);\n\n            // if we reactivate the remember me feature, it\u0027s ok\n            XmlPage page \u003d (XmlPage) wc.goTo(\"whoAmI/api/xml\", \"application/xml\");\n            assertThat(page, hasXPath(\"//name\", is(\"alice\")));\n        }\n    }","advisory":"SECURITY-996"},{"className":"hudson.security.WhoAmITest","methodSignature":"hudson.security.WhoAmITest.whoAmI_regular_doesNotProvideSensitiveInformation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1695\")\n    public void whoAmI_regular_doesNotProvideSensitiveInformation() throws Exception {\n        j.jenkins.setSecurityRealm(new SecurityRealmImpl());\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"user\")\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(\"user\");\n\n        HtmlPage whoAmIPage \u003d wc.goTo(\"whoAmI\");\n        String content \u003d whoAmIPage.getWebResponse().getContentAsString();\n\n        String sessionId \u003d wc.executeOnServer(() -\u003e {\n            HttpSession session \u003d Stapler.getCurrentRequest().getSession(false);\n            return session !\u003d null ? session.getId() : null;\n        });\n\n        assertThat(sessionId, not(nullValue()));\n\n        // dangerous stuff in Regular Login mode:\n        /*\n         * \u003ctd\u003eDetails:\u003c/td\u003e\n         * \u003ctd\u003eorg.acegisecurity.ui.WebAuthenticationDetails@12afc: RemoteIpAddress: 127.0.0.1; SessionId: node0gbmv9ly0f3h517eppoupykq6n0\u003c/td\u003e\n         *\n         * \u003ctd\u003etoString:\u003c/td\u003e\n         * \u003ctd\u003eorg.acegisecurity.providers.UsernamePasswordAuthenticationToken@d35a1467: Username: [toString()\u003dS3cr3t];\n         *     Password: [PROTECTED]; Authenticated: true; Details:\n         *     org.acegisecurity.ui.WebAuthenticationDetails@12afc: RemoteIpAddress: 127.0.0.1; SessionId:\n         *     node0gbmv9ly0f3h517eppoupykq6n0; Granted Authorities:\n         * \u003c/td\u003e\n         */\n        assertThat(content, not(anyOf(\n                containsString(\"S3cr3t\"),\n                containsString(\"SessionId\"),\n                containsString(sessionId)\n        )));\n    }","advisory":"SECURITY-1695"},{"className":"hudson.security.WhoAmITest","methodSignature":"hudson.security.WhoAmITest.whoAmI_regularApi_doesNotProvideSensitiveInformation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1695\")\n    public void whoAmI_regularApi_doesNotProvideSensitiveInformation() throws Exception {\n        j.jenkins.setSecurityRealm(new SecurityRealmImpl());\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"user\")\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(\"user\");\n\n        Page whoAmIPage \u003d wc.goTo(\"whoAmI/api/json\", \"application/json\");\n        String content \u003d whoAmIPage.getWebResponse().getContentAsString();\n\n        String sessionId \u003d wc.executeOnServer(() -\u003e {\n            HttpSession session \u003d Stapler.getCurrentRequest().getSession(false);\n            return session !\u003d null ? session.getId() : null;\n        });\n\n        assertThat(sessionId, not(nullValue()));\n\n        // dangerous stuff in Regular Login mode with the api/json call:\n        /*\n         * {\n         *    \"_class\": \"hudson.security.WhoAmI\",\n         *    \"anonymous\": false,\n         *    \"authenticated\": true,\n         *    \"authorities\": [],\n         *    \"details\": \"org.acegisecurity.ui.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: node0g4xbfaaq1qb91pwyv0ctilrfu0\",\n         *    \"name\": \"user\",\n         *    \"toString\": \"org.acegisecurity.providers.UsernamePasswordAuthenticationToken@66074b8a:\n         *        Username: [toString()\u003dS3cr3t]; Password: [PROTECTED]; Authenticated: true;\n         *        Details: org.acegisecurity.ui.WebAuthenticationDetails@fffc7f0c: RemoteIpAddress: 127.0.0.1; SessionId: node0g4xbfaaq1qb91pwyv0ctilrfu0;\n         *        Granted Authorities: \"\n         * }\n         */\n        assertThat(content, not(anyOf(\n                containsString(\"S3cr3t\"),\n                containsString(\"SessionId\"),\n                containsString(sessionId)\n        )));\n    }","advisory":"SECURITY-1695"},{"className":"hudson.security.WhoAmITest","methodSignature":"hudson.security.WhoAmITest.whoAmI_basic_doesNotProvideSensitiveInformation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1697\")\n    public void whoAmI_basic_doesNotProvideSensitiveInformation() throws Exception {\n        j.jenkins.setSecurityRealm(new SecurityRealmImpl());\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"user\")\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient().withBasicCredentials(\"user\", \"user\");\n\n        HtmlPage whoAmIPage \u003d wc.goTo(\"whoAmI\");\n        String content \u003d whoAmIPage.getWebResponse().getContentAsString();\n\n        // dangerous stuff in Basic mode:\n        /*\n         * \u003ctd\u003etoString:\u003c/td\u003e\n         * \u003ctd\u003eorg.acegisecurity.providers.UsernamePasswordAuthenticationToken@e8fd00a7: Username: [toString()\u003dS3cr3t];\n         *\n         * \u003ctd rowspan\u003d\"1\"\u003eAuthorization\u003c/td\u003e\n         * \u003ctd\u003eBasic dXNlcjp1c2Vy\u003c/td\u003e\n         */\n        assertThat(content, not(anyOf(\n                containsString(\"S3cr3t\"),\n                containsString(\"SessionId\"),\n                // base64 of user:user\n                containsString(Base64.getEncoder().encodeToString(\"user:user\".getBytes(StandardCharsets.UTF_8)))\n        )));\n    }","advisory":"SECURITY-1697"},{"className":"hudson.security.WhoAmITest","methodSignature":"hudson.security.WhoAmITest.whoAmI_apiToken_doesNotProvideSensitiveInformation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1697\")\n    public void whoAmI_apiToken_doesNotProvideSensitiveInformation() throws Exception {\n        j.jenkins.setSecurityRealm(new SecurityRealmImpl());\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"user\")\n        );\n\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty prop \u003d user.getProperty(ApiTokenProperty.class);\n        TokenUuidAndPlainValue token \u003d prop.getTokenStore().generateNewToken(\"test\");\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient().withBasicCredentials(\"user\", token.plainValue);\n        String base64ApiToken \u003d new String(Base64.getEncoder().encode((\"user:\" + token.plainValue).getBytes(StandardCharsets.UTF_8)), StandardCharsets.UTF_8);\n\n        HtmlPage whoAmIPage \u003d wc.goTo(\"whoAmI\");\n        String content \u003d whoAmIPage.getWebResponse().getContentAsString();\n\n        // dangerous stuff in API Token mode:\n        /*\n         * \u003ctd rowspan\u003d\"1\"\u003eAuthorization\u003c/td\u003e\n         * \u003ctd\u003eBasic dXNlcjoxMTRiNGRmMWNhZTVkNDQ2MjgxZTJkZWEzMDY1NTEyZDBi\u003c/td\u003e\n         */\n        assertThat(content, not(anyOf(\n                containsString(\"S3cr3t\"),\n                containsString(\"SessionId\"),\n                containsString(base64ApiToken)\n        )));\n    }","advisory":"SECURITY-1697"},{"className":"hudson.slaves.AgentInboundUrlTest","methodSignature":"hudson.slaves.AgentInboundUrlTest.testInboundAgentUrlOverride:void()","methodSource":"@Issue(\"JENKINS-63222\")\n    @Test\n    public void testInboundAgentUrlOverride() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy authorizationStrategy \u003d new MockAuthorizationStrategy();\n        authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        // Create an agent\n        inboundAgents.createAgent(j, InboundAgentRule.Options.newBuilder().name(\"test\").skipStart().build());\n\n        // parse the JNLP page into DOM to inspect the jnlp url argument.\n        JenkinsRule.WebClient agent \u003d j.createWebClient();\n        XmlPage jnlp \u003d (XmlPage) agent.goTo(\"computer/test/jenkins-agent.jnlp\", \"application/x-java-jnlp-file\");\n        Document dom \u003d new DOMReader().read(jnlp.getXmlDocument());\n        Object arg \u003d dom.selectSingleNode(\"//application-desc/argument[7]/following-sibling::argument[1]\");\n        String val \u003d ((Element) arg).getText();\n        assertEquals(customInboundUrl, val);\n    }","advisory":"JENKINS-63222"},{"className":"hudson.slaves.CloudTest","methodSignature":"hudson.slaves.CloudTest.provisionPermissionShouldBeIndependentFromAdminister:void()","methodSource":"@Test @WithoutJenkins @Issue(\"JENKINS-37616\")\n    public void provisionPermissionShouldBeIndependentFromAdminister() {\n        SidACL acl \u003d new SidACL() {\n            @Override protected Boolean hasPermission(Sid p, Permission permission) {\n                return permission \u003d\u003d Cloud.PROVISION;\n            }\n        };\n\n        assertTrue(acl.hasPermission2(Jenkins.ANONYMOUS2, Cloud.PROVISION));\n        assertFalse(acl.hasPermission2(Jenkins.ANONYMOUS2, Jenkins.ADMINISTER));\n        assertEquals(Cloud.PROVISION, Computer.PERMISSIONS.find(\"Provision\"));\n    }","advisory":"JENKINS-37616"},{"className":"hudson.slaves.CloudTest","methodSignature":"hudson.slaves.CloudTest.ensureProvisionPermissionIsLoadable:void()","methodSource":"@Test @Issue(\"JENKINS-37616\")\n    public void ensureProvisionPermissionIsLoadable() {\n        // Name introduced by JENKINS-37616\n        Permission p \u003d Permission.fromId(\"hudson.model.Computer.Provision\");\n        assertEquals(\"Provision\", p.name);\n    }","advisory":"JENKINS-37616"},{"className":"hudson.slaves.CloudTest","methodSignature":"hudson.slaves.CloudTest.ui:void()","methodSource":"@Test\n    public void ui() throws Exception {\n        ACloud aCloud \u003d new ACloud(\"a\", \"0\");\n        j.jenkins.clouds.add(aCloud);\n\n        assertThat(aCloud.getAllActions(), containsInAnyOrder(\n                instanceOf(TaskCloudAction.class),\n                instanceOf(ReportingCloudAction.class)\n        ));\n\n        HtmlPage page \u003d j.createWebClient().goTo(aCloud.getUrl());\n        String out \u003d page.getWebResponse().getContentAsString();\n        assertThat(out, containsString(\"Cloud a\")); // index.jelly\n        assertThat(out, containsString(\"Top cloud view.\")); // top.jelly\n        assertThat(out, containsString(\"custom cloud main groovy\")); // main.jelly\n        assertThat(out, containsString(\"Task Action\")); // TaskCloudAction\n        assertThat(out, containsString(\"Sidepanel action box.\")); // TaskCloudAction/box.jelly\n        assertThat(out, containsString(\"Report Here\")); // ReportingCloudAction/summary.jelly\n\n        HtmlPage actionPage \u003d page.getAnchorByText(\"Task Action\").click();\n        out \u003d actionPage.getWebResponse().getContentAsString();\n        assertThat(out, containsString(\"doIndex called\")); // doIndex\n    }"},{"className":"hudson.slaves.CloudTest","methodSignature":"hudson.slaves.CloudTest.cloudNameIsEncodedInGetUrl:void()","methodSource":"@Test\n    public void cloudNameIsEncodedInGetUrl() {\n        ACloud aCloud \u003d new ACloud(\"../../gibberish\", \"0\");\n\n        assertEquals(\"Cloud name is encoded in Cloud#getUrl\", \"cloud/..%2F..%2Fgibberish/\", aCloud.getUrl());\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testAgentPropertyOnAgent:void()","methodSource":"@Test\n    public void testAgentPropertyOnAgent() throws Exception {\n        setVariables(agent, new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"agentValue\"));\n        Map\u003cString, String\u003e envVars \u003d executeBuild(agent);\n        assertEquals(\"agentValue\", envVars.get(\"KEY\"));\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testControllerPropertyOnBuiltInNode:void()","methodSource":"@Test\n    public void testControllerPropertyOnBuiltInNode() throws Exception {\n        j.jenkins.getGlobalNodeProperties().replaceBy(\n                Set.of(new EnvironmentVariablesNodeProperty(\n                        new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"globalValue\"))));\n\n        Map\u003cString, String\u003e envVars \u003d executeBuild(j.jenkins);\n\n        assertEquals(\"globalValue\", envVars.get(\"KEY\"));\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testAgentAndControllerPropertyOnAgent:void()","methodSource":"@Test\n    public void testAgentAndControllerPropertyOnAgent() throws Exception {\n        j.jenkins.getGlobalNodeProperties().replaceBy(\n                Set.of(new EnvironmentVariablesNodeProperty(\n                        new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"globalValue\"))));\n        setVariables(agent, new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"agentValue\"));\n\n        Map\u003cString, String\u003e envVars \u003d executeBuild(agent);\n\n        assertEquals(\"agentValue\", envVars.get(\"KEY\"));\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testAgentAndBuiltInNodePropertyAndParameterOnAgent:void()","methodSource":"@Test\n    // TODO(terminology) is this correct? This sets a built-in node property, not a global property\n    public void testAgentAndBuiltInNodePropertyAndParameterOnAgent()\n            throws Exception {\n        ParametersDefinitionProperty pdp \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"KEY\", \"parameterValue\"));\n        project.addProperty(pdp);\n\n        setVariables(j.jenkins, new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"builtInNodeValue\"));\n        setVariables(agent, new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"agentValue\"));\n\n        Map\u003cString, String\u003e envVars \u003d executeBuild(agent);\n\n        assertEquals(\"parameterValue\", envVars.get(\"KEY\"));\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testVariableResolving:void()","methodSource":"@Test\n    public void testVariableResolving() throws Exception {\n        j.jenkins.getGlobalNodeProperties().replaceBy(\n                Set.of(new EnvironmentVariablesNodeProperty(\n                        new EnvironmentVariablesNodeProperty.Entry(\"KEY1\", \"value\"), new EnvironmentVariablesNodeProperty.Entry(\"KEY2\", \"$KEY1\"))));\n        Map\u003cString, String\u003e envVars \u003d executeBuild(j.jenkins);\n        assertEquals(\"value\", envVars.get(\"KEY1\"));\n        assertEquals(\"value\", envVars.get(\"KEY2\"));\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testFormRoundTripForController:void()","methodSource":"@Test\n    public void testFormRoundTripForController() throws Exception {\n        j.jenkins.getGlobalNodeProperties().replaceBy(\n                Set.of(new EnvironmentVariablesNodeProperty(\n                        new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"value\"))));\n\n        WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(j.jenkins, \"configure\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        j.submit(form);\n\n        assertEquals(1, j.jenkins.getGlobalNodeProperties().toList().size());\n\n        EnvironmentVariablesNodeProperty prop \u003d j.jenkins.getGlobalNodeProperties().get(EnvironmentVariablesNodeProperty.class);\n        assertEquals(1, prop.getEnvVars().size());\n        assertEquals(\"value\", prop.getEnvVars().get(\"KEY\"));\n    }"},{"className":"hudson.slaves.EnvironmentVariableNodePropertyTest","methodSignature":"hudson.slaves.EnvironmentVariableNodePropertyTest.testFormRoundTripForAgent:void()","methodSource":"@Test\n    public void testFormRoundTripForAgent() throws Exception {\n        setVariables(agent, new EnvironmentVariablesNodeProperty.Entry(\"KEY\", \"value\"));\n\n        WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(agent, \"configure\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        j.submit(form);\n\n        assertEquals(1, agent.getNodeProperties().toList().size());\n\n        EnvironmentVariablesNodeProperty prop \u003d agent.getNodeProperties().get(EnvironmentVariablesNodeProperty.class);\n        assertEquals(1, prop.getEnvVars().size());\n        assertEquals(\"value\", prop.getEnvVars().get(\"KEY\"));\n    }"},{"className":"hudson.slaves.JNLPLauncherRealTest","methodSignature":"hudson.slaves.JNLPLauncherRealTest.smokes:void()","methodSource":"@Issue(\"JEP-230\")\n    @Test public void smokes() throws Throwable {\n        /* Since RealJenkinsRuleInit.jpi will load detached plugins, to reproduce a failure use:\n        FileUtils.touch(new File(rr.getHome(), \"plugins/instance-identity.jpi.disabled\"));\n        */\n        then(false);\n    }","advisory":"JEP-230"},{"className":"hudson.slaves.JNLPLauncherRealTest","methodSignature":"hudson.slaves.JNLPLauncherRealTest.webSocket:void()","methodSource":"@Issue(\"JENKINS-68933\")\n    @Test public void webSocket() throws Throwable {\n        then(true);\n    }","advisory":"JENKINS-68933"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testLaunch:void()","methodSource":"@Test\n    public void testLaunch() throws Exception {\n        Computer c \u003d addTestAgent(false);\n        launchJnlpAndVerify(c, buildJnlpArgs(c));\n    }"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testLaunchWithWorkDir:void()","methodSource":"@Test\n    @Issue(\"JENKINS-39370\")\n    public void testLaunchWithWorkDir() throws Exception {\n        File workDir \u003d tmpDir.newFolder(\"workDir\");\n\n        Computer c \u003d addTestAgent(false);\n        launchJnlpAndVerify(c, buildJnlpArgs(c).add(\"-workDir\", workDir.getAbsolutePath()));\n        assertTrue(\"Remoting work dir should have been created\", new File(workDir, \"remoting\").exists());\n    }","advisory":"JENKINS-39370"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testNoWorkDirMigration:void()","methodSource":"@Test\n    @LocalData\n    @Issue(\"JENKINS-44112\")\n    public void testNoWorkDirMigration() {\n        Computer computer \u003d j.jenkins.getComputer(\"Foo\");\n        assertThat(computer, instanceOf(SlaveComputer.class));\n\n        SlaveComputer c \u003d (SlaveComputer) computer;\n        ComputerLauncher launcher \u003d c.getLauncher();\n        assertThat(launcher, instanceOf(JNLPLauncher.class));\n        JNLPLauncher jnlpLauncher \u003d (JNLPLauncher) launcher;\n        assertNotNull(\"Work Dir Settings should be defined\",\n                jnlpLauncher.getWorkDirSettings());\n        assertTrue(\"Work directory should be disabled for the migrated agent\",\n                jnlpLauncher.getWorkDirSettings().isDisabled());\n    }","advisory":"JENKINS-44112"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testDefaults:void()","methodSource":"@Test\n    public void testDefaults() {\n        assertFalse(\"Work directory enabled by default\", new JNLPLauncher().getWorkDirSettings().isDisabled());\n    }"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testDelegatingComputerLauncher:void()","methodSource":"@Test\n    @Issue(\"JENKINS-47056\")\n    public void testDelegatingComputerLauncher() throws Exception {\n        File workDir \u003d tmpDir.newFolder(\"workDir\");\n\n        ComputerLauncher launcher \u003d new JNLPLauncher(\"\", \"\", new RemotingWorkDirSettings(false, workDir.getAbsolutePath(), \"internalDir\", false));\n        launcher \u003d new DelegatingComputerLauncherImpl(launcher);\n        Computer c \u003d addTestAgent(launcher);\n        launchJnlpAndVerify(c, buildJnlpArgs(c));\n        assertTrue(\"Remoting work dir should have been created\", new File(workDir, \"internalDir\").exists());\n    }","advisory":"JENKINS-47056"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testComputerLauncherFilter:void()","methodSource":"@Test\n    @Issue(\"JENKINS-47056\")\n    public void testComputerLauncherFilter() throws Exception {\n        File workDir \u003d tmpDir.newFolder(\"workDir\");\n\n        ComputerLauncher launcher \u003d new JNLPLauncher(\"\", \"\", new RemotingWorkDirSettings(false, workDir.getAbsolutePath(), \"internalDir\", false));\n        launcher \u003d new ComputerLauncherFilterImpl(launcher);\n        Computer c \u003d addTestAgent(launcher);\n        launchJnlpAndVerify(c, buildJnlpArgs(c));\n        assertTrue(\"Remoting work dir should have been created\", new File(workDir, \"internalDir\").exists());\n    }","advisory":"JENKINS-47056"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testConfigRoundtrip:void()","methodSource":"@Test\n    public void testConfigRoundtrip() throws Exception {\n        DumbSlave s \u003d j.createSlave();\n        JNLPLauncher original \u003d new JNLPLauncher(\"a\");\n        s.setLauncher(original);\n        j.assertEqualDataBoundBeans(((JNLPLauncher) s.getLauncher()).getWorkDirSettings(), RemotingWorkDirSettings.getEnabledDefaults());\n        RemotingWorkDirSettings custom \u003d new RemotingWorkDirSettings(false, null, \"custom\", false);\n        ((JNLPLauncher) s.getLauncher()).setWorkDirSettings(custom);\n        HtmlPage p \u003d j.createWebClient().getPage(s, \"configure\");\n        j.submit(p.getFormByName(\"config\"));\n        j.assertEqualBeans(original, s.getLauncher(), \"tunnel\");\n        j.assertEqualDataBoundBeans(((JNLPLauncher) s.getLauncher()).getWorkDirSettings(), custom);\n    }"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testJnlpFileDownload:void()","methodSource":"@Test\n    public void testJnlpFileDownload() throws Exception {\n        assertJnlpFileDownload(\"/jenkins-agent.jnlp\");\n    }"},{"className":"hudson.slaves.JNLPLauncherTest","methodSignature":"hudson.slaves.JNLPLauncherTest.testObsoletedJnlpFileDownload:void()","methodSource":"@Test\n    public void testObsoletedJnlpFileDownload() throws Exception {\n        assertJnlpFileDownload(\"/slave-agent.jnlp\"); // deliberately uses old URL\n    }"},{"className":"hudson.slaves.NodeCanTakeTaskTest","methodSignature":"hudson.slaves.NodeCanTakeTaskTest.takeBlockedByProperty:void()","methodSource":"@Issue({\"JENKINS-6598\", \"JENKINS-38514\"})\n    @Test\n    public void takeBlockedByProperty() throws Exception {\n        // Set built-in node executor count to zero to force all jobs to agents\n        r.jenkins.setNumExecutors(0);\n        Slave slave \u003d r.createSlave();\n        FreeStyleProject project \u003d r.createFreeStyleProject();\n\n        // First, attempt to run our project before adding the property\n        r.buildAndAssertSuccess(project);\n\n        // Add the build-blocker property and try again\n        slave.getNodeProperties().add(new RejectAllTasksProperty());\n\n        assertThrows(TimeoutException.class, () -\u003e project.scheduleBuild2(0).get(10, TimeUnit.SECONDS));\n        List\u003cBuildableItem\u003e buildables \u003d r.jenkins.getQueue().getBuildableItems();\n        assertNotNull(buildables);\n        assertEquals(1, buildables.size());\n\n        BuildableItem item \u003d buildables.get(0);\n        assertEquals(project, item.task);\n        assertNotNull(item.getCauseOfBlockage());\n        assertEquals(\"rejecting everything\", item.getCauseOfBlockage().getShortDescription());\n\n        // Clear the queue\n        assertTrue(r.jenkins.getQueue().cancel(project));\n    }"},{"className":"hudson.slaves.NodeCanTakeTaskTest","methodSignature":"hudson.slaves.NodeCanTakeTaskTest.becauseNodeIsBusy:void()","methodSource":"@Test\n    public void becauseNodeIsBusy() throws Exception {\n        Slave slave \u003d r.createSlave();\n        FreeStyleProject project \u003d r.createFreeStyleProject();\n        project.setAssignedNode(slave);\n        project.setConcurrentBuild(true);\n        project.getBuildersList().add(new SleepBuilder(Long.MAX_VALUE));\n        FreeStyleBuild build \u003d project.scheduleBuild2(0).waitForStart(); // consume the one executor\n        var build2F \u003d project.scheduleBuild2(0); // now try to reschedule\n        Queue.Item item;\n        while ((item \u003d r.jenkins.getQueue().getItem(project)) \u003d\u003d null || !item.isBuildable()) {\n            Thread.sleep(100);\n        }\n        assertEquals(hudson.model.Messages.Queue_WaitingForNextAvailableExecutorOn(slave.getDisplayName()), item.getWhy());\n        build.doStop();\n        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(build));\n        FreeStyleBuild build2 \u003d build2F.waitForStart();\n        build2.doStop();\n        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(build2));\n    }"},{"className":"hudson.slaves.NodeParallelTest","methodSignature":"hudson.slaves.NodeParallelTest.createNodesWithParallelThreads:void()","methodSource":"@Test\n    @Issue(\"JENKINS-53401\")\n    public void createNodesWithParallelThreads() throws InterruptedException, ExecutionException {\n        int n \u003d 50;\n        List\u003cCallable\u003cVoid\u003e\u003e tasks \u003d Collections.nCopies(n, () -\u003e {\n            try {\n                int i \u003d count.incrementAndGet();\n                LOGGER.log(Level.INFO, \"Creating slave \" + i);\n                // JenkinsRule sync on Jenkins singleton, so this doesn\u0027t work\n                // r.createSlave();\n                Slave agent \u003d inboundAgents.createAgent(r, InboundAgentRule.Options.newBuilder().name(\"agent-\" + i).skipStart().build());\n                agent.setNodeProperties(List.of(new EnvironmentVariablesNodeProperty(new EnvironmentVariablesNodeProperty.Entry(\"foo\", \"\" + i))));\n                return null;\n            } catch (Exception e1) {\n                throw new RuntimeException(e1);\n            }\n        });\n        ExecutorService executorService \u003d Executors.newFixedThreadPool(n);\n        List\u003cFuture\u003cVoid\u003e\u003e futures \u003d executorService.invokeAll(tasks);\n        List\u003cVoid\u003e resultList \u003d new ArrayList\u003c\u003e(futures.size());\n        // Check for exceptions\n        try {\n            for (Future\u003cVoid\u003e future : futures) {\n                // Throws an exception if an exception was thrown by the task.\n                resultList.add(future.get());\n            }\n        } catch (RuntimeException e) {\n            e.printStackTrace();\n            fail(e.getMessage());\n        }\n    }","advisory":"JENKINS-53401"},{"className":"hudson.slaves.NodePropertyTest","methodSignature":"hudson.slaves.NodePropertyTest.invisibleProperty:void()","methodSource":"@Test\n    public void invisibleProperty() throws Exception {\n        logs.record(Descriptor.class, Level.ALL);\n        DumbSlave s \u003d j.createSlave();\n        InvisibleProperty before \u003d new InvisibleProperty();\n        s.getNodeProperties().add(before);\n        assertFalse(before.reconfigured);\n\n        DumbSlave s2 \u003d j.configRoundtrip(s);\n        assertNotSame(s, s2);\n        InvisibleProperty after \u003d s2.getNodeProperties().get(InvisibleProperty.class);\n\n        assertSame(before, after);\n        assertTrue(after.reconfigured);\n    }"},{"className":"hudson.slaves.NodePropertyTest","methodSignature":"hudson.slaves.NodePropertyTest.basicConfigRoundtrip:void()","methodSource":"@Test\n    public void basicConfigRoundtrip() throws Exception {\n        DumbSlave s \u003d j.createSlave();\n        HtmlForm f \u003d j.createWebClient().goTo(\"computer/\" + s.getNodeName() + \"/configure\").getFormByName(\"config\");\n        ((HtmlLabel) DomNodeUtil.selectSingleNode(f, \".//LABEL[text()\u003d\u0027PropertyImpl\u0027]\")).click();\n        j.submit(f);\n        PropertyImpl p \u003d j.jenkins.getNode(s.getNodeName()).getNodeProperties().get(PropertyImpl.class);\n        assertEquals(\"Duke\", p.name);\n\n        p.name \u003d \"Kohsuke\";\n        j.configRoundtrip(s);\n\n        PropertyImpl p2 \u003d j.jenkins.getNode(s.getNodeName()).getNodeProperties().get(PropertyImpl.class);\n        assertNotSame(p, p2);\n        j.assertEqualDataBoundBeans(p, p2);\n    }"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.autoProvision:void()","methodSource":"@Test public void autoProvision() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_autoProvision);\n    }"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.loadSpike:void()","methodSource":"@Test public void loadSpike() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_loadSpike);\n    }"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.baselineSlaveUsage:void()","methodSource":"@Test public void baselineSlaveUsage() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_baselineSlaveUsage);\n    }"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.labels:void()","methodSource":"@Test public void labels() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_labels);\n    }"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.flyweightTasksWithoutMasterExecutors:void()","methodSource":"@Issue(\"JENKINS-7291\")\n    @Test\n    public void flyweightTasksWithoutMasterExecutors() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_flyweightTasksWithoutMasterExecutors);\n    }","advisory":"JENKINS-7291"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.shouldRunFlyweightTaskOnProvisionedNodeWhenNodeRestricted:void()","methodSource":"@Issue(\"JENKINS-30084\")\n    @Test\n    public void shouldRunFlyweightTaskOnProvisionedNodeWhenNodeRestricted() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_shouldRunFlyweightTaskOnProvisionedNodeWhenNodeRestricted);\n    }","advisory":"JENKINS-30084"},{"className":"hudson.slaves.NodeProvisionerTest","methodSignature":"hudson.slaves.NodeProvisionerTest.testJobWithCloudLabelExpressionProvisionsOnlyOneAgent:void()","methodSource":"@Issue(\"JENKINS-67635\")\n    @Test\n    public void testJobWithCloudLabelExpressionProvisionsOnlyOneAgent() throws Throwable {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        rr.then(NodeProvisionerTest::_testJobWithCloudLabelExpressionProvisionsOnlyOneAgent);\n    }","advisory":"JENKINS-67635"},{"className":"hudson.slaves.PingThreadTest","methodSignature":"hudson.slaves.PingThreadTest.failedPingThreadResetsComputerChannel:void()","methodSource":"@Test\n    public void failedPingThreadResetsComputerChannel() throws Exception {\n        assumeFalse(\"We simulate hung agent by sending the SIGSTOP signal\", Functions.isWindows() || Platform.isDarwin());\n\n        DumbSlave slave \u003d j.createOnlineSlave();\n        Computer computer \u003d slave.toComputer();\n        Channel channel \u003d (Channel) slave.getChannel();\n        long pid \u003d channel.call(new GetPid());\n\n        PingThread pingThread \u003d null;\n        for (Thread it : Thread.getAllStackTraces().keySet()) {\n            if (it instanceof PingThread \u0026\u0026 it.getName().endsWith(channel.toString())) {\n                pingThread \u003d (PingThread) it;\n            }\n        }\n        assertNotNull(pingThread);\n\n        /*\n         * Simulate lost connection by sending a STOP signal. We use the STOP signal rather than the\n         * TSTP signal because the latter relies on an interactive terminal, which we do not have in\n         * our CI builds. We wait for the signal to be delivered and visible in the\n         * /proc/${PID}/stat output for the process because otherwise we would be testing something\n         * other than the ping thread.\n         */\n        kill(pid, \"-STOP\", \u0027T\u0027);\n        try {\n            // ... do not wait for Ping Thread to notice\n            Method onDead \u003d PingThread.class.getDeclaredMethod(\"onDead\", Throwable.class);\n            onDead.setAccessible(true);\n            onDead.invoke(pingThread, new TimeoutException(\"No ping\"));\n\n            /*\n             * Channel termination happens asynchronously, so wait for the asynchronous activity to\n             * complete before proceeding with the test.\n             */\n            await().pollInterval(250, TimeUnit.MILLISECONDS)\n                    .atMost(10, TimeUnit.SECONDS)\n                    .until(channel::isClosingOrClosed);\n            assertThrows(ChannelClosedException.class, () -\u003e channel.call(new GetPid()));\n\n            assertNull(slave.getComputer().getChannel());\n            assertNull(computer.getChannel());\n        } finally {\n            /*\n             * If we fail to wait for the process to resume and start tearing down the test right\n             * away, the test teardown process will hang waiting for the remote process to close,\n             * which will never happen because the process is suspended. On the other hand, waiting\n             * to confirm that the process has resumed via /proc/${PID}/stat is not reliable either,\n             * because once the process resumes it will realize that the controller side of the\n             * connection has been closed and terminate itself. Therefore we wait until either the\n             * process is in the resumed state or has terminated.\n             */\n            kill(pid, \"-CONT\", \u0027S\u0027);\n        }\n    }"},{"className":"hudson.slaves.SlaveComputerTest","methodSignature":"hudson.slaves.SlaveComputerTest.testAgentLogs:void()","methodSource":"@Test\n    public void testAgentLogs() throws Exception {\n        DumbSlave node \u003d j.createOnlineSlave();\n        String log \u003d node.getComputer().getLog();\n        Assert.assertTrue(log.contains(\"Remoting version: \" + Launcher.VERSION));\n        Assert.assertTrue(log.contains(\"Launcher: \" + SimpleCommandLauncher.class.getSimpleName()));\n        Assert.assertTrue(log.contains(\"Communication Protocol: Standard in/out\"));\n        Assert.assertTrue(log.contains(String.format(\"This is a %s agent\", Functions.isWindows() ? \"Windows\" : \"Unix\")));\n    }"},{"className":"hudson.slaves.SlaveComputerTest","methodSignature":"hudson.slaves.SlaveComputerTest.testGetAbsoluteRemotePath:void()","methodSource":"@Test\n    public void testGetAbsoluteRemotePath() throws Exception {\n        //default auth\n        DumbSlave nodeA \u003d j.createOnlineSlave();\n        String path \u003d nodeA.getComputer().getAbsoluteRemotePath();\n        Assert.assertNotNull(path);\n        Assert.assertEquals(getRemoteFS(nodeA, null), path);\n\n        //not auth\n        String userAlice \u003d \"alice\";\n        MockAuthorizationStrategy authStrategy \u003d new MockAuthorizationStrategy();\n        authStrategy.grant(Computer.CONFIGURE, Jenkins.READ).everywhere().to(userAlice);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(authStrategy);\n        try (ACLContext context \u003d ACL.as(User.getById(userAlice, true))) {\n            path \u003d nodeA.getComputer().getAbsoluteRemotePath();\n            Assert.assertNull(path);\n            Assert.assertNull(getRemoteFS(nodeA, userAlice));\n        }\n\n        //with auth\n        String userBob \u003d \"bob\";\n        authStrategy.grant(Computer.CONNECT, Jenkins.READ).everywhere().to(userBob);\n        try (ACLContext context \u003d ACL.as(User.getById(userBob, true))) {\n            path \u003d nodeA.getComputer().getAbsoluteRemotePath();\n            Assert.assertNotNull(path);\n            Assert.assertNotNull(getRemoteFS(nodeA, userBob));\n        }\n    }"},{"className":"hudson.slaves.SlaveComputerTest","methodSignature":"hudson.slaves.SlaveComputerTest.startupShouldNotFailOnExceptionOnlineListener:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57111\")\n    public void startupShouldNotFailOnExceptionOnlineListener() throws Exception {\n        DumbSlave nodeA \u003d j.createOnlineSlave();\n        assertThat(nodeA.getComputer(), instanceOf(SlaveComputer.class));\n\n        int retries \u003d 10;\n        while (IOExceptionOnOnlineListener.onOnlineCount \u003d\u003d 0 \u0026\u0026 retries \u003e 0) {\n            retries--;\n            Thread.sleep(500);\n        }\n        Assert.assertTrue(retries \u003e 0);\n        Thread.sleep(500);\n\n        Assert.assertFalse(nodeA.getComputer().isOffline());\n        Assert.assertTrue(nodeA.getComputer().isOnline());\n\n        // Both listeners should fire and not cause the other not to fire.\n        Assert.assertEquals(1, IOExceptionOnOnlineListener.onOnlineCount);\n        Assert.assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n\n        // We should get the stack trace too.\n        assertThat(nodeA.getComputer().getLog(), allOf(\n                containsString(\"\\tat \" + IOExceptionOnOnlineListener.class.getName() + \".onOnline\"),\n                containsString(\"\\tat \" + RuntimeExceptionOnOnlineListener.class.getName() + \".onOnline\")));\n    }","advisory":"JENKINS-57111"},{"className":"hudson.slaves.SlaveComputerTest","methodSignature":"hudson.slaves.SlaveComputerTest.startupShouldFailOnErrorOnlineListener:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57111\")\n    public void startupShouldFailOnErrorOnlineListener() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        DumbSlave nodeA \u003d j.createSlave();\n        assertThat(nodeA.getComputer(), instanceOf(SlaveComputer.class));\n        int retries \u003d 10;\n        while (ErrorOnOnlineListener.onOnlineCount \u003d\u003d 0 \u0026\u0026 retries \u003e 0) {\n            retries--;\n            Thread.sleep(500);\n        }\n        Assert.assertTrue(retries \u003e 0);\n        Thread.sleep(500);\n\n        Assert.assertEquals(1, ErrorOnOnlineListener.onOnlineCount);\n\n        Assert.assertTrue(nodeA.getComputer().isOffline());\n        Assert.assertFalse(nodeA.getComputer().isOnline());\n    }","advisory":"JENKINS-57111"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testNoneCompression:void()","methodSource":"@Test\n    @Issue(\"JENKINS-26008\")\n    public void testNoneCompression() throws Exception {\n        final FilePath.TarCompression prevCompression \u003d StandardArtifactManager.TAR_COMPRESSION;\n        StandardArtifactManager.TAR_COMPRESSION \u003d FilePath.TarCompression.NONE;\n        try {\n            final FreeStyleProject project \u003d j.createFreeStyleProject();\n            project.getBuildersList().add(new CreateArtifact());\n            project.getPublishersList().add(new ArtifactArchiver(\"f\"));\n            j.buildAndAssertSuccess(project);\n            assertTrue(project.getBuildByNumber(1).getHasArtifacts());\n        } finally {\n            StandardArtifactManager.TAR_COMPRESSION \u003d prevCompression;\n        }\n    }","advisory":"JENKINS-26008"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testEmptyDirectories:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3227\")\n    public void testEmptyDirectories() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        Publisher artifactArchiver \u003d new ArtifactArchiver(\"dir/\");\n        project.getPublishersList().replaceBy(Collections.singleton(artifactArchiver));\n        project.getBuildersList().replaceBy(Collections.singleton(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath dir \u003d build.getWorkspace().child(\"dir\");\n                dir.child(\"subdir1\").mkdirs();\n                FilePath subdir2 \u003d dir.child(\"subdir2\");\n                subdir2.mkdirs();\n                subdir2.child(\"file\").write(\"content\", \"UTF-8\");\n                return true;\n            }\n        }));\n        j.buildAndAssertSuccess(project); // #1\n        File artifacts \u003d project.getBuildByNumber(1).getArtifactsDir();\n        File[] kids \u003d artifacts.listFiles();\n        assertEquals(1, kids.length);\n        assertEquals(\"dir\", kids[0].getName());\n        kids \u003d kids[0].listFiles();\n        assertEquals(1, kids.length);\n        assertEquals(\"subdir2\", kids[0].getName());\n        kids \u003d kids[0].listFiles();\n        assertEquals(1, kids.length);\n        assertEquals(\"file\", kids[0].getName());\n    }","advisory":"JENKINS-3227"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testAllowEmptyArchive:void()","methodSource":"@Test\n    @Issue(\"JENKINS-10502\")\n    public void testAllowEmptyArchive() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ArtifactArchiver aa \u003d new ArtifactArchiver(\"f\");\n        assertFalse(aa.getAllowEmptyArchive());\n        aa.setAllowEmptyArchive(true);\n        project.getPublishersList().replaceBy(Collections.singleton(aa));\n        j.buildAndAssertSuccess(project);\n        assertFalse(project.getBuildByNumber(1).getHasArtifacts());\n    }","advisory":"JENKINS-10502"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testFileMaskNoMatchesFoundException:void()","methodSource":"@Test\n    @Issue(\"JENKINS-51913\")\n    public void testFileMaskNoMatchesFoundException() throws Exception {\n        hudson.FilePath.VALIDATE_ANT_FILE_MASK_BOUND \u003d 1;\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().replaceBy(Collections.singleton(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath dir \u003d build.getWorkspace().child(\"dir\");\n                dir.child(\"file\").write(\"content\", \"UTF-8\");\n                dir.child(\"file2\").write(\"content\", \"UTF-8\");\n                dir.child(\"file3\").write(\"content\", \"UTF-8\");\n                return true;\n            }\n        }));\n\n        String pattern \u003d \"dir/*.log\";\n        ArtifactArchiver aa \u003d new ArtifactArchiver(pattern);\n        aa.setAllowEmptyArchive(true);\n        project.getPublishersList().replaceBy(Collections.singleton(aa));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        assertFalse(project.getBuildByNumber(1).getHasArtifacts());\n        j.assertLogContains(\"No artifacts found that match the file pattern \\\"\" + pattern + \"\\\"\", build);\n        assertThat(\"No stacktrace shown\", build.getLog(31), Matchers.iterableWithSize(lessThan(30)));\n    }","advisory":"JENKINS-51913"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testFileMaskNoMatchesFoundExceptionOnAgent:void()","methodSource":"@Test\n    @Issue(\"JENKINS-71700\")\n    public void testFileMaskNoMatchesFoundExceptionOnAgent() throws Exception {\n        Slave agent \u003d j.createOnlineSlave();\n        hudson.FilePath.VALIDATE_ANT_FILE_MASK_BOUND \u003d 1;\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setAssignedNode(agent);\n        project.getBuildersList().replaceBy(Collections.singleton(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath dir \u003d build.getWorkspace().child(\"dir\");\n                dir.child(\"file\").write(\"content\", \"UTF-8\");\n                dir.child(\"file2\").write(\"content\", \"UTF-8\");\n                dir.child(\"file3\").write(\"content\", \"UTF-8\");\n                return true;\n            }\n        }));\n\n        String pattern \u003d \"dir/*.log\";\n        ArtifactArchiver aa \u003d new ArtifactArchiver(pattern);\n        aa.setAllowEmptyArchive(true);\n        project.getPublishersList().replaceBy(Collections.singleton(aa));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n        assertFalse(project.getBuildByNumber(1).getHasArtifacts());\n        j.assertLogContains(\"No artifacts found that match the file pattern \\\"\" + pattern + \"\\\"\", build);\n        assertThat(\"No stacktrace shown\", build.getLog(31), Matchers.iterableWithSize(lessThan(30)));\n    }","advisory":"JENKINS-71700"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.symlinks:void()","methodSource":"@Issue(\"JENKINS-21958\")\n    @Test public void symlinks() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                if (ws \u003d\u003d null) {\n                    return false;\n                }\n                FilePath dir \u003d ws.child(\"dir\");\n                dir.mkdirs();\n                dir.child(\"fizz\").write(\"contents\", null);\n                dir.child(\"lodge\").symlinkTo(\"fizz\", listener);\n                return true;\n            }\n        });\n        ArtifactArchiver aa \u003d new ArtifactArchiver(\"dir/lodge\");\n        aa.setAllowEmptyArchive(true);\n        p.getPublishersList().add(aa);\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        FilePath ws \u003d b.getWorkspace();\n        assertNotNull(ws);\n        assumeTrue(\"May not be testable on Windows:\\n\" + JenkinsRule.getLog(b), ws.child(\"dir/lodge\").exists());\n        List\u003cFreeStyleBuild.Artifact\u003e artifacts \u003d b.getArtifacts();\n        assertEquals(1, artifacts.size());\n        FreeStyleBuild.Artifact artifact \u003d artifacts.get(0);\n        assertEquals(\"dir/lodge\", artifact.relativePath);\n        VirtualFile[] kids \u003d b.getArtifactManager().root().child(\"dir\").list();\n        assertEquals(1, kids.length);\n        assertEquals(\"lodge\", kids[0].getName());\n        // do not check that it .exists() since its target has not been archived\n    }","advisory":"JENKINS-21958"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.notFollowSymlinks:void()","methodSource":"@Issue(\"JENKINS-5597\")\n    @Test public void notFollowSymlinks() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                if (ws \u003d\u003d null) {\n                    return false;\n                }\n                FilePath dir \u003d ws.child(\"dir\");\n                dir.mkdirs();\n                dir.child(\"fizz\").write(\"contents\", null);\n                dir.child(\"lodge\").symlinkTo(\"fizz\", listener);\n                ws.child(\"linkdir\").symlinkTo(\"dir\", listener);\n                return true;\n            }\n        });\n        ArtifactArchiver aa \u003d new ArtifactArchiver(\"dir/lodge, linkdir/fizz\");\n        aa.setFollowSymlinks(false);\n        aa.setAllowEmptyArchive(true);\n        p.getPublishersList().add(aa);\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        FilePath ws \u003d b.getWorkspace();\n        assertNotNull(ws);\n        assumeTrue(\"May not be testable on Windows:\\n\" + JenkinsRule.getLog(b), ws.child(\"dir/lodge\").exists());\n        List\u003cFreeStyleBuild.Artifact\u003e artifacts \u003d b.getArtifacts();\n        assertEquals(0, artifacts.size());\n    }","advisory":"JENKINS-5597"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.followSymlinksEnabledForOldConfig:void()","methodSource":"@LocalData\n    @Test public void followSymlinksEnabledForOldConfig() throws Exception {\n\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(Functions.isWindows() ? \"sample-windows\" : \"sample\", FreeStyleProject.class);\n\n        FreeStyleBuild b \u003d p.scheduleBuild2(0).get();\n        assumeTrue(\"May not be testable on Windows:\\n\" + JenkinsRule.getLog(b), b.getResult() \u003d\u003d Result.SUCCESS);\n        FilePath ws \u003d b.getWorkspace();\n        assertNotNull(ws);\n        List\u003cFreeStyleBuild.Artifact\u003e artifacts \u003d b.getArtifacts();\n        assertEquals(2, artifacts.size());\n        VirtualFile[] kids \u003d b.getArtifactManager().root().child(\"dir\").list();\n        assertEquals(1, kids.length);\n        assertEquals(\"lodge\", kids[0].getName());\n        VirtualFile[] linkkids \u003d b.getArtifactManager().root().child(\"linkdir\").list();\n        assertEquals(1, kids.length);\n        assertEquals(\"fizz\", linkkids[0].getName());\n    }"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.outsideSymlinks:void()","methodSource":"@Issue(\"SECURITY-162\")\n    @Test public void outsideSymlinks() throws Exception {\n        final FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                if (ws \u003d\u003d null) {\n                    return false;\n                }\n                ws.child(\"hack\").symlinkTo(p.getConfigFile().getFile().getAbsolutePath(), listener);\n                return true;\n            }\n        });\n        p.getPublishersList().add(new ArtifactArchiver(\"hack\", \"\", false, true));\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        List\u003cFreeStyleBuild.Artifact\u003e artifacts \u003d b.getArtifacts();\n        assertEquals(1, artifacts.size());\n        FreeStyleBuild.Artifact artifact \u003d artifacts.get(0);\n        assertEquals(\"hack\", artifact.relativePath);\n        VirtualFile[] kids \u003d b.getArtifactManager().root().list();\n        assertEquals(1, kids.length);\n        assertEquals(\"hack\", kids[0].getName());\n        assertFalse(kids[0].isDirectory());\n        assertFalse(kids[0].isFile());\n        assertFalse(kids[0].exists());\n        j.createWebClient().assertFails(b.getUrl() + \"artifact/hack\", HttpURLConnection.HTTP_NOT_FOUND);\n    }","advisory":"SECURITY-162"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testArchivingSkippedWhenOnlyIfSuccessfulChecked:void()","methodSource":"@Test\n    @Issue(\"JENKINS-22698\")\n    public void testArchivingSkippedWhenOnlyIfSuccessfulChecked() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ArtifactArchiver aa \u003d new ArtifactArchiver(\"f\");\n        project.getPublishersList().replaceBy(Collections.singleton(aa));\n        project.getBuildersList().replaceBy(Collections.singleton(new CreateArtifactAndFail()));\n        j.buildAndAssertStatus(Result.FAILURE, project);\n        assertTrue(project.getBuildByNumber(1).getHasArtifacts());\n        aa.setOnlyIfSuccessful(true);\n        j.buildAndAssertStatus(Result.FAILURE, project);\n        assertTrue(project.getBuildByNumber(1).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(2).getHasArtifacts());\n    }","advisory":"JENKINS-22698"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.configRoundTrip:void()","methodSource":"@Issue(\"JENKINS-29922\")\n    @Test\n    public void configRoundTrip() throws Exception {\n        ArtifactArchiver aa \u003d new ArtifactArchiver(\"*.txt\");\n        assertNull(Util.fixEmpty(aa.getExcludes())); // null and \"\" behave the same, we do not care which it is\n        assertEquals(\"{artifacts\u003d*.txt}\", DescribableModel.uninstantiate_(aa).toString()); // but we do care that excludes is considered to be at the default\n        aa \u003d j.configRoundtrip(aa);\n        assertEquals(\"*.txt\", aa.getArtifacts());\n        assertNull(Util.fixEmpty(aa.getExcludes()));\n        assertEquals(\"{artifacts\u003d*.txt}\", DescribableModel.uninstantiate_(aa).toString());\n        aa.setExcludes(\"README.txt\");\n        aa \u003d j.configRoundtrip(aa);\n        assertEquals(\"*.txt\", aa.getArtifacts());\n        assertEquals(\"README.txt\", aa.getExcludes());\n        assertEquals(\"{artifacts\u003d*.txt, excludes\u003dREADME.txt}\", DescribableModel.uninstantiate_(aa).toString()); // TreeMap, so attributes will be sorted\n    }","advisory":"JENKINS-29922"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testDefaultExcludesOn:void()","methodSource":"@Test\n    @Issue(\"JENKINS-20086\")\n    public void testDefaultExcludesOn() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n\n        Publisher artifactArchiver \u003d new ArtifactArchiver(\"**\", \"\", false, false, true, true);\n        project.getPublishersList().replaceBy(Collections.singleton(artifactArchiver));\n        project.getBuildersList().replaceBy(Collections.singleton(new CreateDefaultExcludesArtifact()));\n\n        j.buildAndAssertSuccess(project); // #1\n        VirtualFile artifacts \u003d project.getBuildByNumber(1).getArtifactManager().root();\n        assertFalse(artifacts.child(\".svn\").child(\"file\").exists());\n        assertFalse(artifacts.child(\"dir\").child(\".svn\").child(\"file\").exists());\n\n    }","advisory":"JENKINS-20086"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.testDefaultExcludesOff:void()","methodSource":"@Test\n    @Issue(\"JENKINS-20086\")\n    public void testDefaultExcludesOff() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n\n        ArtifactArchiver artifactArchiver \u003d new ArtifactArchiver(\"**\");\n        artifactArchiver.setDefaultExcludes(false);\n        project.getPublishersList().replaceBy(Collections.singleton(artifactArchiver));\n        project.getBuildersList().replaceBy(Collections.singleton(new CreateDefaultExcludesArtifact()));\n\n        j.buildAndAssertSuccess(project); // #1\n        VirtualFile artifacts \u003d project.getBuildByNumber(1).getArtifactManager().root();\n        assertTrue(artifacts.child(\".svn\").child(\"file\").exists());\n        assertTrue(artifacts.child(\"dir\").child(\".svn\").child(\"file\").exists());\n    }","advisory":"JENKINS-20086"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.latestOnlyMigration:void()","methodSource":"@LocalData\n    @Test public void latestOnlyMigration() throws Exception {\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(\"sample\", FreeStyleProject.class);\n        assertNotNull(p);\n        @SuppressWarnings(\"deprecation\")\n        LogRotator lr \u003d p.getLogRotator();\n        assertNotNull(lr);\n        assertEquals(1, lr.getArtifactNumToKeep());\n        String xml \u003d p.getConfigFile().asString();\n        assertFalse(xml, xml.contains(\"\u003clatestOnly\u003e\"));\n        assertTrue(xml, xml.contains(\"\u003cartifactNumToKeep\u003e1\u003c/artifactNumToKeep\u003e\"));\n    }"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.fingerprintMigration:void()","methodSource":"@LocalData\n    @Test public void fingerprintMigration() throws Exception {\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(Functions.isWindows() ? \"sample-windows\" : \"sample\", FreeStyleProject.class);\n        assertNotNull(p);\n        String xml \u003d p.getConfigFile().asString();\n        assertFalse(xml, xml.contains(\"\u003crecordBuildArtifacts\u003e\"));\n        assertTrue(xml, xml.contains(\"\u003cfingerprint\u003etrue\u003c/fingerprint\u003e\"));\n        assertFalse(xml, xml.contains(\"\u003chudson.tasks.Fingerprinter\u003e\"));\n        ArtifactArchiver aa \u003d p.getPublishersList().get(ArtifactArchiver.class);\n        assertTrue(aa.isFingerprint());\n        FreeStyleBuild b1 \u003d j.buildAndAssertSuccess(p);\n        assertEquals(1, b1.getArtifacts().size());\n        Fingerprinter.FingerprintAction a \u003d b1.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(a);\n        assertEquals(\"[stuff]\", a.getFingerprints().keySet().toString());\n    }"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.archiveNotReadable:void()","methodSource":"@Test @Issue(\"JENKINS-21905\")\n    public void archiveNotReadable() throws Exception {\n        assumeFalse(Functions.isWindows()); // No permission support\n\n        final String FILENAME \u003d \"myfile\";\n        DumbSlave slave \u003d j.createOnlineSlave(Label.get(\"target\"));\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath file \u003d build.getWorkspace().child(FILENAME);\n                file.act(new RemoveReadPermission());\n                return true;\n            }\n        });\n        p.getPublishersList().add(new ArtifactArchiver(FILENAME));\n        p.setAssignedNode(slave);\n\n        FreeStyleBuild build \u003d j.buildAndAssertStatus(Result.FAILURE, p);\n        assumeFalse(FILENAME + \" should not be readable by \" + System.getProperty(\"user.name\"), new File(build.getWorkspace().child(FILENAME).getRemote()).canRead());\n        String expectedPath \u003d build.getWorkspace().child(FILENAME).getRemote();\n        j.assertLogContains(\"ERROR: Step ‘Archive the artifacts’ failed: java.nio.file.AccessDeniedException: \" + expectedPath, build);\n        assertThat(\"No stacktrace shown\", build.getLog(31), Matchers.iterableWithSize(lessThan(30)));\n    }","advisory":"JENKINS-21905"},{"className":"hudson.tasks.ArtifactArchiverTest","methodSignature":"hudson.tasks.ArtifactArchiverTest.lengthOfArtifactIsCorrect_eventForInvalidSymlink:void()","methodSource":"@Test\n    @Issue(\"JENKINS-55049\")\n    public void lengthOfArtifactIsCorrect_eventForInvalidSymlink() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                FilePath ws \u003d build.getWorkspace();\n                if (ws \u003d\u003d null) {\n                    return false;\n                }\n                FilePath dir \u003d ws.child(\"dir\");\n                dir.mkdirs();\n                dir.child(\"existant\").write(\"contents\", null);\n                dir.child(\"_toExistant\").symlinkTo(\"existant\", listener);\n                dir.child(\"_nonexistant\").symlinkTo(\"nonexistant\", listener);\n                return true;\n            }\n        });\n        ArtifactArchiver aa \u003d new ArtifactArchiver(\"dir/**\");\n        aa.setAllowEmptyArchive(true);\n        p.getPublishersList().add(aa);\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n        FilePath ws \u003d b.getWorkspace();\n        assertNotNull(ws);\n        List\u003cFreeStyleBuild.Artifact\u003e artifacts \u003d b.getArtifacts();\n        assertEquals(3, artifacts.size());\n        artifacts.sort(Comparator.comparing(Run.Artifact::getFileName));\n\n        // invalid symlink \u003d\u003e size of 0\n        FreeStyleBuild.Artifact artifact \u003d artifacts.get(0);\n        assertEquals(\"dir/_nonexistant\", artifact.relativePath);\n        assertEquals(0, artifact.getFileSize());\n        assertEquals(\"\", artifact.getLength());\n\n        // valid symlink \u003d\u003e same size of the target, 8\n        artifact \u003d artifacts.get(1);\n        assertEquals(\"dir/_toExistant\", artifact.relativePath);\n        assertEquals(8, artifact.getFileSize());\n        assertEquals(\"8\", artifact.getLength());\n\n        // existant \u003d\u003e size of 8\n        artifact \u003d artifacts.get(2);\n        assertEquals(\"dir/existant\", artifact.relativePath);\n        assertEquals(8, artifact.getFileSize());\n        assertEquals(\"8\", artifact.getLength());\n    }","advisory":"JENKINS-55049"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.validateBatchFileCommandEOL:void()","methodSource":"@Issue(\"JENKINS-7478\")\n    @Test\n    public void validateBatchFileCommandEOL() {\n        BatchFile obj \u003d new BatchFile(\"echo A\\necho B\\recho C\");\n        rule.assertStringContains(obj.getCommand(), \"echo A\\r\\necho B\\r\\necho C\");\n    }","advisory":"JENKINS-7478"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.validateBatchFileContents:void()","methodSource":"@Test\n    public void validateBatchFileContents() {\n        BatchFile obj \u003d new BatchFile(\"echo A\\necho B\\recho C\");\n        rule.assertStringContains(obj.getContents(), \"echo A\\r\\necho B\\r\\necho C\\r\\nexit %ERRORLEVEL%\");\n    }"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.windowsNonZeroErrorlevelsShouldMakeBuildUnstable:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void windowsNonZeroErrorlevelsShouldMakeBuildUnstable() throws Exception {\n        assumeTrue(Functions.isWindows());\n        for (int exitCode : new int [] {Integer.MIN_VALUE, -1, 1, Integer.MAX_VALUE}) {\n            nonZeroErrorlevelShouldMakeBuildUnstable(exitCode);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.windowsNonZeroErrorlevelsShouldBreakTheBuildByDefault:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void windowsNonZeroErrorlevelsShouldBreakTheBuildByDefault() throws Exception {\n        assumeTrue(Functions.isWindows());\n        for (int exitCode : new int [] {Integer.MIN_VALUE, -1, 1, Integer.MAX_VALUE}) {\n            nonZeroErrorlevelShouldBreakTheBuildByDefault(exitCode);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.windowsErrorlevelsShouldBreakTheBuildIfNotMatching:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void windowsErrorlevelsShouldBreakTheBuildIfNotMatching() throws Exception {\n        assumeTrue(Functions.isWindows());\n        for (int exitCode : new int [] {Integer.MIN_VALUE, -1, 1, Integer.MAX_VALUE}) {\n            nonZeroErrorlevelShouldBreakTheBuildIfNotMatching(exitCode);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.windowsErrorlevel0ShouldNeverMakeTheBuildUnstable:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void windowsErrorlevel0ShouldNeverMakeTheBuildUnstable() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        PretendSlave slave \u003d rule.createPretendSlave(new BatchFileTest.ReturnCodeFakeLauncher(0));\n        for (Integer unstableReturn : new Integer [] {null, 0, 1}) {\n            FreeStyleProject p \u003d rule.createFreeStyleProject();\n            p.getBuildersList().add(createNewBatchTask(\"\", unstableReturn));\n            p.setAssignedNode(slave);\n            rule.buildAndAssertSuccess(p);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.windowsUnstableCodeZeroIsSameAsUnset:void()","methodSource":"@Issue(\"JENKINS-23786\")\n    @Test\n    public void windowsUnstableCodeZeroIsSameAsUnset() {\n        assumeTrue(Functions.isWindows());\n\n        /* Creating unstable\u003d0 produces unstable\u003dnull */\n        assertNull(createNewBatchTask(\"\", 0).getUnstableReturn());\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.BatchFileTest","methodSignature":"hudson.tasks.BatchFileTest.canLoadUnstableReturnFromDisk:void()","methodSource":"@Issue(\"JENKINS-40894\")\n    @Test\n    @LocalData\n    public void canLoadUnstableReturnFromDisk() {\n        FreeStyleProject p \u003d (FreeStyleProject) rule.jenkins.getItemByFullName(\"batch\");\n        BatchFile batchFile \u003d (BatchFile) p.getBuildersList().get(0);\n        assertEquals(\"unstable return\", (Integer) 1, batchFile.getUnstableReturn());\n    }","advisory":"JENKINS-40894"},{"className":"hudson.tasks.BuildTriggerTest","methodSignature":"hudson.tasks.BuildTriggerTest.buildTrigger:void()","methodSource":"@Test\n    public void buildTrigger() throws Exception {\n        doTriggerTest(false, Result.SUCCESS, Result.UNSTABLE);\n    }"},{"className":"hudson.tasks.BuildTriggerTest","methodSignature":"hudson.tasks.BuildTriggerTest.triggerEvenWhenUnstable:void()","methodSource":"@Test\n    public void triggerEvenWhenUnstable() throws Exception {\n        doTriggerTest(true, Result.UNSTABLE, Result.FAILURE);\n    }"},{"className":"hudson.tasks.BuildTriggerTest","methodSignature":"hudson.tasks.BuildTriggerTest.downstreamProjectSecurity:void()","methodSource":"@Test\n    public void downstreamProjectSecurity() throws Exception {\n        j.jenkins.setSecurityRealm(new LegacySecurityRealm());\n        ProjectMatrixAuthorizationStrategy auth \u003d new ProjectMatrixAuthorizationStrategy();\n        auth.add(Jenkins.READ, \"alice\");\n        auth.add(Computer.BUILD, \"alice\");\n        auth.add(Computer.BUILD, \"anonymous\");\n        j.jenkins.setAuthorizationStrategy(auth);\n        final FreeStyleProject upstream \u003d j. createFreeStyleProject(\"upstream\");\n        Authentication alice \u003d User.getOrCreateByIdOrFullName(\"alice\").impersonate2();\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().add(new MockQueueItemAuthenticator().authenticate(\"upstream\", alice));\n        Map\u003cPermission, Set\u003cString\u003e\u003e perms \u003d new HashMap\u003c\u003e();\n        perms.put(Item.READ, Set.of(\"alice\"));\n        perms.put(Item.CONFIGURE, Set.of(\"alice\"));\n        upstream.addProperty(new AuthorizationMatrixProperty(perms));\n        String downstreamName \u003d \"d0wnstr3am\"; // do not clash with English messages!\n        FreeStyleProject downstream \u003d j.createFreeStyleProject(downstreamName);\n        upstream.getPublishersList().add(new BuildTrigger(downstreamName, Result.SUCCESS));\n        j.jenkins.rebuildDependencyGraph();\n        /* The long way:\n        WebClient wc \u003d createWebClient();\n        wc.login(\"alice\");\n        HtmlPage page \u003d wc.getHistoryPageFilter(upstream, \"configure\");\n        HtmlForm config \u003d page.getFormByName(\"config\");\n        config.getButtonByCaption(\"Add post-build action\").click(); // lib/hudson/project/config-publishers2.jelly\n        page.getAnchorByText(\"Build other projects\").click();\n        HtmlTextInput childProjects \u003d config.getInputByName(\"buildTrigger.childProjects\");\n        childProjects.setValue(downstreamName);\n        submit(config);\n        */\n        assertEquals(List.of(downstream), upstream.getDownstreamProjects());\n        // Downstream projects whose existence we are not aware of will silently not be triggered:\n        assertDoCheck(alice, Messages.BuildTrigger_NoSuchProject(downstreamName, \"upstream\"), upstream, downstreamName);\n        assertDoCheck(alice, null, null, downstreamName);\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(upstream);\n        j.assertLogNotContains(downstreamName, b);\n        j.waitUntilNoActivity();\n        assertNull(downstream.getLastBuild());\n        // If we can see them, but not build them, that is a warning (but this is in cleanUp so the build is still considered a success):\n        Map\u003cPermission, Set\u003cString\u003e\u003e grantedPermissions \u003d new HashMap\u003c\u003e();\n        grantedPermissions.put(Item.READ, Set.of(\"alice\"));\n        AuthorizationMatrixProperty amp \u003d new AuthorizationMatrixProperty(grantedPermissions);\n        downstream.addProperty(amp);\n        assertDoCheck(alice, Messages.BuildTrigger_you_have_no_permission_to_build_(downstreamName), upstream, downstreamName);\n        assertDoCheck(alice, null, null, downstreamName);\n        b \u003d j.buildAndAssertSuccess(upstream);\n        j.assertLogContains(downstreamName, b);\n        j.waitUntilNoActivity();\n        assertNull(downstream.getLastBuild());\n        // If we can build them, then great:\n        grantedPermissions.put(Item.BUILD, Set.of(\"alice\"));\n        downstream.removeProperty(amp);\n        amp \u003d new AuthorizationMatrixProperty(grantedPermissions);\n        downstream.addProperty(amp);\n        assertDoCheck(alice, null, upstream, downstreamName);\n        assertDoCheck(alice, null, null, downstreamName);\n        b \u003d j.buildAndAssertSuccess(upstream);\n        j.assertLogContains(downstreamName, b);\n        j.waitUntilNoActivity();\n        FreeStyleBuild b2 \u003d downstream.getLastBuild();\n        assertNotNull(b2);\n        Cause.UpstreamCause cause \u003d b2.getCause(Cause.UpstreamCause.class);\n        assertNotNull(cause);\n        assertEquals(b, cause.getUpstreamRun());\n        // Now if we have configured some QIA’s but they are not active on this job, we should normally fall back to running as anonymous. Which would normally have no permissions:\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().replace(new MockQueueItemAuthenticator().authenticate(\"upstream\", Jenkins.ANONYMOUS2));\n        assertDoCheck(alice, Messages.BuildTrigger_you_have_no_permission_to_build_(downstreamName), upstream, downstreamName);\n        assertDoCheck(alice, null, null, downstreamName);\n        b \u003d j.buildAndAssertSuccess(upstream);\n        j.assertLogNotContains(downstreamName, b);\n        j.waitUntilNoActivity();\n        assertEquals(1, downstream.getLastBuild().number);\n        // Unless we explicitly granted them:\n        grantedPermissions.put(Item.READ, Set.of(\"anonymous\"));\n        grantedPermissions.put(Item.BUILD, Set.of(\"anonymous\"));\n        downstream.removeProperty(amp);\n        amp \u003d new AuthorizationMatrixProperty(grantedPermissions);\n        downstream.addProperty(amp);\n        assertDoCheck(alice, null, upstream, downstreamName);\n        assertDoCheck(alice, null, null, downstreamName);\n        b \u003d j.buildAndAssertSuccess(upstream);\n        j.assertLogContains(downstreamName, b);\n        j.waitUntilNoActivity();\n        assertEquals(2, downstream.getLastBuild().number);\n        FreeStyleProject simple \u003d j.createFreeStyleProject(\"simple\");\n        j.buildAndAssertSuccess(simple);\n        // Finally, in legacy mode we run as SYSTEM:\n        grantedPermissions.clear(); // similar behavior but different message if DescriptorImpl removed\n        downstream.removeProperty(amp);\n        amp \u003d new AuthorizationMatrixProperty(grantedPermissions);\n        downstream.addProperty(amp);\n        QueueItemAuthenticatorConfiguration.get().getAuthenticators().clear();\n        assertDoCheck(alice, Messages.BuildTrigger_NoSuchProject(downstreamName, \"upstream\"), upstream, downstreamName);\n        assertDoCheck(alice, null, null, downstreamName);\n        b \u003d j.buildAndAssertSuccess(upstream);\n        j.assertLogContains(downstreamName, b);\n        j.waitUntilNoActivity();\n        assertEquals(3, downstream.getLastBuild().number);\n        j.buildAndAssertSuccess(simple);\n    }"},{"className":"hudson.tasks.BuildTriggerTest","methodSignature":"hudson.tasks.BuildTriggerTest.downstreamProjectShouldObserveCompletedParent:void()","methodSource":"@Test @Issue(\"JENKINS-20989\")\n    public void downstreamProjectShouldObserveCompletedParent() throws Exception {\n        j.jenkins.setNumExecutors(2);\n\n        final FreeStyleProject us \u003d j.createFreeStyleProject();\n        us.getPublishersList().add(new BuildTrigger(\"downstream\", true));\n\n        FreeStyleProject ds \u003d createDownstreamProject();\n        ds.getBuildersList().add(new AssertTriggerBuildCompleted(us, j.createWebClient()));\n\n        j.jenkins.rebuildDependencyGraph();\n\n        j.buildAndAssertSuccess(us);\n\n        j.waitUntilNoActivity();\n        final FreeStyleBuild dsb \u003d ds.getBuildByNumber(1);\n        assertNotNull(dsb);\n        j.waitForCompletion(dsb);\n        j.assertBuildStatusSuccess(dsb);\n    }","advisory":"JENKINS-20989"},{"className":"hudson.tasks.BuildTriggerTest","methodSignature":"hudson.tasks.BuildTriggerTest.allDownstreamProjectsShouldObserveCompletedParent:void()","methodSource":"@Test @Issue(\"JENKINS-20989\")\n    public void allDownstreamProjectsShouldObserveCompletedParent() throws Exception {\n        j.jenkins.setNumExecutors(3);\n\n        final FreeStyleProject us \u003d j.createFreeStyleProject();\n        us.getPublishersList().add(new SlowTrigger(\"downstream,downstream2\"));\n\n        FreeStyleProject ds \u003d createDownstreamProject();\n        ds.getBuildersList().add(new AssertTriggerBuildCompleted(us, j.createWebClient()));\n        FreeStyleProject ds2 \u003d j.createFreeStyleProject(\"downstream2\");\n        ds2.setQuietPeriod(0);\n        ds2.getBuildersList().add(new AssertTriggerBuildCompleted(us, j.createWebClient()));\n\n        j.jenkins.rebuildDependencyGraph();\n\n        FreeStyleBuild upstream \u003d j.buildAndAssertSuccess(us);\n\n        FreeStyleBuild dsb \u003d assertDownstreamBuild(ds, upstream);\n        j.waitForCompletion(dsb);\n        j.assertBuildStatusSuccess(dsb);\n\n        dsb \u003d assertDownstreamBuild(ds2, upstream);\n        j.waitForCompletion(dsb);\n        j.assertBuildStatusSuccess(dsb);\n    }","advisory":"JENKINS-20989"},{"className":"hudson.tasks.CommandInterpreterTest","methodSignature":"hudson.tasks.CommandInterpreterTest.ensurePluginCommandInterpretersCanBeLoaded:void()","methodSource":"@Issue(\"JENKINS-63168\")\n    @Test\n    @LocalData\n    public void ensurePluginCommandInterpretersCanBeLoaded() {\n        final Builder builder \u003d j.jenkins.getItemByFullName(\"a\", FreeStyleProject.class).getBuildersList().get(0);\n        assertThat(builder, instanceOf(TestCommandInterpreter.class));\n\n        try {\n            ((TestCommandInterpreter) builder).getConfiguredLocalRules().isEmpty();\n        } catch (NullPointerException ex) {\n            Assert.fail(\"getConfiguredLocalRules must not return null\");\n        }\n        try {\n            ((TestCommandInterpreter) builder).buildEnvVarsFilterRules();\n        } catch (NullPointerException ex) {\n            Assert.fail(\"buildEnvVarsFilterRules must not throw\");\n        }\n    }","advisory":"JENKINS-63168"},{"className":"hudson.tasks.EnvVarsInConfigTasksTest","methodSignature":"hudson.tasks.EnvVarsInConfigTasksTest.testFreeStyleShellOnAgent:void()","methodSource":"@Test\n    public void testFreeStyleShellOnAgent() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        if (Functions.isWindows()) {\n            project.getBuildersList().add(new BatchFile(\"echo %JAVA_HOME%\"));\n        } else {\n            project.getBuildersList().add(new Shell(\"echo \\\"$JAVA_HOME\\\"\"));\n        }\n        project.setJDK(j.jenkins.getJDK(\"varJDK\"));\n\n        // set appropriate SCM to get the necessary build files\n        project.setScm(new ExtractResourceSCM(getClass().getResource(\n                \"/simple-projects.zip\")));\n\n        // test the regular agent - variable not expanded\n        project.setAssignedLabel(agentRegular.getSelfLabel());\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n\n        j.assertLogContains(DUMMY_LOCATION_VARNAME, build);\n\n        // test the agent with prepared environment\n        project.setAssignedLabel(agentEnv.getSelfLabel());\n        build \u003d j.buildAndAssertSuccess(project);\n\n        // Check variable was expanded\n        j.assertLogNotContains(DUMMY_LOCATION_VARNAME, build);\n    }"},{"className":"hudson.tasks.EnvVarsInConfigTasksTest","methodSignature":"hudson.tasks.EnvVarsInConfigTasksTest.testFreeStyleMavenOnAgent:void()","methodSource":"@Test\n    public void testFreeStyleMavenOnAgent() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setJDK(j.jenkins.getJDK(\"varJDK\"));\n        project.setScm(new ExtractResourceSCM(getClass().getResource(\n                \"/simple-projects.zip\")));\n\n        project.getBuildersList().add(\n                          new Maven(\"test\", \"varMaven\", \"pom.xml${\"\n                            + DUMMY_LOCATION_VARNAME + \"}\", \"\", \"\",\n                            false));\n\n        // test the regular agent - variable not expanded\n        project.setAssignedLabel(agentRegular.getSelfLabel());\n        FreeStyleBuild build \u003d j.buildAndAssertStatus(Result.FAILURE, project);\n\n        j.assertLogContains(DUMMY_LOCATION_VARNAME, build);\n\n        // test the agent with prepared environment\n        project.setAssignedLabel(agentEnv.getSelfLabel());\n        build \u003d j.buildAndAssertSuccess(project);\n\n        // Check variable was expanded\n        j.assertLogNotContains(DUMMY_LOCATION_VARNAME, build);\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.fingerprintDependencies:void()","methodSource":"@Test public void fingerprintDependencies() throws Exception {\n        FreeStyleProject upstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        FreeStyleProject downstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n\n        j.jenkins.rebuildDependencyGraph();\n\n        List\u003cAbstractProject\u003e downstreamProjects \u003d upstream.getDownstreamProjects();\n        List\u003cAbstractProject\u003e upstreamProjects \u003d downstream.getUpstreamProjects();\n\n        assertEquals(1, downstreamProjects.size());\n        assertEquals(1, upstreamProjects.size());\n        assertTrue(upstreamProjects.contains(upstream));\n        assertTrue(downstreamProjects.contains(downstream));\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.presentFingerprintActionIsReused:void()","methodSource":"@Test public void presentFingerprintActionIsReused() throws Exception {\n        FreeStyleProject project \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        project.getBuildersList().add(new FingerprintAddingBuilder());\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(project);\n\n        assertThat(build.getActions(Fingerprinter.FingerprintAction.class), hasSize(1));\n\n        Fingerprinter.FingerprintAction action \u003d build.getAction(Fingerprinter.FingerprintAction.class);\n        assertThat(action.getRecords().keySet(), containsInAnyOrder(singleFiles2[0], singleFiles[0]));\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.multipleUpstreamDependencies:void()","methodSource":"@Test public void multipleUpstreamDependencies() throws Exception {\n        FreeStyleProject upstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        FreeStyleProject upstream2 \u003d createFreeStyleProjectWithFingerprints(singleContents2, singleFiles2);\n        FreeStyleProject downstream \u003d createFreeStyleProjectWithFingerprints(doubleContents, doubleFiles);\n\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(upstream2);\n        j.buildAndAssertSuccess(downstream);\n\n        j.jenkins.rebuildDependencyGraph();\n\n        List\u003cAbstractProject\u003e downstreamProjects \u003d upstream.getDownstreamProjects();\n        List\u003cAbstractProject\u003e downstreamProjects2 \u003d upstream2.getDownstreamProjects();\n        List\u003cAbstractProject\u003e upstreamProjects \u003d downstream.getUpstreamProjects();\n\n        assertEquals(1, downstreamProjects.size());\n        assertEquals(1, downstreamProjects2.size());\n        assertEquals(2, upstreamProjects.size());\n        assertTrue(upstreamProjects.contains(upstream));\n        assertTrue(upstreamProjects.contains(upstream2));\n        assertTrue(downstreamProjects.contains(downstream));\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.multipleDownstreamDependencies:void()","methodSource":"@Test public void multipleDownstreamDependencies() throws Exception {\n        FreeStyleProject upstream \u003d createFreeStyleProjectWithFingerprints(doubleContents, doubleFiles);\n        FreeStyleProject downstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        FreeStyleProject downstream2 \u003d createFreeStyleProjectWithFingerprints(singleContents2, singleFiles2);\n\n        j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n        j.buildAndAssertSuccess(downstream2);\n\n        j.jenkins.rebuildDependencyGraph();\n\n        List\u003cAbstractProject\u003e downstreamProjects \u003d upstream.getDownstreamProjects();\n        List\u003cAbstractProject\u003e upstreamProjects \u003d downstream.getUpstreamProjects();\n        List\u003cAbstractProject\u003e upstreamProjects2 \u003d downstream2.getUpstreamProjects();\n\n        assertEquals(2, downstreamProjects.size());\n        assertEquals(1, upstreamProjects.size());\n        assertEquals(1, upstreamProjects2.size());\n        assertTrue(upstreamProjects.contains(upstream));\n        assertTrue(upstreamProjects2.contains(upstream));\n        assertTrue(downstreamProjects.contains(downstream));\n        assertTrue(downstreamProjects.contains(downstream2));\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.dependencyExclusion:void()","methodSource":"@Test public void dependencyExclusion() throws Exception {\n        FreeStyleProject upstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        FreeStyleProject downstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n\n        FreeStyleBuild upstreamBuild \u003d j.buildAndAssertSuccess(upstream);\n        j.buildAndAssertSuccess(downstream);\n\n        upstreamBuild.delete();\n\n        Jenkins.get().rebuildDependencyGraph();\n\n        List\u003cAbstractProject\u003e upstreamProjects \u003d downstream.getUpstreamProjects();\n        List\u003cAbstractProject\u003e downstreamProjects \u003d upstream.getDownstreamProjects();\n\n        assertEquals(0, upstreamProjects.size());\n        assertEquals(0, downstreamProjects.size());\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.circularDependency:void()","methodSource":"@Test public void circularDependency() throws Exception {\n        FreeStyleProject p \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n\n        j.buildAndAssertSuccess(p);\n        j.buildAndAssertSuccess(p);\n\n        Jenkins.get().rebuildDependencyGraph();\n\n        List\u003cAbstractProject\u003e upstreamProjects \u003d p.getUpstreamProjects();\n        List\u003cAbstractProject\u003e downstreamProjects \u003d p.getDownstreamProjects();\n\n        assertEquals(0, upstreamProjects.size());\n        assertEquals(0, downstreamProjects.size());\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.matrixDependency:void()","methodSource":"@Test public void matrixDependency() throws Exception {\n        MatrixProject matrixProject \u003d j.jenkins.createProject(MatrixProject.class, \"p\");\n        matrixProject.setAxes(new AxisList(new Axis(\"foo\", \"a\", \"b\")));\n        FreeStyleProject freestyleProject \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        addFingerprinterToProject(matrixProject, singleContents, singleFiles);\n\n        j.jenkins.rebuildDependencyGraph();\n\n        j.buildAndAssertSuccess(matrixProject);\n        j.buildAndAssertSuccess(freestyleProject);\n        j.waitUntilNoActivity();\n\n        j.jenkins.rebuildDependencyGraph();\n\n        RunList\u003cFreeStyleBuild\u003e builds \u003d freestyleProject.getBuilds();\n        assertEquals(\"There should only be one FreestyleBuild\", 1, builds.size());\n        FreeStyleBuild build \u003d builds.iterator().next();\n        assertEquals(Result.SUCCESS, build.getResult());\n        List\u003cAbstractProject\u003e downstream \u003d j.jenkins.getDependencyGraph().getDownstream(matrixProject);\n        assertTrue(downstream.contains(freestyleProject));\n        List\u003cAbstractProject\u003e upstream \u003d j.jenkins.getDependencyGraph().getUpstream(freestyleProject);\n        assertTrue(upstream.contains(matrixProject));\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.projectRename:void()","methodSource":"@Test public void projectRename() throws Exception {\n        FreeStyleProject upstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        FreeStyleProject downstream \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n\n        FreeStyleBuild upstreamBuild \u003d j.buildAndAssertSuccess(upstream);\n        FreeStyleBuild downstreamBuild \u003d j.buildAndAssertSuccess(downstream);\n\n        String oldUpstreamName \u003d upstream.getName();\n        String oldDownstreamName \u003d downstream.getName();\n\n        // Verify that owner entry in fingerprint record is changed\n        // after source project is renamed\n        upstream.renameTo(renamedProject1);\n        Fingerprinter.FingerprintAction action \u003d upstreamBuild.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(action);\n        Collection\u003cFingerprint\u003e fingerprints \u003d action.getFingerprints().values();\n        for (Fingerprint f : fingerprints) {\n            assertTrue(f.getOriginal().is(upstream));\n            assertEquals(renamedProject1, f.getOriginal().getName());\n            assertNotEquals(f.getOriginal().getName(), oldUpstreamName);\n        }\n\n        action \u003d downstreamBuild.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(action);\n        fingerprints \u003d action.getFingerprints().values();\n        for (Fingerprint f : fingerprints) {\n            assertTrue(f.getOriginal().is(upstream));\n            assertEquals(renamedProject1, f.getOriginal().getName());\n            assertNotEquals(f.getOriginal().getName(), oldUpstreamName);\n        }\n\n        // Verify that usage entry in fingerprint record is changed after\n        // sink project is renamed\n        downstream.renameTo(renamedProject2);\n        upstream.renameTo(renamedProject1);\n        action \u003d upstreamBuild.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(action);\n        fingerprints \u003d action.getFingerprints().values();\n        for (Fingerprint f : fingerprints) {\n            List\u003cString\u003e jobs \u003d f.getJobs();\n\n            assertTrue(jobs.contains(renamedProject2));\n            assertFalse(jobs.contains(oldDownstreamName));\n        }\n\n        action \u003d downstreamBuild.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(action);\n        fingerprints \u003d action.getFingerprints().values();\n        for (Fingerprint f : fingerprints) {\n            List\u003cString\u003e jobs \u003d f.getJobs();\n\n            assertTrue(jobs.contains(renamedProject2));\n            assertFalse(jobs.contains(oldDownstreamName));\n        }\n    }"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.actionSerialization:void()","methodSource":"@Issue(\"JENKINS-17125\")\n    @LocalData\n    @Test public void actionSerialization() throws Exception {\n        FreeStyleProject job \u003d j.jenkins.getItemByFullName(Functions.isWindows() ? \"j-windows\" : \"j\", FreeStyleProject.class);\n        assertNotNull(job);\n        FreeStyleBuild build \u003d job.getBuildByNumber(2);\n        assertNotNull(build);\n        Fingerprinter.FingerprintAction action \u003d build.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(action);\n        assertEquals(build, action.getBuild());\n        if (Functions.isWindows()) {\n            assertEquals(\"{a\u003d603bc9e16cc05bdbc5e595969f42e3b8}\", action.getRecords().toString());\n        } else {\n            assertEquals(\"{a\u003d2d5fac981a2e865baf0e15db655c7d63}\", action.getRecords().toString());\n        }\n        j.buildAndAssertSuccess(job);\n        job._getRuns().purgeCache(); // force build records to be reloaded\n        build \u003d job.getBuildByNumber(3);\n        assertNotNull(build);\n        System.out.println(new XmlFile(new File(build.getRootDir(), \"build.xml\")).asString());\n        action \u003d build.getAction(Fingerprinter.FingerprintAction.class);\n        assertNotNull(action);\n        assertEquals(build, action.getBuild());\n        if (Functions.isWindows()) {\n            assertEquals(\"{a\u003da97a39fb51de0eee9fd908174dccc304}\", action.getRecords().toString());\n        } else {\n            assertEquals(\"{a\u003df31efcf9afe30617d6c46b919e702822}\", action.getRecords().toString());\n        }\n    }","advisory":"JENKINS-17125"},{"className":"hudson.tasks.FingerprinterTest","methodSignature":"hudson.tasks.FingerprinterTest.fingerprintCleanup:void()","methodSource":"@SuppressWarnings(\"unchecked\")\n    // TODO randomly fails: for p3.upstreamProjects expected:\u003c[hudson.model.FreeStyleProject@590e5b8[test0]]\u003e but was:\u003c[]\u003e\n    @Issue(\"JENKINS-18417\")\n    @Test\n    public void fingerprintCleanup() throws Exception {\n        // file names shouldn\u0027t matter\n        FreeStyleProject p1 \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n        FreeStyleProject p2 \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles2);\n        FreeStyleProject p3 \u003d createFreeStyleProjectWithFingerprints(singleContents, singleFiles);\n\n        j.buildAndAssertSuccess(p1);\n        j.buildAndAssertSuccess(p2);\n        j.buildAndAssertSuccess(p3);\n\n        Fingerprint f \u003d j.jenkins._getFingerprint(Util.getDigestOf(singleContents[0] + System.lineSeparator()));\n        assertNotNull(f);\n        assertEquals(3, f.getUsages().size());\n\n        j.jenkins.rebuildDependencyGraph();\n\n        assertEquals(List.of(p1), p2.getUpstreamProjects());\n        assertEquals(List.of(p1), p3.getUpstreamProjects());\n        assertEquals(new HashSet(Arrays.asList(p2, p3)), new HashSet(p1.getDownstreamProjects()));\n\n        // discard the p3 records\n        p3.delete();\n        new FingerprintCleanupThread().execute(StreamTaskListener.fromStdout());\n\n        j.jenkins.rebuildDependencyGraph();\n\n        // records for p3 should have been deleted now\n        assertEquals(2, f.getUsages().size());\n        assertEquals(List.of(p1), p2.getUpstreamProjects());\n        assertEquals(List.of(p2), p1.getDownstreamProjects());\n\n\n        // do a new build in p2 #2 that points to a separate fingerprints\n        p2.getBuildersList().clear();\n        p2.getPublishersList().clear();\n        addFingerprinterToProject(p2, singleContents2, singleFiles2);\n        j.buildAndAssertSuccess(p2);\n\n        // another garbage collection that gets rid of p2 records from the fingerprint\n        p2.getBuildByNumber(1).delete();\n        new FingerprintCleanupThread().execute(StreamTaskListener.fromStdout());\n\n        assertEquals(1, f.getUsages().size());\n    }","advisory":"JENKINS-18417"},{"className":"hudson.tasks.LogRotatorTest","methodSignature":"hudson.tasks.LogRotatorTest.successVsFailure:void()","methodSource":"@Test\n    public void successVsFailure() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setLogRotator(new LogRotator(-1, 2, -1, -1));\n        j.buildAndAssertSuccess(project); // #1\n        project.getBuildersList().replaceBy(Set.of(new FailureBuilder()));\n        j.buildAndAssertStatus(Result.FAILURE, project); // #2\n        j.buildAndAssertStatus(Result.FAILURE, project); // #3\n        assertEquals(1, numberOf(project.getLastSuccessfulBuild()));\n        project.getBuildersList().replaceBy(Collections.emptySet());\n        j.buildAndAssertSuccess(project); // #4\n        assertEquals(4, numberOf(project.getLastSuccessfulBuild()));\n        assertNull(project.getBuildByNumber(1));\n        assertNull(project.getBuildByNumber(2));\n        assertEquals(3, numberOf(project.getLastFailedBuild()));\n    }"},{"className":"hudson.tasks.LogRotatorTest","methodSignature":"hudson.tasks.LogRotatorTest.stableVsUnstable:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2417\")\n    public void stableVsUnstable() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setLogRotator(new LogRotator(-1, 2, -1, -1));\n        j.buildAndAssertSuccess(project); // #1\n        project.getPublishersList().replaceBy(Set.of(new TestsFail()));\n        j.buildAndAssertStatus(Result.UNSTABLE, project); // #2\n        j.buildAndAssertStatus(Result.UNSTABLE, project); // #3\n        assertEquals(1, numberOf(project.getLastStableBuild()));\n        project.getPublishersList().replaceBy(Collections.emptySet());\n        j.buildAndAssertSuccess(project); // #4\n        assertNull(project.getBuildByNumber(1));\n        assertNull(project.getBuildByNumber(2));\n    }","advisory":"JENKINS-2417"},{"className":"hudson.tasks.LogRotatorTest","methodSignature":"hudson.tasks.LogRotatorTest.artifactDelete:void()","methodSource":"@Test\n    @Issue(\"JENKINS-834\")\n    public void artifactDelete() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setLogRotator(new LogRotator(-1, 6, -1, 2));\n        project.getPublishersList().replaceBy(Set.of(new ArtifactArchiver(\"f\", \"\", true, false)));\n        j.buildAndAssertStatus(Result.FAILURE, project); // #1\n        assertFalse(project.getBuildByNumber(1).getHasArtifacts());\n        project.getBuildersList().replaceBy(Set.of(new CreateArtifact()));\n        j.buildAndAssertSuccess(project); // #2\n        assertTrue(project.getBuildByNumber(2).getHasArtifacts());\n        project.getBuildersList().replaceBy(Arrays.asList(new CreateArtifact(), new FailureBuilder()));\n        j.buildAndAssertStatus(Result.FAILURE, project); // #3\n        assertTrue(project.getBuildByNumber(2).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(3).getHasArtifacts());\n        j.buildAndAssertStatus(Result.FAILURE, project); // #4\n        assertTrue(project.getBuildByNumber(2).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(3).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(4).getHasArtifacts());\n        j.buildAndAssertStatus(Result.FAILURE, project); // #5\n        assertTrue(project.getBuildByNumber(2).getHasArtifacts());\n        assertFalse(\"no better than #4\", project.getBuildByNumber(3).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(4).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(5).getHasArtifacts());\n        project.getBuildersList().replaceBy(Set.of(new CreateArtifact()));\n        j.buildAndAssertSuccess(project); // #6\n        assertFalse(\"#2 is still lastSuccessful until #6 is complete\", project.getBuildByNumber(2).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(3).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(4).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(5).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(6).getHasArtifacts());\n        j.buildAndAssertSuccess(project); // #7\n        assertNull(project.getBuildByNumber(1));\n        assertNotNull(project.getBuildByNumber(2));\n        assertFalse(\"lastSuccessful was #6 for ArtifactArchiver\", project.getBuildByNumber(2).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(3).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(4).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(5).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(6).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(7).getHasArtifacts());\n        j.buildAndAssertSuccess(project); // #8\n        assertNull(project.getBuildByNumber(2));\n        assertNotNull(project.getBuildByNumber(3));\n        assertFalse(project.getBuildByNumber(3).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(4).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(5).getHasArtifacts());\n        assertFalse(project.getBuildByNumber(6).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(7).getHasArtifacts());\n        assertTrue(project.getBuildByNumber(8).getHasArtifacts());\n    }","advisory":"JENKINS-834"},{"className":"hudson.tasks.LogRotatorTest","methodSignature":"hudson.tasks.LogRotatorTest.artifactsRetainedWhileBuilding:void()","methodSource":"@Test\n    @Issue(\"JENKINS-27836\")\n    public void artifactsRetainedWhileBuilding() throws Exception {\n        j.getInstance().setNumExecutors(3);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setBuildDiscarder(new LogRotator(-1, 3, -1, 1));\n        StallBuilder sync \u003d new StallBuilder();\n        p.getBuildersList().replaceBy(Arrays.asList(new CreateArtifact(), sync));\n        p.setConcurrentBuild(true);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e futureRun1 \u003d p.scheduleBuild2(0);\n        FreeStyleBuild run1 \u003d futureRun1.waitForStart();\n        sync.waitFor(run1.getNumber(), 1, TimeUnit.SECONDS);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e futureRun2 \u003d p.scheduleBuild2(0);\n        FreeStyleBuild run2 \u003d futureRun2.waitForStart();\n        sync.waitFor(run2.getNumber(), 1, TimeUnit.SECONDS);\n        QueueTaskFuture\u003cFreeStyleBuild\u003e futureRun3 \u003d p.scheduleBuild2(0);\n        FreeStyleBuild run3 \u003d futureRun3.waitForStart();\n        sync.waitFor(run3.getNumber(), 1, TimeUnit.SECONDS);\n        assertThat(\"we haven\u0027t released run1\u0027s guard\", run1.isBuilding(), is(true));\n        assertThat(\"we haven\u0027t released run2\u0027s guard\", run2.isBuilding(), is(true));\n        assertThat(\"we haven\u0027t released run3\u0027s guard\", run3.isBuilding(), is(true));\n        assertThat(\"we have artifacts in run1\", run1.getHasArtifacts(), is(true));\n        assertThat(\"we have artifacts in run2\", run2.getHasArtifacts(), is(true));\n        assertThat(\"we have artifacts in run3\", run3.getHasArtifacts(), is(true));\n        sync.release(run1.getNumber());\n        futureRun1.get();\n        assertThat(\"we have released run1\u0027s guard\", run1.isBuilding(), is(false));\n        assertThat(\"we haven\u0027t released run2\u0027s guard\", run2.isBuilding(), is(true));\n        assertThat(\"we haven\u0027t released run3\u0027s guard\", run3.isBuilding(), is(true));\n        assertThat(\"run1 is last stable build\", p.getLastStableBuild(), is(run1));\n        assertThat(\"run1 is last successful build\", p.getLastSuccessfulBuild(), is(run1));\n        assertThat(\"we have artifacts in run1\", run1.getHasArtifacts(), is(true));\n        assertThat(\"CRITICAL ASSERTION: we have artifacts in run2\", run2.getHasArtifacts(), is(true));\n        assertThat(\"we have artifacts in run3\", run3.getHasArtifacts(), is(true));\n        sync.release(run2.getNumber());\n        futureRun2.get();\n        assertThat(\"we have released run2\u0027s guard\", run2.isBuilding(), is(false));\n        assertThat(\"we haven\u0027t released run3\u0027s guard\", run3.isBuilding(), is(true));\n        assertThat(\"we have no artifacts in run1\", run1.getHasArtifacts(), is(false));\n        assertThat(\"run2 is last stable build\", p.getLastStableBuild(), is(run2));\n        assertThat(\"run2 is last successful build\", p.getLastSuccessfulBuild(), is(run2));\n        assertThat(\"we have artifacts in run2\", run2.getHasArtifacts(), is(true));\n        assertThat(\"we have artifacts in run3\", run3.getHasArtifacts(), is(true));\n        sync.release(run3.getNumber());\n        futureRun3.get();\n        assertThat(\"we have released run3\u0027s guard\", run3.isBuilding(), is(false));\n        assertThat(\"we have no artifacts in run1\", run1.getHasArtifacts(), is(false));\n        assertThat(\"we have no artifacts in run2\", run2.getHasArtifacts(), is(false));\n        assertThat(\"run3 is last stable build\", p.getLastStableBuild(), is(run3));\n        assertThat(\"run3 is last successful build\", p.getLastSuccessfulBuild(), is(run3));\n        assertThat(\"we have artifacts in run3\", run3.getHasArtifacts(), is(true));\n    }","advisory":"JENKINS-27836"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.configRoundtrip:void()","methodSource":"@Test public void configRoundtrip() throws Exception {\n        j.jenkins.getDescriptorByType(Maven.DescriptorImpl.class).setInstallations(); // reset\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new Maven(\"a\", null, \"b.pom\", \"c\u003dd\", \"-e\", true));\n\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(p, \"configure\");\n\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        j.submit(form);\n\n        Maven m \u003d p.getBuildersList().get(Maven.class);\n        assertNotNull(m);\n        assertEquals(\"a\", m.targets);\n        assertNull(\"found \" + m.mavenName, m.mavenName);\n        assertEquals(\"b.pom\", m.pom);\n        assertEquals(\"c\u003dd\", m.properties);\n        assertEquals(\"-e\", m.jvmOptions);\n        assertTrue(m.usesPrivateRepository());\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.withNodeProperty:void()","methodSource":"@Test public void withNodeProperty() throws Exception {\n        MavenInstallation maven \u003d ToolInstallations.configureDefaultMaven();\n        String mavenHome \u003d maven.getHome();\n        String mavenHomeVar \u003d \"${VAR_MAVEN}\" + mavenHome.substring(3);\n        String mavenVar \u003d mavenHome.substring(0, 3);\n        MavenInstallation varMaven \u003d new MavenInstallation(\"varMaven\", mavenHomeVar, JenkinsRule.NO_PROPERTIES);\n        j.jenkins.getDescriptorByType(Maven.DescriptorImpl.class).setInstallations(maven, varMaven);\n\n        JDK jdk \u003d j.jenkins.getJDK(\"default\");\n        String javaHome \u003d jdk.getHome();\n        String javaHomeVar \u003d \"${VAR_JAVA}\" + javaHome.substring(3);\n        String javaVar \u003d javaHome.substring(0, 3);\n        JDK varJDK \u003d new JDK(\"varJDK\", javaHomeVar);\n        j.jenkins.getJDKs().add(varJDK);\n        j.jenkins.getNodeProperties().replaceBy(\n                Set.of(new EnvironmentVariablesNodeProperty(\n                        new EnvironmentVariablesNodeProperty.Entry(\"VAR_MAVEN\", mavenVar), new EnvironmentVariablesNodeProperty.Entry(\"VAR_JAVA\",\n                                javaVar))));\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(new Maven(\"--help\", varMaven.getName()));\n        project.setJDK(varJDK);\n\n        j.buildAndAssertSuccess(project);\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.withParameter:void()","methodSource":"@Test public void withParameter() throws Exception {\n        MavenInstallation maven \u003d ToolInstallations.configureDefaultMaven();\n        String mavenHome \u003d maven.getHome();\n        String mavenHomeVar \u003d \"${VAR_MAVEN}\" + mavenHome.substring(3);\n        String mavenVar \u003d mavenHome.substring(0, 3);\n        MavenInstallation varMaven \u003d new MavenInstallation(\"varMaven\", mavenHomeVar, JenkinsRule.NO_PROPERTIES);\n        j.jenkins.getDescriptorByType(Maven.DescriptorImpl.class).setInstallations(maven, varMaven);\n\n        JDK jdk \u003d j.jenkins.getJDK(\"default\");\n        String javaHome \u003d jdk.getHome();\n        String javaHomeVar \u003d \"${VAR_JAVA}\" + javaHome.substring(3);\n        String javaVar \u003d javaHome.substring(0, 3);\n        JDK varJDK \u003d new JDK(\"varJDK\", javaHomeVar);\n        j.jenkins.getJDKs().add(varJDK);\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"VAR_MAVEN\", \"XXX\"),\n                new StringParameterDefinition(\"VAR_JAVA\", \"XXX\")));\n        project.getBuildersList().add(new Maven(\"--help\", varMaven.getName()));\n        project.setJDK(varJDK);\n\n        FreeStyleBuild build \u003d project.scheduleBuild2(0, new LegacyCodeCause(),\n                new ParametersAction(\n                        new StringParameterValue(\"VAR_MAVEN\", mavenVar),\n                        new StringParameterValue(\"VAR_JAVA\", javaVar))).get();\n\n        j.assertBuildStatusSuccess(build);\n\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.globalConfigAjax:void()","methodSource":"@Test public void globalConfigAjax() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"configureTools\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        HtmlButton b \u003d j.getButtonByCaption(f, \"Add Maven\");\n        b.click();\n        j.findPreviousInputElement(b, \"name\").setValue(\"myMaven\");\n        j.findPreviousInputElement(b, \"home\").setValue(\"/tmp/foo\");\n        j.submit(f);\n        verify();\n\n        // another submission and verify it survives a roundtrip\n        p \u003d j.createWebClient().goTo(\"configure\");\n        f \u003d p.getFormByName(\"config\");\n        j.submit(f);\n        verify();\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.sensitiveParameters:void()","methodSource":"@Test @WithTimeout(500) public void sensitiveParameters() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        ParametersDefinitionProperty pdb \u003d new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"string\", \"defaultValue\", \"string description\"),\n                new PasswordParameterDefinition(\"password\", \"12345\", \"password description\"),\n                new StringParameterDefinition(\"string2\", \"Value2\", \"string description\")\n        );\n        project.addProperty(pdb);\n        project.setScm(new ExtractResourceSCM(getClass().getResource(\"maven-empty.zip\")));\n        project.getBuildersList().add(new Maven(\"clean package\", null));\n\n        FreeStyleBuild build \u003d j.waitForCompletion(project.scheduleBuild2(0).waitForStart());\n        j.assertLogNotContains(\"-Dpassword\u003d12345\", build);\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.parametersReferencedFromPropertiesShouldRetainBackslashes:void()","methodSource":"@Test\n    public void parametersReferencedFromPropertiesShouldRetainBackslashes() throws Exception {\n        final String properties \u003d \"global.path\u003d$GLOBAL_PATH\\nmy.path\u003d$PATH\\\\\\\\Dir\";\n        final StringParameterDefinition parameter \u003d new StringParameterDefinition(\"PATH\", \"C:\\\\Windows\");\n        final EnvironmentVariablesNodeProperty.Entry envVar \u003d new EnvironmentVariablesNodeProperty.Entry(\"GLOBAL_PATH\", \"D:\\\\Jenkins\");\n\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        // This test implements legacy behavior, when Build Variables are injected by default\n        project.getBuildersList().add(new Maven(\"--help\", null, null, properties, null,\n                false, null, null, true));\n        project.addProperty(new ParametersDefinitionProperty(parameter));\n        j.jenkins.getNodeProperties().replaceBy(Set.of(\n                new EnvironmentVariablesNodeProperty(envVar)\n        ));\n\n        FreeStyleBuild build \u003d j.waitForCompletion(project.scheduleBuild2(0).waitForStart());\n        j.assertLogContains(\"-Dmy.path\u003dC:\\\\Windows\\\\Dir\", build);\n        j.assertLogContains(\"-Dglobal.path\u003dD:\\\\Jenkins\", build);\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.defaultSettingsProvider:void()","methodSource":"@Test public void defaultSettingsProvider() throws Exception {\n        {\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            p.getBuildersList().add(new Maven(\"a\", null, \"a.pom\", \"c\u003dd\", \"-e\", true));\n\n            Maven m \u003d p.getBuildersList().get(Maven.class);\n            assertNotNull(m);\n            assertEquals(DefaultSettingsProvider.class, m.getSettings().getClass());\n            assertEquals(DefaultGlobalSettingsProvider.class, m.getGlobalSettings().getClass());\n        }\n\n        {\n            GlobalMavenConfig globalMavenConfig \u003d GlobalMavenConfig.get();\n            assertNotNull(\"No global Maven Config available\", globalMavenConfig);\n            globalMavenConfig.setSettingsProvider(new FilePathSettingsProvider(\"/tmp/settings.xml\"));\n            globalMavenConfig.setGlobalSettingsProvider(new FilePathGlobalSettingsProvider(\"/tmp/global-settings.xml\"));\n\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            p.getBuildersList().add(new Maven(\"b\", null, \"b.pom\", \"c\u003dd\", \"-e\", true));\n\n            Maven m \u003d p.getBuildersList().get(Maven.class);\n            assertEquals(FilePathSettingsProvider.class, m.getSettings().getClass());\n            assertEquals(\"/tmp/settings.xml\", ((FilePathSettingsProvider) m.getSettings()).getPath());\n            assertEquals(\"/tmp/global-settings.xml\", ((FilePathGlobalSettingsProvider) m.getGlobalSettings()).getPath());\n        }\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.testNullHome:void()","methodSource":"@Issue(\"JENKINS-18898\")\n    @Test public void testNullHome() {\n        EnvVars env \u003d new EnvVars();\n        new MavenInstallation(\"_\", \"\", Collections.emptyList()).buildEnvVars(env);\n        assertTrue(env.isEmpty());\n    }","advisory":"JENKINS-18898"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.specialCharsInBuildVariablesPassedAsProperties:void()","methodSource":"@Issue(\"JENKINS-26684\")\n    @Test public void specialCharsInBuildVariablesPassedAsProperties() throws Exception {\n        MavenInstallation maven \u003d ToolInstallations.configureMaven3();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new Maven(\"--help\", maven.getName()));\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"tilde\", \"~\"),\n                new StringParameterDefinition(\"exclamation_mark\", \"!\"),\n                new StringParameterDefinition(\"at_sign\", \"@\"),\n                new StringParameterDefinition(\"sharp\", \"#\"),\n                new StringParameterDefinition(\"dollar\", \"$\"),\n                new StringParameterDefinition(\"percent\", \"%\"),\n                new StringParameterDefinition(\"circumflex\", \"^\"),\n                new StringParameterDefinition(\"ampersand\", \"\u0026\"),\n                new StringParameterDefinition(\"asterix\", \"*\"),\n                new StringParameterDefinition(\"parentheses\", \"()\"),\n                new StringParameterDefinition(\"underscore\", \"_\"),\n                new StringParameterDefinition(\"plus\", \"+\"),\n                new StringParameterDefinition(\"braces\", \"{}\"),\n                new StringParameterDefinition(\"brackets\", \"[]\"),\n                new StringParameterDefinition(\"colon\", \":\"),\n                new StringParameterDefinition(\"semicolon\", \";\"),\n                new StringParameterDefinition(\"quote\", \"\\\"\"),\n                new StringParameterDefinition(\"apostrophe\", \"\u0027\"),\n                new StringParameterDefinition(\"backslash\", \"\\\\\"),\n                new StringParameterDefinition(\"pipe\", \"|\"),\n                new StringParameterDefinition(\"angle_brackets\", \"\u003c\u003e\"),\n                new StringParameterDefinition(\"comma\", \",\"),\n                new StringParameterDefinition(\"period\", \".\"),\n                new StringParameterDefinition(\"slash\", \"/\"),\n                new StringParameterDefinition(\"question_mark\", \"?\"),\n                new StringParameterDefinition(\"space\", \" \")\n        ));\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(p);\n    }","advisory":"JENKINS-26684"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.doPassBuildVariablesOptionally:void()","methodSource":"@Test public void doPassBuildVariablesOptionally() throws Exception {\n        MavenInstallation maven \u003d ToolInstallations.configureMaven3();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.updateByXml((Source) new StreamSource(getClass().getResourceAsStream(\"MavenTest/doPassBuildVariablesOptionally.xml\")));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(p);\n        assertTrue(\"Build variables injection should be enabled by default when loading from XML\", p.getBuildersList().get(Maven.class).isInjectBuildVariables());\n        j.assertLogContains(\"-DNAME\u003dVALUE\", build);\n\n        p.getBuildersList().clear();\n        p.getBuildersList().add(new Maven(\"--help\", maven.getName(), null, null, null, false, null, null, false/*do not inject*/));\n\n        build \u003d j.buildAndAssertSuccess(p);\n        j.assertLogNotContains(\"-DNAME\u003dVALUE\", build);\n\n        p.getBuildersList().clear();\n        p.getBuildersList().add(new Maven(\"--help\", maven.getName(), null, null, null, false, null, null, true/*do inject*/));\n\n        build \u003d j.buildAndAssertSuccess(p);\n        j.assertLogContains(\"-DNAME\u003dVALUE\", build);\n\n        assertFalse(\"Build variables injection should be disabled by default\", new Maven(\"\", \"\").isInjectBuildVariables());\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.doAlwaysPassProperties:void()","methodSource":"@Test public void doAlwaysPassProperties() throws Exception {\n        MavenInstallation maven \u003d ToolInstallations.configureMaven3();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        String properties \u003d \"TEST_PROP1\u003dVAL1\\nTEST_PROP2\u003dVAL2\";\n\n        p.getBuildersList().add(new Maven(\"--help\", maven.getName(), null, properties, null, false, null,\n                null, false/*do not inject build variables*/));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(p);\n        j.assertLogContains(\"-DTEST_PROP1\u003dVAL1\", build);\n        j.assertLogContains(\"-DTEST_PROP2\u003dVAL2\", build);\n\n        p.getBuildersList().clear();\n        p.getBuildersList().add(new Maven(\"--help\", maven.getName(), null, properties, null, false, null,\n                null, true/*do inject build variables*/));\n        build \u003d j.buildAndAssertSuccess(p);\n        j.assertLogContains(\"-DTEST_PROP1\u003dVAL1\", build);\n        j.assertLogContains(\"-DTEST_PROP2\u003dVAL2\", build);\n    }"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.checkMavenInstallationEquals:void()","methodSource":"@Issue(\"JENKINS-34138\")\n    @Test public void checkMavenInstallationEquals() throws Exception {\n        MavenInstallation maven \u003d ToolInstallations.configureMaven3();\n        MavenInstallation maven2 \u003d ToolInstallations.configureMaven3();\n        assertEquals(maven.hashCode(), maven2.hashCode());\n        assertEquals(maven, maven2);\n    }","advisory":"JENKINS-34138"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.checkMavenInstallationNotEquals:void()","methodSource":"@Issue(\"JENKINS-34138\")\n    @Test public void checkMavenInstallationNotEquals() throws Exception {\n        MavenInstallation maven3 \u003d ToolInstallations.configureMaven3();\n        MavenInstallation maven2 \u003d ToolInstallations.configureDefaultMaven();\n        assertNotEquals(maven3.hashCode(), maven2.hashCode());\n        assertNotEquals(maven3, maven2);\n    }","advisory":"JENKINS-34138"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.submitPossibleWithoutJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void submitPossibleWithoutJellyTrace() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage htmlPage \u003d wc.goTo(\"configureTools\");\n        HtmlForm configForm \u003d htmlPage.getFormByName(\"config\");\n        j.assertGoodStatus(j.submit(configForm));\n    }","advisory":"JENKINS-65288"},{"className":"hudson.tasks.MavenTest","methodSignature":"hudson.tasks.MavenTest.submitPossibleWithJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void submitPossibleWithJellyTrace() throws Exception {\n        boolean currentValue \u003d JellyFacet.TRACE;\n        try {\n            JellyFacet.TRACE \u003d true;\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            HtmlPage htmlPage \u003d wc.goTo(\"configureTools\");\n            HtmlForm configForm \u003d htmlPage.getFormByName(\"config\");\n            j.assertGoodStatus(j.submit(configForm));\n        } finally {\n            JellyFacet.TRACE \u003d currentValue;\n        }\n    }","advisory":"JENKINS-65288"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.validateShellCommandEOL:void()","methodSource":"@Test\n    public void validateShellCommandEOL() {\n        Shell obj \u003d new Shell(\"echo A\\r\\necho B\\recho C\");\n        rule.assertStringContains(obj.getCommand(), \"echo A\\necho B\\necho C\");\n    }"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.validateShellContents:void()","methodSource":"@Test\n    public void validateShellContents() {\n        Shell obj \u003d new Shell(\"echo A\\r\\necho B\\recho C\");\n        rule.assertStringContains(obj.getContents(), \"\\necho A\\necho B\\necho C\");\n    }"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.testBasic:void()","methodSource":"@Test\n    public void testBasic() throws Exception {\n        Assume.assumeFalse(\"If we\u0027re on Windows, don\u0027t bother doing this\", Functions.isWindows());\n\n        // TODO: define a FakeLauncher implementation with easymock so that this kind of assertions can be simplified.\n        PretendSlave s \u003d rule.createPretendSlave(p -\u003e {\n            // test the command line argument.\n            List\u003cString\u003e cmds \u003d p.cmds();\n            rule.assertStringContains(\"/bin/sh\", cmds.get(0));\n            rule.assertStringContains(\"-xe\", cmds.get(1));\n            assertTrue(new File(cmds.get(2)).exists());\n\n            // fake the execution\n            PrintStream ps \u003d new PrintStream(p.stdout());\n            ps.println(\"Hudson was here\");\n            ps.close();\n\n            return new FakeLauncher.FinishedProc(0);\n        });\n        FreeStyleProject p \u003d rule.createFreeStyleProject();\n        p.getBuildersList().add(new Shell(\"echo abc\"));\n        p.setAssignedNode(s);\n\n        FreeStyleBuild b \u003d rule.buildAndAssertSuccess(p);\n\n        assertEquals(1, s.numLaunch);\n        assertTrue(IOUtils.toString(b.getLogInputStream(), StandardCharsets.UTF_8).contains(\"Hudson was here\"));\n    }"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.unixExitCodes1To255ShouldMakeBuildUnstable:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void unixExitCodes1To255ShouldMakeBuildUnstable() throws Exception {\n        assumeFalse(Functions.isWindows());\n        for (int exitCode : new int [] {1, 2, 255}) {\n            nonZeroExitCodeShouldMakeBuildUnstable(exitCode);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.unixExitCodes1To255ShouldBreakTheBuildByDefault:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void unixExitCodes1To255ShouldBreakTheBuildByDefault() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        for (int exitCode : new int [] {1, 2, 255}) {\n            nonZeroExitCodeShouldBreakTheBuildByDefault(exitCode);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.unixExitCodes1To255ShouldBreakTheBuildIfNotMatching:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void unixExitCodes1To255ShouldBreakTheBuildIfNotMatching() throws Exception {\n        assumeFalse(Functions.isWindows());\n        for (int exitCode : new int [] {1, 2, 255}) {\n            nonZeroExitCodeShouldBreakTheBuildIfNotMatching(exitCode);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.unixExitCodes0ShouldNeverMakeTheBuildUnstable:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23786\")\n    public void unixExitCodes0ShouldNeverMakeTheBuildUnstable() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        PretendSlave slave \u003d rule.createPretendSlave(new ReturnCodeFakeLauncher(0));\n        for (Integer unstableReturn : new Integer [] {null, 0, 1}) {\n            FreeStyleProject p \u003d rule.createFreeStyleProject();\n            p.getBuildersList().add(createNewShell(\"\", unstableReturn));\n            p.setAssignedNode(slave);\n            rule.buildAndAssertSuccess(p);\n        }\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.unixUnstableCodeZeroIsSameAsUnset:void()","methodSource":"@Issue(\"JENKINS-23786\")\n    @Test\n    public void unixUnstableCodeZeroIsSameAsUnset() {\n        assumeFalse(Functions.isWindows());\n\n        /* Creating unstable\u003d0 produces unstable\u003dnull */\n        assertNull(createNewShell(\"\", 0).getUnstableReturn());\n    }","advisory":"JENKINS-23786"},{"className":"hudson.tasks.ShellTest","methodSignature":"hudson.tasks.ShellTest.canLoadUnstableReturnFromDisk:void()","methodSource":"@Issue(\"JENKINS-40894\")\n    @Test\n    @LocalData\n    public void canLoadUnstableReturnFromDisk() {\n        FreeStyleProject p \u003d (FreeStyleProject) rule.jenkins.getItemByFullName(\"test\");\n        Shell shell \u003d (Shell) p.getBuildersList().get(0);\n        assertEquals(\"unstable return\", (Integer) 1, shell.getUnstableReturn());\n    }","advisory":"JENKINS-40894"},{"className":"hudson.tasks.UserAvatarResolverTest","methodSignature":"hudson.tasks.UserAvatarResolverTest.defaultImageIsReturnedIfRegexFails:void()","methodSource":"@Test\n    public void defaultImageIsReturnedIfRegexFails() {\n        String avatar \u003d UserAvatarResolver.resolve(User.getOrCreateByIdOrFullName(\"USER\"), \"meh\");\n        assertThat(avatar, endsWith(\"symbol-person-circle\"));\n    }"},{"className":"hudson.tasks.UserAvatarResolverTest","methodSignature":"hudson.tasks.UserAvatarResolverTest.resolverIsUsed:void()","methodSource":"@Test\n    public void resolverIsUsed() {\n        expUser \u003d User.getOrCreateByIdOrFullName(\"unique-user-not-used-in-anyother-test\");\n        String avatar \u003d UserAvatarResolver.resolve(expUser, \"20x20\");\n        assertEquals(\"http://myown.image\", avatar);\n    }"},{"className":"hudson.tasks.UserAvatarResolverTest","methodSignature":"hudson.tasks.UserAvatarResolverTest.noResolverCanFindAvatar:void()","methodSource":"@Test\n    public void noResolverCanFindAvatar() {\n        String avatar \u003d UserAvatarResolver.resolve(User.getOrCreateByIdOrFullName(\"USER\"), \"20x20\");\n        assertThat(avatar, endsWith(\"symbol-person-circle\"));\n    }"},{"className":"hudson.tasks.UserAvatarResolverTest","methodSignature":"hudson.tasks.UserAvatarResolverTest.iconSizeRegex:void()","methodSource":"@Test\n    @WithoutJenkins\n    public void iconSizeRegex() {\n        Matcher matcher \u003d UserAvatarResolver.iconSizeRegex.matcher(\"12x15\");\n        assertTrue(matcher.matches());\n        assertEquals(\"12\", matcher.group(1));\n        assertEquals(\"15\", matcher.group(2));\n    }"},{"className":"hudson.TcpSlaveAgentListenerTest","methodSignature":"hudson.TcpSlaveAgentListenerTest.headers:void()","methodSource":"@Test\n    public void headers() throws Exception {\n        WebClient wc \u003d r.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        r.getInstance().setSlaveAgentPort(-1);\n        wc.assertFails(\"tcpSlaveAgentListener\", HttpURLConnection.HTTP_NOT_FOUND);\n\n        r.getInstance().setSlaveAgentPort(0);\n        Page p \u003d wc.goTo(\"tcpSlaveAgentListener\", \"text/plain\");\n        assertEquals(HttpURLConnection.HTTP_OK, p.getWebResponse().getStatusCode());\n        assertThat(p.getWebResponse().getResponseHeaderValue(\"X-Instance-Identity\"), notNullValue());\n    }"},{"className":"hudson.TcpSlaveAgentListenerTest","methodSignature":"hudson.TcpSlaveAgentListenerTest.diagnostics:void()","methodSource":"@Test\n    public void diagnostics() throws Exception {\n        r.getInstance().setSlaveAgentPort(0);\n        int p \u003d r.jenkins.getTcpSlaveAgentListener().getPort();\n        WebClient wc \u003d r.createWebClient();\n\n        TextPage text \u003d wc.getPage(new URI(\"http://localhost:\" + p + \"/\").toURL());\n        String c \u003d text.getContent();\n        assertThat(c, containsString(Jenkins.VERSION));\n\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        Page page \u003d wc.getPage(new URI(\"http://localhost:\" + p + \"/xxx\").toURL());\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, page.getWebResponse().getStatusCode());\n    }"},{"className":"hudson.tools.BatchCommandInstallerTest","methodSignature":"hudson.tools.BatchCommandInstallerTest.validateBatchCommandInstallerCommandEOL:void()","methodSource":"@Test\n    public void validateBatchCommandInstallerCommandEOL() {\n        BatchCommandInstaller obj \u003d new BatchCommandInstaller(\"\", \"echo A\\necho B\\recho C\", \"\");\n        rule.assertStringContains(obj.getCommand(), \"echo A\\r\\necho B\\r\\necho C\");\n    }"},{"className":"hudson.tools.CommandInstallerTest","methodSignature":"hudson.tools.CommandInstallerTest.validateCommandInstallerCommandEOL:void()","methodSource":"@Test\n    public void validateCommandInstallerCommandEOL() {\n        CommandInstaller obj \u003d new CommandInstaller(\"\", \"echo A\\r\\necho B\\recho C\", \"\");\n        rule.assertStringContains(obj.getCommand(), \"echo A\\necho B\\necho C\");\n    }"},{"className":"hudson.tools.InstallerTranslatorTest","methodSignature":"hudson.tools.InstallerTranslatorTest.offlineNodeForJDK:void()","methodSource":"@Issue(\"JENKINS-23517\")\n    @Test public void offlineNodeForJDK() throws Exception {\n        Node slave \u003d new DumbSlave(\"disconnected-slave\", null, \"/wherever\", \"1\", Node.Mode.NORMAL, null, new JNLPLauncher(), RetentionStrategy.NOOP, Collections.emptyList());\n        String globalDefaultLocation \u003d \"/usr/lib/jdk\";\n        JDK jdk \u003d new JDK(\"my-jdk\", globalDefaultLocation, List.of(new InstallSourceProperty(List.of(new CommandInstaller(null, \"irrelevant\", \"/opt/jdk\")))));\n        r.jenkins.getJDKs().add(jdk);\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setJDK(jdk);\n        StreamTaskListener listener \u003d new StreamTaskListener(System.out, Charset.defaultCharset());\n        String javaHomeProp \u003d \"JAVA_HOME\"; // cf. JDK.buildEnvVars\n        assertEquals(globalDefaultLocation, p.getEnvironment(slave, listener).get(javaHomeProp));\n        String slaveDefaultLocation \u003d \"/System/JDK\";\n        slave.getNodeProperties().add(new ToolLocationNodeProperty(new ToolLocationNodeProperty.ToolLocation((ToolDescriptor) jdk.getDescriptor(), jdk.getName(), slaveDefaultLocation)));\n        assertEquals(slaveDefaultLocation, p.getEnvironment(slave, listener).get(javaHomeProp));\n    }","advisory":"JENKINS-23517"},{"className":"hudson.tools.InstallerTranslatorTest","methodSignature":"hudson.tools.InstallerTranslatorTest.multipleSlavesAndTools:void()","methodSource":"@Issue(\"JENKINS-17667\")\n    @Test public void multipleSlavesAndTools() throws Exception {\n        String jdk1Path \u003d Functions.isWindows() ? \"C:\\\\jdk1\" : \"/opt/jdk1\";\n        String jdk2Path \u003d Functions.isWindows() ? \"C:\\\\jdk2\" : \"/opt/jdk2\";\n        JDK jdk1 \u003d new JDK(\n                \"jdk1\",\n                null,\n                List.of(new InstallSourceProperty(List.of(\n                        Functions.isWindows()\n                                ? new BatchCommandInstaller(null, \"echo installed jdk1\", jdk1Path)\n                                : new CommandInstaller(null, \"echo installed jdk1\", jdk1Path)))));\n        JDK jdk2 \u003d new JDK(\n                \"jdk2\",\n                null,\n                List.of(new InstallSourceProperty(List.of(\n                        Functions.isWindows()\n                                ? new BatchCommandInstaller(null, \"echo installed jdk2\", jdk2Path)\n                                : new CommandInstaller(null, \"echo installed jdk2\", jdk2Path)))));\n        r.jenkins.getJDKs().add(jdk1);\n        r.jenkins.getJDKs().add(jdk2);\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setJDK(jdk1);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        p.setAssignedNode(r.createSlave());\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"installed jdk1\", b1);\n        r.assertLogContains(jdk1Path, b1);\n        p.setJDK(jdk2);\n        FreeStyleBuild b2 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"installed jdk2\", b2);\n        r.assertLogContains(jdk2Path, b2);\n        FreeStyleBuild b3 \u003d r.buildAndAssertSuccess(p);\n        // An installer is run for every build, and it is up to a CommandInstaller configuration to do any up-to-date check.\n        r.assertLogContains(\"installed jdk2\", b3);\n        r.assertLogContains(jdk2Path, b3);\n        p.setAssignedNode(r.createSlave());\n        FreeStyleBuild b4 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"installed jdk2\", b4);\n        r.assertLogContains(jdk2Path, b4);\n        p.setJDK(jdk1);\n        FreeStyleBuild b5 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"installed jdk1\", b5);\n        r.assertLogContains(jdk1Path, b5);\n        FreeStyleBuild b6 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"installed jdk1\", b6);\n        r.assertLogContains(jdk1Path, b6);\n    }","advisory":"JENKINS-17667"},{"className":"hudson.tools.InstallerTranslatorTest","methodSignature":"hudson.tools.InstallerTranslatorTest.testMessageLoggedWhenNoInstallerFound:void()","methodSource":"@Issue(\"JENKINS-26940\")\n    @Test\n    public void testMessageLoggedWhenNoInstallerFound() throws Exception {\n        final CommandInstaller ci \u003d new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final BatchCommandInstaller bci \u003d new BatchCommandInstaller(\"wrong2\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp \u003d new InstallSourceProperty(Arrays.asList(ci, bci));\n\n        JDK jdk \u003d new JDK(\"jdk\", null, List.of(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(ci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n        r.assertLogContains(hudson.tools.Messages.CannotBeInstalled(bci.getDescriptor().getDisplayName(), jdk.getName(), r.jenkins.getDisplayName()), b1);\n    }","advisory":"JENKINS-26940"},{"className":"hudson.tools.InstallerTranslatorTest","methodSignature":"hudson.tools.InstallerTranslatorTest.testNoMessageLoggedWhenAnyInstallerFound:void()","methodSource":"@Issue(\"JENKINS-26940\")\n    @Test\n    public void testNoMessageLoggedWhenAnyInstallerFound() throws Exception {\n        final AbstractCommandInstaller ci \u003d Functions.isWindows()\n                ? new BatchCommandInstaller(\"wrong1\", \"echo hello\", \"C:\\\\jdk\")\n                : new CommandInstaller(\"wrong1\", \"echo hello\", \"/opt/jdk\");\n        final AbstractCommandInstaller ci2 \u003d Functions.isWindows()\n                ? new BatchCommandInstaller(\"built-in\", \"echo hello\", \"C:\\\\jdk2\")\n                : new CommandInstaller(\"built-in\", \"echo hello\", \"/opt/jdk2\");\n        InstallSourceProperty isp \u003d new InstallSourceProperty(Arrays.asList(ci, ci2));\n\n        JDK jdk \u003d new JDK(\"jdk\", null, List.of(isp));\n        r.jenkins.getJDKs().add(jdk);\n\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setJDK(jdk);\n        p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo %JAVA_HOME%\") : new Shell(\"echo $JAVA_HOME\"));\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        r.assertLogNotContains(ci.getDescriptor().getDisplayName(), b1);\n    }","advisory":"JENKINS-26940"},{"className":"hudson.tools.ToolLocationNodePropertyTest","methodSignature":"hudson.tools.ToolLocationNodePropertyTest.formRoundTrip:void()","methodSource":"@Test\n    public void formRoundTrip() throws Exception {\n        MavenInstallation.DescriptorImpl mavenDescriptor \u003d j.jenkins.getDescriptorByType(MavenInstallation.DescriptorImpl.class);\n        mavenDescriptor.setInstallations(new MavenInstallation(\"maven\", \"XXX\", JenkinsRule.NO_PROPERTIES));\n        AntInstallation.DescriptorImpl antDescriptor \u003d j.jenkins.getDescriptorByType(AntInstallation.DescriptorImpl.class);\n        antDescriptor.setInstallations(new AntInstallation(\"ant\", \"XXX\", JenkinsRule.NO_PROPERTIES));\n        JDK.DescriptorImpl jdkDescriptor \u003d j.jenkins.getDescriptorByType(JDK.DescriptorImpl.class);\n        jdkDescriptor.setInstallations(new JDK(\"jdk\", \"XXX\"));\n\n        ToolLocationNodeProperty property \u003d new ToolLocationNodeProperty(\n                new ToolLocationNodeProperty.ToolLocation(jdkDescriptor, \"jdk\", \"foobar\"),\n                new ToolLocationNodeProperty.ToolLocation(mavenDescriptor, \"maven\", \"barzot\"),\n                new ToolLocationNodeProperty.ToolLocation(antDescriptor, \"ant\", \"zotfoo\"));\n        slave.getNodeProperties().add(property);\n\n        WebClient webClient \u003d j.createWebClient();\n        HtmlPage page \u003d webClient.getPage(slave, \"configure\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        j.submit(form);\n\n        assertEquals(1, slave.getNodeProperties().toList().size());\n\n        ToolLocationNodeProperty prop \u003d slave.getNodeProperties().get(ToolLocationNodeProperty.class);\n        assertEquals(3, prop.getLocations().size());\n\n        ToolLocationNodeProperty.ToolLocation location \u003d prop.getLocations().get(0);\n        assertEquals(jdkDescriptor, location.getType());\n        assertEquals(\"jdk\", location.getName());\n        assertEquals(\"foobar\", location.getHome());\n\n        location \u003d prop.getLocations().get(1);\n        assertEquals(mavenDescriptor, location.getType());\n        assertEquals(\"maven\", location.getName());\n        assertEquals(\"barzot\", location.getHome());\n\n        location \u003d prop.getLocations().get(2);\n        assertEquals(antDescriptor, location.getType());\n        assertEquals(\"ant\", location.getName());\n        assertEquals(\"zotfoo\", location.getHome());\n    }"},{"className":"hudson.tools.ToolLocationTest","methodSignature":"hudson.tools.ToolLocationTest.toolCompatibility:void()","methodSource":"@Test\n    @LocalData\n    public void toolCompatibility() {\n        Maven.MavenInstallation[] maven \u003d j.jenkins.getDescriptorByType(Maven.DescriptorImpl.class).getInstallations();\n        assertEquals(1, maven.length);\n        assertEquals(\"bar\", maven[0].getHome());\n        assertEquals(\"Maven 1\", maven[0].getName());\n\n        Ant.AntInstallation[] ant \u003d j.jenkins.getDescriptorByType(Ant.DescriptorImpl.class).getInstallations();\n        assertEquals(1, ant.length);\n        assertEquals(\"foo\", ant[0].getHome());\n        assertEquals(\"Ant 1\", ant[0].getName());\n\n        JDK[] jdk \u003d j.jenkins.getDescriptorByType(JDK.DescriptorImpl.class).getInstallations();\n        assertEquals(Arrays.asList(jdk), j.jenkins.getJDKs());\n        assertEquals(2, jdk.length); // JenkinsRule adds a \u0027default\u0027 JDK\n        assertEquals(\"default\", jdk[1].getName()); // make sure it\u0027s really that we\u0027re seeing\n        assertEquals(\"FOOBAR\", jdk[0].getHome());\n        assertEquals(\"FOOBAR\", jdk[0].getJavaHome());\n        assertEquals(\"1.6\", jdk[0].getName());\n    }"},{"className":"hudson.tools.ZipExtractionInstallerTest","methodSignature":"hudson.tools.ZipExtractionInstallerTest.onlyAdminCanReachTheDoCheck:void()","methodSource":"@Test\n    @Issue(\"SECURITY-794\")\n    public void onlyAdminCanReachTheDoCheck() throws Exception {\n        final String ADMIN \u003d \"admin\";\n        final String USER \u003d \"user\";\n\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().to(ADMIN)\n                .grant(Jenkins.READ).everywhere().to(USER)\n        );\n\n        User.getById(ADMIN, true);\n        User.getById(USER, true);\n\n        WebRequest request \u003d new WebRequest(new URL(j.getURL() + \"descriptorByName/hudson.tools.ZipExtractionInstaller/checkUrl\"), HttpMethod.POST);\n        request.setRequestBody(URLEncoder.encode(\"value\u003dhttps://www.google.com\", StandardCharsets.UTF_8));\n\n        JenkinsRule.WebClient adminWc \u003d j.createWebClient();\n        adminWc.login(ADMIN);\n        assertEquals(HttpURLConnection.HTTP_OK, adminWc.getPage(request).getWebResponse().getStatusCode());\n\n        JenkinsRule.WebClient userWc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        userWc.login(USER);\n        assertEquals(HttpURLConnection.HTTP_FORBIDDEN, userWc.getPage(request).getWebResponse().getStatusCode());\n    }","advisory":"SECURITY-794"},{"className":"hudson.triggers.SafeTimerTaskTest","methodSignature":"hudson.triggers.SafeTimerTaskTest.changeLogsRoot:void()","methodSource":"@Issue(\"JENKINS-50291\")\n    @Test\n    public void changeLogsRoot() throws Exception {\n        assertNull(System.getProperty(SafeTimerTask.LOGS_ROOT_PATH_PROPERTY));\n\n        File temporaryFolder \u003d folder.newFolder();\n\n        // Check historical default value\n        final File logsRoot \u003d new File(j.jenkins.getRootDir(), \"logs/tasks\");\n\n        // Give some time for the logs to arrive\n        Thread.sleep(3 * LogSpammer.RECURRENCE_PERIOD);\n\n        assertTrue(logsRoot.exists());\n        assertTrue(logsRoot.isDirectory());\n\n        System.setProperty(SafeTimerTask.LOGS_ROOT_PATH_PROPERTY, temporaryFolder.toString());\n        assertEquals(temporaryFolder.toString(), SafeTimerTask.getLogsRoot().toString());\n    }","advisory":"JENKINS-50291"},{"className":"hudson.triggers.SCMTriggerTest","methodSignature":"hudson.triggers.SCMTriggerTest.simultaneousPollAndBuild:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2671\")\n    public void simultaneousPollAndBuild() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        // used to coordinate polling and check out\n        final OneShotEvent checkoutStarted \u003d new OneShotEvent();\n\n        p.setScm(new TestSCM(checkoutStarted));\n\n        Future\u003cFreeStyleBuild\u003e build \u003d p.scheduleBuild2(0, new Cause.UserCause());\n        assertNotNull(build);\n        checkoutStarted.block();\n        assertFalse(\"SCM-poll after build has started should wait until that build finishes SCM-update\", p.pollSCMChanges(StreamTaskListener.fromStdout()));\n        build.get();  // let mock build finish\n    }","advisory":"JENKINS-2671"},{"className":"hudson.triggers.SCMTriggerTest","methodSignature":"hudson.triggers.SCMTriggerTest.pollingExcludedByExtensionPoint:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36123\")\n    public void pollingExcludedByExtensionPoint() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        PollDecisionHandlerImpl handler \u003d\n                ExtensionList.lookup(SCMDecisionHandler.class).get(PollDecisionHandlerImpl.class);\n        handler.blacklist.add(p);\n\n        // used to coordinate polling and check out\n        final OneShotEvent checkoutStarted \u003d new OneShotEvent();\n\n        p.setScm(new TestSCM(checkoutStarted));\n\n        assertFalse(\"SCM-poll with blacklist should report no changes\", p.pollSCMChanges(StreamTaskListener.fromStdout()));\n        handler.blacklist.remove(p);\n        assertTrue(\"SCM-poll with blacklist removed should report changes\", p.pollSCMChanges(StreamTaskListener.fromStdout()));\n    }","advisory":"JENKINS-36123"},{"className":"hudson.triggers.SCMTriggerTest","methodSignature":"hudson.triggers.SCMTriggerTest.multiplePollingOneBuildAction:void()","methodSource":"@Test\n    @Issue(\"JENKINS-7649\")\n    public void multiplePollingOneBuildAction() throws Exception {\n        final OneShotEvent buildStarted \u003d new OneShotEvent();\n        final OneShotEvent buildShouldComplete \u003d new OneShotEvent();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        // Make build sleep a while so it blocks new builds\n        p.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException {\n                buildStarted.signal();\n                buildShouldComplete.block();\n                return true;\n            }\n        });\n\n        SCMTrigger t \u003d new SCMTrigger(\"@daily\");\n        t.start(p, true);\n        p.addTrigger(t);\n\n        // Start one build to block others\n        p.scheduleBuild2(0, new Cause.UserCause()).waitForStart();\n        buildStarted.block(); // wait for the build to really start\n\n        // Schedule a new build, and trigger it many ways while it sits in queue\n        Future\u003cFreeStyleBuild\u003e fb \u003d p.scheduleBuild2(0, new Cause.UserCause());\n        assertNotNull(fb);\n        assertNotNull(p.scheduleBuild2(0, new SCMTriggerCause(\"First poll\")));\n        assertNotNull(p.scheduleBuild2(0, new SCMTriggerCause(\"Second poll\")));\n        assertNotNull(p.scheduleBuild2(0, new SCMTriggerCause(\"Third poll\")));\n\n        // Wait for 2nd build to finish\n        buildShouldComplete.signal();\n        FreeStyleBuild build \u003d fb.get();\n\n        List\u003cBuildAction\u003e ba \u003d build.getActions(BuildAction.class);\n\n        assertEquals(\"There should only be one BuildAction.\", 1, ba.size());\n    }","advisory":"JENKINS-7649"},{"className":"hudson.triggers.TriggerStartTest","methodSignature":"hudson.triggers.TriggerStartTest.loadCallsStartFalse:void()","methodSource":"@Test public void loadCallsStartFalse() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        MockTrigger t \u003d new MockTrigger();\n        p.addTrigger(t);\n        p.save();\n        p \u003d (FreeStyleProject) Items.load(p.getParent(), p.getRootDir());\n        t \u003d p.getTrigger(MockTrigger.class);\n        assertNotNull(t);\n        assertEquals(\"[false]\", t.calls.toString());\n    }"},{"className":"hudson.triggers.TriggerStartTest","methodSignature":"hudson.triggers.TriggerStartTest.submitCallsStartTrue:void()","methodSource":"@Test public void submitCallsStartTrue() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        MockTrigger t \u003d new MockTrigger();\n        p.addTrigger(t);\n        p.save();\n        p \u003d (FreeStyleProject) j.configRoundtrip((Item) p);\n        t \u003d p.getTrigger(MockTrigger.class);\n        assertNotNull(t);\n        assertEquals(\"[true]\", t.calls.toString());\n    }"},{"className":"hudson.triggers.TriggerStartTest","methodSignature":"hudson.triggers.TriggerStartTest.updateByXmlCallsStartTrue:void()","methodSource":"@Test public void updateByXmlCallsStartTrue() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        String xml \u003d p.getConfigFile().asString();\n        xml \u003d xml.replace(\"  \u003ctriggers/\u003e\\n\", triggersSection());\n        Source newXML \u003d new StreamSource(new StringReader(xml));\n        p.updateByXml(newXML);\n        MockTrigger t \u003d p.getTrigger(MockTrigger.class);\n        assertNotNull(t);\n        assertEquals(\"[true]\", t.calls.toString());\n    }"},{"className":"hudson.triggers.TriggerStartTest","methodSignature":"hudson.triggers.TriggerStartTest.createProjectFromXmlCallsStartTrue:void()","methodSource":"@Test public void createProjectFromXmlCallsStartTrue() throws Exception {\n        FreeStyleProject p \u003d (FreeStyleProject) j.jenkins.createProjectFromXML(\n                \"whatever\",\n                new ByteArrayInputStream((\"\u003cproject\u003e\\n  \u003cbuilders/\u003e\\n  \u003cpublishers/\u003e\\n  \u003cbuildWrappers/\u003e\\n\" + triggersSection() + \"\u003c/project\u003e\").getBytes(StandardCharsets.UTF_8)));\n        MockTrigger t \u003d p.getTrigger(MockTrigger.class);\n        assertNotNull(t);\n        assertEquals(\"[true]\", t.calls.toString());\n    }"},{"className":"hudson.triggers.TriggerStartTest","methodSignature":"hudson.triggers.TriggerStartTest.copyCallsStartTrue:void()","methodSource":"@Test public void copyCallsStartTrue() throws Exception {\n        AbstractProject\u003c?, ?\u003e p \u003d j.createFreeStyleProject();\n        MockTrigger t \u003d new MockTrigger();\n        p.addTrigger(t);\n        p.save();\n        p \u003d j.jenkins.copy(p, \"nue\");\n        t \u003d p.getTrigger(MockTrigger.class);\n        assertNotNull(t);\n        assertEquals(\"[true]\", t.calls.toString());\n    }"},{"className":"hudson.triggers.TriggerTest","methodSignature":"hudson.triggers.TriggerTest.testNoNPE:void()","methodSource":"@Issue(\"JENKINS-36748\")\n    @Test\n    public void testNoNPE() throws Exception {\n        jenkinsRule.getInstance().createProjectFromXML(\"whatever\", new ByteArrayInputStream((\"\u003cproject\u003e\\n  \u003cbuilders/\u003e\\n  \u003cpublishers/\u003e\\n  \u003cbuildWrappers/\u003e\\n\" + triggersSection() + \"\u003c/project\u003e\").getBytes(StandardCharsets.UTF_8)));\n        final Calendar cal \u003d new GregorianCalendar();\n        Trigger.checkTriggers(cal);\n    }","advisory":"JENKINS-36748"},{"className":"hudson.util.AlternativeUiTextProviderTest","methodSignature":"hudson.util.AlternativeUiTextProviderTest.basics:void()","methodSource":"@Test\n    public void basics() throws Exception {\n        Impl.oldschool \u003d false;\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"aaa\");\n        assertThat(j.createWebClient().getPage(p).asNormalizedText(), containsString(\"newschool:aaa\"));\n\n        Impl.oldschool \u003d true;\n        assertThat(j.createWebClient().getPage(p).asNormalizedText(), containsString(\"oldschool:aaa\"));\n    }"},{"className":"hudson.util.AlternativeUiTextProviderTest","methodSignature":"hudson.util.AlternativeUiTextProviderTest.basicsWithParameter:void()","methodSource":"@Test\n    @Issue(\"JENKINS-41757\")\n    public void basicsWithParameter() throws Exception {\n        Impl.oldschool \u003d false;\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"aaa\");\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"FOO\", null)));\n        String pageText \u003d j.createWebClient().getPage(p).asNormalizedText();\n        assertThat(pageText, containsString(\"newschool:aaa\"));\n\n        Impl.oldschool \u003d true;\n        pageText \u003d j.createWebClient().getPage(p).asNormalizedText();\n        assertThat(pageText, containsString(\"oldschool:aaa\"));\n    }","advisory":"JENKINS-41757"},{"className":"hudson.util.ArgumentListBuilder2Test","methodSignature":"hudson.util.ArgumentListBuilder2Test.slaveMask:void()","methodSource":"@Test\n    @Email(\"http://n4.nabble.com/Password-masking-when-running-commands-on-a-slave-tp1753033p1753033.html\")\n    public void slaveMask() throws Exception {\n        ArgumentListBuilder args \u003d new ArgumentListBuilder();\n        args.add(\"java\");\n        args.addMasked(\"-version\");\n\n        Slave s \u003d j.createOnlineSlave();\n        j.showAgentLogs(s, logging);\n\n        StringWriter out \u003d new StringWriter();\n        assertEquals(0, s.createLauncher(new StreamTaskListener(out)).launch().cmds(args).join());\n        assertThat(out.toString(), containsString(\"$ java ********\"));\n    }"},{"className":"hudson.util.ArgumentListBuilder2Test","methodSignature":"hudson.util.ArgumentListBuilder2Test.ensureArgumentsArePassedViaCmdExeUnmodified:void()","methodSource":"@Test\n    public void ensureArgumentsArePassedViaCmdExeUnmodified() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        String[] specials \u003d new String[] {\n                \"~\",\n                \"!\",\n                \"@\",\n                \"#\",\n                \"$\",\n                \"%\",\n                \"^\",\n                \"\u0026\",\n                \"*\",\n                \"(\",\n                \")\",\n                \"_\",\n                \"+\",\n                \"{\",\n                \"}\",\n                \"[\",\n                \"]\",\n                \":\",\n                \";\",\n                \"\\\"\",\n                \"\u0027\",\n                \"\\\\\",\n                \"|\",\n                \"\u003c\",\n                \"\u003e\",\n                \",\",\n                \".\",\n                \"/\",\n                \"?\",\n                \" \",\n        };\n\n        String out \u003d echoArgs(specials);\n\n        String expected \u003d String.format(\"%n%s\", String.join(\" \", specials));\n        assertThat(out, containsString(expected));\n    }"},{"className":"hudson.util.AtomicFileWriterPerfTest","methodSignature":"hudson.util.AtomicFileWriterPerfTest.poorManPerformanceTestBed:void()","methodSource":"@Ignore(\"TODO often fails in CI\")\n    @Issue(\"JENKINS-34855\")\n    @Test(timeout \u003d 50 * 1000L)\n    public void poorManPerformanceTestBed() throws Exception {\n        int count \u003d 1000;\n        while (count-- \u003e 0) {\n            rule.jenkins.save();\n        }\n    }","advisory":"JENKINS-34855"},{"className":"hudson.util.AtomicFileWriterTest","methodSignature":"hudson.util.AtomicFileWriterTest.noResourceLeak:void()","methodSource":"@Test\n    public void noResourceLeak() throws IOException {\n        Path destPath \u003d tmp.newFolder().toPath().resolve(\"file\");\n        AtomicFileWriter writer \u003d new AtomicFileWriter(destPath, StandardCharsets.UTF_8);\n        Path tmpPath \u003d writer.getTemporaryPath();\n        assertTrue(Files.exists(tmpPath));\n        assertFalse(Files.exists(destPath));\n        try {\n            writer.commit();\n        } finally {\n            writer.abort();\n        }\n        assertFalse(Files.exists(tmpPath));\n        assertTrue(Files.exists(destPath));\n        assertThat(logging.getMessages(), empty());\n    }"},{"className":"hudson.util.AtomicFileWriterTest","methodSignature":"hudson.util.AtomicFileWriterTest.resourceLeak:void()","methodSource":"@Test\n    public void resourceLeak() throws IOException {\n        Path destPath \u003d tmp.newFolder().toPath().resolve(\"file\");\n        WeakReference\u003cAtomicFileWriter\u003e ref \u003d\n                new WeakReference\u003c\u003e(new AtomicFileWriter(destPath, StandardCharsets.UTF_8));\n        Path tmpPath \u003d ref.get().getTemporaryPath();\n        assertTrue(Files.exists(tmpPath));\n        assertFalse(Files.exists(destPath));\n        MemoryAssert.assertGC(ref, false);\n        await().atMost(30, TimeUnit.SECONDS).until(() -\u003e !Files.exists(tmpPath));\n        assertFalse(Files.exists(destPath));\n        assertThat(\n                logging.getMessages(),\n                contains(\"AtomicFileWriter for \" + destPath + \" was not closed before being released\"));\n    }"},{"className":"hudson.util.BootFailureTest","methodSignature":"hudson.util.BootFailureTest.runBootFailureScript:void()","methodSource":"@Test\n    public void runBootFailureScript() throws Exception {\n        final File home \u003d tmpDir.newFolder();\n        j.with(() -\u003e home);\n\n        // creates a script\n        Files.writeString(home.toPath().resolve(\"boot-failure.groovy\"), \"hudson.util.BootFailureTest.problem \u003d exception\", StandardCharsets.UTF_8);\n        Path d \u003d home.toPath().resolve(\"boot-failure.groovy.d\");\n        Files.createDirectory(d);\n        Files.writeString(d.resolve(\"1.groovy\"), \"hudson.util.BootFailureTest.runRecord \u003c\u003c \u00271\u0027\", StandardCharsets.UTF_8);\n        Files.writeString(d.resolve(\"2.groovy\"), \"hudson.util.BootFailureTest.runRecord \u003c\u003c \u00272\u0027\", StandardCharsets.UTF_8);\n\n        // first failed boot\n        makeBootFail \u003d true;\n        assertNull(j.newHudson());\n        assertEquals(1, bootFailures(home));\n\n        // second failed boot\n        problem \u003d null;\n        runRecord \u003d new ArrayList\u003c\u003e();\n        assertNull(j.newHudson());\n        assertEquals(2, bootFailures(home));\n        assertEquals(Arrays.asList(\"1\", \"2\"), runRecord);\n\n        // make sure the script has actually run\n        assertEquals(SeriousError.class, problem.getCause().getClass());\n\n        // if it boots well, the failure record should be gone\n        makeBootFail \u003d false;\n        assertNotNull(j.newHudson());\n        assertFalse(BootFailure.getBootFailureFile(home).exists());\n    }"},{"className":"hudson.util.BootFailureTest","methodSignature":"hudson.util.BootFailureTest.interruptedStartup:void()","methodSource":"@Issue(\"JENKINS-24696\")\n    @Test\n    public void interruptedStartup() throws Exception {\n        final File home \u003d tmpDir.newFolder();\n        j.with(() -\u003e home);\n        Path d \u003d home.toPath().resolve(\"boot-failure.groovy.d\");\n        Files.createDirectory(d);\n        Files.writeString(d.resolve(\"1.groovy\"), \"hudson.util.BootFailureTest.runRecord \u003c\u003c \u00271\u0027\", StandardCharsets.UTF_8);\n        j.newHudson();\n        assertEquals(List.of(\"1\"), runRecord);\n    }","advisory":"JENKINS-24696"},{"className":"hudson.util.DoubleLaunchCheckerTest","methodSignature":"hudson.util.DoubleLaunchCheckerTest.activated:void()","methodSource":"@Test\n    public void activated() throws Throwable {\n        mainController.startJenkins();\n        duplicateController.startJenkins();\n        mainController.runRemotely(DoubleLaunchCheckerTest::waitForWarning);\n    }"},{"className":"hudson.util.FormFieldValidatorTest","methodSignature":"hudson.util.FormFieldValidatorTest.configure:void()","methodSource":"@Test\n    @Issue(\"JENKINS-2771\")\n    public void configure() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        j.createWebClient().getPage(p, \"configure\");\n    }","advisory":"JENKINS-2771"},{"className":"hudson.util.FormFieldValidatorTest","methodSignature":"hudson.util.FormFieldValidatorTest.testCodeMirrorBlur:void()","methodSource":"@Test\n    @Issue(\"JENKINS-15604\")\n    public void testCodeMirrorBlur() throws IOException, SAXException {\n        final FreeStyleProject freeStyleProject \u003d j.createFreeStyleProject();\n        freeStyleProject.getBuildersList().add(new CodeMirrorStep(\"\"));\n        freeStyleProject.save();\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n        final HtmlPage page \u003d wc.getPage(freeStyleProject, \"configure\");\n\n        // get initial value\n        final ScriptResult scriptResult1 \u003d page.executeJavaScript(\"document.querySelectorAll(\u0027.validation-error-area--visible .ok\u0027)[1].textContent\");\n        final long javaScriptResult1 \u003d Long.parseLong((String) scriptResult1.getJavaScriptResult());\n        Assert.assertEquals(System.currentTimeMillis(), javaScriptResult1, 5000); // value is expected to be roughly \"now\"\n\n        // focus then blur to update\n        page.executeJavaScript(\"document.querySelector(\u0027.CodeMirror textarea\u0027).dispatchEvent(new Event(\\\"focus\\\"))\");\n        page.executeJavaScript(\"document.querySelector(\u0027.CodeMirror textarea\u0027).dispatchEvent(new Event(\\\"blur\\\"))\");\n        wc.waitForBackgroundJavaScript(1000); // Unsure whether this is needed\n\n        // get updated value\n        final ScriptResult scriptResult2 \u003d page.executeJavaScript(\"document.querySelectorAll(\u0027.validation-error-area--visible .ok\u0027)[1].textContent\");\n        final long javaScriptResult2 \u003d Long.parseLong((String) scriptResult2.getJavaScriptResult());\n        Assert.assertEquals(System.currentTimeMillis(), javaScriptResult2, 5000); // value is expected to be roughly \"now\"\n\n        // value should have changed\n        Assert.assertNotEquals(javaScriptResult1, javaScriptResult2);\n    }","advisory":"JENKINS-15604"},{"className":"hudson.util.FormFieldValidatorTest","methodSignature":"hudson.util.FormFieldValidatorTest.negative:void()","methodSource":"@Test\n    @Issue(\"JENKINS-3382\")\n    public void negative() throws Exception {\n        BrokenFormValidatorBuilder.DescriptorImpl d \u003d new BrokenFormValidatorBuilder.DescriptorImpl();\n        Publisher.all().add(d);\n        try {\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            p.getPublishersList().add(new BrokenFormValidatorBuilder());\n\n            JenkinsRule.WebClient webclient \u003d j.createWebClient();\n            WebResponseListener.StatusListener statusListener \u003d new WebResponseListener.StatusListener(500);\n            webclient.addWebResponseListener(statusListener);\n\n            webclient.getPage(p, \"configure\");\n\n            statusListener.assertHasResponses();\n            String contentAsString \u003d statusListener.getResponses().get(0).getContentAsString();\n            Assert.assertTrue(contentAsString.contains(\"doCheckXyz is broken\"));\n        } finally {\n            Publisher.all().remove(d);\n        }\n    }","advisory":"JENKINS-3382"},{"className":"hudson.util.FormValidationSecurity1893Test","methodSignature":"hudson.util.FormValidationSecurity1893Test.checkHeaderPresence:void()","methodSource":"@Test\n    public void checkHeaderPresence() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n        final WebResponse response \u003d wc.goTo(\"descriptorByName/hudson.model.FreeStyleProject/checkCustomWorkspace\").getWebResponse();\n        assertEquals(200, response.getStatusCode());\n        assertThat(response.getContentAsString(), containsString(Messages.AbstractProject_CustomWorkspaceEmpty()));\n        assertThat(response.getResponseHeaderValue(\"Content-Security-Policy\"), containsString(\"default-src \u0027none\u0027;\"));\n        assertThat(response.getResponseHeaderValue(\"X-Content-Security-Policy\"), containsString(\"default-src \u0027none\u0027;\"));\n        assertThat(response.getResponseHeaderValue(\"X-WebKit-CSP\"), containsString(\"default-src \u0027none\u0027;\"));\n    }"},{"className":"hudson.util.FormValidationTest","methodSignature":"hudson.util.FormValidationTest.testValidateExecutableWithFix:void()","methodSource":"@Issue(\"JENKINS-61711\")\n    @Test\n    public void testValidateExecutableWithFix() {\n        // Global Tool Configuration is able to find git executable in system environment at PATH.\n        FormValidation actual \u003d FormValidation.validateExecutable(\"git\");\n        assertThat(actual, is(FormValidation.ok()));\n    }","advisory":"JENKINS-61711"},{"className":"hudson.util.FormValidationTest","methodSignature":"hudson.util.FormValidationTest.testValidateExecutableWithoutFix:void()","methodSource":"@Issue(\"JENKINS-61711\")\n    @Test\n    public void testValidateExecutableWithoutFix() {\n        // Without JENKINS-61711 fix, Git installations under Global Tool Configuration is not able to find git\n        // executable at system PATH despite git exec existing at the path.\n        FormValidation actual \u003d FormValidation.validateExecutable(\"git\");\n        String failMessage \u003d \"There\u0027s no such executable git in PATH:\";\n        assertThat(actual, not(is(FormValidation.error(failMessage))));\n    }","advisory":"JENKINS-61711"},{"className":"hudson.util.HudsonIsLoadingTest","methodSignature":"hudson.util.HudsonIsLoadingTest.withPrefix:void()","methodSource":"@Test\n    @Issue(\"JENKINS-55062\")\n    public void withPrefix() throws Exception {\n        j.jenkins.servletContext.setAttribute(\"app\", new HudsonIsLoading());\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                // this is a failure page already\n                .withThrowExceptionOnFailingStatusCode(false)\n                .withJavaScriptEnabled(false);\n\n        checkingPage(wc, \"\");\n        checkingPage(wc, \"anyRandomString\");\n        checkingPage(wc, \"multiple/layer/ofRelative.xml\");\n    }","advisory":"JENKINS-55062"},{"className":"hudson.util.HudsonIsRestartingTest","methodSignature":"hudson.util.HudsonIsRestartingTest.withPrefix:void()","methodSource":"@Test\n    @Issue(\"JENKINS-55062\")\n    public void withPrefix() throws Exception {\n        j.jenkins.servletContext.setAttribute(\"app\", new HudsonIsRestarting(false));\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                // this is a failure page already\n                .withThrowExceptionOnFailingStatusCode(false)\n                .withJavaScriptEnabled(false);\n\n        checkingPage(wc, \"\");\n        checkingPage(wc, \"anyRandomString\");\n        checkingPage(wc, \"multiple/layer/ofRelative.xml\");\n    }","advisory":"JENKINS-55062"},{"className":"hudson.util.LineEndingConversionTest","methodSignature":"hudson.util.LineEndingConversionTest.validateWindowsEOL:void()","methodSource":"@Issue(\"JENKINS-7478\")\n    @Test\n    public void validateWindowsEOL() {\n        rule.assertStringContains(LineEndingConversion.convertEOL(\"echo A\\necho B\\recho C\", LineEndingConversion.EOLType.Windows), \"echo A\\r\\necho B\\r\\necho C\");\n    }","advisory":"JENKINS-7478"},{"className":"hudson.util.LineEndingConversionTest","methodSignature":"hudson.util.LineEndingConversionTest.validateUnixEOL:void()","methodSource":"@Test\n    public void validateUnixEOL() {\n        rule.assertStringContains(LineEndingConversion.convertEOL(\"echo A\\r\\necho B\\recho C\", LineEndingConversion.EOLType.Unix), \"echo A\\necho B\\necho C\");\n    }"},{"className":"hudson.util.LogTaskListenerTest","methodSignature":"hudson.util.LogTaskListenerTest.annotations:void()","methodSource":"@Test\n    public void annotations() throws Exception {\n        TaskListener l \u003d new LogTaskListener(Logger.getLogger(\"LogTaskListenerTest\"), Level.FINE);\n        l.getLogger().println(\"plain line\");\n        String url \u003d \"http://nowhere.net/\";\n        l.annotate(new HyperlinkNote(url, 0));\n        l.getLogger().println(\"from annotate\");\n        l.hyperlink(url, \"from hyperlink\");\n        l.getLogger().println();\n        l.getLogger().println(HyperlinkNote.encodeTo(url, \"there\") + \" from encoded\");\n        assertEquals(\"[plain line, from annotate, from hyperlink, there from encoded]\", logging.getMessages().toString());\n    }"},{"className":"hudson.util.LogTaskListenerTest","methodSignature":"hudson.util.LogTaskListenerTest.serialization:void()","methodSource":"@Test\n    public void serialization() throws Exception {\n        TaskListener l \u003d new LogTaskListener(Logger.getLogger(\"LogTaskListenerTest\"), Level.INFO);\n        r.createOnlineSlave().getChannel().call(new Log(l));\n        assertEquals(\"[from agent]\", logging.getMessages().toString());\n    }"},{"className":"hudson.util.ProcessTreeTest","methodSignature":"hudson.util.ProcessTreeTest.manualAbortProcess:void()","methodSource":"@Test\n    public void manualAbortProcess() throws Exception {\n        ProcessTree.enabled \u003d true;\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n\n        // this contains a maven project with a single test that sleeps 5s.\n        project.setScm(new ExtractResourceSCM(getClass().getResource(\n                \"ProcessTreeKiller-test-project.jar\")));\n        project.getBuildersList().add(new Maven(\"install\", \"maven\"));\n\n        // build the project, wait until tests are running, then cancel.\n        FreeStyleBuild b \u003d project.scheduleBuild2(0).waitForStart();\n\n        b.doStop();\n\n        j.waitForCompletion(b);\n\n        // will fail (at least on windows) if test process is still running\n        b.getWorkspace().deleteRecursive();\n    }"},{"className":"hudson.util.ProcessTreeTest","methodSignature":"hudson.util.ProcessTreeTest.killNullProcess:void()","methodSource":"@Test\n    public void killNullProcess() throws Exception {\n        ProcessTree.enabled \u003d true;\n        ProcessTree.get().killAll(null, null);\n    }"},{"className":"hudson.util.ProcessTreeTest","methodSignature":"hudson.util.ProcessTreeTest.processProperlyKilledUnix:void()","methodSource":"@Test\n    @Issue(\"JENKINS-22641\")\n    public void processProperlyKilledUnix() throws Exception {\n        ProcessTree.enabled \u003d true;\n        Assume.assumeFalse(\"This test does not involve windows\", Functions.isWindows());\n\n        FreeStyleProject sleepProject \u003d j.createFreeStyleProject();\n        FreeStyleProject processJob \u003d j.createFreeStyleProject();\n\n        sleepProject.getBuildersList().add(new Shell(\"nohup sleep 100000 \u0026\"));\n\n        j.buildAndAssertSuccess(sleepProject);\n\n        processJob.getBuildersList().add(new Shell(\"ps -ef | grep sleep\"));\n\n        j.assertLogNotContains(\"sleep 100000\", processJob.scheduleBuild2(0).get());\n    }","advisory":"JENKINS-22641"},{"className":"hudson.util.ProcessTreeTest","methodSignature":"hudson.util.ProcessTreeTest.doNotKillProcessWithCookie:void()","methodSource":"@Test\n    public void doNotKillProcessWithCookie() throws Exception {\n        ProcessTree.enabled \u003d true;\n        SpawnBuilder spawner \u003d new SpawnBuilder();\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(spawner);\n        try {\n            j.buildAndAssertSuccess(p);\n\n            assertTrue(\"Process should be running\", spawner.proc.isAlive());\n        } finally {\n            spawner.proc.kill();\n            assertFalse(\"Process should be dead\", spawner.proc.isAlive());\n        }\n    }"},{"className":"hudson.util.ProcessTreeTest","methodSignature":"hudson.util.ProcessTreeTest.considersKillingVetos:void()","methodSource":"@Test\n    @Issue(\"JENKINS-9104\")\n    public void considersKillingVetos() throws Exception {\n        // on some platforms where we fail to list any processes, this test will\n        // just not work\n        assumeTrue(ProcessTree.get() !\u003d ProcessTree.DEFAULT);\n\n        // kick off a process we (shouldn\u0027t) kill\n        ProcessBuilder pb \u003d new ProcessBuilder();\n        pb.environment().put(\"cookie\", \"testKeepDaemonsAlive\");\n\n        if (File.pathSeparatorChar \u003d\u003d \u0027;\u0027) {\n            pb.command(\"cmd\");\n        } else {\n            pb.command(\"sleep\", \"300\");\n        }\n\n        process \u003d pb.start();\n\n        ProcessTree processTree \u003d ProcessTree.get();\n        processTree.killAll(Map.of(\"cookie\", \"testKeepDaemonsAlive\"));\n        assertThrows(\"Process should have been excluded from the killing\", IllegalThreadStateException.class, () -\u003e process.exitValue());\n    }","advisory":"JENKINS-9104"},{"className":"hudson.util.ProcessTreeTest","methodSignature":"hudson.util.ProcessTreeTest.considersKillingVetosOnSlave:void()","methodSource":"@Test\n    @Issue(\"JENKINS-9104\")\n    public void considersKillingVetosOnSlave() throws Exception {\n        // on some platforms where we fail to list any processes, this test will\n        // just not work\n        assumeTrue(ProcessTree.get() !\u003d ProcessTree.DEFAULT);\n\n        // Define a process we (shouldn\u0027t) kill\n        ProcessBuilder pb \u003d new ProcessBuilder();\n        pb.environment().put(\"cookie\", \"testKeepDaemonsAlive\");\n\n        if (File.pathSeparatorChar \u003d\u003d \u0027;\u0027) {\n            pb.command(\"cmd\");\n        } else {\n            pb.command(\"sleep\", \"300\");\n        }\n\n        // Create an agent so we can tell it to kill the process\n        Slave s \u003d j.createSlave();\n        s.toComputer().connect(false).get();\n\n        // Start the process\n        process \u003d pb.start();\n\n        // Call killall (somewhat roundabout though) to (not) kill it\n        StringWriter out \u003d new StringWriter();\n        s.createLauncher(new StreamTaskListener(out)).kill(Map.of(\"cookie\", \"testKeepDaemonsAlive\"));\n\n        assertThrows(\"Process should have been excluded from the killing\", IllegalThreadStateException.class, () -\u003e process.exitValue());\n    }","advisory":"JENKINS-9104"},{"className":"hudson.util.RingBufferLogHandlerTest","methodSignature":"hudson.util.RingBufferLogHandlerTest.tooMuchRecordsShouldNotCrashHandler:void()","methodSource":"@Test\n    @Issue(\"JENKINS-9120\")\n    public void tooMuchRecordsShouldNotCrashHandler() {\n        final RingBufferLogHandler handler \u003d new RingBufferLogHandler();\n        LogRecord lr \u003d new LogRecord(Level.INFO, \"xxx\");\n        for (long i \u003d 0; i \u003c (long) Integer.MAX_VALUE + 300; i++) {\n            // throws ArrayIndexOutOfBoundsException after int-overflow\n            handler.publish(lr);\n        }\n    }","advisory":"JENKINS-9120"},{"className":"hudson.util.RobustReflectionConverterTest","methodSignature":"hudson.util.RobustReflectionConverterTest.randomExceptionsReported:void()","methodSource":"@Issue(\"JENKINS-21024\")\n    @LocalData\n    @Test public void randomExceptionsReported() {\n        FreeStyleProject p \u003d r.jenkins.getItemByFullName(\"j\", FreeStyleProject.class);\n        assertNotNull(p);\n        assertTrue(\"There should be no triggers\", p.getTriggers().isEmpty());\n        OldDataMonitor odm \u003d (OldDataMonitor) r.jenkins.getAdministrativeMonitor(\"OldData\");\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d odm.getData();\n        assertEquals(Set.of(p), data.keySet());\n        String text \u003d data.values().iterator().next().extra;\n        assertTrue(text, text.contains(\"hudson.triggers.TimerTrigger.readResolve\"));\n    }","advisory":"JENKINS-21024"},{"className":"hudson.util.RobustReflectionConverterTest","methodSignature":"hudson.util.RobustReflectionConverterTest.testRestInterfaceFailure:void()","methodSource":"@Test\n    public void testRestInterfaceFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        // without addCriticalField. This is accepted.\n        {\n            FreeStyleProject p \u003d r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n\n            // Configure a bad keyword via REST.\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc \u003d r.createWebClient();\n            wc.withBasicApiToken(\"test\");\n            WebRequest req \u003d new WebRequest(new URI(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())).toURL(), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD));\n            wc.getPage(req);\n\n            // AcceptOnlySpecificKeyword with bad value is not instantiated for rejected with readResolve,\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n\n            // but save to the disk.\n            r.jenkins.reload();\n\n            p \u003d r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n\n        // with addCriticalField. This is not accepted.\n        {\n            FreeStyleProject p \u003d r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n\n            // Configure a bad keyword via REST.\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            WebClient wc \u003d r.createWebClient()\n                    .withThrowExceptionOnFailingStatusCode(false);\n            wc.withBasicApiToken(\"test\");\n            WebRequest req \u003d new WebRequest(new URI(wc.getContextPath() + String.format(\"%s/config.xml\", p.getUrl())).toURL(), HttpMethod.POST);\n            req.setEncodingType(null);\n            req.setRequestBody(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\"));\n\n            Page page \u003d wc.getPage(req);\n            assertEquals(\"Submitting unacceptable configuration via REST should fail.\",\n                    HttpURLConnection.HTTP_INTERNAL_ERROR,\n                    page.getWebResponse().getStatusCode());\n\n            // Configuration should not be updated for a failure of the critical field,\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n\n            r.jenkins.reload();\n\n            // rejected configuration is not saved\n            p \u003d r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }"},{"className":"hudson.util.RobustReflectionConverterTest","methodSignature":"hudson.util.RobustReflectionConverterTest.testCliFailure:void()","methodSource":"@Test\n    public void testCliFailure() throws Exception {\n        Items.XSTREAM2.addCriticalField(KeywordProperty.class, \"criticalField\");\n\n        // without addCriticalField. This is accepted.\n        {\n            FreeStyleProject p \u003d r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n\n            // Configure a bad keyword via CLI.\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n\n            CLICommandInvoker.Result ret \u003d new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, \"badvalue\", AcceptOnlySpecificKeyword.ACCEPT_KEYWORD).getBytes(Charset.defaultCharset())))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n\n            assertEquals(0, ret.returnCode());\n\n            // AcceptOnlySpecificKeyword with bad value is not instantiated for rejected with readResolve,\n            assertNull(p.getProperty(KeywordProperty.class).getNonCriticalField());\n            assertEquals(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n\n            // but save to the disk.\n            r.jenkins.reload();\n\n            p \u003d r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getNonCriticalField().getKeyword());\n        }\n\n        // with addCriticalField. This is not accepted.\n        {\n            FreeStyleProject p \u003d r.createFreeStyleProject();\n            p.addProperty(new KeywordProperty(\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD),\n                    new AcceptOnlySpecificKeyword(AcceptOnlySpecificKeyword.ACCEPT_KEYWORD)\n            ));\n            p.save();\n\n            // Configure a bad keyword via CLI.\n            r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n            CLICommandInvoker.Result ret \u003d new CLICommandInvoker(r, \"update-job\")\n                    .asUser(\"test\")\n                    .withStdin(new ByteArrayInputStream(String.format(CONFIGURATION_TEMPLATE, AcceptOnlySpecificKeyword.ACCEPT_KEYWORD, \"badvalue\").getBytes(Charset.defaultCharset())))\n                    .withArgs(\n                            p.getFullName()\n                    )\n                    .invoke();\n            assertNotEquals(0, ret.returnCode());\n\n            // Configuration should not be updated for a failure of the critical field,\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n\n            r.jenkins.reload();\n\n            // rejected configuration is not saved\n            p \u003d r.jenkins.getItemByFullName(p.getFullName(), FreeStyleProject.class);\n            assertNotEquals(\"badvalue\", p.getProperty(KeywordProperty.class).getCriticalField().getKeyword());\n        }\n    }"},{"className":"hudson.util.SecretCompatTest","methodSignature":"hudson.util.SecretCompatTest.encryptedValueStaysTheSameAfterRoundtrip:void()","methodSource":"@Test\n    @Issue(\"SECURITY-304\")\n    public void encryptedValueStaysTheSameAfterRoundtrip() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition(\"p\", Secret.fromString(\"s3cr37\"), \"Keep this a secret\")));\n        project.getAllActions(); // initialize Actionable.actions; otherwise first made nonnull while rendering sidepanel after redirect after round #1 has been saved, so only round #2 has \u003cactions/\u003e\n        project \u003d j.configRoundtrip(project);\n        String round1 \u003d project.getConfigFile().asString();\n        project \u003d j.configRoundtrip(project);\n        String round2 \u003d project.getConfigFile().asString();\n        assertEquals(round1, round2);\n\n\n        //But reconfiguring will make it a new value\n        project \u003d j.jenkins.getItemByFullName(project.getFullName(), FreeStyleProject.class);\n        project.removeProperty(ParametersDefinitionProperty.class);\n        project.addProperty(new ParametersDefinitionProperty(new PasswordParameterDefinition(\"p\", Secret.fromString(\"s3cr37\"), \"Keep this a secret\")));\n        project \u003d j.configRoundtrip(project);\n        String round3 \u003d project.getConfigFile().asString();\n        assertNotEquals(round2, round3);\n        //Saving again will produce the same\n        project \u003d j.configRoundtrip(project);\n        String round4 \u003d project.getConfigFile().asString();\n        assertEquals(round3, round4);\n    }","advisory":"SECURITY-304"},{"className":"hudson.util.SecretCompatTest","methodSignature":"hudson.util.SecretCompatTest.canReadPreSec304Secrets:void()","methodSource":"@Test\n    @Issue(\"SECURITY-304\")\n    @LocalData\n    public void canReadPreSec304Secrets() throws Exception {\n        FreeStyleProject project \u003d j.jenkins.getItemByFullName(\"OldSecret\", FreeStyleProject.class);\n        String oldxml \u003d project.getConfigFile().asString();\n        //It should be unchanged on disk\n        assertThat(oldxml, containsString(\"\u003cdefaultValue\u003ez/Dd3qrHdQ6/C5lR7uEafM/jD3nQDrGprw3XsfZ/0vo\u003d\u003c/defaultValue\u003e\"));\n        ParametersDefinitionProperty property \u003d project.getProperty(ParametersDefinitionProperty.class);\n        ParameterDefinition definition \u003d property.getParameterDefinitions().get(0);\n        assertThat(definition, instanceOf(PasswordParameterDefinition.class));\n        Secret secret \u003d ((PasswordParameterDefinition) definition).getDefaultValueAsSecret();\n        assertEquals(\"theSecret\", secret.getPlainText());\n\n        //OK it was read correctly from disk, now the first roundtrip should update the encrypted value\n\n        project \u003d j.configRoundtrip(project);\n        String newXml \u003d project.getConfigFile().asString();\n        assertNotEquals(oldxml, newXml); //This could have changed because Jenkins has moved on, so not really a good check\n        assertThat(newXml, not(containsString(\"\u003cdefaultValue\u003ez/Dd3qrHdQ6/C5lR7uEafM/jD3nQDrGprw3XsfZ/0vo\u003d\u003c/defaultValue\u003e\")));\n        Pattern p \u003d Pattern.compile(\"\u003cdefaultValue\u003e\\\\{[A-Za-z0-9+/]+\u003d{0,2}}\u003c/defaultValue\u003e\");\n        assertTrue(p.matcher(newXml).find());\n\n        //But the next roundtrip should result in the same data\n        project \u003d j.configRoundtrip(project);\n        String round2 \u003d project.getConfigFile().asString();\n        assertEquals(newXml, round2);\n    }","advisory":"SECURITY-304"},{"className":"hudson.util.XStream2AnnotationTest","methodSignature":"hudson.util.XStream2AnnotationTest.xStreamAlias:void()","methodSource":"@Test\n    public void xStreamAlias() throws Throwable {\n        rr.then(r -\u003e {\n            AnnotatedProcessed annotatedProcessed \u003d AnnotatedProcessed.get();\n            annotatedProcessed.x \u003d 1;\n            annotatedProcessed.save();\n            assertThat(annotatedProcessed.xml(), is(\"\u003cmyconf-annotated-processed\u003e\u003cx\u003e1\u003c/x\u003e\u003c/myconf-annotated-processed\u003e\"));\n            AnnotatedUnprocessed annotatedUnprocessed \u003d AnnotatedUnprocessed.get();\n            annotatedUnprocessed.x \u003d 2;\n            annotatedUnprocessed.save();\n            assertThat(annotatedUnprocessed.xml(), is(\"\u003chudson.util.XStream2AnnotationTest_-AnnotatedUnprocessed\u003e\u003cx\u003e2\u003c/x\u003e\u003c/hudson.util.XStream2AnnotationTest_-AnnotatedUnprocessed\u003e\"));\n            Programmatic programmatic \u003d Programmatic.get();\n            programmatic.x \u003d 3;\n            programmatic.save();\n            assertThat(programmatic.xml(), is(\"\u003cmyconf-programmatic\u003e\u003cx\u003e3\u003c/x\u003e\u003c/myconf-programmatic\u003e\"));\n        });\n        rr.then(r -\u003e {\n            assertThat(AnnotatedProcessed.get().x, is(1));\n            assertThat(AnnotatedUnprocessed.get().x, is(2));\n            assertThat(Programmatic.get().x, is(3));\n            // Typical content saved by Jenkins session when annotation autodetection was still enabled:\n            AnnotatedUnprocessed.get().writeXml(\"\u003cmyconf-annotated-unprocessed\u003e\u003cx\u003e4\u003c/x\u003e\u003c/myconf-annotated-unprocessed\u003e\");\n        });\n        rr.then(r -\u003e assertThat(\"CannotResolveClassException/IOException caught in Descriptor.load\", AnnotatedUnprocessed.get().x, is(0)));\n    }"},{"className":"hudson.util.XStream2Security383Test","methodSignature":"hudson.util.XStream2Security383Test.testXmlLoad:void()","methodSource":"@Test\n    @Issue(\"SECURITY-383\")\n    public void testXmlLoad() throws Exception {\n        File exploitFile \u003d f.newFile();\n        try {\n            // be extra sure there\u0027s no file already\n            if (exploitFile.exists() \u0026\u0026 !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir \u003d new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml \u003d IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml \u003d exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            Files.createDirectory(tempJobDir.toPath());\n            Files.writeString(tempJobDir.toPath().resolve(\"config.xml\"), exploitXml, StandardCharsets.UTF_8);\n\n            assertThrows(IOException.class, () -\u003e Items.load(j.jenkins, tempJobDir));\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }","advisory":"SECURITY-383"},{"className":"hudson.util.XStream2Security383Test","methodSignature":"hudson.util.XStream2Security383Test.testPostJobXml:void()","methodSource":"@Test\n    @Issue(\"SECURITY-383\")\n    public void testPostJobXml() throws Exception {\n        File exploitFile \u003d f.newFile();\n        try {\n            // be extra sure there\u0027s no file already\n            if (exploitFile.exists() \u0026\u0026 !exploitFile.delete()) {\n                throw new IllegalStateException(\"file exists and cannot be deleted\");\n            }\n            File tempJobDir \u003d new File(j.jenkins.getRootDir(), \"security383\");\n\n            String exploitXml \u003d IOUtils.toString(\n                    XStream2Security383Test.class.getResourceAsStream(\n                            \"/hudson/util/XStream2Security383Test/config.xml\"), StandardCharsets.UTF_8);\n\n            exploitXml \u003d exploitXml.replace(\"@TOKEN@\", exploitFile.getAbsolutePath());\n\n            when(req.getMethod()).thenReturn(\"POST\");\n            when(req.getInputStream()).thenReturn(new Stream(IOUtils.toInputStream(exploitXml, StandardCharsets.UTF_8)));\n            when(req.getContentType()).thenReturn(\"application/xml\");\n            when(req.getParameter(\"name\")).thenReturn(\"foo\");\n\n            assertThrows(IOException.class, () -\u003e j.jenkins.doCreateItem(req, rsp));\n            assertFalse(\"no file should be created here\", exploitFile.exists());\n        } finally {\n            exploitFile.delete();\n        }\n    }","advisory":"SECURITY-383"},{"className":"hudson.views.GlobalDefaultViewConfigurationTest","methodSignature":"hudson.views.GlobalDefaultViewConfigurationTest.shouldNotFailIfTheDefaultViewIsMissing:void()","methodSource":"@Test\n    @Issue(\"JENKINS-42717\")\n    public void shouldNotFailIfTheDefaultViewIsMissing() {\n        String viewName \u003d \"NonExistentView\";\n        GlobalDefaultViewConfiguration c \u003d new GlobalDefaultViewConfiguration();\n\n        StaplerRequest create \u003d new MockStaplerRequestBuilder(j, \"/configure\").build();\n        JSONObject params \u003d new JSONObject();\n        params.accumulate(\"primaryView\", viewName);\n        try {\n            c.configure(create, params);\n        } catch (Descriptor.FormException ex) {\n            assertThat(\"Wrong exception message for the form failure\",\n                    ex.getMessage(), containsString(Messages.GlobalDefaultViewConfiguration_ViewDoesNotExist(viewName)));\n            return;\n        }\n        Assert.fail(\"Expected FormException\");\n    }","advisory":"JENKINS-42717"},{"className":"hudson.views.ListViewColumnTest","methodSignature":"hudson.views.ListViewColumnTest.createView:void()","methodSource":"@Test\n    public void createView() throws Exception {\n        j.jenkins.addView(new ListView(\"test\"));\n        j.submit(j.createWebClient().goTo(\"view/test/configure\").getFormByName(\"viewConfig\"));\n    }"},{"className":"hudson.views.StatusFilterTest","methodSignature":"hudson.views.StatusFilterTest.basic:void()","methodSource":"@Test\n    public void basic() throws Exception {\n        List\u003cTopLevelItem\u003e list \u003d new ArrayList\u003c\u003e();\n        FreeStyleProject p1 \u003d j.createFreeStyleProject(\"p1\");\n        FreeStyleProject p2 \u003d j.createFreeStyleProject(\"p2\");\n        FreeStyleProject disabled \u003d j.createFreeStyleProject(\"disabled\");\n        disabled.disable();\n\n        list.add(p1);\n        list.add(p2);\n        list.add(disabled);\n\n        StatusFilter enableFilter \u003d new StatusFilter(true);\n        StatusFilter disableFilter \u003d new StatusFilter(false);\n\n        List\u003cTopLevelItem\u003e filtered \u003d enableFilter.filter(list, null, null);\n        assertThat(filtered, containsInAnyOrder(p1, p2));\n\n        filtered \u003d disableFilter.filter(list, null, null);\n        assertThat(filtered, containsInAnyOrder(disabled));\n    }"},{"className":"hudson.widgets.HistoryWidgetTest","methodSignature":"hudson.widgets.HistoryWidgetTest.moreLink:void()","methodSource":"@Test\n    @Issue(\"JENKINS-15499\")\n    public void moreLink() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        for (int x \u003d 0; x \u003c 3; x++) {\n            j.buildAndAssertSuccess(p);\n        }\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.setJavaScriptEnabled(false);\n        wc.goTo(\"job/\" + p.getName() + \"/buildHistory/all\");\n    }","advisory":"JENKINS-15499"},{"className":"hudson.widgets.HistoryWidgetTest","methodSignature":"hudson.widgets.HistoryWidgetTest.displayFilterInput:void()","methodSource":"@Test\n    public void displayFilterInput() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        { // Filter input shouldn\u0027t display when there\u0027s no build\n            HtmlPage page \u003d wc.goTo(\"job/\" + p.getName());\n            DomNode searchInputContainer \u003d page.querySelector(\".jenkins-search\");\n            assertTrue(searchInputContainer.getAttributes().getNamedItem(\"class\").getNodeValue().contains(\"jenkins-hidden\"));\n        }\n\n        j.buildAndAssertSuccess(p);  // Add a build\n\n        { // Filter input should display when there\u0027s a build\n            HtmlPage page \u003d wc.goTo(\"job/\" + p.getName());\n            DomNode searchInputContainer \u003d page.querySelector(\".jenkins-search\");\n            assertFalse(searchInputContainer.getAttributes().getNamedItem(\"class\").getNodeValue().contains(\"jenkins-hidden\"));\n        }\n    }"},{"className":"hudson.XMLFileTest","methodSignature":"hudson.XMLFileTest.canStartWithXml_1_1_ConfigsTest:void()","methodSource":"@Test\n    @LocalData\n    public void canStartWithXml_1_1_ConfigsTest() {\n\n        assertThat(j.jenkins.getLabelString(), is(\"LESS_TERMCAP_mb\u003d\\u001B[01;31m\"));\n\n    }"},{"className":"hudson.XMLFileTest","methodSignature":"hudson.XMLFileTest.silentlyMigrateConfigsTest:void()","methodSource":"@Test\n    @LocalData\n    public void silentlyMigrateConfigsTest() throws Exception {\n        j.jenkins.save();\n        // verify that we did indeed load our test config.xml\n        assertThat(j.jenkins.getLabelString(), is(\"I am a label\"));\n        //verify that the persisted top level config.xml is v1.1\n        File configFile \u003d new File(j.jenkins.getRootDir(), \"config.xml\");\n        assertThat(configFile.exists(), is(true));\n\n        try (BufferedReader config \u003d Files.newBufferedReader(configFile.toPath(), StandardCharsets.UTF_8)) {\n            assertThat(config.readLine(), is(\"\u003c?xml version\u003d\u00271.1\u0027 encoding\u003d\u0027UTF-8\u0027?\u003e\"));\n        }\n    }"},{"className":"jenkins.AgentProtocolTest","methodSignature":"jenkins.AgentProtocolTest.testShouldNotOverrideUserConfiguration:void()","methodSource":"@Test\n    @LocalData\n    @Issue(\"JENKINS-45841\")\n    public void testShouldNotOverrideUserConfiguration() throws Exception {\n        assertEnabled(\"JNLP4-connect\");\n        assertDisabled(\"JNLP2-connect\", \"JNLP3-connect\");\n        assertProtocols(true, \"System protocols should be always enabled\", \"Ping\");\n    }","advisory":"JENKINS-45841"},{"className":"jenkins.agents.JnlpProtocol4ProxyHandlerTest","methodSignature":"jenkins.agents.JnlpProtocol4ProxyHandlerTest.smokes:void()","methodSource":"@Test\n    public void smokes() throws Exception {\n        // withLogger(JnlpProtocol4ProxyHandler.class, Level.FINE) pointless since log dumper is set up after these messages are printed\n        Slave s \u003d inboundAgents.createAgent(r, InboundAgentRule.Options.newBuilder().secret().build());\n        try {\n            assertThat(s.getChannel().call(new DummyTask()), is(\"response\"));\n            s.toComputer().getLogText().writeLogTo(0, System.out);\n        } finally {\n            inboundAgents.stop(r, s.getNodeName());\n        }\n        assertThat(ExtensionList.lookupSingleton(Handler.class).connections, is(Map.of(s.getNodeName(), 1)));\n    }"},{"className":"jenkins.agents.WebSocketAgentsTest","methodSignature":"jenkins.agents.WebSocketAgentsTest.smokes:void()","methodSource":"@Test\n    public void smokes() throws Exception {\n        Slave s \u003d inboundAgents.createAgent(r, InboundAgentRule.Options.newBuilder().secret().webSocket().build());\n        try {\n            assertEquals(\"response\", s.getChannel().call(new DummyTask()));\n            assertNotNull(s.getChannel().call(new FatTask()));\n            FreeStyleProject p \u003d r.createFreeStyleProject();\n            p.setAssignedNode(s);\n            p.getBuildersList().add(Functions.isWindows() ? new BatchFile(\"echo hello\") : new Shell(\"echo hello\"));\n            r.buildAndAssertSuccess(p);\n            s.toComputer().getLogText().writeLogTo(0, System.out);\n        } finally {\n            inboundAgents.stop(r, s.getNodeName());\n        }\n    }"},{"className":"jenkins.bugs.BridgeMethodsTest","methodSignature":"jenkins.bugs.BridgeMethodsTest.checkBridgeMethod:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65605\")\n    public void checkBridgeMethod() {\n        /*\n         * we should have 2 methods getFuture() in hudson.model.Queue$WaitingItem but with different return types :\n         * hudson.model.Queue$WaitingItem.getFuture()Ljava/util/concurrent/Future\n         * hudson.model.Queue$WaitingItem.getFuture()Lhudson.model.queue.QueueTaskFuture;\n         */\n        Method[] methods \u003d Queue.WaitingItem.class.getMethods();\n        List\u003cMethod\u003e collect \u003d Arrays.stream(methods).filter(m -\u003e m.getName().equals(\"getFuture\") \u0026\u0026 m.getParameterCount() \u003d\u003d 0).collect(Collectors.toList());\n\n        assertThat(collect, allOf(iterableWithSize(2),\n                                  hasItem(hasProperty(\"returnType\", is(Future.class))),\n                                  hasItem(hasProperty(\"returnType\", is(QueueTaskFuture.class)))));\n    }","advisory":"JENKINS-65605"},{"className":"jenkins.bugs.Jenkins14749Test","methodSignature":"jenkins.bugs.Jenkins14749Test.dashboard:void()","methodSource":"@Test\n    public void dashboard() throws Exception {\n        JenkinsRule.WebClient webClient \u003d createErrorReportingWebClient();\n        webClient.goTo(\"\");\n    }"},{"className":"jenkins.bugs.Jenkins14749Test","methodSignature":"jenkins.bugs.Jenkins14749Test.project:void()","methodSource":"@Test\n    public void project() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        JenkinsRule.WebClient webClient \u003d createErrorReportingWebClient();\n        webClient.getPage(p);\n    }"},{"className":"jenkins.bugs.Jenkins14749Test","methodSignature":"jenkins.bugs.Jenkins14749Test.configureProject:void()","methodSource":"@Test\n    public void configureProject() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        JenkinsRule.WebClient webClient \u003d createErrorReportingWebClient();\n        webClient.getPage(p, \"configure\");\n    }"},{"className":"jenkins.bugs.Jenkins14749Test","methodSignature":"jenkins.bugs.Jenkins14749Test.manage:void()","methodSource":"@Test\n    public void manage() throws Exception {\n        JenkinsRule.WebClient webClient \u003d createErrorReportingWebClient();\n        webClient.goTo(\"manage\");\n    }"},{"className":"jenkins.bugs.Jenkins14749Test","methodSignature":"jenkins.bugs.Jenkins14749Test.system:void()","methodSource":"@Test\n    public void system() throws Exception {\n        JenkinsRule.WebClient webClient \u003d createErrorReportingWebClient();\n        webClient.goTo(\"manage/configure\");\n    }"},{"className":"jenkins.bugs.Jenkins19124Test","methodSignature":"jenkins.bugs.Jenkins19124Test.interrelatedFormValidation:void()","methodSource":"@Issue(\"JENKINS-19124\")\n    @Test\n    public void interrelatedFormValidation() throws Exception {\n        j.jenkins.getInjector().injectMembers(this);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new Foo());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage c \u003d wc.getPage(p, \"configure\");\n        HtmlTextInput alpha \u003d c.getElementByName(\"_.alpha\");\n        // the fireEvent is required as setValue\u0027s new behavior is not triggering the onChange event anymore\n        alpha.setValue(\"hello\");\n        alpha.fireEvent(\"change\");\n\n        WebClientUtil.waitForJSExec(wc);\n        assertEquals(\"hello\", d.alpha);\n        assertEquals(\"2\", d.bravo);\n\n        HtmlSelect bravo \u003d c.getElementByName(\"_.bravo\");\n        bravo.setSelectedAttribute(\"1\", true);\n        WebClientUtil.waitForJSExec(wc);\n        assertEquals(\"hello\", d.alpha);\n        assertEquals(\"1\", d.bravo);\n    }","advisory":"JENKINS-19124"},{"className":"jenkins.bugs.Jenkins41511Test","methodSignature":"jenkins.bugs.Jenkins41511Test.configRoundTrip:void()","methodSource":"@Test\n    public void configRoundTrip() throws Exception {\n        Jenkins.get().setSecurityRealm(new HudsonPrivateSecurityRealm(true, false, null));\n        j.submit(j.createWebClient().goTo(\"configureSecurity\").getFormByName(\"config\"));\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.test403Redirect:void()","methodSource":"@Test\n    public void test403Redirect() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        final HtmlPage loginPage \u003d webClient.goTo(\"manage\");\n\n        assertTrue(loginPage.isHtmlPage());\n        assertThat(loginPage.getUrl().toExternalForm(), containsStringIgnoringCase(\"%2Fmanage\"));\n\n        ((HtmlTextInput) loginPage.getElementByName(\"j_username\")).setText(\"alice\");\n        ((HtmlPasswordInput) loginPage.getElementByName(\"j_password\")).setText(\"alice\");\n\n        final Page redirectedPage \u003d HtmlFormUtil.submit(loginPage.getFormByName(\"login\"));\n        assertTrue(redirectedPage.isHtmlPage());\n        assertEquals(j.getURL() + \"manage/\", redirectedPage.getUrl().toExternalForm());\n        assertThat(redirectedPage.getWebResponse().getContentAsString(), containsStringIgnoringCase(Messages.GlobalSecurityConfiguration_DisplayName()));\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.testRedirect:void()","methodSource":"@Test\n    public void testRedirect() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage indexPage \u003d webClient.goTo(\"\");\n\n        final Page loginPage \u003d indexPage.getElementsByTagName(\"a\").stream().filter(\n                e -\u003e e.hasAttribute(\"href\") \u0026\u0026 e.getAttribute(\"href\").contains(j.jenkins.getSecurityRealm().getLoginUrl())\n        ).findFirst().orElseThrow(() -\u003e new RuntimeException(\"cannot find login link\")).click();\n        // Could be simplified to `indexPage.getElementById(\"login-link\").click();` if we\u0027re willing to edit loginLink.jelly\n\n        assertTrue(loginPage.isHtmlPage());\n        assertThat(loginPage.getUrl().toExternalForm(), endsWithIgnoringCase(\"%2F\"));\n\n        HtmlPage loginHtmlPage \u003d (HtmlPage) loginPage;\n        ((HtmlTextInput) loginHtmlPage.getElementByName(\"j_username\")).setText(\"alice\");\n        ((HtmlPasswordInput) loginHtmlPage.getElementByName(\"j_password\")).setText(\"alice\");\n\n        final Page redirectedPage \u003d HtmlFormUtil.submit(loginHtmlPage.getFormByName(\"login\"));\n        assertTrue(redirectedPage.isHtmlPage());\n        assertEquals(indexPage.getUrl(), redirectedPage.getUrl());\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.withoutFrom:void()","methodSource":"@Test\n    public void withoutFrom() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage loginPage \u003d webClient.goTo(\"login\");\n\n        assertTrue(loginPage.isHtmlPage());\n\n        ((HtmlTextInput) loginPage.getElementByName(\"j_username\")).setText(\"alice\");\n        ((HtmlPasswordInput) loginPage.getElementByName(\"j_password\")).setText(\"alice\");\n\n        final Page redirectedPage \u003d HtmlFormUtil.submit(loginPage.getFormByName(\"login\"));\n        assertTrue(redirectedPage.isHtmlPage());\n        assertEquals(j.getURL(), redirectedPage.getUrl());\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.emptyFrom:void()","methodSource":"@Test\n    public void emptyFrom() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage loginPage \u003d webClient.goTo(\"login?from\u003d\");\n\n        assertTrue(loginPage.isHtmlPage());\n\n        ((HtmlTextInput) loginPage.getElementByName(\"j_username\")).setText(\"alice\");\n        ((HtmlPasswordInput) loginPage.getElementByName(\"j_password\")).setText(\"alice\");\n\n        final Page redirectedPage \u003d HtmlFormUtil.submit(loginPage.getFormByName(\"login\"));\n        assertTrue(redirectedPage.isHtmlPage());\n        assertEquals(j.getURL(), redirectedPage.getUrl());\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.testRedirectToProject:void()","methodSource":"@Test\n    public void testRedirectToProject() throws Exception {\n        FreeStyleProject freeStyleProject \u003d j.jenkins.getItemByFullName(\"foo bar\", FreeStyleProject.class);\n        assertNotNull(freeStyleProject);\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage projectPage \u003d webClient.getPage(freeStyleProject);\n        assertThat(projectPage.getWebResponse().getContentAsString(), containsStringIgnoringCase(freeStyleProject.getDisplayName()));\n\n        final Page loginPage \u003d projectPage.getElementsByTagName(\"a\").stream().filter(\n                e -\u003e e.hasAttribute(\"href\") \u0026\u0026 e.getAttribute(\"href\").contains(j.jenkins.getSecurityRealm().getLoginUrl())\n        ).findFirst().orElseThrow(() -\u003e new RuntimeException(\"cannot find login link\")).click();\n        // Could be simplified to `projectPage.getElementById(\"login-link\").click();` if we\u0027re willing to edit loginLink.jelly\n\n        assertTrue(loginPage.isHtmlPage());\n        assertThat(loginPage.getUrl().toExternalForm(), endsWithIgnoringCase(\"%2Fjob%2Ffoo%2520bar%2F\"));\n\n        HtmlPage loginHtmlPage \u003d (HtmlPage) loginPage;\n        ((HtmlTextInput) loginHtmlPage.getElementByName(\"j_username\")).setText(\"alice\");\n        ((HtmlPasswordInput) loginHtmlPage.getElementByName(\"j_password\")).setText(\"alice\");\n\n        final Page redirectedPage \u003d HtmlFormUtil.submit(loginHtmlPage.getFormByName(\"login\"));\n        assertTrue(redirectedPage.isHtmlPage());\n        assertEquals(freeStyleProject.getAbsoluteUrl(), redirectedPage.getUrl().toExternalForm());\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.absoluteRedirect:void()","methodSource":"@Test\n    public void absoluteRedirect() throws Exception {\n        assertNoOpenRedirect(\"login?from\u003dhttps:%2F%2Fjenkins.io\");\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.protocolRelativeRedirect:void()","methodSource":"@Test\n    public void protocolRelativeRedirect() throws Exception {\n        String loginUrl \u003d \"login?from\u003d%2F%2Fjenkins.io\";\n        assertNoOpenRedirect(loginUrl);\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.hostRelativeRedirect:void()","methodSource":"@Test\n    public void hostRelativeRedirect() throws Exception {\n        String loginUrl \u003d \"login?from\u003d%2Fjenkins.io\";\n        assertNoOpenRedirect(loginUrl);\n    }"},{"className":"jenkins.bugs.Jenkins64991Test","methodSignature":"jenkins.bugs.Jenkins64991Test.relativeRedirect:void()","methodSource":"@Test\n    public void relativeRedirect() throws Exception {\n        String loginUrl \u003d \"login?from\u003djenkins.io\";\n        assertNoOpenRedirect(loginUrl);\n    }"},{"className":"jenkins.ClassPathTest","methodSignature":"jenkins.ClassPathTest.uniqueness:void()","methodSource":"@Issue(\"JENKINS-46754\")\n    @Test\n    public void uniqueness() throws Exception {\n        Map\u003cString, List\u003cString\u003e\u003e entries \u003d new TreeMap\u003c\u003e();\n        for (File jar : new File(WarExploder.getExplodedDir(), \"WEB-INF/lib\").listFiles((dir, name) -\u003e name.endsWith(\".jar\"))) {\n            String jarname \u003d jar.getName();\n            try (JarFile jf \u003d new JarFile(jar)) {\n                for (JarEntry e : Collections.list(jf.entries())) {\n                    String name \u003d e.getName();\n                    if (name.startsWith(\"META-INF/\") || name.endsWith(\"/\") || !name.contains(\"/\")) {\n                        continue;\n                    }\n                    entries.computeIfAbsent(name, k -\u003e new ArrayList\u003c\u003e()).add(jarname);\n                }\n            }\n        }\n        entries.forEach((name, jarnames) -\u003e {\n            if (jarnames.size() \u003e 1 \u0026\u0026 !KNOWN_VIOLATIONS.contains(name)) { // Matchers.hasSize unfortunately does not display the collection\n                errors.addError(new AssertionError(name + \" duplicated in \" + jarnames));\n            }\n        });\n    }","advisory":"JENKINS-46754"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldStopLastBuild:void()","methodSource":"@Test\n    public void shouldStopLastBuild() throws Exception {\n        final FreeStyleProject project \u003d createLongRunningProject(TEST_JOB_NAME);\n        FreeStyleBuild build \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", build);\n        final String stdout \u003d runWith(List.of(TEST_JOB_NAME)).stdout();\n\n        assertThat(stdout, equalTo(\"Build \u0027#1\u0027 stopped for job \u0027jobName\u0027\" + LN));\n\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(build));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldNotStopEndedBuild:void()","methodSource":"@Test\n    public void shouldNotStopEndedBuild() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject(TEST_JOB_NAME);\n        project.getBuildersList().add(new SleepBuilder(TimeUnit.SECONDS.toMillis(1)));\n        j.buildAndAssertSuccess(project);\n\n        final String out \u003d runWith(List.of(TEST_JOB_NAME)).stdout();\n\n        assertThat(out, equalTo(\"No builds stopped\" + LN));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldStopSeveralWorkingBuilds:void()","methodSource":"@Test\n    public void shouldStopSeveralWorkingBuilds() throws Exception {\n        final FreeStyleProject project \u003d createLongRunningProject(TEST_JOB_NAME);\n        project.setConcurrentBuild(true);\n\n        FreeStyleBuild b1 \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", b1);\n        FreeStyleBuild b2 \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", b2);\n\n        final String stdout \u003d runWith(List.of(TEST_JOB_NAME)).stdout();\n\n        assertThat(stdout, equalTo(\"Build \u0027#2\u0027 stopped for job \u0027jobName\u0027\" + LN +\n                \"Build \u0027#1\u0027 stopped for job \u0027jobName\u0027\" + LN));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b1));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b2));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldReportNotSupportedType:void()","methodSource":"@Test\n    public void shouldReportNotSupportedType() throws Exception {\n        final String testFolderName \u003d \"folder\";\n        j.createFolder(testFolderName);\n\n        final String stderr \u003d runWith(List.of(testFolderName)).stderr();\n\n        assertThat(stderr, equalTo(LN + \"ERROR: Job not found: \u0027folder\u0027\" + LN));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldDoNothingIfJobNotFound:void()","methodSource":"@Test\n    public void shouldDoNothingIfJobNotFound() throws Exception {\n        final String stderr \u003d runWith(List.of(TEST_JOB_NAME)).stderr();\n\n        assertThat(stderr, equalTo(LN + \"ERROR: Job not found: \u0027jobName\u0027\" + LN));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldStopWorkingBuildsInSeveralJobs:void()","methodSource":"@Test\n    public void shouldStopWorkingBuildsInSeveralJobs() throws Exception {\n        final List\u003cString\u003e inputJobNames \u003d asList(TEST_JOB_NAME, TEST_JOB_NAME_2);\n        setupAndAssertTwoBuildsStop(inputJobNames);\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldFilterJobDuplicatesInInput:void()","methodSource":"@Test\n    public void shouldFilterJobDuplicatesInInput() throws Exception {\n        final List\u003cString\u003e inputNames \u003d asList(TEST_JOB_NAME, TEST_JOB_NAME, TEST_JOB_NAME_2);\n        setupAndAssertTwoBuildsStop(inputNames);\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldReportBuildStopError:void()","methodSource":"@Test\n    public void shouldReportBuildStopError() throws Exception {\n        final FreeStyleProject project \u003d createLongRunningProject(TEST_JOB_NAME);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.READ).everywhere().toEveryone().\n                grant(Item.READ).onItems(project).toEveryone().\n                grant(Item.CANCEL).onItems(project).toAuthenticated());\n        FreeStyleBuild build \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", build);\n\n        final String stdout \u003d runWith(List.of(TEST_JOB_NAME)).stdout();\n\n        assertThat(stdout,\n                equalTo(\"Exception occurred while trying to stop build \u0027#1\u0027 for job \u0027jobName\u0027. \" +\n                        \"Exception class: AccessDeniedException3, message: anonymous is missing the Job/Cancel permission\" + LN +\n                        \"No builds stopped\" + LN));\n\n        build.doStop();\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(build));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldStopSecondJobEvenIfFirstStopFailed:void()","methodSource":"@Test\n    public void shouldStopSecondJobEvenIfFirstStopFailed() throws Exception {\n        final FreeStyleProject project \u003d createLongRunningProject(TEST_JOB_NAME_2);\n\n        final FreeStyleProject restrictedProject \u003d createLongRunningProject(TEST_JOB_NAME);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.READ).everywhere().toEveryone().\n                grant(Item.READ).onItems(restrictedProject, project).toEveryone().\n                grant(Item.CANCEL).onItems(restrictedProject).toAuthenticated().\n                grant(Item.CANCEL).onItems(project).toEveryone());\n\n        FreeStyleBuild b1 \u003d restrictedProject.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", b1);\n        FreeStyleBuild b2 \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", b2);\n\n        final String stdout \u003d runWith(asList(TEST_JOB_NAME, TEST_JOB_NAME_2)).stdout();\n\n        assertThat(stdout,\n                equalTo(\"Exception occurred while trying to stop build \u0027#1\u0027 for job \u0027jobName\u0027. \" +\n                        \"Exception class: AccessDeniedException3, message: anonymous is missing the Job/Cancel permission\" + LN +\n                        \"Build \u0027#1\u0027 stopped for job \u0027jobName2\u0027\" + LN));\n\n        b1.doStop();\n        b2.doStop();\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b1));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b2));\n    }"},{"className":"jenkins.cli.StopBuildsCommandTest","methodSignature":"jenkins.cli.StopBuildsCommandTest.shouldStopEarlierBuildsEvenIfLatestComplete:void()","methodSource":"@Test\n    public void shouldStopEarlierBuildsEvenIfLatestComplete() throws Exception {\n        final FreeStyleProject project \u003d createLongRunningProject(TEST_JOB_NAME);\n        project.setConcurrentBuild(true);\n        j.jenkins.setNumExecutors(3);\n\n        FreeStyleBuild b1 \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", b1);\n        FreeStyleBuild b2 \u003d project.scheduleBuild2(0).waitForStart();\n        j.waitForMessage(\"Sleeping\", b2);\n\n        project.getBuildersList().clear();\n        FreeStyleBuild b3 \u003d j.buildAndAssertSuccess(project);\n\n        final String stdout \u003d runWith(List.of(TEST_JOB_NAME)).stdout();\n\n        assertThat(stdout, equalTo(\"Build \u0027#2\u0027 stopped for job \u0027jobName\u0027\" + LN +\n                \"Build \u0027#1\u0027 stopped for job \u0027jobName\u0027\" + LN));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b1));\n        j.assertBuildStatus(Result.ABORTED, j.waitForCompletion(b2));\n    }"},{"className":"jenkins.console.ConsoleUrlProviderTest","methodSignature":"jenkins.console.ConsoleUrlProviderTest.getRedirectUrl:void()","methodSource":"@Test\n    public void getRedirectUrl() throws Exception {\n        ConsoleUrlProviderGlobalConfiguration.get().setProviders(list(new CustomConsoleUrlProvider()));\n        FreeStyleProject p \u003d r.createProject(FreeStyleProject.class);\n        // Default URL\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        assertCustomConsoleUrl(r.contextPath + \u0027/\u0027 + b.getUrl() + \"console\", b);\n        // Custom URL without leading slash\n        b.setDescription(\"custom my/build/console\");\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console\", b);\n        // Custom URL with leading slash\n        b.setDescription(\"custom /my/build/console\");\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console\", b);\n        // Default URL is used when extensions throw exceptions.\n        b.setDescription(\"NullPointerException\");\n        assertCustomConsoleUrl(r.contextPath + \u0027/\u0027 + b.getUrl() + \"console\", b);\n        // Check precedence and fallthrough behavior with ConsoleUrlProviderGlobalConfiguration.providers.\n        ConsoleUrlProviderGlobalConfiguration.get().setProviders(\n                list(new IgnoreAllRunsConsoleUrlProvider(), new CustomConsoleUrlProvider(\"-a\"), new CustomConsoleUrlProvider(\"-b\")));\n        b.setDescription(\"custom my/build/console\");\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console-a\", b);\n    }"},{"className":"jenkins.console.ConsoleUrlProviderTest","methodSignature":"jenkins.console.ConsoleUrlProviderTest.getUserSpecificRedirectUrl:void()","methodSource":"@Test\n    public void getUserSpecificRedirectUrl() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        User admin \u003d User.getById(\"admin\", true);\n        // Admin choses custom, user overrides to default\n        ConsoleUrlProviderGlobalConfiguration.get().setProviders(list(new CustomConsoleUrlProvider()));\n        admin.getProperty(ConsoleUrlProviderUserProperty.class).setProviders(list(new DefaultConsoleUrlProvider()));\n        FreeStyleProject p \u003d r.createProject(FreeStyleProject.class);\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        b.setDescription(\"custom my/build/console\");\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console\", b);\n        assertCustomConsoleUrl(r.contextPath + \"/\" + b.getUrl() + \"console\", admin, b);\n        // Admin does not configure anything, user chooses custom\n        ConsoleUrlProviderGlobalConfiguration.get().setProviders(null);\n        admin.getProperty(ConsoleUrlProviderUserProperty.class).setProviders(list(new CustomConsoleUrlProvider()));\n        assertCustomConsoleUrl(r.contextPath + \"/\" + b.getUrl() + \"console\", b);\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console\", admin, b);\n        // Check precedence and fallthrough behavior with ConsoleUrlProviderUserProperty.providers.\n        admin.getProperty(ConsoleUrlProviderUserProperty.class).setProviders(\n                list(new IgnoreAllRunsConsoleUrlProvider(), new CustomConsoleUrlProvider(\"-a\"), new CustomConsoleUrlProvider(\"-b\")));\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console-a\", admin, b);\n    }"},{"className":"jenkins.console.ConsoleUrlProviderTest","methodSignature":"jenkins.console.ConsoleUrlProviderTest.useGlobalProvidersIfUserProvidersDontReturnValidUrl:void()","methodSource":"@Test\n    public void useGlobalProvidersIfUserProvidersDontReturnValidUrl() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        User admin \u003d User.getById(\"admin\", true);\n        // Admin choses custom, user chooses a provider that ignores everything, so global choice still gets used.\n        ConsoleUrlProviderGlobalConfiguration.get().setProviders(list(new CustomConsoleUrlProvider()));\n        admin.getProperty(ConsoleUrlProviderUserProperty.class).setProviders(list(new IgnoreAllRunsConsoleUrlProvider()));\n        FreeStyleProject p \u003d r.createProject(FreeStyleProject.class);\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        b.setDescription(\"custom my/build/console\");\n        assertCustomConsoleUrl(r.contextPath + \"/my/build/console\", admin, b);\n    }"},{"className":"jenkins.console.ConsoleUrlProviderTest","methodSignature":"jenkins.console.ConsoleUrlProviderTest.invalidRedirectUrls:void()","methodSource":"@Test\n    public void invalidRedirectUrls() throws Exception {\n        ConsoleUrlProviderGlobalConfiguration.get().setProviders(list(new CustomConsoleUrlProvider()));\n        FreeStyleProject p \u003d r.createProject(FreeStyleProject.class);\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        b.setDescription(\"custom https://example.com\");\n        assertCustomConsoleUrl(r.contextPath + \"/\" + b.getUrl() + \"console\", b);\n        b.setDescription(\"custom \u003c!\u003einvalid url\u003c!\u003e\");\n        assertCustomConsoleUrl(r.contextPath + \"/\" + b.getUrl() + \"console\", b);\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsAgentsTest.testInitial:void()","methodSource":"@Test\n    public void testInitial() {\n        ControllerExecutorsAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsAgents.class);\n        assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsAgentsTest.testControllerExecutorsZero:void()","methodSource":"@Test\n    public void testControllerExecutorsZero() throws Exception {\n        Slave agent \u003d j.createSlave();\n        j.jenkins.setNumExecutors(0);\n        ControllerExecutorsAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsAgents.class);\n        assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsAgentsTest.testHasAgent:void()","methodSource":"@Test\n    public void testHasAgent() throws Exception {\n        Slave agent \u003d j.createSlave();\n        ControllerExecutorsAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsAgents.class);\n        assertTrue(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsAgentsTest.testHasCloud:void()","methodSource":"@Test\n    public void testHasCloud() throws Exception {\n        ProjectTest.DummyCloudImpl2 c2 \u003d new ProjectTest.DummyCloudImpl2(j, 0);\n        j.jenkins.clouds.add(c2);\n        ControllerExecutorsAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsAgents.class);\n        assertTrue(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest.testInitial:void()","methodSource":"@Test\n    public void testInitial() {\n        ControllerExecutorsNoAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsNoAgents.class);\n        assertTrue(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest.testControllerExecutorsZero:void()","methodSource":"@Test\n    public void testControllerExecutorsZero() throws IOException {\n        j.jenkins.setNumExecutors(0);\n        ControllerExecutorsNoAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsNoAgents.class);\n        assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest.testHasAgent:void()","methodSource":"@Test\n    public void testHasAgent() throws Exception {\n        Slave agent \u003d j.createSlave();\n        ControllerExecutorsNoAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsNoAgents.class);\n        assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest","methodSignature":"jenkins.diagnostics.ControllerExecutorsNoAgentsTest.testHasCloud:void()","methodSource":"@Test\n    public void testHasCloud() throws Exception {\n        ProjectTest.DummyCloudImpl2 c2 \u003d new ProjectTest.DummyCloudImpl2(j, 0);\n        j.jenkins.clouds.add(c2);\n        ControllerExecutorsNoAgents monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(ControllerExecutorsNoAgents.class);\n        assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.diagnostics.RootUrlNotSetMonitorTest","methodSignature":"jenkins.diagnostics.RootUrlNotSetMonitorTest.testWithRootUrl_configured:void()","methodSource":"@Test\n    @Issue(\"JENKINS-31661\")\n    public void testWithRootUrl_configured() {\n        // test relies on the default JTH behavior\n        JenkinsLocationConfiguration config \u003d JenkinsLocationConfiguration.get();\n        assertTrue(StringUtils.isNotBlank(config.getUrl()));\n\n        RootUrlNotSetMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(RootUrlNotSetMonitor.class);\n        assertFalse(\"Monitor must not be activated\", monitor.isActivated());\n\n        config.setUrl(null);\n\n        assertTrue(\"Monitor must be activated\", monitor.isActivated());\n\n        config.setUrl(\"ftp://localhost:8080/jenkins\");\n\n        assertTrue(\"Monitor must be activated\", monitor.isActivated());\n\n        config.setUrl(\"http://localhost:8080/jenkins\");\n\n        assertFalse(\"Monitor must be activated\", monitor.isActivated());\n    }","advisory":"JENKINS-31661"},{"className":"jenkins.diagnostics.URICheckEncodingMonitorTest","methodSignature":"jenkins.diagnostics.URICheckEncodingMonitorTest.emptyValueInResponse:void()","methodSource":"@Test\n    public void emptyValueInResponse() throws Exception {\n        j.executeOnServer(() -\u003e {\n                URICheckEncodingMonitor monitor \u003d new URICheckEncodingMonitor();\n                FormValidation validation \u003d monitor.doCheckURIEncoding(Stapler.getCurrentRequest());\n                assertThat(validation.kind, is(FormValidation.Kind.WARNING));\n                assertThat(validation.getMessage(), containsString(\"Your container doesn’t use UTF-8 to decode URLs.\"));\n                return null;\n            });\n    }"},{"className":"jenkins.ExtensionFilterTest","methodSignature":"jenkins.ExtensionFilterTest.filter:void()","methodSource":"@Test\n    public void filter() {\n        assertThat(PageDecorator.all(), hasSize(1));\n        assertTrue(ConsoleAnnotatorFactory.all().isEmpty());\n    }"},{"className":"jenkins.fingerprints.FingerprintStorageTest","methodSignature":"jenkins.fingerprints.FingerprintStorageTest.testLoadingAndSavingLocalStorageFingerprintWithExternalStorage:void()","methodSource":"@Test\n    public void testLoadingAndSavingLocalStorageFingerprintWithExternalStorage() throws IOException {\n        String id \u003d Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n        Fingerprint fingerprintSaved \u003d new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n        Fingerprint fingerprintLoaded \u003d Fingerprint.load(id);\n        assertThat(fingerprintLoaded, is(not(nullValue())));\n        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n\n        // After external storage is configured, check if local storage fingerprint is still accessible.\n        FingerprintStorage externalFingerprintStorage \u003d configureExternalStorage();\n        fingerprintLoaded \u003d Fingerprint.load(id);\n        assertThat(fingerprintLoaded, is(not(nullValue())));\n        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n\n        // After loading the fingerprint, ensure it was moved to external storage.\n        fingerprintLoaded \u003d externalFingerprintStorage.load(id);\n        assertThat(fingerprintLoaded, is(not(nullValue())));\n        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n\n        // Ensure that the loaded fingerprint was deleted from local storage after being loaded.\n        fingerprintLoaded \u003d ExtensionList.lookupSingleton(FileFingerprintStorage.class).load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n    }"},{"className":"jenkins.fingerprints.FingerprintStorageTest","methodSignature":"jenkins.fingerprints.FingerprintStorageTest.testLoadingAndSavingFingerprintWithExternalStorage:void()","methodSource":"@Test\n    public void testLoadingAndSavingFingerprintWithExternalStorage() throws IOException {\n        FingerprintStorage externalFingerprintStorage \u003d configureExternalStorage();\n        String id \u003d Util.getDigestOf(\"testLoadingAndSavingFingerprintWithExternalStorage\");\n        Fingerprint fingerprintSaved \u003d new Fingerprint(null, \"bar.jar\", Util.fromHexString(id));\n        Fingerprint fingerprintLoaded \u003d externalFingerprintStorage.load(id);\n        assertThat(fingerprintLoaded, is(not(nullValue())));\n        assertThat(fingerprintSaved.toString(), is(equalTo(fingerprintLoaded.toString())));\n    }"},{"className":"jenkins.fingerprints.FingerprintStorageTest","methodSignature":"jenkins.fingerprints.FingerprintStorageTest.testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration:void()","methodSource":"@Test\n    public void testDeletingLocalStorageFingerprintWithExternalStorageBeforeMigration() throws IOException {\n        String id \u003d Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n        configureExternalStorage();\n        Fingerprint.delete(id);\n        Fingerprint fingerprintLoaded \u003d ExtensionList.lookupSingleton(FileFingerprintStorage.class).load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n    }"},{"className":"jenkins.fingerprints.FingerprintStorageTest","methodSignature":"jenkins.fingerprints.FingerprintStorageTest.testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration:void()","methodSource":"@Test\n    public void testDeletingLocalStorageFingerprintWithExternalStorageAfterMigration() throws IOException {\n        String id \u003d Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n        FingerprintStorage externalFingerprintStorage \u003d configureExternalStorage();\n        Fingerprint.load(id);\n        Fingerprint.delete(id);\n        Fingerprint fingerprintLoaded \u003d externalFingerprintStorage.load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n    }"},{"className":"jenkins.fingerprints.FingerprintStorageTest","methodSignature":"jenkins.fingerprints.FingerprintStorageTest.testDeletingFingerprintWithExternalStorage:void()","methodSource":"@Test\n    public void testDeletingFingerprintWithExternalStorage() throws IOException {\n        configureExternalStorage();\n        String id \u003d Util.getDigestOf(\"testLoadingAndSavingLocalStorageFingerprintWithExternalStorage\");\n        new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n        Fingerprint.delete(id);\n        Fingerprint fingerprintLoaded \u003d Fingerprint.load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n    }"},{"className":"jenkins.fingerprints.FingerprintStorageTest","methodSignature":"jenkins.fingerprints.FingerprintStorageTest.testMigrationDeletesFingerprintsInMemoryFromFileStorage:void()","methodSource":"@Test\n    public void testMigrationDeletesFingerprintsInMemoryFromFileStorage() throws IOException {\n        String id \u003d Util.getDigestOf(\"testMigrationDeletesFingerprintsInMemoryFromFileStorage\");\n        Fingerprint fingerprintSaved \u003d new Fingerprint(null, \"foo.jar\", Util.fromHexString(id));\n        configureExternalStorage();\n        fingerprintSaved.add(\"test\", 3);\n        // This fingerprint is now implicitly saved without making a load call.\n        // We want the file storage to not have this fingerprint now.\n        Fingerprint fingerprintLoaded \u003d ExtensionList.lookupSingleton(FileFingerprintStorage.class).load(id);\n        assertThat(fingerprintLoaded, is(nullValue()));\n\n    }"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_baseName_unspecified:void()","methodSource":"@Test\n    public void test_baseName_unspecified() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle\").getJSONObject();\n        Assert.assertEquals(\"error\", response.getString(\"status\"));\n        Assert.assertEquals(\"Mandatory parameter \u0027baseName\u0027 not specified.\", response.getString(\"message\"));\n    }"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_baseName_unknown:void()","methodSource":"@Test\n    public void test_baseName_unknown() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003dcom.acme.XyzWhatever\").getJSONObject();\n        Assert.assertEquals(\"error\", response.getString(\"status\"));\n        assertThat(response.getString(\"message\"), startsWith(\"Can\u0027t find bundle for base name com.acme.XyzWhatever\"));\n    }"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_baseName_plugin:void()","methodSource":"@Issue(\"JENKINS-35270\")\n    @Test\n    public void test_baseName_plugin() throws Exception {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003dorg.jenkinsci.plugins.matrixauth.Messages\").getJSONObject();\n        Assert.assertEquals(response.toString(), \"ok\", response.getString(\"status\"));\n        JSONObject data \u003d response.getJSONObject(\"data\");\n        Assert.assertEquals(\"Matrix-based security\", data.getString(\"GlobalMatrixAuthorizationStrategy.DisplayName\"));\n    }","advisory":"JENKINS-35270"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_valid:void()","methodSource":"@Test\n    public void test_valid() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003dhudson.logging.Messages\u0026language\u003dde\").getJSONObject();\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        JSONObject data \u003d response.getJSONObject(\"data\");\n        Assert.assertEquals(\"Initialisiere Log-Rekorder\", data.getString(\"LogRecorderManager.init\"));\n    }"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_valid_region_variant:void()","methodSource":"@Issue(\"JENKINS-39034\")\n    @Test // variant testing\n    public void test_valid_region_variant() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003djenkins.i18n.Messages\u0026language\u003den_AU_variant\").getJSONObject();\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        JSONObject data \u003d response.getJSONObject(\"data\");\n        Assert.assertEquals(\"value_au_variant\", data.getString(\"Key\"));\n    }","advisory":"JENKINS-39034"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_valid_region:void()","methodSource":"@Issue(\"JENKINS-39034\")\n    @Test //country testing with delimiter \u0027-\u0027 instead of \u0027_\u0027\n    public void test_valid_region() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003djenkins.i18n.Messages\u0026language\u003den-AU\").getJSONObject();\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        JSONObject data \u003d response.getJSONObject(\"data\");\n        Assert.assertEquals(\"value_au\", data.getString(\"Key\"));\n    }","advisory":"JENKINS-39034"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_valid_fallback:void()","methodSource":"@Issue(\"JENKINS-39034\")\n    @Test //fallthrough to default language if variant does not exit\n    public void test_valid_fallback() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003djenkins.i18n.Messages\u0026language\u003den_NZ_variant\").getJSONObject();\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        JSONObject data \u003d response.getJSONObject(\"data\");\n        Assert.assertEquals(\"value\", data.getString(\"Key\"));\n    }","advisory":"JENKINS-39034"},{"className":"jenkins.I18nTest","methodSignature":"jenkins.I18nTest.test_unsupported_language:void()","methodSource":"@Test // testing with unknown language falls through to default language\n    public void test_unsupported_language() throws IOException, SAXException {\n        JSONObject response \u003d jenkinsRule.getJSON(\"i18n/resourceBundle?baseName\u003djenkins.i18n.Messages\u0026language\u003dxyz\").getJSONObject();\n        Assert.assertEquals(\"ok\", response.getString(\"status\"));\n        JSONObject data \u003d response.getJSONObject(\"data\");\n        Assert.assertEquals(\"value\", data.getString(\"Key\"));\n    }"},{"className":"jenkins.install.InstallStateTest","methodSignature":"jenkins.install.InstallStateTest.shouldPerformCorrectConversionForAllNames:void()","methodSource":"@Test\n    public void shouldPerformCorrectConversionForAllNames() {\n        ExtensionList\u003cInstallState\u003e states \u003d InstallState.all();\n        for (InstallState state : states) {\n            InstallState afterRoundtrip \u003d forName(state.name());\n            // It also prevents occasional name duplications\n            assertThat(\"State after the roundtrip must be equal to the original state\",\n                    afterRoundtrip, equalTo(state));\n            assertSame(\"State \" + state + \" should return the extension point instance after deserialization\",\n                    afterRoundtrip, state);\n        }\n    }"},{"className":"jenkins.install.InstallStateTest","methodSignature":"jenkins.install.InstallStateTest.shouldNotFailOnNullXMLField:void()","methodSource":"@Test\n    @Issue(\"JENKINS-35206\")\n    public void shouldNotFailOnNullXMLField() {\n        String xml \u003d \"\u003cjenkins.install.InstallState\u003e\\n\" +\n            \"  \u003cisSetupComplete\u003etrue\u003c/isSetupComplete\u003e\\n\" +\n            \"\u003c/jenkins.install.InstallState\u003e\";\n        final InstallState state \u003d forXml(xml);\n        assertThat(state, equalTo(InstallState.UNKNOWN));\n    }","advisory":"JENKINS-35206"},{"className":"jenkins.install.InstallStateTest","methodSignature":"jenkins.install.InstallStateTest.shouldNotFailOnEmptyName:void()","methodSource":"@Test\n    @Issue(\"JENKINS-35206\")\n    public void shouldNotFailOnEmptyName() {\n        final InstallState state \u003d forName(\"\");\n        assertThat(state, equalTo(InstallState.UNKNOWN));\n    }","advisory":"JENKINS-35206"},{"className":"jenkins.install.InstallStateTest","methodSignature":"jenkins.install.InstallStateTest.shouldReturnUnknownStateForUnknownName:void()","methodSource":"@Test\n    @Issue(\"JENKINS-35206\")\n    public void shouldReturnUnknownStateForUnknownName() {\n        final InstallState state \u003d forName(\"NonExistentStateName\");\n        assertThat(state, equalTo(InstallState.UNKNOWN));\n    }","advisory":"JENKINS-35206"},{"className":"jenkins.install.InstallUtilTest","methodSignature":"jenkins.install.InstallUtilTest.test_typeTransitions:void()","methodSource":"@Test\n    public void test_typeTransitions() throws IOException, ServletException {\n        InstallUtil.getLastExecVersionFile().delete();\n        InstallUtil.getConfigFile().delete();\n\n        // A new test instance sets up security first\n        Assert.assertEquals(InstallState.INITIAL_SECURITY_SETUP, InstallUtil.getNextInstallState(InstallState.UNKNOWN));\n\n        // And proceeds to the new state\n        Assert.assertEquals(InstallState.NEW, InstallUtil.getNextInstallState(InstallState.INITIAL_SECURITY_SETUP));\n\n        // Save the last exec version. This will only be done by Jenkins after one of:\n        //   1. A successful run of the install wizard.\n        //   2. A success upgrade.\n        //   3. A successful restart.\n        Jenkins.get().getSetupWizard().completeSetup();\n\n        // Fudge things a little now, pretending there\u0027s a restart...\n\n        // Now if we ask what is the InstallState, we should be told it\u0027s a RESTART because\n        // the install wizard is complete and the version matches the currently executing\n        // Jenkins version.\n        Assert.assertEquals(InstallState.RESTART, InstallUtil.getNextInstallState(InstallState.UNKNOWN));\n\n        // Fudge things again, changing the stored version to something old, faking an upgrade...\n        InstallUtil.saveLastExecVersion(\"1.584\");\n        Assert.assertEquals(InstallState.UPGRADE, InstallUtil.getNextInstallState(InstallState.UNKNOWN));\n\n        // Fudge things yet again, changing the stored version to something very very new, faking a downgrade...\n        InstallUtil.saveLastExecVersion(\"1000000.0\");\n        Assert.assertEquals(InstallState.DOWNGRADE, InstallUtil.getNextInstallState(InstallState.UNKNOWN));\n    }"},{"className":"jenkins.install.InstallUtilTest","methodSignature":"jenkins.install.InstallUtilTest.test_getLastExecVersion:void()","methodSource":"@Test\n    public void test_getLastExecVersion() throws Exception {\n        Main.isUnitTest \u003d true;\n\n        // Delete the config file, forcing getLastExecVersion to return\n        // the default/unset version value.\n        InstallUtil.getConfigFile().delete();\n        Assert.assertEquals(\"1.0\", InstallUtil.getLastExecVersion());\n\n        // Set the version to some stupid value and check again. This time,\n        // getLastExecVersion should read it from the file.\n        setStoredVersion(\"9.123\");\n        Assert.assertEquals(\"9.123\", InstallUtil.getLastExecVersion());\n    }"},{"className":"jenkins.install.InstallUtilTest","methodSignature":"jenkins.install.InstallUtilTest.testSaveAndRestoreInstallingPlugins:void()","methodSource":"@Test\n    public void testSaveAndRestoreInstallingPlugins() throws Exception {\n        final List\u003cUpdateCenterJob\u003e updates \u003d new ArrayList\u003c\u003e();\n\n        final Map\u003cString, String\u003e nameMap \u003d new HashMap\u003c\u003e();\n\n        new UpdateCenter() { // inner classes...\n            {\n                new UpdateSite(\"foo\", \"http://omg.org\") {\n                    {\n                        for (String name : Arrays.asList(\"pending-plug:Pending\", \"installing-plug:Installing\", \"failure-plug:Failure\", \"success-plug:Success\")) {\n                            String statusType \u003d name.split(\":\")[1];\n                            name \u003d name.split(\":\")[0];\n\n                            InstallationStatus status;\n                            if (\"Success\".equals(statusType)) {\n                                status \u003d Mockito.mock(Success.class, Mockito.CALLS_REAL_METHODS);\n                            } else if (\"Failure\".equals(statusType)) {\n                                status \u003d Mockito.mock(Failure.class, Mockito.CALLS_REAL_METHODS);\n                            } else if (\"Installing\".equals(statusType)) {\n                                status \u003d Mockito.mock(Installing.class, Mockito.CALLS_REAL_METHODS);\n                            } else {\n                                status \u003d Mockito.mock(Pending.class, Mockito.CALLS_REAL_METHODS);\n                            }\n\n                            nameMap.put(statusType, status.getClass().getSimpleName());\n\n                            JSONObject json \u003d new JSONObject();\n                            json.put(\"name\", name);\n                            json.put(\"version\", \"1.1\");\n                            json.put(\"url\", \"http://google.com\");\n                            json.put(\"dependencies\", new JSONArray());\n                            Plugin p \u003d new Plugin(getId(), json);\n\n                            InstallationJob job \u003d new InstallationJob(p, null, (Authentication) null, false);\n                            job.status \u003d status;\n                            job.setCorrelationId(UUID.randomUUID()); // this indicates the plugin was \u0027directly selected\u0027\n                            updates.add(job);\n                        }\n                    }\n                };\n            }\n        };\n\n        InstallUtil.persistInstallStatus(updates);\n\n        Map\u003cString, String\u003e persisted \u003d InstallUtil.getPersistedInstallStatus();\n\n        Assert.assertEquals(nameMap.get(\"Pending\"), persisted.get(\"pending-plug\"));\n        Assert.assertEquals(\"Pending\", persisted.get(\"installing-plug\")); // only marked as success/fail after successful install\n        Assert.assertEquals(nameMap.get(\"Failure\"), persisted.get(\"failure-plug\"));\n        Assert.assertEquals(nameMap.get(\"Success\"), persisted.get(\"success-plug\"));\n\n        InstallUtil.clearInstallStatus();\n\n        persisted \u003d InstallUtil.getPersistedInstallStatus();\n\n        Assert.assertNull(persisted); // should be deleted\n    }"},{"className":"jenkins.install.LoadDetachedPluginsTest","methodSignature":"jenkins.install.LoadDetachedPluginsTest.upgradeFromJenkins1:void()","methodSource":"@Issue(\"JENKINS-48365\")\n    @Test\n    @LocalData\n    public void upgradeFromJenkins1() throws IOException {\n        VersionNumber since \u003d new VersionNumber(\"1.490\");\n        rr.then(r -\u003e {\n            List\u003cDetachedPlugin\u003e detachedPlugins \u003d DetachedPluginsUtil.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(4));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }","advisory":"JENKINS-48365"},{"className":"jenkins.install.LoadDetachedPluginsTest","methodSignature":"jenkins.install.LoadDetachedPluginsTest.noUpdateSiteWarnings:void()","methodSource":"@Test\n    @Ignore(\"Only useful while updating bundled plugins, otherwise new security warnings fail unrelated builds\")\n    @LocalData\n    public void noUpdateSiteWarnings() {\n        rr.then(r -\u003e {\n            r.jenkins.getUpdateCenter().updateAllSites();\n            final UpdateSiteWarningsMonitor monitor \u003d ExtensionList.lookupSingleton(UpdateSiteWarningsMonitor.class);\n            assertThat(\"There should be no active plugin security warnings\", monitor.getActivePluginWarningsByPlugin().keySet(), empty());\n        });\n    }"},{"className":"jenkins.install.LoadDetachedPluginsTest","methodSignature":"jenkins.install.LoadDetachedPluginsTest.upgradeFromJenkins2:void()","methodSource":"@Issue(\"JENKINS-48365\")\n    @Test\n    @LocalData\n    public void upgradeFromJenkins2() {\n        VersionNumber since \u003d new VersionNumber(\"2.0\");\n        rr.then(r -\u003e {\n            List\u003cDetachedPlugin\u003e detachedPlugins \u003d DetachedPluginsUtil.getDetachedPlugins(since);\n            assertThat(\"Plugins have been detached since the pre-upgrade version\",\n                    detachedPlugins.size(), greaterThan(1));\n            assertThat(\"Plugins detached between the pre-upgrade version and the current version should be installed\",\n                    getInstalledDetachedPlugins(r, detachedPlugins).size(), equalTo(detachedPlugins.size()));\n            assertNoFailedPlugins(r);\n        });\n    }","advisory":"JENKINS-48365"},{"className":"jenkins.install.LoadDetachedPluginsTest","methodSignature":"jenkins.install.LoadDetachedPluginsTest.newInstallation:void()","methodSource":"@Test\n    public void newInstallation() {\n        rr.then(r -\u003e {\n            List\u003cDetachedPlugin\u003e detachedPlugins \u003d DetachedPluginsUtil.getDetachedPlugins();\n            assertThat(\"Detached plugins should exist\", detachedPlugins, not(empty()));\n            assertThat(\"Detached plugins should not be installed on a new instance\",\n                    getInstalledDetachedPlugins(r, detachedPlugins), empty());\n            assertNoFailedPlugins(r);\n        });\n        rr.then(r -\u003e {\n            List\u003cDetachedPlugin\u003e detachedPlugins \u003d DetachedPluginsUtil.getDetachedPlugins();\n            assertThat(\"Detached plugins should exist\", detachedPlugins, not(empty()));\n            assertThat(\"Detached plugins should not be installed after restarting\",\n                    getInstalledDetachedPlugins(r, detachedPlugins), empty());\n            assertNoFailedPlugins(r);\n        });\n    }"},{"className":"jenkins.install.LoadDetachedPluginsTest","methodSignature":"jenkins.install.LoadDetachedPluginsTest.installDetachedDependencies:void()","methodSource":"@Issue(\"JENKINS-55582\")\n    @LocalData\n    @Test\n    public void installDetachedDependencies() {\n        logging.record(PluginManager.class, Level.FINE).record(ClassicPluginStrategy.class, Level.FINE);\n        rr.then(r -\u003e {\n            List\u003cString\u003e activePlugins \u003d r.jenkins.getPluginManager().getPlugins().stream().filter(PluginWrapper::isActive).map(PluginWrapper::getShortName).collect(Collectors.toList());\n            assertThat(\"we precreated $JENKINS_HOME/plugins/example.jpi so it had better be loaded\", activePlugins, hasItem(\"example\"));\n            { // Check that it links correctly against an implied dependency from a detached plugin:\n                Class\u003c?\u003e callerC \u003d r.jenkins.pluginManager.uberClassLoader.loadClass(\"io.jenkins.plugins.example.Caller\");\n                assertLoader(callerC, \"example\", r);\n                Object jdkInstaller \u003d callerC.getMethod(\"use\").invoke(null);\n                assertLoader(jdkInstaller.getClass(), \"jdk-tool\", r);\n            }\n            assertThat(\"it had various implicit detached dependencies so those should have been loaded too\", activePlugins, hasSize(greaterThan(1)));\n        });\n    }","advisory":"JENKINS-55582"},{"className":"jenkins.install.LoadDetachedPluginsTest","methodSignature":"jenkins.install.LoadDetachedPluginsTest.nonstandardFilenames:void()","methodSource":"@Issue(\"JENKINS-55582\")\n    @LocalData\n    @Test\n    public void nonstandardFilenames() {\n        logging.record(PluginManager.class, Level.FINE).record(ClassicPluginStrategy.class, Level.FINE);\n        rr.then(r -\u003e {\n            assertTrue(r.jenkins.pluginManager.getPlugin(\"build-token-root\").isActive());\n            assertEquals(\"1.2\", r.jenkins.pluginManager.getPlugin(\"jdk-tool\").getVersion());\n            /* TODO currently still loads the detached 1.0, since we only skip $shortName.[jh]pi not $shortName-$version.[jh]pi; during PLUGINS_LISTED there is a list of known filenames but not short names\n            assertEquals(\"1.3\", r.jenkins.pluginManager.getPlugin(\"command-launcher\").getVersion());\n            */\n        });\n    }","advisory":"JENKINS-55582"},{"className":"jenkins.install.SetupWizardRestartTest","methodSignature":"jenkins.install.SetupWizardRestartTest.restartKeepsSetupWizardState:void()","methodSource":"@Issue(\"JENKINS-47439\")\n    @Test\n    public void restartKeepsSetupWizardState() throws Throwable {\n        sessions.then(j -\u003e {\n                // Modify state so that we get into the same conditions as a real start\n                Main.isUnitTest \u003d false;\n                Files.writeString(InstallUtil.getLastExecVersionFile().toPath(), \"\", StandardCharsets.US_ASCII);\n                // Re-evaluate current state based on the new context\n                InstallUtil.proceedToNextStateFrom(InstallState.UNKNOWN);\n                assertEquals(\"Unexpected install state\", InstallState.NEW, j.jenkins.getInstallState());\n                assertTrue(\"Expecting setup wizard filter to be up\", j.jenkins.getSetupWizard().hasSetupWizardFilter());\n                InstallUtil.saveLastExecVersion();\n        });\n        // Check that the state is retained after a restart\n        sessions.then(j -\u003e {\n                assertEquals(\"Unexpected install state\", InstallState.NEW, j.jenkins.getInstallState());\n                assertTrue(\"Expecting setup wizard filter to be up after restart\",  j.jenkins.getSetupWizard().hasSetupWizardFilter());\n        });\n    }","advisory":"JENKINS-47439"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.shouldReturnPluginListsByDefault:void()","methodSource":"@Test\n    public void shouldReturnPluginListsByDefault() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        // TODO: This is a hack, wc.login does not work with the form\n        j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);\n        j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n        // wc.setCredentialsProvider(adminCredentialsProvider);\n        // wc.login(\"admin\");\n\n        String response \u003d jsonRequest(wc, \"setupWizard/platformPluginList\");\n        assertThat(\"Missing plugin is suggestions \", response, containsString(\"active-directory\"));\n        assertThat(\"Missing category is suggestions \", response, containsString(\"Pipelines and Continuous Delivery\"));\n    }"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.shouldReturnUpdateSiteJSONIfSpecified:void()","methodSource":"@Test\n    @Issue(\"JENKINS-34833\")\n    public void shouldReturnUpdateSiteJSONIfSpecified() throws Exception {\n        // Init the update site\n        CustomLocalUpdateSite us \u003d new CustomLocalUpdateSite(tmpdir.getRoot());\n        us.init();\n        j.jenkins.getUpdateCenter().getSites().add(us);\n\n        // Prepare the connection\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        // TODO: This is a hack, wc.login does not work with the form\n        j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);\n        j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n        // wc.setCredentialsProvider(adminCredentialsProvider);\n        // wc.login(\"admin\");\n\n        String response \u003d jsonRequest(wc, \"setupWizard/platformPluginList\");\n        assertThat(\"Missing plugin in suggestions \", response, containsString(\"antisamy-markup-formatter\"));\n        assertThat(\"Missing category in suggestions \", response, containsString(\"Organization and Administration\"));\n        assertThat(\"Unexpected plugin in suggestions \", response, not(containsString(\"active-directory\")));\n        assertThat(\"Unexpected category in suggestions \", response, not(containsString(\"Pipelines and Continuous Delivery\")));\n    }","advisory":"JENKINS-34833"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.shouldReturnWrappedUpdateSiteJSONIfSpecified:void()","methodSource":"@Test\n    @Issue(\"JENKINS-34833\")\n    public void shouldReturnWrappedUpdateSiteJSONIfSpecified() throws Exception {\n        // Init the update site\n        CustomLocalUpdateSiteWithWrapperJSON us \u003d new CustomLocalUpdateSiteWithWrapperJSON(tmpdir.getRoot());\n        us.init();\n        j.jenkins.getUpdateCenter().getSites().add(us);\n\n        // Prepare the connection\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        // TODO: This is a hack, wc.login does not work with the form\n        j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);\n        j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n        // wc.setCredentialsProvider(adminCredentialsProvider);\n        // wc.login(\"admin\");\n\n        String response \u003d jsonRequest(wc, \"setupWizard/platformPluginList\");\n        assertThat(\"Missing plugin in suggestions \", response, containsString(\"dashboard-view\"));\n        assertThat(\"Missing category in suggestions \", response, containsString(\"Administration and Organization\"));\n        assertThat(\"Unexpected plugin in suggestions \", response, not(containsString(\"matrix-auth\")));\n        assertThat(\"Unexpected category in suggestions \", response, not(containsString(\"Pipelines and Continuous Delivery\")));\n    }","advisory":"JENKINS-34833"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.shouldProhibitAccessToPluginListWithoutAuth:void()","methodSource":"@Test\n    public void shouldProhibitAccessToPluginListWithoutAuth() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.assertFails(\"setupWizard/platformPluginList\", 403);\n        wc.assertFails(\"setupWizard/createAdminUser\", 403);\n        wc.assertFails(\"setupWizard/completeInstall\", 403);\n    }"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.testRemoteUpdateSiteFailingValidation:void()","methodSource":"@Test\n    public void testRemoteUpdateSiteFailingValidation() throws Exception {\n        URL baseUrl;\n        final String serverContext \u003d \"/_relative/\";\n        Server server \u003d new Server();\n        ServerConnector connector \u003d new ServerConnector(server);\n        server.addConnector(connector);\n        server.setHandler(new RemoteUpdateSiteHandler(serverContext, true));\n        try {\n            server.start();\n            baseUrl \u003d new URL(\"http\", \"localhost\", connector.getLocalPort(), serverContext);\n\n            // Init the update site\n            CustomRemoteUpdateSite us \u003d new CustomRemoteUpdateSite(baseUrl.toString(), false);\n            j.jenkins.getUpdateCenter().getSites().add(us);\n\n            // Prepare the connection\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            // TODO: This is a hack, wc.login does not work with the form\n            j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);\n            j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n            // wc.setCredentialsProvider(adminCredentialsProvider);\n            // wc.login(\"admin\");\n\n            String response \u003d jsonRequest(wc, \"setupWizard/platformPluginList\");\n            // We need to assert that signature check fails, and we\u0027re falling back to the bundled resource\n            assertThat(\"Missing plugin in suggestions \", response, not(containsString(\"my-plugin\")));\n            assertThat(\"Missing category in suggestions \", response, not(containsString(\"Very Useful Category\")));\n        } finally {\n            server.stop();\n        }\n    }"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.testRemoteUpdateSiteSkippingValidation:void()","methodSource":"@Test\n    public void testRemoteUpdateSiteSkippingValidation() throws Exception {\n        URL baseUrl;\n        final String serverContext \u003d \"/_relative/\";\n        Server server \u003d new Server();\n        ServerConnector connector \u003d new ServerConnector(server);\n        server.addConnector(connector);\n        server.setHandler(new RemoteUpdateSiteHandler(serverContext, true));\n        try {\n            server.start();\n            DownloadService.signatureCheck \u003d false;\n            baseUrl \u003d new URL(\"http\", \"localhost\", connector.getLocalPort(), serverContext);\n\n            // Init the update site\n            CustomRemoteUpdateSite us \u003d new CustomRemoteUpdateSite(baseUrl.toString(), false);\n            j.jenkins.getUpdateCenter().getSites().add(us);\n\n\n            // Prepare the connection\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            // TODO: This is a hack, wc.login does not work with the form\n            j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);\n            j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n            // wc.setCredentialsProvider(adminCredentialsProvider);\n            // wc.login(\"admin\");\n\n            String response \u003d jsonRequest(wc, \"setupWizard/platformPluginList\");\n            // We need to assert that signature check fails, and we\u0027re falling back to the bundled resource\n            assertThat(\"Missing plugin in suggestions \", response, containsString(\"my-plugin\"));\n            assertThat(\"Missing category in suggestions \", response, containsString(\"Very Useful Category\"));\n            assertThat(\"Unexpected plugin in suggestions \", response, not(containsString(\"matrix-auth\")));\n            assertThat(\"Unexpected category in suggestions \", response, not(containsString(\"Pipelines and Continuous Delivery\")));\n        } finally {\n            DownloadService.signatureCheck \u003d true;\n            server.stop();\n        }\n    }"},{"className":"jenkins.install.SetupWizardTest","methodSignature":"jenkins.install.SetupWizardTest.testRemoteUpdateSitePerformingValidation:void()","methodSource":"@Test\n    public void testRemoteUpdateSitePerformingValidation() throws Exception {\n        URL baseUrl;\n        final String serverContext \u003d \"/_relative/\";\n        Server server \u003d new Server();\n        ServerConnector connector \u003d new ServerConnector(server);\n        server.addConnector(connector);\n        server.setHandler(new RemoteUpdateSiteHandler(serverContext, true));\n        try {\n            server.start();\n            baseUrl \u003d new URL(\"http\", \"localhost\", connector.getLocalPort(), serverContext);\n\n            // Init the update site\n            CustomRemoteUpdateSite us \u003d new CustomRemoteUpdateSite(baseUrl.toString(), true);\n            j.jenkins.getUpdateCenter().getSites().add(us);\n\n\n            // Prepare the connection\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            // TODO: This is a hack, wc.login does not work with the form\n            j.jenkins.setSecurityRealm(SecurityRealm.NO_AUTHENTICATION);\n            j.jenkins.setAuthorizationStrategy(AuthorizationStrategy.UNSECURED);\n            // wc.setCredentialsProvider(adminCredentialsProvider);\n            // wc.login(\"admin\");\n\n            String response \u003d jsonRequest(wc, \"setupWizard/platformPluginList\");\n            // We need to assert that signature check fails, and we\u0027re falling back to the bundled resource\n            assertThat(\"Missing plugin in suggestions \", response, containsString(\"my-plugin\"));\n            assertThat(\"Missing category in suggestions \", response, containsString(\"Very Useful Category\"));\n            assertThat(\"Unexpected plugin in suggestions \", response, not(containsString(\"matrix-auth\")));\n            assertThat(\"Unexpected category in suggestions \", response, not(containsString(\"Pipelines and Continuous Delivery\")));\n        } finally {\n            server.stop();\n        }\n    }"},{"className":"jenkins.Junit4TestsRanTest","methodSignature":"jenkins.Junit4TestsRanTest.anything:void()","methodSource":"@Test\n    public void anything() {\n        // intentionally blank.\n        // we just want a test that runs with junit 4 so that if tests get skipped due to the introduction of jupiter engine we are alerted\n    }"},{"className":"jenkins.management.AdministrativeMonitorsDecoratorTest","methodSignature":"jenkins.management.AdministrativeMonitorsDecoratorTest.ensureAdminMonitorsAreNotRunPerNonAdminPage:void()","methodSource":"@Test\n    public void ensureAdminMonitorsAreNotRunPerNonAdminPage() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        String nonAdminLogin \u003d \"nonAdmin\";\n        User.getById(nonAdminLogin, true);\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(nonAdminLogin)\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(nonAdminLogin);\n\n        ExtensionList\u003cAdministrativeMonitor\u003e extensionList \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class);\n        ExecutionCounterNonSecAdministrativeMonitor nonSecCounter \u003d extensionList.get(ExecutionCounterNonSecAdministrativeMonitor.class);\n        ExecutionCounterSecAdministrativeMonitor secCounter \u003d extensionList.get(ExecutionCounterSecAdministrativeMonitor.class);\n\n        assertEquals(0, nonSecCounter.count);\n        assertEquals(0, secCounter.count);\n    }"},{"className":"jenkins.management.AdministrativeMonitorsDecoratorTest","methodSignature":"jenkins.management.AdministrativeMonitorsDecoratorTest.ensureAdminMonitorsAreRunOnlyOncePerAdminPage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-63977\")\n    public void ensureAdminMonitorsAreRunOnlyOncePerAdminPage() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        String adminLogin \u003d \"admin\";\n        User.getById(adminLogin, true);\n\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.ADMINISTER).everywhere().to(adminLogin)\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(adminLogin);\n\n        ExtensionList\u003cAdministrativeMonitor\u003e extensionList \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class);\n        ExecutionCounterNonSecAdministrativeMonitor nonSecCounter \u003d extensionList.get(ExecutionCounterNonSecAdministrativeMonitor.class);\n        ExecutionCounterSecAdministrativeMonitor secCounter \u003d extensionList.get(ExecutionCounterSecAdministrativeMonitor.class);\n\n        assertEquals(1, nonSecCounter.count);\n        assertEquals(1, secCounter.count);\n    }","advisory":"JENKINS-63977"},{"className":"jenkins.model.AssetManagerTest","methodSignature":"jenkins.model.AssetManagerTest.emptyAssetDoesNotThrowError:void()","methodSource":"@Test\n    @Issue(\"JENKINS-58736\")\n    public void emptyAssetDoesNotThrowError() throws Exception {\n        URL url \u003d new URI(j.getURL() + \"assets\").toURL();\n        HttpURLConnection httpCon \u003d (HttpURLConnection) url.openConnection();\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, httpCon.getResponseCode());\n    }","advisory":"JENKINS-58736"},{"className":"jenkins.model.BuildDiscarderPropertyTest","methodSignature":"jenkins.model.BuildDiscarderPropertyTest.buildDiscarderField:void()","methodSource":"@Issue(\"JENKINS-31518\")\n    @LocalData\n    @Test\n    public void buildDiscarderField() throws Exception {\n        FreeStyleProject p \u003d r.jenkins.getItemByFullName(\"p\", FreeStyleProject.class);\n        verifyBuildDiscarder(p);\n        r.configRoundtrip(p);\n        verifyBuildDiscarder(p);\n        String xml \u003d p.getConfigFile().asString();\n        assertFalse(xml, xml.contains(\"\u003clogRotator class\u003d\"));\n        assertTrue(xml, xml.contains(\"\u003c\" + BuildDiscarderProperty.class.getName() + \"\u003e\"));\n    }","advisory":"JENKINS-31518"},{"className":"jenkins.model.BuildDiscarderPropertyTest","methodSignature":"jenkins.model.BuildDiscarderPropertyTest.logRotatorField:void()","methodSource":"@Issue(\"JENKINS-16979\")\n    @LocalData\n    @Test\n    public void logRotatorField() throws Exception {\n        AbstractProject\u003c?, ?\u003e p \u003d r.jenkins.getItemByFullName(\"foo\", AbstractProject.class);\n        verifyLogRotatorSanity(p);\n\n        // now persist in the new format\n        p.save();\n        String xml \u003d p.getConfigFile().asString();\n\n        // make sure this new format roundtrips by itself\n        p.setBuildDiscarder(null);\n        p.updateByXml((Source) new StreamSource(new StringReader(xml)));\n        verifyLogRotatorSanity(p);\n\n        // another sanity check\n        assertTrue(xml, xml.contains(\"\u003clogRotator class\u003d\\\"\" + LogRotator.class.getName() + \"\\\"\u003e\"));\n    }","advisory":"JENKINS-16979"},{"className":"jenkins.model.BuiltInNodeMigrationPropertyTest","methodSignature":"jenkins.model.BuiltInNodeMigrationPropertyTest.overrideAppliesToNewInstance:void()","methodSource":"@Test\n    public void overrideAppliesToNewInstance() throws Exception {\n        BuiltInNodeMigrationTest.assertStatus(j, true, false, OVERRIDE_VALUE, OVERRIDE_VALUE);\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationPropertyTest","methodSignature":"jenkins.model.BuiltInNodeMigrationPropertyTest.overrideAppliesToUnmigratedInstance:void()","methodSource":"@Test\n    @LocalData\n    public void overrideAppliesToUnmigratedInstance() throws Exception {\n        BuiltInNodeMigrationTest.assertStatus(j, false, true, OVERRIDE_VALUE, OVERRIDE_VALUE);\n        j.jenkins.performRenameMigration();\n        BuiltInNodeMigrationTest.assertStatus(j, true, false, OVERRIDE_VALUE, OVERRIDE_VALUE);\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationPropertyTest","methodSignature":"jenkins.model.BuiltInNodeMigrationPropertyTest.overrideAppliesToMigratedInstance:void()","methodSource":"@Test\n    @LocalData\n    public void overrideAppliesToMigratedInstance() throws Exception {\n        BuiltInNodeMigrationTest.assertStatus(j, true, false, OVERRIDE_VALUE, OVERRIDE_VALUE);\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationRestartTest","methodSignature":"jenkins.model.BuiltInNodeMigrationRestartTest.testNewInstanceWithoutConfiguration:void()","methodSource":"@Test\n    public void testNewInstanceWithoutConfiguration() throws Throwable {\n        r.then(j -\u003e {\n            Assert.assertTrue(j.jenkins.getRenameMigrationDone());\n            Assert.assertFalse(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertFalse(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n        r.then(j -\u003e {\n            Assert.assertTrue(j.jenkins.getRenameMigrationDone());\n            Assert.assertFalse(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertFalse(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationRestartTest","methodSignature":"jenkins.model.BuiltInNodeMigrationRestartTest.migratedInstanceStartsWithNewTerminology:void()","methodSource":"@Test\n    @LocalDataOnce\n    public void migratedInstanceStartsWithNewTerminology() throws Throwable {\n        r.then(j -\u003e {\n            Assert.assertTrue(j.jenkins.getRenameMigrationDone());\n            Assert.assertFalse(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertFalse(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n        r.then(j -\u003e {\n            Assert.assertTrue(j.jenkins.getRenameMigrationDone());\n            Assert.assertFalse(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertFalse(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationRestartTest","methodSignature":"jenkins.model.BuiltInNodeMigrationRestartTest.oldDataStartsWithOldTerminology:void()","methodSource":"@Test\n    @LocalDataOnce\n    public void oldDataStartsWithOldTerminology() throws Throwable {\n        r.then(j -\u003e {\n            Assert.assertFalse(j.jenkins.getRenameMigrationDone());\n            Assert.assertTrue(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertTrue(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n        r.then(j -\u003e {\n            Assert.assertFalse(j.jenkins.getRenameMigrationDone());\n            Assert.assertTrue(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertTrue(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n\n            j.jenkins.performRenameMigration();\n\n            Assert.assertTrue(j.jenkins.getRenameMigrationDone());\n            Assert.assertFalse(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertFalse(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n        r.then(j -\u003e {\n            Assert.assertTrue(j.jenkins.getRenameMigrationDone());\n            Assert.assertFalse(j.jenkins.nodeRenameMigrationNeeded);\n            Assert.assertFalse(Objects.requireNonNull(j.jenkins.getAdministrativeMonitor(BuiltInNodeMigration.class.getName())).isActivated());\n        });\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationTest","methodSignature":"jenkins.model.BuiltInNodeMigrationTest.newInstanceHasNewTerminology:void()","methodSource":"@Test\n    public void newInstanceHasNewTerminology() throws Exception {\n        assertStatus(j, true, false, \"built-in\", \"built-in\");\n        assertFalse(ExtensionList.lookupSingleton(BuiltInNodeMigration.class).isActivated());\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationTest","methodSignature":"jenkins.model.BuiltInNodeMigrationTest.oldDataStartsWithOldTerminology:void()","methodSource":"@Test\n    @LocalData\n    public void oldDataStartsWithOldTerminology() throws Exception {\n        assertStatus(j, false, true, \"master\", \"master\");\n        final BuiltInNodeMigration builtInNodeMigration \u003d ExtensionList.lookupSingleton(BuiltInNodeMigration.class);\n        assertTrue(builtInNodeMigration.isActivated());\n\n        // Now perform rename and confirm it\u0027s done\n        j.jenkins.performRenameMigration();\n        assertStatus(j, true, false, \"built-in\", \"built-in\");\n        assertFalse(builtInNodeMigration.isActivated());\n    }"},{"className":"jenkins.model.BuiltInNodeMigrationTest","methodSignature":"jenkins.model.BuiltInNodeMigrationTest.migratedInstanceStartsWithNewTerminology:void()","methodSource":"@Test\n    @LocalData\n    public void migratedInstanceStartsWithNewTerminology() throws Exception {\n        assertStatus(j, true, false, \"built-in\", \"built-in\");\n        assertFalse(ExtensionList.lookupSingleton(BuiltInNodeMigration.class).isActivated());\n    }"},{"className":"jenkins.model.ContextMenuTest","methodSignature":"jenkins.model.ContextMenuTest.contextMenuVisibility:void()","methodSource":"@Issue(\"JENKINS-19173\")\n    @Test public void contextMenuVisibility() throws Exception {\n        final FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        Callable\u003cContextMenu\u003e doContextMenu \u003d () -\u003e p.doContextMenu(Stapler.getCurrentRequest(), Stapler.getCurrentResponse());\n        ActionFactory f \u003d j.jenkins.getExtensionList(TransientProjectActionFactory.class).get(ActionFactory.class);\n        f.visible \u003d true;\n        ContextMenu menu \u003d j.executeOnServer(doContextMenu);\n        Map\u003cString, String\u003e parsed \u003d parse(menu);\n        assertEquals(parsed.toString(), \"Hello\", parsed.get(\"testing\"));\n        f.visible \u003d false;\n        menu \u003d j.executeOnServer(doContextMenu);\n        parsed \u003d parse(menu);\n        assertNull(parsed.toString(), parsed.get(\"testing\"));\n    }","advisory":"JENKINS-19173"},{"className":"jenkins.model.ErrorPageTest","methodSignature":"jenkins.model.ErrorPageTest.nice404ErrorPage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-71087\")\n    public void nice404ErrorPage() throws Exception {\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            Dispatcher.TRACE \u003d false;\n\n            /* Start with no security realm configured */\n\n            { // basic error page\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"foo\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\")));\n                assertThat(content, containsString(\"This page does not exist.\"));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            { // paths are fine on error page even when nested\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"foo/bar/baz/\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\")));\n                assertThat(content, containsString(\"This page does not exist.\"));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            { // resource root action have custom (less) error message content\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"static-files/foo\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\")));\n                assertThat(content, not(containsString(\"This page does not exist.\")));\n                assertThat(content, not(containsString(\"This page may not exist, or you may not have permission to see it.\")));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            /* Set up security realm and request as anonymous, we expect login link and hedged response */\n            j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n            j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.ADMINISTER).everywhere().toAuthenticated().grant(Jenkins.READ).everywhere().toEveryone());\n\n            { // basic error page\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"foo\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, containsString(j.contextPath + \"/login?from\u003d\" + j.contextPath.replace(\"/\", \"%2F\") + \"%2Ffoo\"));\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\" + j.contextPath.replace(\"/\", \"%2F\") + \"%2F404\")));\n                assertThat(content, containsString(\"This page may not exist, or you may not have permission to see it.\"));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            { // paths are fine on error page even when nested\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"foo/bar/baz/\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, containsString(j.contextPath + \"/login?from\u003d\" + j.contextPath.replace(\"/\", \"%2F\") + \"%2Ffoo%2Fbar%2Fbaz%2F\"));\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\" + j.contextPath.replace(\"/\", \"%2F\") + \"%2F404\")));\n                assertThat(content, containsString(\"This page may not exist, or you may not have permission to see it.\"));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            { // resource root action have custom (less) error message content\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"static-files/foo\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, containsString(j.contextPath + \"/login?from\u003d\" + j.contextPath.replace(\"/\", \"%2F\") + \"%2Fstatic-files%2Ffoo\"));\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\" + j.contextPath.replace(\"/\", \"%2F\") + \"%2F404\")));\n                assertThat(content, not(containsString(\"This page does not exist.\")));\n                assertThat(content, not(containsString(\"This page may not exist, or you may not have permission to see it.\")));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            /* With the security realm still set up, log in and expect the profile link to show */\n            wc.login(\"alice\");\n\n            { // basic error page\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"foo\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\")));\n                assertThat(content, containsString(\"user/alice\"));\n                assertThat(content, containsString(\"This page may not exist, or you may not have permission to see it.\"));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            { // paths are fine on error page even when nested\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"foo/bar/baz/\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\")));\n                assertThat(content, containsString(\"user/alice\"));\n                assertThat(content, containsString(\"This page may not exist, or you may not have permission to see it.\"));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n\n            { // resource root action have custom (less) error message content\n                final FailingHttpStatusCodeException ex \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"static-files/foo\"));\n                assertEquals(404, ex.getStatusCode());\n                final String content \u003d ex.getResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(content, not(containsString(j.contextPath + \"/login?from\u003d\")));\n                assertThat(content, containsString(\"user/alice\"));\n                assertThat(content, not(containsString(\"This page does not exist.\")));\n                assertThat(content, not(containsString(\"This page may not exist, or you may not have permission to see it.\")));\n                assertThat(content, not(containsString(\"REST API\")));\n            }\n        } finally {\n            Dispatcher.TRACE \u003d true;\n        }\n    }","advisory":"JENKINS-71087"},{"className":"jenkins.model.ErrorPageTest","methodSignature":"jenkins.model.ErrorPageTest.kindaNice404ErrorPageOnResourceDomain:void()","methodSource":"@Test\n    @Issue(\"JENKINS-71087\")\n    public void kindaNice404ErrorPageOnResourceDomain() throws Exception {\n        final String resourceRoot;\n        { // Setup stolen from ResourceDomainTest\n            URL root \u003d j.getURL(); // which always will use \"localhost\", see JenkinsRule#getURL()\n            Assert.assertTrue(root.toString().contains(\"localhost\")); // to be safe\n\n            resourceRoot \u003d root.toString().replace(\"localhost\", \"127.0.0.1\");\n            ResourceDomainConfiguration configuration \u003d ExtensionList.lookupSingleton(ResourceDomainConfiguration.class);\n            configuration.setUrl(resourceRoot);\n        }\n\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            wc.setThrowExceptionOnFailingStatusCode(false);\n\n            @SuppressWarnings(\"deprecation\") // we need to not access the usual Jenkins URLs\n            final Page page \u003d wc.getPage(resourceRoot + \"foo\");\n            wc.setThrowExceptionOnFailingStatusCode(true);\n\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            final String content \u003d page.getWebResponse().getContentAsString(StandardCharsets.UTF_8);\n            assertThat(content, containsString(\"Back to Jenkins\"));\n            assertThat(content, containsString(\"Jenkins serves only static files on this domain.\"));\n            assertThat(content, not(containsString(\"REST API\")));\n            if (page.isHtmlPage()) {\n                final HtmlPage htmlPage \u003d (HtmlPage) page;\n                final Page nextPage \u003d htmlPage.getAnchorByText(\"Back to Jenkins\").click();\n                final String nextContent \u003d nextPage.getWebResponse().getContentAsString(StandardCharsets.UTF_8);\n                assertThat(nextContent, containsString(\"Welcome to Jenkins\"));\n                assertThat(nextContent, containsString(\"REST API\")); // Rest API exists for Jenkins main page\n            }\n        }\n    }","advisory":"JENKINS-71087"},{"className":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest","methodSignature":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest.testAnonymous:void()","methodSource":"@Test\n    public void testAnonymous() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage p \u003d wc.goTo(\"self/withFlags\");\n\n        // No user \u003d\u003e default value\n        assertEquals(\"true\", p.getElementById(\"test1Flag\").getTextContent());\n        assertEquals(\"false\", p.getElementById(\"test2Flag\").getTextContent());\n        assertEquals(\"false\", p.getElementById(\"test3Flag\").getTextContent());\n    }"},{"className":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest","methodSignature":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest.testWithoutProperty:void()","methodSource":"@Test\n    public void testWithoutProperty() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getOrCreateByIdOrFullName(\"user\");\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withBasicCredentials(\"user\");\n\n        HtmlPage p \u003d wc.goTo(\"self/withFlags\");\n\n        assertEquals(\"true\", p.getElementById(\"test1Flag\").getTextContent());\n        assertEquals(\"false\", p.getElementById(\"test2Flag\").getTextContent());\n        assertEquals(\"false\", p.getElementById(\"test3Flag\").getTextContent());\n    }"},{"className":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest","methodSignature":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest.testPropertyWithDefault:void()","methodSource":"@Test\n    public void testPropertyWithDefault() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getOrCreateByIdOrFullName(\"user\");\n        UserExperimentalFlagsProperty property \u003d new UserExperimentalFlagsProperty();\n        user.addProperty(property);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withBasicCredentials(\"user\");\n\n        HtmlPage p \u003d wc.goTo(\"self/withFlags\");\n\n        // test1 has a different default\n        assertEquals(\"true\", p.getElementById(\"test1Flag\").getTextContent());\n        // test2 has an overloaded default with same as default value\n        assertEquals(\"false\", p.getElementById(\"test2Flag\").getTextContent());\n        assertEquals(\"false\", p.getElementById(\"test3Flag\").getTextContent());\n    }"},{"className":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest","methodSignature":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest.testPropertyWithValues:void()","methodSource":"@Test\n    public void testPropertyWithValues() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getOrCreateByIdOrFullName(\"user\");\n        Map\u003cString, String\u003e flags \u003d new HashMap\u003c\u003e();\n        flags.put(\"test1.flag\", \"false\");\n        flags.put(\"test2.flag\", \"true\");\n        UserExperimentalFlagsProperty property \u003d new UserExperimentalFlagsProperty(flags);\n        user.addProperty(property);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withBasicCredentials(\"user\");\n\n        HtmlPage p \u003d wc.goTo(\"self/withFlags\");\n\n        assertEquals(\"false\", p.getElementById(\"test1Flag\").getTextContent());\n        assertEquals(\"true\", p.getElementById(\"test2Flag\").getTextContent());\n    }"},{"className":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest","methodSignature":"jenkins.model.experimentalflags.UserExperimentalFlagsPropertyTest.testPropertyWithNull:void()","methodSource":"@Test\n    public void testPropertyWithNull() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getOrCreateByIdOrFullName(\"user\");\n        Map\u003cString, String\u003e flags \u003d new HashMap\u003c\u003e();\n        flags.put(\"test1.flag\", null);\n        flags.put(\"test2.flag\", null);\n        UserExperimentalFlagsProperty property \u003d new UserExperimentalFlagsProperty(flags);\n        user.addProperty(property);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withBasicCredentials(\"user\");\n\n        HtmlPage p \u003d wc.goTo(\"self/withFlags\");\n\n        // Using their default\n        assertEquals(\"true\", p.getElementById(\"test1Flag\").getTextContent());\n        assertEquals(\"false\", p.getElementById(\"test2Flag\").getTextContent());\n    }"},{"className":"jenkins.model.ExtensionTypeHierarchyTest","methodSignature":"jenkins.model.ExtensionTypeHierarchyTest.sameExtensionCanImplementMultipleExtensionPoints:void()","methodSource":"@Test\n    public void sameExtensionCanImplementMultipleExtensionPoints() {\n        Animal[] animals \u003d sort(j.jenkins.getExtensionList(Animal.class).toArray(new Animal[2]));\n        assertThat(animals[0], instanceOf(Crow.class));\n        assertThat(animals[1], instanceOf(Swan.class));\n        assertEquals(2, animals.length);\n\n        White[] whites \u003d sort(j.jenkins.getExtensionList(White.class).toArray(new White[1]));\n        assertThat(whites[0], instanceOf(Swan.class));\n        assertEquals(1, whites.length);\n\n        assertSame(animals[1], whites[0]);\n    }"},{"className":"jenkins.model.GlobalBuildDiscarderTest","methodSignature":"jenkins.model.GlobalBuildDiscarderTest.testLoading:void()","methodSource":"@Test\n    @LocalData\n    @Issue(\"JENKINS-61688\")\n    public void testLoading() throws Exception {\n        Assert.assertEquals(0, GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().size());\n    }","advisory":"JENKINS-61688"},{"className":"jenkins.model.GlobalBuildDiscarderTest","methodSignature":"jenkins.model.GlobalBuildDiscarderTest.testLoadingWithDiscarders:void()","methodSource":"@Test\n    @LocalData\n    @Issue(\"JENKINS-61688\")\n    public void testLoadingWithDiscarders() throws Exception {\n        final DescribableList\u003cGlobalBuildDiscarderStrategy, GlobalBuildDiscarderStrategyDescriptor\u003e configuredBuildDiscarders \u003d GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders();\n        Assert.assertEquals(2, configuredBuildDiscarders.size());\n        Assert.assertNotNull(configuredBuildDiscarders.get(JobGlobalBuildDiscarderStrategy.class));\n        Assert.assertEquals(5, ((LogRotator) configuredBuildDiscarders.get(SimpleGlobalBuildDiscarderStrategy.class).getDiscarder()).getNumToKeep());\n    }","advisory":"JENKINS-61688"},{"className":"jenkins.model.GlobalBuildDiscarderTest","methodSignature":"jenkins.model.GlobalBuildDiscarderTest.testJobBuildDiscarder:void()","methodSource":"@Test\n    public void testJobBuildDiscarder() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        { // no discarder\n            j.buildAndAssertSuccess(p);\n            j.buildAndAssertSuccess(p);\n            j.buildAndAssertSuccess(p);\n            j.buildAndAssertSuccess(p);\n            j.buildAndAssertSuccess(p);\n            Assert.assertArrayEquals(\"all 5 builds exist\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{5, 4, 3, 2, 1});\n        }\n\n        { // job build discarder\n            GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().add(new JobGlobalBuildDiscarderStrategy());\n            p.setBuildDiscarder(new LogRotator(null, \"3\", null, null));\n            Assert.assertArrayEquals(\"all 5 builds exist\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{5, 4, 3, 2, 1});\n\n            ExtensionList.lookupSingleton(BackgroundGlobalBuildDiscarder.class).execute(TaskListener.NULL);\n            Assert.assertArrayEquals(\"only 3 builds left\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{5, 4, 3});\n\n            j.buildAndAssertSuccess(p);\n            Assert.assertArrayEquals(\"still only 3 builds\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{6, 5, 4});\n\n            p.setBuildDiscarder(null);\n            j.buildAndAssertSuccess(p);\n            j.buildAndAssertSuccess(p);\n            Assert.assertArrayEquals(\"5 builds again\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{8, 7, 6, 5, 4});\n\n            ExtensionList.lookupSingleton(BackgroundGlobalBuildDiscarder.class).execute(TaskListener.NULL);\n            Assert.assertArrayEquals(\"still 5 builds\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{8, 7, 6, 5, 4});\n        }\n\n        { // global build discarder\n            GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().add(new SimpleGlobalBuildDiscarderStrategy(new LogRotator(null, \"2\", null, null)));\n            ExtensionList.lookupSingleton(BackgroundGlobalBuildDiscarder.class).execute(TaskListener.NULL);\n            Assert.assertArrayEquals(\"newest 2 builds\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{8, 7});\n            j.buildAndAssertSuccess(p);\n            j.buildAndAssertSuccess(p);\n\n            // run global discarders once a build finishes\n            Assert.assertArrayEquals(\"2 builds because of BackgroundBuildDiscarderListener\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{10, 9});\n\n            GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().clear();\n            GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().add(new SimpleGlobalBuildDiscarderStrategy(new LogRotator(null, \"1\", null, null)));\n\n            // apply global config changes periodically\n            ExtensionList.lookupSingleton(BackgroundGlobalBuildDiscarder.class).execute(TaskListener.NULL);\n            Assert.assertArrayEquals(\"2 builds again\", p.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{10});\n        }\n\n        // reset global config\n        GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().clear();\n\n        { // job and global build discarder\n            FreeStyleProject p1 \u003d j.createFreeStyleProject();\n            j.buildAndAssertSuccess(p1);\n            j.buildAndAssertSuccess(p1);\n            j.buildAndAssertSuccess(p1);\n            j.buildAndAssertSuccess(p1);\n            j.buildAndAssertSuccess(p1);\n            j.buildAndAssertSuccess(p1);\n            j.buildAndAssertSuccess(p1);\n            Assert.assertArrayEquals(\"job with 5 builds\", p1.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{7, 6, 5, 4, 3, 2, 1});\n            p1.setBuildDiscarder(new LogRotator(null, \"5\", null, null));\n\n            FreeStyleProject p2 \u003d j.createFreeStyleProject();\n            j.buildAndAssertSuccess(p2);\n            j.buildAndAssertSuccess(p2);\n            j.buildAndAssertSuccess(p2);\n            j.buildAndAssertSuccess(p2);\n            j.buildAndAssertSuccess(p2);\n            j.buildAndAssertSuccess(p2);\n            Assert.assertArrayEquals(\"job with 3 builds\", p2.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{6, 5, 4, 3, 2, 1});\n            p2.setBuildDiscarder(new LogRotator(null, \"3\", null, null));\n\n            GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().add(new SimpleGlobalBuildDiscarderStrategy(new LogRotator(null, \"4\", null, null)));\n            GlobalBuildDiscarderConfiguration.get().getConfiguredBuildDiscarders().add(new JobGlobalBuildDiscarderStrategy());\n\n            { // job 1 with builds more aggressively deleted by global strategy\n                j.buildAndAssertSuccess(p1);\n                j.buildAndAssertSuccess(p1);\n                Assert.assertArrayEquals(\"job 1 discards down to 5, but global override is for 4\", p1.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{9, 8, 7, 6});\n                ExtensionList.lookupSingleton(BackgroundGlobalBuildDiscarder.class).execute(TaskListener.NULL);\n                Assert.assertArrayEquals(\"job 1 discards down to 5, but global override is for 4\", p1.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{9, 8, 7, 6});\n            }\n\n            { // job 2 with more aggressive local build discarder\n                j.buildAndAssertSuccess(p2);\n                Assert.assertArrayEquals(\"job 1 discards down to 3\", p2.getBuilds().stream().mapToInt(Run::getNumber).toArray(), new int[]{7, 6, 5});\n            }\n        }\n    }"},{"className":"jenkins.model.GlobalSCMRetryCountConfigurationTest","methodSignature":"jenkins.model.GlobalSCMRetryCountConfigurationTest.shouldExceptOnNullScmRetryCount:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36387\")\n    public void shouldExceptOnNullScmRetryCount() throws Exception {\n        try {\n            JSONObject json \u003d new JSONObject();\n            GlobalSCMRetryCountConfiguration gc \u003d (GlobalSCMRetryCountConfiguration)\n                    GlobalConfiguration.all().getDynamic(\"jenkins.model.GlobalSCMRetryCountConfiguration\");\n\n            json.element(\"scmCheckoutRetryCount\", 5);\n            gc.configure(Stapler.getCurrentRequest(), json);\n            assertThat(\"Wrong value, it should be equal to 5\",\n                    j.getInstance().getScmCheckoutRetryCount(), equalTo(5));\n\n            json.element(\"scmCheckoutRetryCount\", 3);\n            gc.configure(Stapler.getCurrentRequest(), json);\n            assertThat(\"Wrong value, it should be equal to 3\",\n                    j.getInstance().getScmCheckoutRetryCount(), equalTo(3));\n\n            JSONObject emptyJson \u003d new JSONObject();\n            gc.configure(Stapler.getCurrentRequest(), emptyJson);\n        } catch (Descriptor.FormException e) {\n            assertThat(\"Scm Retry count value changed! This shouldn\u0027t happen.\",\n                    j.getInstance().getScmCheckoutRetryCount(), equalTo(3));\n        }\n    }","advisory":"JENKINS-36387"},{"className":"jenkins.model.identity.IdentityRootActionTest","methodSignature":"jenkins.model.identity.IdentityRootActionTest.ui:void()","methodSource":"@Test\n    public void ui() throws Exception {\n        HtmlPage p \u003d r.createWebClient().goTo(\"instance-identity\");\n        assertThat(p.getElementById(\"fingerprint\").getTextContent(),\n                containsString(ExtensionList.lookup(UnprotectedRootAction.class).get(IdentityRootAction.class).getFingerprint()));\n    }"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.changeWorkspacesDirLog:void()","methodSource":"@Issue(\"JENKINS-53284\")\n    @Test\n    public void changeWorkspacesDirLog() throws Exception {\n        loggerRule.record(Jenkins.class, Level.WARNING)\n                .record(Jenkins.class, Level.INFO).capture(1000);\n\n        story.then(step -\u003e {\n            assertFalse(logWasFound(LOG_WHEN_CHANGING_WORKSPACES_DIR));\n            setWorkspacesDirProperty(\"testdir1\");\n        });\n\n        story.then(step -\u003e {\n            assertTrue(logWasFoundAtLevel(LOG_WHEN_CHANGING_WORKSPACES_DIR,\n                                          Level.WARNING));\n            setWorkspacesDirProperty(\"testdir2\");\n        });\n\n        story.then(step -\u003e assertTrue(logWasFoundAtLevel(LOG_WHEN_CHANGING_WORKSPACES_DIR, Level.WARNING)));\n    }","advisory":"JENKINS-53284"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.badValueForBuildsDir:void()","methodSource":"@Issue(\"JENKINS-50164\")\n    @Test\n    public void badValueForBuildsDir() {\n        story.then(rule -\u003e {\n            final List\u003cString\u003e badValues \u003d new ArrayList\u003c\u003e(Arrays.asList(\n                    \"blah\",\n                    \"$JENKINS_HOME\",\n                    \"$JENKINS_HOME/builds\",\n                    \"$ITEM_FULL_NAME\",\n                    \"/path/to/builds\",\n                    \"/invalid/$JENKINS_HOME\",\n                    \"relative/ITEM_FULL_NAME\"));\n            if (!new File(\"/\").canWrite()) {\n                badValues.add(\"/foo/$ITEM_FULL_NAME\");\n                badValues.add(\"/$ITEM_FULLNAME\");\n            } // else perhaps running as root\n\n            for (String badValue : badValues) {\n                assertThrows(badValue + \" should have been rejected\", InvalidBuildsDir.class, () -\u003e Jenkins.checkRawBuildsDir(badValue));\n            }\n        });\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.goodValueForBuildsDir:void()","methodSource":"@Issue(\"JENKINS-50164\")\n    @Test\n    public void goodValueForBuildsDir() {\n        story.then(rule -\u003e {\n            final List\u003cString\u003e badValues \u003d Arrays.asList(\n                    \"$JENKINS_HOME/foo/$ITEM_FULL_NAME\",\n                    \"${ITEM_ROOTDIR}/builds\");\n\n            for (String goodValue : badValues) {\n                Jenkins.checkRawBuildsDir(goodValue);\n            }\n        });\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.jenkinsDoesNotStartWithBadSysProp:void()","methodSource":"@Issue(\"JENKINS-50164\")\n    @Test\n    public void jenkinsDoesNotStartWithBadSysProp() {\n\n        loggerRule.record(Jenkins.class, Level.WARNING)\n                .record(Jenkins.class, Level.INFO)\n                .capture(100);\n\n        story.then(rule -\u003e {\n            assertTrue(story.j.getInstance().isDefaultBuildDir());\n            setBuildsDirProperty(\"/bluh\");\n        });\n\n        story.thenDoesNotStart();\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.jenkinsDoesNotStartWithScrewedUpConfigXml:void()","methodSource":"@Issue(\"JENKINS-50164\")\n    @Test\n    public void jenkinsDoesNotStartWithScrewedUpConfigXml() {\n\n        loggerRule.record(Jenkins.class, Level.WARNING)\n                .record(Jenkins.class, Level.INFO)\n                .capture(100);\n\n        story.then(rule -\u003e {\n\n            assertTrue(story.j.getInstance().isDefaultBuildDir());\n\n            // Now screw up the value by writing into the file directly, like one could do using external XML manipulation tools\n            final Path configFile \u003d rule.jenkins.getRootDir().toPath().resolve(\"config.xml\");\n            final String screwedUp \u003d Files.readString(configFile, StandardCharsets.UTF_8).\n                    replaceFirst(\"\u003cbuildsDir\u003e.*\u003c/buildsDir\u003e\", \"\u003cbuildsDir\u003eeeeeeeeeek\u003c/buildsDir\u003e\");\n            Files.writeString(configFile, screwedUp, StandardCharsets.UTF_8);\n        });\n\n        story.thenDoesNotStart();\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.buildsDir:void()","methodSource":"@Issue(\"JENKINS-50164\")\n    @Test\n    public void buildsDir() throws Exception {\n        loggerRule.record(Jenkins.class, Level.WARNING)\n                .record(Jenkins.class, Level.INFO)\n                .capture(100);\n\n        story.then(step -\u003e assertFalse(logWasFound(\"Using non default builds directories\")));\n\n        story.then(steps -\u003e {\n            assertTrue(story.j.getInstance().isDefaultBuildDir());\n            setBuildsDirProperty(\"$JENKINS_HOME/plouf/$ITEM_FULL_NAME/bluh\");\n            assertFalse(JenkinsBuildsAndWorkspacesDirectoriesTest.this.logWasFound(LOG_WHEN_CHANGING_BUILDS_DIR));\n        });\n\n        story.then(step -\u003e {\n                       assertFalse(story.j.getInstance().isDefaultBuildDir());\n                       assertEquals(\"$JENKINS_HOME/plouf/$ITEM_FULL_NAME/bluh\", story.j.getInstance().getRawBuildsDir());\n                       assertTrue(logWasFound(\"Changing builds directories from \"));\n                   }\n        );\n\n        story.then(step -\u003e assertTrue(logWasFound(\"Using non default builds directories\"))\n        );\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.workspacesDir:void()","methodSource":"@Issue(\"JENKINS-50164\")\n    @Test\n    public void workspacesDir() throws Exception {\n        loggerRule.record(Jenkins.class, Level.WARNING)\n                .record(Jenkins.class, Level.INFO)\n                .capture(1000);\n\n        story.then(step -\u003e assertFalse(logWasFound(\"Using non default workspaces directories\")));\n\n        story.then(step -\u003e {\n            assertTrue(story.j.getInstance().isDefaultWorkspaceDir());\n            final String workspacesDir \u003d \"bluh\";\n            setWorkspacesDirProperty(workspacesDir);\n            assertFalse(logWasFound(\"Changing workspaces directories from \"));\n        });\n\n        story.then(step -\u003e {\n            assertFalse(story.j.getInstance().isDefaultWorkspaceDir());\n            assertEquals(\"bluh\", story.j.getInstance().getRawWorkspaceDir());\n            assertTrue(logWasFound(\"Changing workspaces directories from \"));\n        });\n\n\n        story.then(step -\u003e {\n                       assertFalse(story.j.getInstance().isDefaultWorkspaceDir());\n                       assertTrue(logWasFound(\"Using non default workspaces directories\"));\n                   }\n        );\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.fromPreviousCustomSetup:void()","methodSource":"@Ignore(\"TODO calling restart seems to break Surefire\")\n    @Issue(\"JENKINS-50164\")\n    @LocalData\n    @Test\n    public void fromPreviousCustomSetup() {\n\n        assumeFalse(\"Default Windows lifecycle does not support restart.\", Functions.isWindows());\n\n        // check starting point and change config for next run\n        final String newBuildsDirValueBySysprop \u003d \"/tmp/${ITEM_ROOTDIR}/bluh\";\n        story.then(j -\u003e {\n            assertEquals(\"${ITEM_ROOTDIR}/ze-previous-custom-builds\", j.jenkins.getRawBuildsDir());\n            setBuildsDirProperty(newBuildsDirValueBySysprop);\n        });\n\n        // Check the sysprop setting was taken in account\n        story.then(j -\u003e {\n            assertEquals(newBuildsDirValueBySysprop, j.jenkins.getRawBuildsDir());\n\n            // ** HACK AROUND JENKINS-50422: manually restarting ** //\n            // Check the disk (cannot just restart normally with the rule, )\n            assertThat(Files.readString(j.jenkins.getRootDir().toPath().resolve(\"config.xml\"), StandardCharsets.UTF_8),\n                       containsString(\"\u003cbuildsDir\u003e\" + newBuildsDirValueBySysprop + \"\u003c/buildsDir\u003e\"));\n\n            String rootDirBeforeRestart \u003d j.jenkins.getRootDir().toString();\n            clearSystemProperties();\n            j.jenkins.restart();\n\n            int maxLoops \u003d 50;\n            while (j.jenkins.getInitLevel() !\u003d InitMilestone.COMPLETED \u0026\u0026 maxLoops-- \u003e 0) {\n                Thread.sleep(300);\n            }\n\n            assertEquals(rootDirBeforeRestart, j.jenkins.getRootDir().toString());\n            assertThat(Files.readString(j.jenkins.getRootDir().toPath().resolve(\"config.xml\"), StandardCharsets.UTF_8),\n                       containsString(\"\u003cbuildsDir\u003e\" + newBuildsDirValueBySysprop + \"\u003c/buildsDir\u003e\"));\n            assertEquals(newBuildsDirValueBySysprop, j.jenkins.getRawBuildsDir());\n            // ** END HACK ** //\n        });\n\n    }","advisory":"JENKINS-50164"},{"className":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest","methodSignature":"jenkins.model.JenkinsBuildsAndWorkspacesDirectoriesTest.externalBuildDirectoryRenameDelete:void()","methodSource":"@Test\n    @Issue(\"JENKINS-17138\")\n    public void externalBuildDirectoryRenameDelete() throws Exception {\n\n        // Hack to get String builds usable in lambda below\n        final List\u003cString\u003e builds \u003d new ArrayList\u003c\u003e();\n\n        story.then(steps -\u003e {\n            builds.add(tmp.newFolder().toString());\n            assertTrue(story.j.getInstance().isDefaultBuildDir());\n            setBuildsDirProperty(builds.get(0) + \"/${ITEM_FULL_NAME}\");\n        });\n\n        story.then(steps -\u003e {\n            assertEquals(builds.get(0) + \"/${ITEM_FULL_NAME}\", story.j.jenkins.getRawBuildsDir());\n            FreeStyleProject p \u003d story.j.jenkins.createProject(MockFolder.class, \"d\").createProject(FreeStyleProject.class, \"prj\");\n            FreeStyleBuild b \u003d p.scheduleBuild2(0).get();\n            File oldBuildDir \u003d new File(builds.get(0), \"d/prj\");\n            assertEquals(new File(oldBuildDir, b.getId()), b.getRootDir());\n            assertTrue(b.getRootDir().isDirectory());\n            p.renameTo(\"proj\");\n            File newBuildDir \u003d new File(builds.get(0), \"d/proj\");\n            assertEquals(new File(newBuildDir, b.getId()), b.getRootDir());\n            assertTrue(b.getRootDir().isDirectory());\n            p.delete();\n            assertFalse(b.getRootDir().isDirectory());\n        });\n    }","advisory":"JENKINS-17138"},{"className":"jenkins.model.JenkinsFutureDependencyGraphTest","methodSignature":"jenkins.model.JenkinsFutureDependencyGraphTest.testGetFutureDependencyGraphWithoutASingleRebuildBeforeHand:void()","methodSource":"@Issue(\"JENKINS-67237\")\n    @Test\n    public void testGetFutureDependencyGraphWithoutASingleRebuildBeforeHand() throws InterruptedException, ExecutionException {\n        Jenkins jenkins \u003d j.jenkins;\n\n        DependencyGraph resultingGraph \u003d jenkins.getFutureDependencyGraph().get();\n        // If no dependency graph was calculated asynchronously, jenkins should return the synchronously calculated dependency graph.\n        assertThat(\"The asynchronously calculated dependency graph should be equal to the synchronously calculated dependency graph but wasn\u0027t.\", resultingGraph, is(jenkins.getDependencyGraph()));\n    }","advisory":"JENKINS-67237"},{"className":"jenkins.model.JenkinsFutureDependencyGraphTest","methodSignature":"jenkins.model.JenkinsFutureDependencyGraphTest.testStartRebuildOfDependecyGraphWhileScheduled:void()","methodSource":"@Issue(\"JENKINS-67237\")\n    @Test\n    public void testStartRebuildOfDependecyGraphWhileScheduled() throws InterruptedException, ExecutionException {\n        Jenkins jenkins \u003d j.jenkins;\n\n        Future\u003cDependencyGraph\u003e firstFutureDependencyGraph \u003d jenkins.rebuildDependencyGraphAsync();\n        Future\u003cDependencyGraph\u003e secondFutureDependencyGraph \u003d jenkins.rebuildDependencyGraphAsync();\n\n        assertThat(\"Two future dependency graphs that were scheduled in short succession should be equal, but weren\u0027t\", firstFutureDependencyGraph, is(secondFutureDependencyGraph));\n        assertThat(\"Last scheduled future dependency graph should have been returned, but wasn\u0027t.\", secondFutureDependencyGraph, is(jenkins.getFutureDependencyGraph()));\n    }","advisory":"JENKINS-67237"},{"className":"jenkins.model.JenkinsFutureDependencyGraphTest","methodSignature":"jenkins.model.JenkinsFutureDependencyGraphTest.testStartRebuildOfDependencyGraphWhileAlreadyRebuilding:void()","methodSource":"@Issue(\"JENKINS-67237\")\n    @Test\n    public void testStartRebuildOfDependencyGraphWhileAlreadyRebuilding() throws InterruptedException, ExecutionException {\n        RebuildDependencyGraphController rebuildDependencyGraphController \u003d new RebuildDependencyGraphController();\n        Jenkins jenkins \u003d mockJenkinsWithControllableDependencyGraph(rebuildDependencyGraphController);\n\n        Future\u003cDependencyGraph\u003e firstFutureDependencyGraph \u003d jenkins.rebuildDependencyGraphAsync();\n        // Wait until rebuild has started\n        while (rebuildDependencyGraphController.getNumberOfStartedBuilds() \u003c 1) {\n            Thread.sleep(500);\n        }\n\n        Future\u003cDependencyGraph\u003e secondFutureDependencyGraph \u003d jenkins.rebuildDependencyGraphAsync();\n\n        assertThat(\"Starting a new rebuild of the dependency graph while already rebuilding should result in two distinct future dependency graphs, but didn\u0027t.\", firstFutureDependencyGraph, is(not(secondFutureDependencyGraph)));\n\n        rebuildDependencyGraphController.setLetBuildFinish(true);\n        // Wait for both builds to complete\n        firstFutureDependencyGraph.get();\n        secondFutureDependencyGraph.get();\n\n        assertThat(\"Two dependency graphs should have been built, but weren\u0027t.\", rebuildDependencyGraphController.getNumberOfFinishedBuilds(), is(2));\n    }","advisory":"JENKINS-67237"},{"className":"jenkins.model.JenkinsFutureDependencyGraphTest","methodSignature":"jenkins.model.JenkinsFutureDependencyGraphTest.testStartRebuildOfDependencyGraphWhileAlreadyRebuildingAndAnotherOneScheduled:void()","methodSource":"@Issue(\"JENKINS-67237\")\n    @Test\n    public void testStartRebuildOfDependencyGraphWhileAlreadyRebuildingAndAnotherOneScheduled() throws InterruptedException, ExecutionException {\n        RebuildDependencyGraphController rebuildDependencyGraphController \u003d new RebuildDependencyGraphController();\n        Jenkins jenkins \u003d mockJenkinsWithControllableDependencyGraph(rebuildDependencyGraphController);\n\n        jenkins.rebuildDependencyGraphAsync();\n        // Wait until rebuild has started\n        while (rebuildDependencyGraphController.getNumberOfStartedBuilds() \u003c 1) {\n            Thread.sleep(500);\n        }\n\n        Future\u003cDependencyGraph\u003e secondFutureDependencyGraph \u003d jenkins.rebuildDependencyGraphAsync();\n        Future\u003cDependencyGraph\u003e thirdFutureDependencyGraph \u003d jenkins.rebuildDependencyGraphAsync();\n\n        assertThat(\"Two future dependency graphs that were scheduled in short succession should be equal, but weren\u0027t\", secondFutureDependencyGraph, is(thirdFutureDependencyGraph));\n        assertThat(\"Last scheduled future dependency graph should have been returned, but wasn\u0027t.\", jenkins.getFutureDependencyGraph(), is(thirdFutureDependencyGraph));\n\n        rebuildDependencyGraphController.setLetBuildFinish(true);\n        // Wait for builds to complete\n        thirdFutureDependencyGraph.get();\n\n        assertThat(\"Two dependency graphs should have been built, but weren\u0027t.\", rebuildDependencyGraphController.getNumberOfFinishedBuilds(), is(2));\n    }","advisory":"JENKINS-67237"},{"className":"jenkins.model.JenkinsLocationConfigurationTest","methodSignature":"jenkins.model.JenkinsLocationConfigurationTest.localhostWarning:void()","methodSource":"@Test\n    public void localhostWarning() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"configure\");\n        HtmlInput url \u003d p.getFormByName(\"config\").getInputByName(\"_.url\");\n        url.setValue(\"http://localhost:1234/\");\n        assertThat(p.getDocumentElement().getTextContent(), containsString(\"instead of localhost\"));\n    }"},{"className":"jenkins.model.JenkinsLocationConfigurationTest","methodSignature":"jenkins.model.JenkinsLocationConfigurationTest.doNotAcceptNonHttpBasedRootURL_fromUI:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1471\")\n    public void doNotAcceptNonHttpBasedRootURL_fromUI() throws Exception {\n        // in JenkinsRule, the URL is set to the current URL\n        JenkinsLocationConfiguration.getOrDie().setUrl(null);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        assertNull(JenkinsLocationConfiguration.getOrDie().getUrl());\n\n        settingRootURL(\"javascript:alert(123);//\");\n\n        // no impact on the url in memory\n        assertNull(JenkinsLocationConfiguration.getOrDie().getUrl());\n\n        Path configFile \u003d j.jenkins.getRootDir().toPath().resolve(\"jenkins.model.JenkinsLocationConfiguration.xml\");\n        String configFileContent \u003d Files.readString(configFile, StandardCharsets.UTF_8);\n        assertThat(configFileContent, containsString(\"JenkinsLocationConfiguration\"));\n        assertThat(configFileContent, not(containsString(\"javascript:alert(123);//\")));\n    }","advisory":"SECURITY-1471"},{"className":"jenkins.model.JenkinsLocationConfigurationTest","methodSignature":"jenkins.model.JenkinsLocationConfigurationTest.escapeHatch_acceptNonHttpBasedRootURL_fromUI:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1471\")\n    public void escapeHatch_acceptNonHttpBasedRootURL_fromUI() throws Exception {\n        boolean previousValue \u003d JenkinsLocationConfiguration.DISABLE_URL_VALIDATION;\n        JenkinsLocationConfiguration.DISABLE_URL_VALIDATION \u003d true;\n\n        try {\n            // in JenkinsRule, the URL is set to the current URL\n            JenkinsLocationConfiguration.getOrDie().setUrl(null);\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            assertNull(JenkinsLocationConfiguration.getOrDie().getUrl());\n\n            String expectedUrl \u003d \"weirdSchema:somethingAlsoWeird\";\n            settingRootURL(expectedUrl);\n\n            // the method ensures there is an trailing slash\n            assertEquals(expectedUrl + \"/\", JenkinsLocationConfiguration.getOrDie().getUrl());\n\n            Path configFile \u003d j.jenkins.getRootDir().toPath().resolve(\"jenkins.model.JenkinsLocationConfiguration.xml\");\n            String configFileContent \u003d Files.readString(configFile, StandardCharsets.UTF_8);\n            assertThat(configFileContent, containsString(\"JenkinsLocationConfiguration\"));\n            assertThat(configFileContent, containsString(expectedUrl));\n        }\n        finally {\n            JenkinsLocationConfiguration.DISABLE_URL_VALIDATION \u003d previousValue;\n        }\n    }","advisory":"SECURITY-1471"},{"className":"jenkins.model.JenkinsLocationConfigurationTest","methodSignature":"jenkins.model.JenkinsLocationConfigurationTest.doNotAcceptNonHttpBasedRootURL_fromConfigXml:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1471\")\n    @LocalData(\"xssThroughConfigXml\")\n    public void doNotAcceptNonHttpBasedRootURL_fromConfigXml() {\n        // in JenkinsRule, the URL is set to the current URL, even if coming from LocalData\n        // so we need to catch the last value before the getUrl from the JenkinsRule that will be used to set the rootUrl\n        assertNull(lastRootUrlReturned);\n        assertTrue(lastRootUrlSet);\n\n        assertThat(JenkinsLocationConfiguration.getOrDie().getUrl(), not(containsString(\"javascript\")));\n    }","advisory":"SECURITY-1471"},{"className":"jenkins.model.JenkinsLocationConfigurationTest","methodSignature":"jenkins.model.JenkinsLocationConfigurationTest.cannotInjectJavaScriptUsingRootUrl_inNewViewLink:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1471\")\n    public void cannotInjectJavaScriptUsingRootUrl_inNewViewLink() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        j.createFreeStyleProject();\n\n        settingRootURL(\"javascript:alert(123);//\");\n\n        // setup the victim\n        AtomicReference\u003cBoolean\u003e alertAppeared \u003d new AtomicReference\u003c\u003e(false);\n        wc.setAlertHandler((page, s) -\u003e alertAppeared.set(true));\n        HtmlPage page \u003d wc.goTo(\"\");\n\n        HtmlAnchor newViewLink \u003d page.getDocumentElement().getElementsByTagName(\"a\").stream()\n                .filter(HtmlAnchor.class::isInstance).map(HtmlAnchor.class::cast)\n                .filter(a -\u003e a.getHrefAttribute().endsWith(\"newView\"))\n                .findFirst().orElseThrow(AssertionError::new);\n\n        // last verification\n        assertFalse(alertAppeared.get());\n\n        HtmlElementUtil.click(newViewLink);\n\n        assertFalse(alertAppeared.get());\n    }","advisory":"SECURITY-1471"},{"className":"jenkins.model.JenkinsLocationConfigurationTest","methodSignature":"jenkins.model.JenkinsLocationConfigurationTest.cannotInjectJavaScriptUsingRootUrl_inLabelAbsoluteLink:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1471\")\n    public void cannotInjectJavaScriptUsingRootUrl_inLabelAbsoluteLink() throws Exception {\n        String builtInLabel \u003d \"builtin-node\";\n        j.jenkins.setLabelString(builtInLabel);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        settingRootURL(\"javascript:alert(123);//\");\n\n        // setup the victim\n        AtomicReference\u003cBoolean\u003e alertAppeared \u003d new AtomicReference\u003c\u003e(false);\n        wc.setAlertHandler((page, s) -\u003e alertAppeared.set(true));\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedLabel(Label.get(builtInLabel));\n\n        HtmlPage projectConfigurePage \u003d wc.getPage(p, \"/configure\");\n\n        HtmlAnchor labelAnchor \u003d projectConfigurePage.getDocumentElement().getElementsByTagName(\"a\").stream()\n                .filter(HtmlAnchor.class::isInstance).map(HtmlAnchor.class::cast)\n                .filter(a -\u003e a.getHrefAttribute().contains(\"/label/\"))\n                .findFirst().orElseThrow(AssertionError::new);\n\n        assertFalse(alertAppeared.get());\n        HtmlElementUtil.click(labelAnchor);\n        assertFalse(alertAppeared.get());\n\n        String labelHref \u003d labelAnchor.getHrefAttribute();\n        assertThat(labelHref, not(containsString(\"javascript:alert(123)\")));\n\n        String responseContent \u003d projectConfigurePage.getWebResponse().getContentAsString();\n        assertThat(responseContent, not(containsString(\"javascript:alert(123)\")));\n    }","advisory":"SECURITY-1471"},{"className":"jenkins.model.JenkinsLogRecordsTest","methodSignature":"jenkins.model.JenkinsLogRecordsTest.logRecordsArePresentOnController:void()","methodSource":"@Test\n    public void logRecordsArePresentOnController() throws Throwable {\n        rr.then(JenkinsLogRecordsTest::_logRecordsArePresentOnController);\n    }"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.managerCannotDisablePlugin:void()","methodSource":"@Issue(\"JENKINS-60266\")\n    @Test\n    @WithPlugin({ \"depender-0.0.2.hpi\", \"dependee-0.0.2.hpi\"})\n    public void managerCannotDisablePlugin() {\n\n        //GIVEN a user with Jenkins.MANAGE permission\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE).everywhere().to(\"manager\")\n        );\n\n        //WHEN trying to disable a plugin\n        assertThat(disablePluginsCLiCommandAs(\"manager\", \"dependee\"), failedWith(6));\n        //THEN it\u0027s refused and the plugin is not disabled.\n        assertPluginEnabled(\"dependee\");\n    }","advisory":"JENKINS-60266"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.dumpExportTableForbiddenWithoutAdminPermission:void()","methodSource":"@Issue(\"JENKINS-60266\")\n    @Test\n    public void dumpExportTableForbiddenWithoutAdminPermission() throws Exception {\n        final String READER \u003d \"reader\";\n        final String MANAGER \u003d \"manager\";\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(READER)\n                .grant(Jenkins.MANAGE).everywhere().to(MANAGER)\n                .grant(Jenkins.READ).everywhere().to(MANAGER)\n        );\n        j.createWebClient().login(READER).assertFails(\"computer/(built-in)/dumpExportTable\", HttpURLConnection.HTTP_FORBIDDEN);\n        j.createWebClient().login(MANAGER).assertFails(\"computer/(built-in)/dumpExportTable\", HttpURLConnection.HTTP_FORBIDDEN);\n    }","advisory":"JENKINS-60266"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.someGlobalConfigurationIsNotDisplayedWithManagePermission:void()","methodSource":"@Issue(\"JENKINS-60266\")\n    @Test\n    public void someGlobalConfigurationIsNotDisplayedWithManagePermission() throws Exception {\n        //GIVEN a user with Jenkins.MANAGE permission\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n\n        //WHEN the user goes to /configure page\n        HtmlForm form \u003d j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n        String formText \u003d form.asNormalizedText();\n        //THEN items restricted to ADMINISTER only should not be displayed.\n        assertThat(\"Should be able to configure system message\", formText, not(containsString(\"systemMessage\")));\n        assertThat(\"Should be able to configure project naming strategy\", formText, not(containsString(\"useProjectNamingStrategy\")));\n        assertThat(\"Shouldn\u0027t be able to configure primary view\", formText, not(containsString(\"primaryView\")));\n        assertThat(\"Shouldn\u0027t be able to configure # of executors\", formText, not(containsString(\"executors\")));\n        assertThat(\"Shouldn\u0027t be able to configure Global properties\", formText,\n                not(containsString(\"Global properties\")));\n        assertThat(\"Shouldn\u0027t be able to configure Administrative monitors\", formText, not(containsString(\n                \"Administrative \"\n                        + \"monitors\")));\n        assertThat(\"Shouldn\u0027t be able to configure Shell\", formText, not(containsString(\"Shell\")));\n    }","advisory":"JENKINS-60266"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.someGlobalConfigCanNotBeModifiedWithManagePermission:void()","methodSource":"@Issue(\"JENKINS-60266\")\n    @Test\n    public void someGlobalConfigCanNotBeModifiedWithManagePermission() throws Exception {\n        j.jenkins.addView(new MyView(\"testView\", j.jenkins));\n\n        //GIVEN the Global Configuration Form, with some changes unsaved\n        int currentNumberExecutors \u003d j.getInstance().getNumExecutors();\n        String shell \u003d getShell();\n        View view \u003d j.jenkins.getPrimaryView();\n        HtmlForm form \u003d j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n        form.getInputByName(\"_.numExecutors\").setValue(\"\" + (currentNumberExecutors + 1));\n        form.getInputByName(\"_.shell\").setValue(\"/fakeShell\");\n        form.getSelectByName(\"primaryView\").setSelectedAttribute(\"testView\", true);\n\n        // WHEN a user with only Jenkins.MANAGE permission try to save those changes\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n        j.submit(form);\n        // THEN the changes on fields forbidden to a Jenkins.MANAGE permission are not saved\n        assertEquals(\"shouldn\u0027t be allowed to change the number of executors\", currentNumberExecutors, j.getInstance().getNumExecutors());\n        assertEquals(\"shouldn\u0027t be allowed to change the shell executable\", shell, getShell());\n        assertEquals(\"shouldn\u0027t be allowed to change the primary view\", view, j.getInstance().getPrimaryView());\n    }","advisory":"JENKINS-60266"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.globalConfigAllowedWithManagePermission:void()","methodSource":"@Issue(\"JENKINS-60266\")\n    @Test\n    public void globalConfigAllowedWithManagePermission() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n\n        HtmlForm form \u003d j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n        HtmlPage updated \u003d j.submit(form);\n        assertThat(\"User with Jenkins.MANAGE permission should be able to update global configuration\",\n                updated.getWebResponse(), hasResponseCode(HttpURLConnection.HTTP_OK));\n    }","advisory":"JENKINS-60266"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.managePermissionCanChangeUsageStatistics:void()","methodSource":"@Issue(\"JENKINS-61457\")\n    @Test\n    public void managePermissionCanChangeUsageStatistics() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                                                   .grant(Jenkins.MANAGE, Jenkins.READ).everywhere().toEveryone());\n\n        boolean previousValue \u003d j.jenkins.isUsageStatisticsCollected();\n        HtmlForm form \u003d j.createWebClient().goTo(\"configure\").getFormByName(\"config\");\n        form.getInputByName(\"_.usageStatisticsCollected\").setChecked(!previousValue);\n        j.submit(form);\n\n        assertThat(\"Can set UsageStatistics\", j.jenkins.isUsageStatisticsCollected(), not(previousValue));\n    }","advisory":"JENKINS-61457"},{"className":"jenkins.model.JenkinsManagePermissionTest","methodSignature":"jenkins.model.JenkinsManagePermissionTest.managePermissionShouldBeAllowedToRestart:void()","methodSource":"@Issue(\"JENKINS-63795\")\n    @Test\n    public void managePermissionShouldBeAllowedToRestart() throws IOException {\n\n        //GIVEN a Jenkins with 3 users : ADMINISTER, MANAGE and READ\n        HudsonPrivateSecurityRealm realm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        User adminUser \u003d realm.createAccount(\"Administer\", \"G0d\");\n        User manageUser \u003d realm.createAccount(\"Manager\", \"TheB00S\");\n        User readUser \u003d realm.createAccount(\"Reader\", \"BookW00rm\");\n        j.jenkins.setSecurityRealm(realm);\n\n        ProjectMatrixAuthorizationStrategy authorizationStrategy \u003d new ProjectMatrixAuthorizationStrategy();\n        authorizationStrategy.add(Jenkins.ADMINISTER, adminUser.getId());\n\n        authorizationStrategy.add(Jenkins.MANAGE, manageUser.getId());\n        authorizationStrategy.add(Jenkins.READ, manageUser.getId());\n\n        authorizationStrategy.add(Jenkins.READ, readUser.getId());\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        //WHEN Asking for restart or safe-restart\n        //THEN MANAGE and ADMINISTER are allowed but not READ\n        CLICommandInvoker.Result result \u003d new CLICommandInvoker(j, \"restart\").asUser(readUser.getId()).invoke();\n        assertThat(result, allOf(failedWith(6), hasNoStandardOutput()));\n\n        result \u003d new CLICommandInvoker(j, \"safe-restart\").asUser(readUser.getId()).invoke();\n        assertThat(result, allOf(failedWith(6), hasNoStandardOutput()));\n\n        // We should assert that cli result is 0\n        // but as restart is not allowed in JenkinsRule, we assert that it has tried to restart.\n        result \u003d new CLICommandInvoker(j, \"restart\").asUser(manageUser.getId()).invoke();\n        assertThat(result, failedWith(1));\n        assertThat(result.stderr(), containsString(\"RestartNotSupportedException\"));\n\n        result \u003d new CLICommandInvoker(j, \"safe-restart\").asUser(manageUser.getId()).invoke();\n        assertThat(result, failedWith(1));\n        assertThat(result.stderr(), containsString(\"RestartNotSupportedException\"));\n\n        result \u003d new CLICommandInvoker(j, \"restart\").asUser(adminUser.getId()).invoke();\n        assertThat(result, failedWith(1));\n        assertThat(result.stderr(), containsString(\"RestartNotSupportedException\"));\n\n        result \u003d new CLICommandInvoker(j, \"safe-restart\").asUser(adminUser.getId()).invoke();\n        assertThat(result, failedWith(1));\n        assertThat(result.stderr(), containsString(\"RestartNotSupportedException\"));\n    }","advisory":"JENKINS-63795"},{"className":"jenkins.model.JenkinsReloadConfigurationTest","methodSignature":"jenkins.model.JenkinsReloadConfigurationTest.reloadBuiltinNodeConfig:void()","methodSource":"@Test\n    public void reloadBuiltinNodeConfig() throws Exception {\n        Node node \u003d j.jenkins;\n        node.setLabelString(\"oldLabel\");\n\n        modifyNode(node);\n\n        assertEquals(\"newLabel\", node.getLabelString());\n    }"},{"className":"jenkins.model.JenkinsReloadConfigurationTest","methodSignature":"jenkins.model.JenkinsReloadConfigurationTest.reloadAgentConfig:void()","methodSource":"@Test\n    public void reloadAgentConfig() throws Exception {\n        Node node \u003d j.createSlave(\"an_agent\", \"oldLabel\", null);\n\n        modifyNode(node);\n\n        node \u003d j.jenkins.getNode(\"an_agent\");\n        assertEquals(\"newLabel\", node.getLabelString());\n    }"},{"className":"jenkins.model.JenkinsReloadConfigurationTest","methodSignature":"jenkins.model.JenkinsReloadConfigurationTest.reloadUserConfigUsingGlobalReload:void()","methodSource":"@Test\n    public void reloadUserConfigUsingGlobalReload() throws Exception {\n        String originalName \u003d \"oldName\";\n        String temporaryName \u003d \"newName\";\n        {\n        User user \u003d User.get(\"some_user\", true, null);\n        user.setFullName(originalName);\n        user.save();\n        assertEquals(originalName, user.getFullName());\n\n        user.setFullName(temporaryName);\n        assertEquals(temporaryName, user.getFullName());\n        }\n        j.jenkins.reload();\n        {\n            assertEquals(originalName, User.getById(\"some_user\", false).getFullName());\n        }\n    }"},{"className":"jenkins.model.JenkinsReloadConfigurationTest","methodSignature":"jenkins.model.JenkinsReloadConfigurationTest.reloadJobConfig:void()","methodSource":"@Test\n    public void reloadJobConfig() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"a_project\");\n        project.setDescription(\"oldDescription\");\n\n        replace(\"jobs/a_project/config.xml\", \"oldDescription\", \"newDescription\");\n\n        assertEquals(\"oldDescription\", project.getDescription());\n\n        j.jenkins.reload();\n\n        project \u003d j.jenkins.getItem(\"a_project\", j.jenkins, FreeStyleProject.class);\n        assertEquals(\"newDescription\", project.getDescription());\n    }"},{"className":"jenkins.model.JenkinsReloadConfigurationTest","methodSignature":"jenkins.model.JenkinsReloadConfigurationTest.reloadViewConfig:void()","methodSource":"@Test\n    public void reloadViewConfig() throws Exception {\n        ListView view \u003d new ListView(\"a_view\");\n        j.jenkins.addView(view);\n\n        view.setIncludeRegex(\"oldIncludeRegex\");\n        view.save();\n\n        replace(\"config.xml\", \"oldIncludeRegex\", \"newIncludeRegex\");\n\n        assertEquals(\"oldIncludeRegex\", view.getIncludeRegex());\n\n        j.jenkins.reload();\n\n        view \u003d (ListView) j.jenkins.getView(\"a_view\");\n        assertEquals(\"newIncludeRegex\", view.getIncludeRegex());\n    }"},{"className":"jenkins.model.JenkinsReloadConfigurationTest","methodSignature":"jenkins.model.JenkinsReloadConfigurationTest.reloadDescriptorConfig:void()","methodSource":"@Test\n    public void reloadDescriptorConfig() {\n        Mailer.DescriptorImpl desc \u003d mailerDescriptor();\n        desc.setDefaultSuffix(\"@oldSuffix\");\n        desc.save();\n\n        replace(\"hudson.tasks.Mailer.xml\", \"@oldSuffix\", \"@newSuffix\");\n\n        assertEquals(\"@oldSuffix\", desc.getDefaultSuffix());\n\n        desc.load();\n\n        assertEquals(\"@newSuffix\", desc.getDefaultSuffix());\n    }"},{"className":"jenkins.model.JenkinsSystemReadAndManagePermissionTest","methodSignature":"jenkins.model.JenkinsSystemReadAndManagePermissionTest.configureReadAllowedWithSystemReadAndManagePermission:void()","methodSource":"@Test\n    public void configureReadAllowedWithSystemReadAndManagePermission() throws Exception {\n        HtmlPage configure \u003d webClient.login(SYSTEM_READER_AND_MANAGER)\n                .goTo(\"configure\");\n        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n    }"},{"className":"jenkins.model.JenkinsSystemReadAndManagePermissionTest","methodSignature":"jenkins.model.JenkinsSystemReadAndManagePermissionTest.configureConfigSubmitAllowedWithSystemReadAndManagePermission:void()","methodSource":"@Test\n    public void configureConfigSubmitAllowedWithSystemReadAndManagePermission() throws Exception {\n        HtmlPage configure \u003d webClient.login(SYSTEM_READER_AND_MANAGER)\n                .goTo(\"configure\");\n        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n\n        HtmlForm configureForm \u003d configure.getFormByName(\"config\");\n        HtmlPage submit \u003d j.submit(configureForm);\n\n        assertThat(submit.getWebResponse().getStatusCode(), is(200));\n    }"},{"className":"jenkins.model.JenkinsSystemReadAndManagePermissionTest","methodSignature":"jenkins.model.JenkinsSystemReadAndManagePermissionTest.cannotModifyReadOnlyConfiguration:void()","methodSource":"@Test\n    public void cannotModifyReadOnlyConfiguration() throws Exception {\n        HtmlPage configure \u003d webClient.login(SYSTEM_READER_AND_MANAGER)\n                .goTo(\"configure\");\n\n        //GIVEN the Global Configuration Form, with some changes unsaved\n        HtmlForm form \u003d configure.getFormByName(\"config\");\n\n        // WHEN a user with Jenkins.MANAGE and Jenkins.SYSTEM_READ permission tries to save the changes\n        j.submit(form);\n        // THEN the changes on fields forbidden to a Jenkins.MANAGE permission are not saved\n        Config config \u003d GlobalConfiguration.all().get(Config.class);\n\n        assertNotNull(config);\n        assertNull(\"shouldn\u0027t be allowed to change a GlobalConfiguration that needs Overall/Administer\", config.getNumber());\n    }"},{"className":"jenkins.model.JenkinsSystemReadPermissionTest","methodSignature":"jenkins.model.JenkinsSystemReadPermissionTest.configureReadAllowedWithSystemReadPermission:void()","methodSource":"@Test\n    public void configureReadAllowedWithSystemReadPermission() throws Exception {\n        HtmlPage configure \u003d webClient.login(SYSTEM_READER)\n                .goTo(\"configure\");\n        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n    }"},{"className":"jenkins.model.JenkinsSystemReadPermissionTest","methodSignature":"jenkins.model.JenkinsSystemReadPermissionTest.configureConfigSubmitBlockedWithSystemReadPermission:void()","methodSource":"@Test\n    public void configureConfigSubmitBlockedWithSystemReadPermission() throws Exception {\n        HtmlPage configure \u003d webClient.login(SYSTEM_READER)\n                .goTo(\"configure\");\n        assertThat(configure.getWebResponse().getStatusCode(), is(200));\n\n        HtmlForm configureForm \u003d configure.getFormByName(\"config\");\n        HtmlPage submit \u003d j.submit(configureForm);\n\n        assertThat(submit.getWebResponse().getStatusCode(), is(403));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.verifyUploadedFingerprintFilePermission:void()","methodSource":"@Test\n    @Issue(\"SECURITY-3073\")\n    public void verifyUploadedFingerprintFilePermission() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"fingerprintCheck\");\n        // The form doesn\u0027t have a name, the page contain the search form and the one we\u0027re interested in\n        HtmlForm form \u003d page.getForms().get(1);\n        File dir \u003d tmp.newFolder();\n        File plugin \u003d new File(dir, \"htmlpublisher.jpi\");\n        // We\u0027re using a plugin to have a file above DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD\n        FileUtils.copyURLToFile(Objects.requireNonNull(getClass().getClassLoader().getResource(\"plugins/htmlpublisher.jpi\")), plugin);\n        form.getInputByName(\"name\").setValueAttribute(plugin.getAbsolutePath());\n        j.submit(form);\n\n        File filesRef \u003d Files.createTempFile(\"tmp\", \".tmp\").toFile();\n        File filesTmpDir \u003d filesRef.getParentFile();\n        filesRef.deleteOnExit();\n\n        final Set\u003cPosixFilePermission\u003e[] filesPermission \u003d new Set[]{new HashSet\u003c\u003e()};\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e {\n                    Optional\u003cFile\u003e lastUploadedPlugin \u003d Arrays.stream(Objects.requireNonNull(\n                                    filesTmpDir.listFiles((file, fileName) -\u003e\n                                            fileName.startsWith(\"jenkins-multipart-uploads\")))).\n                            max(Comparator.comparingLong(File::lastModified));\n                    if (lastUploadedPlugin.isPresent()) {\n                        filesPermission[0] \u003d Files.getPosixFilePermissions(lastUploadedPlugin.get().toPath(), LinkOption.NOFOLLOW_LINKS);\n                        return true;\n                    } else {\n                        return false;\n                    }\n                });\n        assertEquals(EnumSet.of(OWNER_EXECUTE, OWNER_READ, OWNER_WRITE), filesPermission[0]);\n    }","advisory":"SECURITY-3073"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testUserCreationFromUrlForAdmins:void()","methodSource":"@Issue(\"SECURITY-406\")\n    @Test\n    public void testUserCreationFromUrlForAdmins() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n\n        assertNull(\"User not supposed to exist\", User.getById(\"nonexistent\", false));\n        wc.assertFails(\"user/nonexistent\", 404);\n        assertNull(\"User not supposed to exist\", User.getById(\"nonexistent\", false));\n\n        try {\n            User.ALLOW_USER_CREATION_VIA_URL \u003d true;\n\n            // expected to work\n            wc.goTo(\"user/nonexistent2\");\n\n            assertNotNull(\"User supposed to exist\", User.getById(\"nonexistent2\", false));\n\n        } finally {\n            User.ALLOW_USER_CREATION_VIA_URL \u003d false;\n        }\n    }","advisory":"SECURITY-406"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testIsDisplayNameUniqueTrue:void()","methodSource":"@Test\n    public void testIsDisplayNameUniqueTrue() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        FreeStyleProject curProject \u003d j.createFreeStyleProject(curJobName);\n        curProject.setDisplayName(\"currentProjectDisplayName\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject(jobName);\n        p.setDisplayName(\"displayName\");\n\n        Jenkins jenkins \u003d Jenkins.get();\n        assertTrue(jenkins.isDisplayNameUnique(\"displayName1\", curJobName));\n        assertTrue(jenkins.isDisplayNameUnique(jobName, curJobName));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testIsDisplayNameUniqueFalse:void()","methodSource":"@Test\n    public void testIsDisplayNameUniqueFalse() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        final String displayName \u003d \"displayName\";\n\n        FreeStyleProject curProject \u003d j.createFreeStyleProject(curJobName);\n        curProject.setDisplayName(\"currentProjectDisplayName\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject(jobName);\n        p.setDisplayName(displayName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        assertFalse(jenkins.isDisplayNameUnique(displayName, curJobName));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testIsDisplayNameUniqueSameAsCurrentJob:void()","methodSource":"@Test\n    public void testIsDisplayNameUniqueSameAsCurrentJob() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String displayName \u003d \"currentProjectDisplayName\";\n\n        FreeStyleProject curProject \u003d j.createFreeStyleProject(curJobName);\n        curProject.setDisplayName(displayName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        // should be true as we don\u0027t test against the current job\n        assertTrue(jenkins.isDisplayNameUnique(displayName, curJobName));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testIsNameUniqueTrue:void()","methodSource":"@Test\n    public void testIsNameUniqueTrue() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        j.createFreeStyleProject(curJobName);\n        j.createFreeStyleProject(jobName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        assertTrue(jenkins.isNameUnique(\"jobName1\", curJobName));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testIsNameUniqueFalse:void()","methodSource":"@Test\n    public void testIsNameUniqueFalse() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        j.createFreeStyleProject(curJobName);\n        j.createFreeStyleProject(jobName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        assertFalse(jenkins.isNameUnique(jobName, curJobName));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testIsNameUniqueSameAsCurrentJob:void()","methodSource":"@Test\n    public void testIsNameUniqueSameAsCurrentJob() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        j.createFreeStyleProject(curJobName);\n        j.createFreeStyleProject(jobName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        // true because we don\u0027t test against the current job\n        assertTrue(jenkins.isNameUnique(curJobName, curJobName));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoCheckDisplayNameUnique:void()","methodSource":"@Test\n    public void testDoCheckDisplayNameUnique() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        FreeStyleProject curProject \u003d j.createFreeStyleProject(curJobName);\n        curProject.setDisplayName(\"currentProjectDisplayName\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject(jobName);\n        p.setDisplayName(\"displayName\");\n\n        Jenkins jenkins \u003d Jenkins.get();\n        FormValidation v \u003d jenkins.doCheckDisplayName(\"1displayName\", curJobName);\n        assertEquals(FormValidation.ok(), v);\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoCheckDisplayNameSameAsDisplayName:void()","methodSource":"@Test\n    public void testDoCheckDisplayNameSameAsDisplayName() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        final String displayName \u003d \"displayName\";\n        FreeStyleProject curProject \u003d j.createFreeStyleProject(curJobName);\n        curProject.setDisplayName(\"currentProjectDisplayName\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject(jobName);\n        p.setDisplayName(displayName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        FormValidation v \u003d jenkins.doCheckDisplayName(displayName, curJobName);\n        assertEquals(FormValidation.Kind.WARNING, v.kind);\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoCheckDisplayNameSameAsJobName:void()","methodSource":"@Test\n    public void testDoCheckDisplayNameSameAsJobName() throws Exception {\n        final String curJobName \u003d \"curJobName\";\n        final String jobName \u003d \"jobName\";\n        final String displayName \u003d \"displayName\";\n        FreeStyleProject curProject \u003d j.createFreeStyleProject(curJobName);\n        curProject.setDisplayName(\"currentProjectDisplayName\");\n\n        FreeStyleProject p \u003d j.createFreeStyleProject(jobName);\n        p.setDisplayName(displayName);\n\n        Jenkins jenkins \u003d Jenkins.get();\n        FormValidation v \u003d jenkins.doCheckDisplayName(jobName, curJobName);\n        assertEquals(FormValidation.Kind.WARNING, v.kind);\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoCheckViewName_GoodName:void()","methodSource":"@Test\n    public void testDoCheckViewName_GoodName() throws Exception {\n        String[] viewNames \u003d new String[] {\n            \"\",\n            \"Jenkins\",\n        };\n\n        Jenkins jenkins \u003d Jenkins.get();\n        for (String viewName : viewNames) {\n            FormValidation v \u003d jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.OK, v.kind);\n        }\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoCheckViewName_NotGoodName:void()","methodSource":"@Test\n    public void testDoCheckViewName_NotGoodName() throws Exception {\n        String[] viewNames \u003d new String[] {\n            \"Jenkins?\",\n            \"Jenkins*\",\n            \"Jenkin/s\",\n            \"Jenkin\\\\s\",\n            \"jenkins%\",\n            \"Jenkins!\",\n            \"Jenkins[]\",\n            \"Jenkin\u003c\u003es\",\n            \"^Jenkins\",\n            \"..\",\n        };\n\n        Jenkins jenkins \u003d Jenkins.get();\n\n        for (String viewName : viewNames) {\n            FormValidation v \u003d jenkins.doCheckViewName(viewName);\n            assertEquals(FormValidation.Kind.ERROR, v.kind);\n        }\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testUnprotectedRootAction:void()","methodSource":"@Test @Issue(\"JENKINS-14113\")\n    public void testUnprotectedRootAction() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new FullControlOnceLoggedInAuthorizationStrategy());\n        WebClient wc \u003d j.createWebClient();\n        wc.goTo(\"foobar\");\n        wc.goTo(\"foobar/\");\n        wc.goTo(\"foobar/zot\");\n\n        // and make sure this fails\n        wc.assertFails(\"foobar-zot/\", HttpURLConnection.HTTP_INTERNAL_ERROR);\n\n        assertEquals(3, j.jenkins.getExtensionList(RootAction.class).get(RootActionImpl.class).count);\n    }","advisory":"JENKINS-14113"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoScript:void()","methodSource":"@Test\n    public void testDoScript() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.ADMINISTER).everywhere().to(\"alice\").\n            grant(Jenkins.READ).everywhere().to(\"bob\").\n            grantWithoutImplication(Jenkins.RUN_SCRIPTS, Jenkins.READ).everywhere().to(\"charlie\"));\n        WebClient wc \u003d j.createWebClient();\n\n        wc.withBasicApiToken(User.getById(\"alice\", true));\n        wc.goTo(\"script\");\n        wc.assertFails(\"script?script\u003dSystem.setProperty(\u0027hack\u0027,\u0027me\u0027)\", HttpURLConnection.HTTP_BAD_METHOD);\n        assertNull(System.getProperty(\"hack\"));\n        WebRequest req \u003d new WebRequest(new URL(wc.getContextPath() + \"script?script\u003dSystem.setProperty(\u0027hack\u0027,\u0027me\u0027)\"), HttpMethod.POST);\n        wc.getPage(req);\n        assertEquals(\"me\", System.getProperty(\"hack\"));\n        wc.assertFails(\"scriptText?script\u003dSystem.setProperty(\u0027hack\u0027,\u0027me\u0027)\", HttpURLConnection.HTTP_BAD_METHOD);\n        req \u003d new WebRequest(new URL(wc.getContextPath() + \"scriptText?script\u003dSystem.setProperty(\u0027huck\u0027,\u0027you\u0027)\"), HttpMethod.POST);\n        wc.getPage(req);\n        assertEquals(\"you\", System.getProperty(\"huck\"));\n\n        wc.withBasicApiToken(User.getById(\"bob\", true));\n        wc.assertFails(\"script\", HttpURLConnection.HTTP_FORBIDDEN);\n\n        //TODO: remove once RUN_SCRIPTS is finally retired\n        wc.withBasicApiToken(User.getById(\"charlie\", true));\n        wc.assertFails(\"script\", HttpURLConnection.HTTP_FORBIDDEN);\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoScriptTextDoesNotOutputExtraWhitespace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-58548\")\n    public void testDoScriptTextDoesNotOutputExtraWhitespace() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        WebClient wc \u003d j.createWebClient().login(\"admin\");\n        TextPage page \u003d wc.getPage(new WebRequest(wc.createCrumbedUrl(\"scriptText?script\u003dprint \u0027hello\u0027\"), HttpMethod.POST));\n        assertEquals(\"hello\", page.getContent());\n    }","advisory":"JENKINS-58548"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testDoEval:void()","methodSource":"@Test\n    public void testDoEval() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n            grant(Jenkins.ADMINISTER).everywhere().to(\"alice\").\n            grant(Jenkins.READ).everywhere().to(\"bob\").\n            grantWithoutImplication(Jenkins.ADMINISTER, Jenkins.READ).everywhere().to(\"charlie\"));\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false)\n                .withBasicApiToken(User.getById(\"alice\", true));\n\n        wc.assertFails(\"eval\", HttpURLConnection.HTTP_BAD_METHOD);\n        assertEquals(\"3\", eval(wc).getWebResponse().getContentAsString());\n\n        wc.withBasicApiToken(User.getById(\"bob\", true));\n        Page page \u003d eval(wc);\n        assertEquals(\"bob has only READ\",\n                HttpURLConnection.HTTP_FORBIDDEN,\n                page.getWebResponse().getStatusCode());\n\n        wc.withBasicApiToken(User.getById(\"charlie\", true));\n        page \u003d eval(wc);\n        assertEquals(\"charlie has ADMINISTER and READ\",\n                HttpURLConnection.HTTP_OK,\n                page.getWebResponse().getStatusCode());\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testErrorPageShouldBeAnonymousAccessible:void()","methodSource":"@Test @Issue(\"JENKINS-20866\")\n    public void testErrorPageShouldBeAnonymousAccessible() throws Exception {\n        HudsonPrivateSecurityRealm s \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        User alice \u003d s.createAccount(\"alice\", \"alice\");\n        j.jenkins.setSecurityRealm(s);\n\n        GlobalMatrixAuthorizationStrategy auth \u003d new GlobalMatrixAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(auth);\n\n        // no anonymous read access\n        assertFalse(Jenkins.get().hasPermission2(Jenkins.ANONYMOUS2, Jenkins.READ));\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage p \u003d wc.goTo(\"error/reportError\");\n\n        assertEquals(p.asNormalizedText(), HttpURLConnection.HTTP_BAD_REQUEST, p.getWebResponse().getStatusCode());  // not 403 forbidden\n        assertTrue(p.getWebResponse().getContentAsString().contains(\"My car is black\"));\n    }","advisory":"JENKINS-20866"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testComputerListenerNotifiedOnRestart:void()","methodSource":"@Test @Issue(\"JENKINS-23551\")\n    public void testComputerListenerNotifiedOnRestart() {\n        // Simulate restart calling listeners\n        for (RestartListener listener : RestartListener.all())\n            listener.onRestart();\n\n        ArgumentCaptor\u003cOfflineCause\u003e captor \u003d ArgumentCaptor.forClass(OfflineCause.class);\n        Mockito.verify(listenerMock).onOffline(ArgumentMatchers.eq(j.jenkins.toComputer()), captor.capture());\n        assertTrue(captor.getValue().toString().contains(\"restart\"));\n    }","advisory":"JENKINS-23551"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.runScriptOnOfflineComputer:void()","methodSource":"@Test\n    public void runScriptOnOfflineComputer() throws Exception {\n        DumbSlave slave \u003d j.createSlave(true);\n        j.disconnectSlave(slave);\n\n        URL url \u003d new URL(j.getURL(), \"computer/\" + slave.getNodeName() + \"/scriptText?script\u003dprintln(42)\");\n\n        WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        WebRequest req \u003d new WebRequest(url, HttpMethod.POST);\n        Page page \u003d wc.getPage(wc.addCrumb(req));\n        WebResponse rsp \u003d page.getWebResponse();\n\n        assertThat(rsp.getContentAsString(), containsString(\"Node is offline\"));\n        assertThat(rsp.getStatusCode(), equalTo(404));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.startupShouldNotFailOnIOExceptionOnlineListener:void()","methodSource":"@Test\n    @Issue(\"JENKINS-38487\")\n    public void startupShouldNotFailOnIOExceptionOnlineListener() {\n        // We do nothing, IOExceptionOnOnlineListener \u0026 JenkinsRule should cause the\n        // boot failure if the issue is not fixed.\n\n        assertEquals(1, IOExceptionOnOnlineListener.onOnlineCount);\n    }","advisory":"JENKINS-38487"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.startupShouldNotFailOnRuntimeExceptionOnlineListener:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57111\")\n    public void startupShouldNotFailOnRuntimeExceptionOnlineListener() {\n        // We do nothing, RuntimeExceptionOnOnlineListener \u0026 JenkinsRule should cause the\n        // boot failure if the issue is not fixed.\n        assertEquals(1, RuntimeExceptionOnOnlineListener.onOnlineCount);\n    }","advisory":"JENKINS-57111"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.agentProtocols_singleEnable_roundtrip:void()","methodSource":"@Test\n    @Issue(\"JENKINS-39465\")\n    public void agentProtocols_singleEnable_roundtrip() throws Exception {\n        final Set\u003cString\u003e defaultProtocols \u003d Collections.unmodifiableSet(j.jenkins.getAgentProtocols());\n\n        final Set\u003cString\u003e newProtocols \u003d new HashSet\u003c\u003e(defaultProtocols);\n        newProtocols.add(MockOptInProtocol1.NAME);\n        j.jenkins.setAgentProtocols(newProtocols);\n        j.jenkins.save();\n        final Set\u003cString\u003e agentProtocolsBeforeReload \u003d j.jenkins.getAgentProtocols();\n        assertProtocolEnabled(MockOptInProtocol1.NAME, \"before the roundtrip\");\n\n        j.jenkins.reload();\n\n        final Set\u003cString\u003e reloadedProtocols \u003d j.jenkins.getAgentProtocols();\n        assertNotSame(\"The protocol list must have been really reloaded\", agentProtocolsBeforeReload, reloadedProtocols);\n        assertThat(\"We should have additional enabled protocol\",\n                reloadedProtocols.size(), equalTo(defaultProtocols.size() + 1));\n        assertProtocolEnabled(MockOptInProtocol1.NAME, \"after the roundtrip\");\n    }","advisory":"JENKINS-39465"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.agentProtocols_multipleDisable_roundtrip:void()","methodSource":"@Test\n    @Issue(\"JENKINS-39465\")\n    public void agentProtocols_multipleDisable_roundtrip() throws Exception {\n        final Set\u003cString\u003e defaultProtocols \u003d Collections.unmodifiableSet(j.jenkins.getAgentProtocols());\n        assertProtocolEnabled(MockOptOutProtocol1.NAME, \"after startup\");\n\n        final Set\u003cString\u003e newProtocols \u003d new HashSet\u003c\u003e(defaultProtocols);\n        newProtocols.remove(MockOptOutProtocol1.NAME);\n        j.jenkins.setAgentProtocols(newProtocols);\n        j.jenkins.save();\n        assertProtocolDisabled(MockOptOutProtocol1.NAME, \"before the roundtrip\");\n        final Set\u003cString\u003e agentProtocolsBeforeReload \u003d j.jenkins.getAgentProtocols();\n        j.jenkins.reload();\n\n        assertNotSame(\"The protocol list must have been really refreshed\", agentProtocolsBeforeReload, j.jenkins.getAgentProtocols());\n        assertThat(\"We should have disabled one protocol\",\n                j.jenkins.getAgentProtocols().size(), equalTo(defaultProtocols.size() - 1));\n\n        assertProtocolDisabled(MockOptOutProtocol1.NAME, \"after the roundtrip\");\n    }","advisory":"JENKINS-39465"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.agentProtocols_multipleEnable_roundtrip:void()","methodSource":"@Test\n    @Issue(\"JENKINS-39465\")\n    public void agentProtocols_multipleEnable_roundtrip() throws Exception {\n        final Set\u003cString\u003e defaultProtocols \u003d Collections.unmodifiableSet(j.jenkins.getAgentProtocols());\n        final Set\u003cString\u003e newProtocols \u003d new HashSet\u003c\u003e(defaultProtocols);\n        newProtocols.add(MockOptInProtocol1.NAME);\n        newProtocols.add(MockOptInProtocol2.NAME);\n        j.jenkins.setAgentProtocols(newProtocols);\n        j.jenkins.save();\n\n        final Set\u003cString\u003e agentProtocolsBeforeReload \u003d j.jenkins.getAgentProtocols();\n        assertProtocolEnabled(MockOptInProtocol1.NAME, \"before the roundtrip\");\n        assertProtocolEnabled(MockOptInProtocol2.NAME, \"before the roundtrip\");\n\n        j.jenkins.reload();\n\n        final Set\u003cString\u003e reloadedProtocols \u003d j.jenkins.getAgentProtocols();\n        assertNotSame(\"The protocol list must have been really reloaded\", agentProtocolsBeforeReload, reloadedProtocols);\n        assertThat(\"There should be two additional enabled protocols\",\n                reloadedProtocols.size(), equalTo(defaultProtocols.size() + 2));\n        assertProtocolEnabled(MockOptInProtocol1.NAME, \"after the roundtrip\");\n        assertProtocolEnabled(MockOptInProtocol2.NAME, \"after the roundtrip\");\n    }","advisory":"JENKINS-39465"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.agentProtocols_singleDisable_roundtrip:void()","methodSource":"@Test\n    @Issue(\"JENKINS-39465\")\n    public void agentProtocols_singleDisable_roundtrip() throws Exception {\n        final Set\u003cString\u003e defaultProtocols \u003d Collections.unmodifiableSet(j.jenkins.getAgentProtocols());\n        final String protocolToDisable1 \u003d MockOptOutProtocol1.NAME;\n        final String protocolToDisable2 \u003d MockOptOutProtocol2.NAME;\n\n        final Set\u003cString\u003e newProtocols \u003d new HashSet\u003c\u003e(defaultProtocols);\n        newProtocols.remove(protocolToDisable1);\n        newProtocols.remove(protocolToDisable2);\n        j.jenkins.setAgentProtocols(newProtocols);\n        j.jenkins.save();\n        assertProtocolDisabled(protocolToDisable1, \"before the roundtrip\");\n        assertProtocolDisabled(protocolToDisable2, \"before the roundtrip\");\n        final Set\u003cString\u003e agentProtocolsBeforeReload \u003d j.jenkins.getAgentProtocols();\n        j.jenkins.reload();\n\n        assertNotSame(\"The protocol list must have been really reloaded\", agentProtocolsBeforeReload, j.jenkins.getAgentProtocols());\n        assertThat(\"We should have disabled two protocols\",\n                j.jenkins.getAgentProtocols().size(), equalTo(defaultProtocols.size() - 2));\n        assertProtocolDisabled(protocolToDisable1, \"after the roundtrip\");\n        assertProtocolDisabled(protocolToDisable2, \"after the roundtrip\");\n    }","advisory":"JENKINS-39465"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.getComputers:void()","methodSource":"@Test\n    public void getComputers() throws Exception {\n        List\u003cSlave\u003e agents \u003d new ArrayList\u003c\u003e();\n        for (String n : List.of(\"zestful\", \"bilking\", \"grouchiest\")) {\n            agents.add(j.createSlave(n, null, null));\n        }\n        for (Slave agent : agents) {\n            j.waitOnline(agent);\n        }\n        assertThat(Stream.of(j.jenkins.getComputers()).map(Computer::getName).toArray(String[]::new),\n            arrayContaining(\"\", \"bilking\", \"grouchiest\", \"zestful\"));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.versionIsSavedInSave:void()","methodSource":"@Issue(\"JENKINS-42577\")\n    @Test\n    public void versionIsSavedInSave() throws Exception {\n        Jenkins.VERSION \u003d \"1.0\";\n        j.jenkins.save();\n        VersionNumber storedVersion \u003d Jenkins.getStoredVersion();\n        assertNotNull(storedVersion);\n        assertEquals(\"1.0\", storedVersion.toString());\n\n        Jenkins.VERSION \u003d null;\n        j.jenkins.save();\n        VersionNumber nullVersion \u003d Jenkins.getStoredVersion();\n        assertNull(nullVersion);\n    }","advisory":"JENKINS-42577"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.jobCreatedByInitializerIsRetained:void()","methodSource":"@Issue(\"JENKINS-47406\")\n    @Test\n    @WithPlugin(\"jenkins-47406.hpi\") // Sources: https://github.com/Vlatombe/jenkins-47406\n    public void jobCreatedByInitializerIsRetained() {\n        assertNotNull(\"JENKINS-47406 should exist\", j.jenkins.getItem(\"JENKINS-47406\"));\n    }","advisory":"JENKINS-47406"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testLogin123:void()","methodSource":"@Issue(\"SECURITY-2047\")\n    @Test\n    public void testLogin123() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        WebClient wc \u003d j.createWebClient();\n\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Page should be protected.\", FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"login123\"));\n        assertThat(e.getStatusCode(), is(403));\n    }","advisory":"SECURITY-2047"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testLogin123WithRead:void()","methodSource":"@Issue(\"SECURITY-2047\")\n    @Test\n    public void testLogin123WithRead() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.READ).everywhere().to(\"bob\"));\n        WebClient wc \u003d j.createWebClient();\n\n        wc.login(\"bob\");\n        HtmlPage login123 \u003d wc.goTo(\"login123\");\n        assertThat(login123.getWebResponse().getStatusCode(), is(200));\n        assertThat(login123.getWebResponse().getContentAsString(), containsString(\"This should be protected\"));\n    }","advisory":"SECURITY-2047"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testLogin:void()","methodSource":"@Test\n    public void testLogin() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.READ).everywhere().to(\"bob\"));\n        WebClient wc \u003d j.createWebClient();\n\n        HtmlPage login \u003d wc.goTo(\"login\");\n        assertThat(login.getWebResponse().getStatusCode(), is(200));\n        assertThat(login.getWebResponse().getContentAsString(), containsString(\"login\"));\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.testTrimLabelsRetainsLabelExpressions:void()","methodSource":"@Issue(\"JENKINS-68055\")\n    @Test\n    public void testTrimLabelsRetainsLabelExpressions() throws Exception {\n        Node n \u003d j.createOnlineSlave();\n        n.setLabelString(\"test expression\");\n\n        FreeStyleProject f \u003d j.createFreeStyleProject();\n        Label l \u003d Label.parseExpression(\"test\u0026\u0026expression\");\n        f.setAssignedLabel(l);\n        f.scheduleBuild2(0).get();\n\n        j.jenkins.trimLabels();\n        assertThat(j.jenkins.getLabels().contains(l), is(true));\n    }","advisory":"JENKINS-68055"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.reloadShouldNotSaveConfig:void()","methodSource":"@Test\n    public void reloadShouldNotSaveConfig() throws Exception {\n        SaveableListenerImpl saveListener \u003d ExtensionList.lookupSingleton(SaveableListenerImpl.class);\n        saveListener.reset();\n        j.jenkins.reload();\n        assertFalse(\"Jenkins object should not have been saved.\", saveListener.wasCalled());\n    }"},{"className":"jenkins.model.JenkinsTest","methodSignature":"jenkins.model.JenkinsTest.checkInitialView:void()","methodSource":"@Test\n    public void checkInitialView() {\n        assertTrue(CheckInitialViewExtension.hasPrimaryView);\n    }"},{"className":"jenkins.model.lazy.LazyBuildMixInTest","methodSignature":"jenkins.model.lazy.LazyBuildMixInTest.dropLinksAfterGC:void()","methodSource":"@Issue(\"JENKINS-22395\")\n    @Test public void dropLinksAfterGC() throws Exception {\n        RunListener.all().clear();  // see commit message for the discussion\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        FreeStyleBuild b2 \u003d r.buildAndAssertSuccess(p);\n        FreeStyleBuild b3 \u003d r.buildAndAssertSuccess(p);\n        assertEquals(b2, b1.getNextBuild());\n        assertEquals(b3, b2.getNextBuild());\n        assertNull(b3.getNextBuild());\n        assertNull(b1.getPreviousBuild());\n        assertEquals(b1, b2.getPreviousBuild());\n        assertEquals(b2, b3.getPreviousBuild());\n        b1.getRunMixIn().createReference().clear();\n        b2.delete();\n        FreeStyleBuild b1a \u003d b2.getPreviousBuild();\n        assertNotSame(b1, b1a);\n        assertEquals(1, b1a.getNumber());\n        assertEquals(b3, b1a.getNextBuild());\n    }","advisory":"JENKINS-22395"},{"className":"jenkins.model.lazy.LazyBuildMixInTest","methodSignature":"jenkins.model.lazy.LazyBuildMixInTest.dropLinksAfterGC2:void()","methodSource":"@Issue(\"JENKINS-22395\")\n    @Test public void dropLinksAfterGC2() throws Exception {\n        RunListener.all().clear();  // see commit message for the discussion\n\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        FreeStyleBuild b2 \u003d r.buildAndAssertSuccess(p);\n        FreeStyleBuild b3 \u003d r.buildAndAssertSuccess(p);\n        assertEquals(b2, b1.getNextBuild());\n        assertEquals(b3, b2.getNextBuild());\n        assertNull(b3.getNextBuild());\n        assertNull(b1.getPreviousBuild());\n        assertEquals(b1, b2.getPreviousBuild());\n        assertEquals(b2, b3.getPreviousBuild());\n        b2.delete();\n        b1.getRunMixIn().createReference().clear();\n        FreeStyleBuild b1a \u003d b2.getPreviousBuild();\n        assertNotSame(b1, b1a);\n        assertEquals(1, b1a.getNumber());\n        assertEquals(b3, b1a.getNextBuild());\n    }","advisory":"JENKINS-22395"},{"className":"jenkins.model.lazy.LazyBuildMixInTest","methodSignature":"jenkins.model.lazy.LazyBuildMixInTest.newRunningBuildRelationFromPrevious:void()","methodSource":"@Issue(\"JENKINS-20662\")\n    @Test public void newRunningBuildRelationFromPrevious() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new SleepBuilder(1000));\n        FreeStyleBuild b1 \u003d r.buildAndAssertSuccess(p);\n        assertNull(b1.getNextBuild());\n        FreeStyleBuild b2 \u003d p.scheduleBuild2(0).waitForStart();\n        assertSame(b2, b1.getNextBuild());\n        r.assertBuildStatusSuccess(r.waitForCompletion(b2));\n    }","advisory":"JENKINS-20662"},{"className":"jenkins.model.lazy.LazyBuildMixInTest","methodSignature":"jenkins.model.lazy.LazyBuildMixInTest.newBuildsShouldNotLoadOld:void()","methodSource":"@Test\n    public void newBuildsShouldNotLoadOld() throws Throwable {\n        var p \u003d r.createFreeStyleProject(\"p\");\n        for (int i \u003d 0; i \u003c 10; i++) {\n            r.buildAndAssertSuccess(p);\n        }\n        RunLoadCounter.assertMaxLoads(p, /* just lastBuild */ 1, () -\u003e {\n            for (int i \u003d 0; i \u003c 5; i++) {\n                r.buildAndAssertSuccess(p);\n            }\n            return null;\n        });\n    }"},{"className":"jenkins.model.MasterBuildConfigurationTest","methodSignature":"jenkins.model.MasterBuildConfigurationTest.retainMasterLabelWhenNoSlaveDefined:void()","methodSource":"@Test\n    @Issue(\"JENKINS-23966\")\n    public void retainMasterLabelWhenNoSlaveDefined() throws Exception {\n        Jenkins jenkins \u003d j.getInstance();\n\n        assertEquals(\"Test is for controller with no agent\", 1, jenkins.getComputers().length);\n\n        // set our own label \u0026 mode\n        final String myTestLabel \u003d \"TestLabelx0123\";\n        jenkins.setLabelString(myTestLabel);\n        jenkins.setMode(Mode.EXCLUSIVE);\n\n        // call global config page\n        j.configRoundtrip();\n\n        // make sure settings were not lost\n        assertEquals(\"Built in node\u0027s label is lost\", myTestLabel, jenkins.getLabelString());\n        assertEquals(\"Built in node\u0027s mode is lost\", Mode.EXCLUSIVE, jenkins.getMode());\n    }","advisory":"JENKINS-23966"},{"className":"jenkins.model.NewJobCopyFromTest","methodSignature":"jenkins.model.NewJobCopyFromTest.checkLabel:void()","methodSource":"@Test\n    public void checkLabel() throws IOException, SAXException {\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            // no items - validate assertion\n            assertThat(wc.goTo(\"newJob\").getElementById(\"from\"), is(nullValue()));\n\n            // actual test\n            j.createFreeStyleProject();\n            j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n            j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Item.CREATE, Jenkins.READ).everywhere().toEveryone());\n            assertThat(wc.goTo(\"newJob\").getElementById(\"from\"), is(nullValue()));\n        }\n    }"},{"className":"jenkins.model.NodeListenerTest","methodSignature":"jenkins.model.NodeListenerTest.crud:void()","methodSource":"@Test\n    public void crud() throws Exception {\n        Node agent \u003d j.createSlave();\n        String xml \u003d cli(new GetNodeCommand()).invokeWithArgs(agent.getNodeName()).stdout();\n        cli(new UpdateNodeCommand()).withStdin(new ByteArrayInputStream(xml.getBytes(Charset.defaultCharset()))).invokeWithArgs(agent.getNodeName());\n        cli(new DeleteNodeCommand()).invokeWithArgs(agent.getNodeName());\n\n        cli(new CreateNodeCommand()).withStdin(new ByteArrayInputStream(xml.getBytes(Charset.defaultCharset()))).invokeWithArgs(\"replica\");\n        j.jenkins.getComputer(\"replica\").doDoDelete();\n\n        verify(mock, times(2)).onCreated(any(Node.class));\n        verify(mock, times(1)).onUpdated(any(Node.class), any(Node.class));\n        verify(mock, times(2)).onDeleted(any(Node.class));\n        verifyNoMoreInteractions(mock);\n    }"},{"className":"jenkins.model.NodesRestartTest","methodSignature":"jenkins.model.NodesRestartTest.checkNodeRestart:void()","methodSource":"@Test\n    public void checkNodeRestart() throws Throwable {\n        s.then(r -\u003e {\n            assertThat(r.jenkins.getNodes(), hasSize(0));\n            var node \u003d new DummyAgent(\"my-node\", \"temp\", r.createComputerLauncher(null));\n            r.jenkins.addNode(node);\n            assertThat(r.jenkins.getNodes(), hasSize(1));\n        });\n        s.then(r -\u003e {\n            assertThat(r.jenkins.getNodes(), hasSize(1));\n            var node \u003d r.jenkins.getNode(\"my-node\");\n            assertNotNull(node.getNodeProperties());\n            assertNotNull(node.getAssignedLabels());\n        });\n    }"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.addNodeShouldFailAtomically:void()","methodSource":"@Test\n    @Issue(\"JENKINS-50599\")\n    public void addNodeShouldFailAtomically() throws Exception {\n        InvalidNode node \u003d new InvalidNode(\"foo\", \"temp\", r.createComputerLauncher(null));\n        IOException e \u003d assertThrows(\n                \"Adding the node should have thrown an exception during serialization\",\n                IOException.class,\n                () -\u003e r.jenkins.addNode(node));\n        String className \u003d InvalidNode.class.getName();\n        assertThat(\"The exception should be from failing to serialize the node\",\n                e.getMessage(), containsString(\"Failed to serialize \" + className + \"#cl for class \" + className));\n        assertThat(\"The node should not exist since #addNode threw an exception\",\n                r.jenkins.getNode(\"foo\"), nullValue());\n    }","advisory":"JENKINS-50599"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.addNodeShouldFailAtomicallyWhenReplacingNode:void()","methodSource":"@Test\n    @Issue(\"JENKINS-50599\")\n    public void addNodeShouldFailAtomicallyWhenReplacingNode() throws Exception {\n        Node oldNode \u003d r.createSlave(\"foo\", \"\", null);\n        r.jenkins.addNode(oldNode);\n        InvalidNode newNode \u003d new InvalidNode(\"foo\", \"temp\", r.createComputerLauncher(null));\n        IOException e \u003d assertThrows(\n                \"Adding the node should have thrown an exception during serialization\",\n                IOException.class,\n                () -\u003e r.jenkins.addNode(newNode));\n        String className \u003d InvalidNode.class.getName();\n        assertThat(\"The exception should be from failing to serialize the node\",\n                e.getMessage(), containsString(\"Failed to serialize \" + className + \"#cl for class \" + className));\n        assertThat(\"The old node should still exist since #addNode threw an exception\",\n                r.jenkins.getNode(\"foo\"), sameInstance(oldNode));\n    }","advisory":"JENKINS-50599"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.addNodeShouldReplaceExistingNode:void()","methodSource":"@Test\n    public void addNodeShouldReplaceExistingNode() throws Exception {\n        Node oldNode \u003d r.createSlave(\"foo\", \"\", null);\n        r.jenkins.addNode(oldNode);\n        Node newNode \u003d r.createSlave(\"foo\", \"\", null);\n        r.jenkins.addNode(newNode);\n        assertThat(r.jenkins.getNode(\"foo\"), sameInstance(newNode));\n        ListenerImpl l \u003d ExtensionList.lookupSingleton(ListenerImpl.class);\n        assertEquals(0, l.deleted);\n        assertEquals(1, l.updated);\n        assertEquals(1, l.created);\n    }"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.replaceNodeShouldRemoveOldNode:void()","methodSource":"@Test\n    @Issue(\"JENKINS-56403\")\n    public void replaceNodeShouldRemoveOldNode() throws Exception {\n        Node oldNode \u003d r.createSlave(\"foo\", \"\", null);\n        Node newNode \u003d r.createSlave(\"foo-new\", \"\", null);\n        r.jenkins.addNode(oldNode);\n        r.jenkins.getNodesObject().replaceNode(oldNode, newNode);\n        r.jenkins.getNodesObject().load();\n        assertNull(r.jenkins.getNode(\"foo\"));\n    }","advisory":"JENKINS-56403"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.replaceNodeShouldNotRemoveIdenticalOldNode:void()","methodSource":"@Test\n    @Issue(\"JENKINS-56403\")\n    public void replaceNodeShouldNotRemoveIdenticalOldNode() throws Exception {\n        Node oldNode \u003d r.createSlave(\"foo\", \"\", null);\n        Node newNode \u003d r.createSlave(\"foo\", \"\", null);\n        r.jenkins.addNode(oldNode);\n        r.jenkins.getNodesObject().replaceNode(oldNode, newNode);\n        r.jenkins.getNodesObject().load();\n        assertNotNull(r.jenkins.getNode(\"foo\"));\n    }","advisory":"JENKINS-56403"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.cannotCreateNodeWithTrailingDot_withoutOtherNode:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateNodeWithTrailingDot_withoutOtherNode() throws Exception {\n        assertThat(r.jenkins.getNodes(), hasSize(0));\n\n        DumbSlave node \u003d new DumbSlave(\"nodeA.\", \"temp\", r.createComputerLauncher(null));\n        Failure e \u003d assertThrows(\n                \"Adding the node should have thrown an exception during checkGoodName\",\n                Failure.class,\n                () -\u003e r.jenkins.addNode(node));\n        assertEquals(hudson.model.Messages.Hudson_TrailingDot(), e.getMessage());\n\n        assertThat(r.jenkins.getNodes(), hasSize(0));\n    }","advisory":"SECURITY-2424"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.cannotCreateNodeWithTrailingDot_withExistingNode:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateNodeWithTrailingDot_withExistingNode() throws Exception {\n        assertThat(r.jenkins.getNodes(), hasSize(0));\n        r.createSlave(\"nodeA\", \"\", null);\n        assertThat(r.jenkins.getNodes(), hasSize(1));\n\n        DumbSlave node \u003d new DumbSlave(\"nodeA.\", \"temp\", r.createComputerLauncher(null));\n        Failure e \u003d assertThrows(\n                \"Adding the node should have thrown an exception during checkGoodName\",\n                Failure.class,\n                () -\u003e r.jenkins.addNode(node));\n        assertEquals(hudson.model.Messages.Hudson_TrailingDot(), e.getMessage());\n\n        assertThat(r.jenkins.getNodes(), hasSize(1));\n    }","advisory":"SECURITY-2424"},{"className":"jenkins.model.NodesTest","methodSignature":"jenkins.model.NodesTest.cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2424\")\n    public void cannotCreateNodeWithTrailingDot_exceptIfEscapeHatchIsSet() throws Exception {\n        String propName \u003d Jenkins.NAME_VALIDATION_REJECTS_TRAILING_DOT_PROP;\n        String initialValue \u003d System.getProperty(propName);\n        System.setProperty(propName, \"false\");\n        try {\n            assertThat(r.jenkins.getNodes(), hasSize(0));\n\n            DumbSlave node \u003d new DumbSlave(\"nodeA.\", \"temp\", r.createComputerLauncher(null));\n            r.jenkins.addNode(node);\n\n            assertThat(r.jenkins.getNodes(), hasSize(1));\n        } finally {\n            if (initialValue \u003d\u003d null) {\n                System.clearProperty(propName);\n            } else {\n                System.setProperty(propName, initialValue);\n            }\n        }\n    }","advisory":"SECURITY-2424"},{"className":"jenkins.model.ParameterizedJobMixInTest","methodSignature":"jenkins.model.ParameterizedJobMixInTest.doBuild_shouldFailWhenInvokingDisabledProject:void()","methodSource":"@Test\n    public void doBuild_shouldFailWhenInvokingDisabledProject() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.doDisable();\n\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.assertFails(project.getUrl() + \"build\", HttpServletResponse.SC_CONFLICT);\n    }"},{"className":"jenkins.model.ParameterizedJobMixInTest","methodSignature":"jenkins.model.ParameterizedJobMixInTest.doBuildWithParameters_shouldFailWhenInvokingDisabledProject:void()","methodSource":"@Test\n    @Issue(\"JENKINS-36193\")\n    public void doBuildWithParameters_shouldFailWhenInvokingDisabledProject() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"FOO\", \"BAR\")));\n        project.doDisable();\n\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n\n        FailingHttpStatusCodeException fex \u003d assertThrows(\n                \"should fail when invoking disabled project\",\n                FailingHttpStatusCodeException.class,\n                () -\u003e webClient.getPage(webClient.addCrumb(new WebRequest(new URL(j.getURL(), project.getUrl() + \"build?delay\u003d0\"), HttpMethod.POST))));\n        assertThat(\"Should fail with conflict\", fex.getStatusCode(), is(409));\n    }","advisory":"JENKINS-36193"},{"className":"jenkins.model.ParameterizedJobMixInTest","methodSignature":"jenkins.model.ParameterizedJobMixInTest.doBuildQuietPeriodInSeconds:void()","methodSource":"@Test\n    @Issue(\"JENKINS-48770\")\n    public void doBuildQuietPeriodInSeconds() throws Exception {\n        final int projectQuietPeriodInSeconds \u003d 50;\n\n        final FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setQuietPeriod(projectQuietPeriodInSeconds);\n\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.getPage(webClient.addCrumb(new WebRequest(new URL(j.getURL(), project.getUrl() + \"build\"), HttpMethod.POST)));\n        long triggerTime \u003d System.currentTimeMillis();\n\n        Queue.Item item \u003d Jenkins.get().getQueue().getItem(1);\n        assertThat(item, instanceOf(Queue.WaitingItem.class));\n        assertThat(item.task, instanceOf(FreeStyleProject.class));\n\n        Queue.WaitingItem waitingItem \u003d (Queue.WaitingItem) item;\n        Assert.assertTrue(waitingItem.timestamp.getTimeInMillis() - triggerTime \u003e 45000);\n\n        Jenkins.get().getQueue().doCancelItem(1);\n    }","advisory":"JENKINS-48770"},{"className":"jenkins.model.PeepholePermalinkTest","methodSignature":"jenkins.model.PeepholePermalinkTest.basics:void()","methodSource":"@Issue(\"JENKINS-56809\")\n    @Test\n    public void basics() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild b1 \u003d j.buildAndAssertSuccess(p);\n\n        String lsb \u003d \"lastSuccessfulBuild\";\n        String lfb \u003d \"lastFailedBuild\";\n        String lcb \u003d \"lastCompletedBuild\";\n\n        assertStorage(lsb, p, b1);\n        /* TODO fix utility to also accept case that the permalink is not mentioned at all:\n        assertStorage(lfb, p, null);\n        */\n        assertStorage(lcb, p, b1);\n\n        // now another build that fails\n        p.getBuildersList().add(new FailureBuilder());\n        FreeStyleBuild b2 \u003d p.scheduleBuild2(0).get();\n\n        assertStorage(lsb, p, b1);\n        assertStorage(lfb, p, b2);\n        assertStorage(lcb, p, b2);\n\n        // one more build and this time it succeeds\n        p.getBuildersList().clear();\n        FreeStyleBuild b3 \u003d j.buildAndAssertSuccess(p);\n\n        assertStorage(lsb, p, b3);\n        assertStorage(lfb, p, b2);\n        assertStorage(lcb, p, b3);\n\n        assertEquals(b3, p.getLastSuccessfulBuild());\n        assertEquals(b2, p.getLastFailedBuild());\n        assertEquals(b3, p.getLastCompletedBuild());\n\n        // delete b3 and links should update properly\n        b3.delete();\n        assertStorage(lsb, p, b1);\n        assertStorage(lfb, p, b2);\n        assertStorage(lcb, p, b2);\n\n        b1.delete();\n        assertStorage(lsb, p, null);\n        assertStorage(lfb, p, b2);\n        assertStorage(lcb, p, b2);\n\n        b2.delete();\n        assertStorage(lsb, p, null);\n        assertStorage(lfb, p, null);\n        assertStorage(lcb, p, null);\n    }","advisory":"JENKINS-56809"},{"className":"jenkins.model.RunIdMigratorTest","methodSignature":"jenkins.model.RunIdMigratorTest.legacyIdsPresent:void()","methodSource":"@Test\n    public void legacyIdsPresent() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        File legacyIds \u003d new File(p.getBuildDir(), \"legacyIds\");\n        assertTrue(legacyIds.exists());\n    }"},{"className":"jenkins.model.RunIdMigratorTest","methodSignature":"jenkins.model.RunIdMigratorTest.legacyIdsPresentViaRestApi:void()","methodSource":"@Ignore(\"TODO Item#onCreatedFromScratch is not called\")\n    @Issue(\"JENKINS-64356\")\n    @Test\n    public void legacyIdsPresentViaRestApi() throws Exception {\n        User user \u003d User.getById(\"user\", true);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                .grant(Jenkins.READ, Item.CREATE)\n                .everywhere()\n                .to(user.getId()));\n        String jobName \u003d \"test\" + j.jenkins.getItems().size();\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            wc.login(user.getId());\n            WebRequest req \u003d new WebRequest(wc.createCrumbedUrl(\"createItem?name\u003d\" + jobName), HttpMethod.POST);\n            req.setAdditionalHeader(\"Content-Type\", \"application/xml\");\n            req.setRequestBody(\"\u003cproject/\u003e\");\n            wc.getPage(req);\n        }\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(jobName, FreeStyleProject.class);\n        assertNotNull(p);\n        File legacyIds \u003d new File(p.getBuildDir(), \"legacyIds\");\n        assertTrue(legacyIds.exists());\n    }","advisory":"JENKINS-64356"},{"className":"jenkins.model.RunIdMigratorTest","methodSignature":"jenkins.model.RunIdMigratorTest.legacyIdsPresentViaCli:void()","methodSource":"@Ignore(\"TODO Item#onCreatedFromScratch is not called\")\n    @Issue(\"JENKINS-64356\")\n    @Test\n    public void legacyIdsPresentViaCli() {\n        String jobName \u003d \"test\" + j.jenkins.getItems().size();\n        CLICommandInvoker invoker \u003d new CLICommandInvoker(j, new CreateJobCommand());\n        CLICommandInvoker.Result result \u003d invoker.withStdin(\n                        new ByteArrayInputStream(\"\u003cproject/\u003e\".getBytes(StandardCharsets.UTF_8)))\n                .invokeWithArgs(jobName);\n        assertThat(result, succeededSilently());\n        FreeStyleProject p \u003d j.jenkins.getItemByFullName(jobName, FreeStyleProject.class);\n        assertNotNull(p);\n        File legacyIds \u003d new File(p.getBuildDir(), \"legacyIds\");\n        assertTrue(legacyIds.exists());\n    }","advisory":"JENKINS-64356"},{"className":"jenkins.model.ScriptListenerTest","methodSignature":"jenkins.model.ScriptListenerTest.consoleUsageIsLogged:void()","methodSource":"@Test\n    public void consoleUsageIsLogged() throws IOException {\n        final String output \u003d \"hello from script console\";\n        final String script \u003d \"println \u0027\" + output + \"\u0027\";\n\n        logging.record(DefaultScriptListener.class.getName(), Level.FINEST).capture(100);\n\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            final WebRequest request \u003d new WebRequest(new URL(wc.getContextPath() + \"scriptText?script\u003d\" + script), HttpMethod.POST);\n            wc.getPage(wc.addCrumb(request));\n        }\n\n        { // DefaultScriptListener\n            final List\u003cString\u003e messages \u003d logging.getMessages();\n            assertThat(messages, hasSize(2));\n\n            assertThat(messages.get(0), containsString(\"Execution of script: \u0027\" + script + \"\u0027 with binding: \u0027[:]\u0027 in feature: \u0027class hudson.util.RemotingDiagnostics\u0027 and context: \u0027hudson.remoting.LocalChannel@\"));\n            assertThat(messages.get(0), containsString(\"\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(0), containsString(\"\u0027 (no user)\"));\n\n            assertThat(messages.get(1), containsString(\"Script output: \u0027hello from script console\" + System.lineSeparator() + \"\u0027 in feature: \u0027class hudson.util.RemotingDiagnostics\u0027 and context: \u0027hudson.remoting.LocalChannel@\"));\n            assertThat(messages.get(1), containsString(\"\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(1), containsString(\"\u0027 (no user)\"));\n        }\n\n        { // DummyScriptUsageListener\n            final DummyScriptUsageListener listener \u003d ExtensionList.lookupSingleton(DummyScriptUsageListener.class);\n            String execution \u003d listener.getExecutionString();\n\n            assertThat(execution, containsString(RemotingDiagnostics.class.getName()));\n            assertThat(execution, containsString(script));\n            assertThat(listener.getOutput(), containsString(output));\n        }\n    }"},{"className":"jenkins.model.ScriptListenerTest","methodSignature":"jenkins.model.ScriptListenerTest.groovyCliUsageIsLogged:void()","methodSource":"@Test\n    public void groovyCliUsageIsLogged() {\n        final String output \u003d \"hello from groovy CLI\";\n        final String script \u003d \"println \u0027\" + output + \"\u0027\";\n\n        logging.record(DefaultScriptListener.class.getName(), Level.FINEST).capture(100);\n\n        InputStream scriptStream \u003d new ByteArrayInputStream(script.getBytes());\n        final CLICommandInvoker.Result result \u003d new CLICommandInvoker(j, \"groovy\").withArgs(\"\u003d\").withStdin(scriptStream).invoke();\n        final String stdout \u003d result.stdout();\n        assertThat(stdout, containsString(\"hello from groovy CLI\"));\n\n        { // DefaultScriptListener\n            final List\u003cString\u003e messages \u003d logging.getMessages();\n            assertThat(messages, hasSize(3));\n\n            assertThat(messages.get(0), containsString(\"Execution of script: \u0027\" + script + \"\u0027 with binding: \u0027[\"));\n            assertThat(messages.get(0), containsString(\"]\u0027 in feature: \u0027class hudson.cli.GroovyCommand\u0027 and context: \u0027null\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(0), containsString(\"\u0027 (no user)\"));\n\n            assertThat(messages.get(1), containsString(\"Script output: \u0027hello from groovy CLI\u0027 in feature: \u0027class hudson.cli.GroovyCommand\u0027 and context: \u0027null\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(1), containsString(\"\u0027 (no user)\"));\n\n            assertThat(messages.get(2), containsString(\"Script output: \u0027\" + System.lineSeparator() + \"\u0027 in feature: \u0027class hudson.cli.GroovyCommand\u0027 and context: \u0027null\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(2), containsString(\"\u0027 (no user)\"));\n        }\n\n        { // DummyScriptUsageListener\n            final DummyScriptUsageListener listener \u003d ExtensionList.lookupSingleton(DummyScriptUsageListener.class);\n            String execution \u003d listener.getExecutionString();\n\n            assertThat(execution, containsString(GroovyCommand.class.getName()));\n            assertThat(execution, containsString(script));\n            assertThat(listener.getOutput(), containsString(output));\n        }\n    }"},{"className":"jenkins.model.ScriptListenerTest","methodSignature":"jenkins.model.ScriptListenerTest.groovyShCliUsageIsLogged:void()","methodSource":"@Test\n    public void groovyShCliUsageIsLogged() {\n        final String output \u003d \"hello from groovysh CLI\";\n        final String script \u003d \"println \u0027\" + output + \"\u0027\";\n\n        logging.record(DefaultScriptListener.class.getName(), Level.FINEST).capture(100);\n\n        InputStream scriptStream \u003d new ByteArrayInputStream(script.getBytes());\n        new CLICommandInvoker(j, \"groovysh\").withStdin(scriptStream).invoke();\n\n        { // DefaultScriptListener\n            final List\u003cString\u003e messages \u003d logging.getMessages();\n            assertThat(messages, hasSize(9));\n\n            assertThat(messages.get(0), containsString(\"Execution of script: \u0027null\u0027 with binding: \u0027null\u0027 in feature: \u0027class hudson.cli.GroovyshCommand\u0027 and context: \u0027null\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(0), containsString(\"\u0027 (no user)\"));\n\n            // Only match short substrings to not have to deal with color escape codes in the output\n            assertThat(messages.get(1), containsString(\"Groovy Shell\")); // Groovy Shell (2.4.21, JVM: 11.0.15)\n            assertThat(messages.get(2), containsString(\":help\")); // Type \u0027:help\u0027 or \u0027:h\u0027 for help.\n            assertThat(messages.get(3), containsString(\"Script output: \u0027-------------------\"));\n            assertThat(messages.get(4), containsString(\"000\")); // groovy:000\u003e\n\n            assertThat(messages.get(5), containsString(\"Execution of script: \u0027\" + script + \"\u0027 with binding: \u0027[\"));\n            assertThat(messages.get(5), containsString(\"]\u0027 in feature: \u0027class hudson.cli.GroovyshCommand\u0027 and context: \u0027null\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(5), containsString(\"\u0027 (no user)\"));\n\n            assertThat(messages.get(6), containsString(\"Script output: \u0027hello from groovysh CLI\" + System.lineSeparator() + \"\u0027 in feature: \u0027class hudson.cli.GroovyshCommand\u0027 and context: \u0027null\u0027 with correlation: \u0027\"));\n            assertThat(messages.get(6), containsString(\"\u0027 (no user)\"));\n\n            // Only match short substrings to not have to deal with color escape codes in the output\n            assertThat(messages.get(7), containsString(\"\u003d\u003d\u003d\u003e\")); // \u003d\u003d\u003d\u003e null\n            assertThat(messages.get(8), containsString(\"000\")); // groovy:000\u003e\n        }\n\n        { // DummyScriptUsageListener\n            final DummyScriptUsageListener listener \u003d ExtensionList.lookupSingleton(DummyScriptUsageListener.class);\n            String execution \u003d listener.getExecutionString();\n\n            assertThat(execution, containsString(GroovyshCommand.class.getName()));\n            assertThat(execution, containsString(script));\n            assertThat(listener.getOutput(), containsString(output));\n        }\n    }"},{"className":"jenkins.model.StartupTest","methodSignature":"jenkins.model.StartupTest.noWarnings:void()","methodSource":"@Test\n    public void noWarnings() throws Exception {\n        assertEquals(Collections.emptyList(), logs.getMessages());\n    }"},{"className":"jenkins.model.TransientActionFactoryTest","methodSignature":"jenkins.model.TransientActionFactoryTest.addedToAbstractItem:void()","methodSource":"@Test public void addedToAbstractItem() throws Exception {\n        assertNotNull(r.createFolder(\"d\").getAction(MyAction.class));\n        assertNotNull(r.createFreeStyleProject().getAction(MyAction.class));\n    }"},{"className":"jenkins.model.TransientActionFactoryTest","methodSignature":"jenkins.model.TransientActionFactoryTest.laziness:void()","methodSource":"@Test public void laziness() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        // testing getAction(Class)\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(0, LazyFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(1, LazyFactory.count);\n        assertNotNull(p.getAction(MyProminentProjectAction.class));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count \u003d 0;\n        // getAllActions\n        List\u003c? extends Action\u003e allActions \u003d p.getAllActions();\n        assertEquals(1, LazyFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertThat(Util.filter(allActions, MyProminentProjectAction.class), Matchers.iterableWithSize(1));\n        LazyFactory.count \u003d 0;\n        // getActions(Class)\n        assertThat(p.getActions(FoldableAction.class), Matchers.iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertEquals(1, LazyFactory.count);\n        assertThat(p.getActions(MyProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertEquals(2, LazyFactory.count);\n        LazyFactory.count \u003d 0;\n        // different context type\n        MockFolder d \u003d r.createFolder(\"d\");\n        assertNull(d.getAction(FoldableAction.class));\n        assertNull(d.getAction(ProminentProjectAction.class));\n        allActions \u003d d.getAllActions();\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.iterableWithSize(0));\n        assertThat(d.getActions(FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(d.getActions(ProminentProjectAction.class), Matchers.iterableWithSize(0));\n        assertEquals(0, LazyFactory.count);\n    }"},{"className":"jenkins.model.TransientActionFactoryTest","methodSignature":"jenkins.model.TransientActionFactoryTest.compatibility:void()","methodSource":"@Test public void compatibility() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        // testing getAction(Class)\n        assertNull(p.getAction(FoldableAction.class));\n        assertEquals(1, OldFactory.count);\n        assertNotNull(p.getAction(ProminentProjectAction.class));\n        assertEquals(2, OldFactory.count);\n        OldFactory.count \u003d 0;\n        // getAllActions\n        List\u003c? extends Action\u003e allActions \u003d p.getAllActions();\n        assertEquals(1, OldFactory.count);\n        assertThat(Util.filter(allActions, FoldableAction.class), Matchers.iterableWithSize(0));\n        assertThat(Util.filter(allActions, ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        OldFactory.count \u003d 0;\n        // getActions(Class)\n        assertThat(p.getActions(FoldableAction.class), Matchers.iterableWithSize(0));\n        assertEquals(1, OldFactory.count);\n        assertThat(p.getActions(ProminentProjectAction.class), Matchers.iterableWithSize(1));\n        assertEquals(2, OldFactory.count);\n    }"},{"className":"jenkins.model.TransientActionFactoryTest","methodSignature":"jenkins.model.TransientActionFactoryTest.transientActionsAreNotPersistedOnQueueItems:void()","methodSource":"@Issue(\"JENKINS-51584\")\n    @Test\n    public void transientActionsAreNotPersistedOnQueueItems() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        FreeStyleBuild build \u003d r.buildAndAssertSuccess(p);\n        // MyProminentProjectAction is only added via the TransientActionFactory and should never be persisted.\n        assertThat(Util.filter(build.getActions(), MyProminentProjectAction.class), is(empty()));\n        assertThat(Util.filter(build.getAllActions(), MyProminentProjectAction.class), hasSize(1));\n    }","advisory":"JENKINS-51584"},{"className":"jenkins.model.UnlabeledLoadStatisticsTest","methodSignature":"jenkins.model.UnlabeledLoadStatisticsTest.computeQueueLength:void()","methodSource":"@Test\n    @Issue(\"JENKINS-28446\")\n    public void computeQueueLength() throws Exception {\n        final Queue queue \u003d j.jenkins.getQueue();\n        assertEquals(\"Queue must be empty when the test starts\", 0, queue.getBuildableItems().size());\n        assertEquals(\"Statistics must return 0 when the test starts\", 0, unlabeledLoad.computeQueueLength());\n\n        // Disable builds by default, create an agent to prevent assigning of \"built-in\" labels\n        j.jenkins.setNumExecutors(0);\n        DumbSlave slave \u003d j.createOnlineSlave(new LabelAtom(\"testLabel\"));\n        slave.setMode(Node.Mode.EXCLUSIVE);\n\n        // Init project\n        FreeStyleProject unlabeledProject \u003d j.createFreeStyleProject(\"UnlabeledProject\");\n        unlabeledProject.setConcurrentBuild(true);\n        FreeStyleProject labeledProject \u003d j.createFreeStyleProject(\"LabeledProject\");\n        labeledProject.setAssignedLabel(new LabelAtom(\"foo\"));\n\n        // Put unlabeled build into the queue\n        unlabeledProject.scheduleBuild2(0, new ParametersAction(new StringParameterValue(\"FOO\", \"BAR1\")));\n        queue.maintain();\n        assertEquals(\"Unlabeled build must be taken into account\", 1, unlabeledLoad.computeQueueLength());\n        unlabeledProject.scheduleBuild2(0, new ParametersAction(new StringParameterValue(\"FOO\", \"BAR2\")));\n        queue.maintain();\n        assertEquals(\"Second Unlabeled build must be taken into account\", 2, unlabeledLoad.computeQueueLength());\n\n        // Put labeled build into the queue\n        labeledProject.scheduleBuild2(0);\n        queue.maintain();\n        assertEquals(\"Labeled builds must be ignored\", 2, unlabeledLoad.computeQueueLength());\n\n        // Allow executions of unlabeled builds on built-in node, all unlabeled builds should pass\n        j.jenkins.setNumExecutors(1);\n        j.buildAndAssertSuccess(unlabeledProject);\n        queue.maintain();\n        assertEquals(\"Queue must contain the labeled project build\", 1, queue.getBuildableItems().size());\n        assertEquals(\"Statistics must return 0 after all builds\", 0, unlabeledLoad.computeQueueLength());\n    }","advisory":"JENKINS-28446"},{"className":"jenkins.scm.SCMCheckoutStrategyTest","methodSignature":"jenkins.scm.SCMCheckoutStrategyTest.configRoundtrip1:void()","methodSource":"@Test\n    public void configRoundtrip1() throws Exception {\n        assertEquals(1, SCMCheckoutStrategyDescriptor.all().size());\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        assertFalse(pageHasUI(p));   // no configuration UI because there\u0027s only one option\n    }"},{"className":"jenkins.scm.SCMCheckoutStrategyTest","methodSignature":"jenkins.scm.SCMCheckoutStrategyTest.configRoundtrip2:void()","methodSource":"@Test\n    public void configRoundtrip2() throws Exception {\n        assertEquals(2, SCMCheckoutStrategyDescriptor.all().size());\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        System.out.println(SCMCheckoutStrategyDescriptor.all());\n\n        TestSCMCheckoutStrategy before \u003d new TestSCMCheckoutStrategy();\n        p.setScmCheckoutStrategy(before);\n        j.configRoundtrip((Item) p);\n        SCMCheckoutStrategy after \u003d p.getScmCheckoutStrategy();\n        assertNotSame(before, after);\n        assertSame(before.getClass(), after.getClass());\n\n        assertTrue(pageHasUI(p));\n    }"},{"className":"jenkins.scm.SCMCheckoutStrategyTest","methodSignature":"jenkins.scm.SCMCheckoutStrategyTest.configWithoutSCMCheckoutStrategy:void()","methodSource":"@Test\n    public void configWithoutSCMCheckoutStrategy() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setScmCheckoutStrategy(null);\n        j.configRoundtrip((Item) p);\n        SCMCheckoutStrategy after \u003d p.getScmCheckoutStrategy();\n        assertEquals(DefaultSCMCheckoutStrategyImpl.class, after.getClass());\n        assertFalse(pageHasUI(p));\n    }"},{"className":"jenkins.security.AgentToControllerSecurityTest","methodSignature":"jenkins.security.AgentToControllerSecurityTest.testLegacyCallable:void()","methodSource":"@Test\n    public void testLegacyCallable() {\n        final SecurityException securityException \u003d assertThrowsIOExceptionCausedBySecurityException(() -\u003e Objects.requireNonNull(j.createOnlineSlave().getChannel()).call(new CallLegacyCallableCallable()));\n        assertThat(securityException.getMessage(), containsString(\"Sending jenkins.security.AgentToControllerSecurityTest$LegacyCallable from agent to controller is prohibited\"));\n    }"},{"className":"jenkins.security.AgentToControllerSecurityTest","methodSignature":"jenkins.security.AgentToControllerSecurityTest.testFilePaths:void()","methodSource":"@Test\n    public void testFilePaths() {\n        final SecurityException securityException \u003d assertThrowsIOExceptionCausedBySecurityException(() -\u003e Objects.requireNonNull(j.createOnlineSlave().getChannel()).call(new AccessControllerFilePathCallable()));\n        assertThat(securityException.getMessage(), containsString(\"Sending hudson.FilePath$ReadLink from agent to controller is prohibited\"));\n    }"},{"className":"jenkins.security.AgentToControllerSecurityTest","methodSignature":"jenkins.security.AgentToControllerSecurityTest.testAgentToControllerFileCallable:void()","methodSource":"@Test\n    public void testAgentToControllerFileCallable() throws Exception {\n        Objects.requireNonNull(j.createOnlineSlave().getChannel()).call(new InvokeAgentToControllerCallables());\n    }"},{"className":"jenkins.security.AgentToControllerSecurityTest","methodSignature":"jenkins.security.AgentToControllerSecurityTest.ensureBypass:void()","methodSource":"@Test\n    public void ensureBypass() throws Exception {\n        CallableDirectionChecker.BYPASS \u003d true;\n        try {\n            Objects.requireNonNull(j.createOnlineSlave().getChannel()).call(new InvokeControllerToAgentCallables());\n        } finally {\n            CallableDirectionChecker.BYPASS \u003d false;\n        }\n    }"},{"className":"jenkins.security.AgentToControllerSecurityTest","methodSignature":"jenkins.security.AgentToControllerSecurityTest.controllerToControllerTest:void()","methodSource":"@Test\n    @Issue(\"JENKINS-67189\")\n    public void controllerToControllerTest() throws Exception {\n        // Send a callable to the agent, which sends a callable to the controller, which invokes a method of a local FilePath\n        Objects.requireNonNull(j.createOnlineSlave().getChannel()).call(new BackToControllerCallable());\n    }","advisory":"JENKINS-67189"},{"className":"jenkins.security.AgentToControllerSecurityTest","methodSignature":"jenkins.security.AgentToControllerSecurityTest.agentToAgentTest:void()","methodSource":"@Test\n    @Issue(\"JENKINS-67189\") // but this test works even in 2.319 because no agent side filtering\n    public void agentToAgentTest() throws Exception {\n        Objects.requireNonNull(j.createOnlineSlave().getChannel()).call(new LocalFileOpCallable(false));\n    }","advisory":"JENKINS-67189"},{"className":"jenkins.security.ApiCrumbExclusionTest","methodSignature":"jenkins.security.ApiCrumbExclusionTest.callUsingApiTokenDoesNotRequireCSRFToken:void()","methodSource":"@Test\n    @Issue(\"JENKINS-22474\")\n    public void callUsingApiTokenDoesNotRequireCSRFToken() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setCrumbIssuer(null);\n        User foo \u003d User.getOrCreateByIdOrFullName(\"foo\");\n\n        wc \u003d j.createWebClient();\n\n        // API Token\n        wc.withBasicApiToken(foo);\n        makeRequestAndVerify(\"foo\");\n\n        // Basic auth using password\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"foo\");\n        makeRequestAndVerify(\"foo\");\n\n        wc \u003d j.createWebClient();\n        wc.login(\"foo\");\n        checkWeCanChangeMyDescription(200);\n\n        wc \u003d j.createWebClient();\n        j.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));\n\n        // even with crumbIssuer enabled, we are not required to send a CSRF token when using API token\n        wc.withBasicApiToken(foo);\n        makeRequestAndVerify(\"foo\");\n\n        // Basic auth using password requires crumb\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"foo\");\n        makeRequestAndFail(403);\n\n        wc \u003d j.createWebClient();\n        wc.login(\"foo\");\n        checkWeCanChangeMyDescription(200);\n    }","advisory":"JENKINS-22474"},{"className":"jenkins.security.apitoken.ApiTokenPropertyConfigurationTest","methodSignature":"jenkins.security.apitoken.ApiTokenPropertyConfigurationTest.newUserTokenConfiguration:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32776\")\n    public void newUserTokenConfiguration() {\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n\n        config.setTokenGenerationOnCreationEnabled(true);\n        {\n            User userWith \u003d User.getById(\"userWith\", true);\n            ApiTokenProperty withToken \u003d userWith.getProperty(ApiTokenProperty.class);\n            assertTrue(withToken.hasLegacyToken());\n            assertEquals(1, withToken.getTokenList().size());\n\n            String tokenValue \u003d withToken.getApiToken();\n            Assert.assertNotEquals(Messages.ApiTokenProperty_NoLegacyToken(), tokenValue);\n        }\n\n        config.setTokenGenerationOnCreationEnabled(false);\n        {\n            User userWithout \u003d User.getById(\"userWithout\", true);\n            ApiTokenProperty withoutToken \u003d userWithout.getProperty(ApiTokenProperty.class);\n            assertFalse(withoutToken.hasLegacyToken());\n            assertEquals(0, withoutToken.getTokenList().size());\n\n            String tokenValue \u003d withoutToken.getApiToken();\n            Assert.assertEquals(Messages.ApiTokenProperty_NoLegacyToken(), tokenValue);\n        }\n    }","advisory":"JENKINS-32776"},{"className":"jenkins.security.apitoken.ApiTokenStatsRestartTest","methodSignature":"jenkins.security.apitoken.ApiTokenStatsRestartTest.roundtripWithRestart:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1072\")\n    public void roundtripWithRestart() throws Throwable {\n        AtomicReference\u003cString\u003e tokenValue \u003d new AtomicReference\u003c\u003e();\n        AtomicReference\u003cString\u003e tokenUuid \u003d new AtomicReference\u003c\u003e();\n        String TOKEN_NAME \u003d \"New Token Name\";\n        int NUM_CALL_WITH_TOKEN \u003d 5;\n\n        sessions.then(j -\u003e {\n                   j.jenkins.setCrumbIssuer(null);\n                   j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n                   User u \u003d User.getById(\"foo\", true);\n\n                   ApiTokenProperty t \u003d u.getProperty(ApiTokenProperty.class);\n                   assertNotNull(t.getTokenStore());\n                   assertNotNull(t.getTokenStats());\n\n                   // test the authentication via Token\n                   WebClient wc \u003d j.createWebClient().withBasicCredentials(u.getId());\n                   wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                   WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\").toURL(), HttpMethod.POST);\n                   request.setRequestParameters(List.of(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n                   Page page \u003d wc.getPage(request);\n                   assertEquals(200, page.getWebResponse().getStatusCode());\n                   String responseContent \u003d page.getWebResponse().getContentAsString();\n                   JSONObject jsonObject \u003d JSONObject.fromObject(responseContent);\n                   JSONObject jsonData \u003d jsonObject.getJSONObject(\"data\");\n                   String tokenName \u003d jsonData.getString(\"tokenName\");\n                   tokenValue.set(jsonData.getString(\"tokenValue\"));\n                   tokenUuid.set(jsonData.getString(\"tokenUuid\"));\n\n                   assertEquals(TOKEN_NAME, tokenName);\n\n                   WebClient restWc \u003d j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                   checkUserIsConnected(restWc, u.getId());\n\n                   HtmlPage config \u003d wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, config.getWebResponse().getStatusCode());\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                   assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n                   // one is already done with checkUserIsConnected\n                   for (int i \u003d 1; i \u003c NUM_CALL_WITH_TOKEN; i++) {\n                       restWc.goToXml(\"whoAmI/api/xml\");\n                   }\n\n                   HtmlPage configWithStats \u003d wc.goTo(u.getUrl() + \"/configure\");\n                   assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n                   HtmlSpan useCounterSpan \u003d configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                   assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                   File apiTokenStatsFile \u003d new File(u.getUserFolder(), \"apiTokenStats.xml\");\n                   assertTrue(\"apiTokenStats.xml file should exist\", apiTokenStatsFile.exists());\n           });\n\n        sessions.then(j -\u003e {\n                j.jenkins.setCrumbIssuer(null);\n\n                User u \u003d User.getById(\"foo\", false);\n                assertNotNull(u);\n\n                WebClient wc \u003d j.createWebClient().login(u.getId());\n                checkUserIsConnected(wc, u.getId());\n\n                HtmlPage config \u003d wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, config.getWebResponse().getStatusCode());\n                assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid.get()));\n                assertThat(config.getWebResponse().getContentAsString(), containsString(TOKEN_NAME));\n                HtmlSpan useCounterSpan \u003d config.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n                assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n                revokeToken(j, wc, u.getId(), tokenUuid.get());\n\n                // token is no more valid\n                WebClient restWc \u003d j.createWebClient().withBasicCredentials(u.getId(), tokenValue.get());\n                checkUserIsNotConnected(restWc);\n\n                HtmlPage configWithoutToken \u003d wc.goTo(u.getUrl() + \"/configure\");\n                assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid.get())));\n                assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(TOKEN_NAME)));\n        });\n    }","advisory":"SECURITY-1072"},{"className":"jenkins.security.apitoken.ApiTokenStatsTest","methodSignature":"jenkins.security.apitoken.ApiTokenStatsTest.roundtrip:void()","methodSource":"@Test\n    public void roundtrip() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u \u003d User.getById(\"foo\", true);\n\n        ApiTokenProperty t \u003d u.getProperty(ApiTokenProperty.class);\n        assertNotNull(t.getTokenStore());\n        assertNotNull(t.getTokenStats());\n\n        // test the authentication via Token\n        WebClient wc \u003d j.createWebClient()\n                .withBasicCredentials(u.getId())\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        final String TOKEN_NAME \u003d \"New Token Name\";\n\n        WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"user/\" + u.getId() + \"/descriptorByName/\" + ApiTokenProperty.class.getName() + \"/generateNewToken\").toURL(), HttpMethod.POST);\n        request.setRequestParameters(List.of(new NameValuePair(\"newTokenName\", TOKEN_NAME)));\n\n        Page page \u003d wc.getPage(request);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n        String responseContent \u003d page.getWebResponse().getContentAsString();\n        JSONObject jsonObject \u003d JSONObject.fromObject(responseContent);\n        JSONObject jsonData \u003d jsonObject.getJSONObject(\"data\");\n        String tokenName \u003d jsonData.getString(\"tokenName\");\n        String tokenValue \u003d jsonData.getString(\"tokenValue\");\n        String tokenUuid \u003d jsonData.getString(\"tokenUuid\");\n\n        assertEquals(TOKEN_NAME, tokenName);\n\n        WebClient restWc \u003d j.createWebClient().withBasicCredentials(u.getId(), tokenValue);\n        checkUserIsConnected(restWc, u.getId());\n\n        HtmlPage config \u003d wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, config.getWebResponse().getStatusCode());\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenUuid));\n        assertThat(config.getWebResponse().getContentAsString(), containsString(tokenName));\n\n        final int NUM_CALL_WITH_TOKEN \u003d 5;\n        // one is already done with checkUserIsConnected\n        for (int i \u003d 1; i \u003c NUM_CALL_WITH_TOKEN; i++) {\n            restWc.goToXml(\"whoAmI/api/xml\");\n        }\n\n        HtmlPage configWithStats \u003d wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithStats.getWebResponse().getStatusCode());\n        HtmlSpan useCounterSpan \u003d configWithStats.getDocumentElement().getOneHtmlElementByAttribute(\"span\", \"class\", \"token-use-counter\");\n        assertThat(useCounterSpan.getTextContent(), containsString(\"\" + NUM_CALL_WITH_TOKEN));\n\n        revokeToken(wc, u.getId(), tokenUuid);\n\n        // token is no more valid\n        checkUserIsNotConnected(restWc);\n\n        HtmlPage configWithoutToken \u003d wc.goTo(u.getUrl() + \"/configure\");\n        assertEquals(200, configWithoutToken.getWebResponse().getStatusCode());\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenUuid)));\n        assertThat(configWithoutToken.getWebResponse().getContentAsString(), not(containsString(tokenName)));\n    }"},{"className":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest","methodSignature":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest.isActive:void()","methodSource":"@Test\n    public void isActive() throws Exception {\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setCreationOfLegacyTokenEnabled(true);\n        config.setTokenGenerationOnCreationEnabled(false);\n\n        // user created without legacy token\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n        assertFalse(apiTokenProperty.hasLegacyToken());\n\n        LegacyApiTokenAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);\n        assertFalse(monitor.isActivated());\n\n        TokenUuidAndPlainValue tokenInfo \u003d apiTokenProperty.getTokenStore().generateNewToken(\"Not Legacy\");\n        // \"new\" token does not trigger the monitor\n        assertFalse(monitor.isActivated());\n\n        apiTokenProperty.getTokenStore().revokeToken(tokenInfo.tokenUuid);\n        assertFalse(monitor.isActivated());\n\n        apiTokenProperty.changeApiToken();\n        assertTrue(monitor.isActivated());\n    }"},{"className":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest","methodSignature":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest.takeCareOfUserWithIdNull:void()","methodSource":"@Test\n    @Issue(\"JENKINS-52441\")\n    public void takeCareOfUserWithIdNull() throws Exception {\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setCreationOfLegacyTokenEnabled(true);\n        config.setTokenGenerationOnCreationEnabled(false);\n\n        // user created without legacy token\n        User user \u003d User.getById(\"null\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n        assertFalse(apiTokenProperty.hasLegacyToken());\n\n        LegacyApiTokenAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);\n        assertFalse(monitor.isActivated());\n\n        apiTokenProperty.changeApiToken();\n        assertTrue(monitor.isActivated());\n\n        { //revoke the legacy token\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n            HtmlPage page \u003d wc.goTo(monitor.getUrl() + \"/manage\");\n            { // select all (only one user normally)\n                HtmlAnchor filterAll \u003d getFilterByIndex(page, SelectFilter.ALL);\n                HtmlElementUtil.click(filterAll);\n            }\n            // revoke them\n            HtmlButton revokeSelected \u003d getRevokeSelected(page);\n            HtmlElementUtil.click(revokeSelected);\n        }\n\n        assertFalse(monitor.isActivated());\n    }","advisory":"JENKINS-52441"},{"className":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest","methodSignature":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest.listOfUserWithLegacyTokenIsCorrect:void()","methodSource":"@Test\n    public void listOfUserWithLegacyTokenIsCorrect() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setCreationOfLegacyTokenEnabled(true);\n        config.setTokenGenerationOnCreationEnabled(false);\n\n        LegacyApiTokenAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        int numToken \u003d 0;\n        int numFreshToken \u003d 0;\n        int numRecentToken \u003d 0;\n\n        { // no user\n            checkUserWithLegacyTokenListIsEmpty(wc, monitor);\n        }\n        { // with user without any token\n            User user \u003d User.getById(\"user\", true);\n            ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n            assertFalse(apiTokenProperty.hasLegacyToken());\n\n            checkUserWithLegacyTokenListIsEmpty(wc, monitor);\n        }\n        { // with user with token but without legacy token\n            User user \u003d User.getById(\"user\", true);\n            ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n            assertFalse(apiTokenProperty.hasLegacyToken());\n\n            apiTokenProperty.getTokenStore().generateNewToken(\"Not legacy\");\n\n            checkUserWithLegacyTokenListIsEmpty(wc, monitor);\n            checkUserWithLegacyTokenListHasSizeOf(wc, monitor, numToken, numFreshToken, numRecentToken);\n        }\n        { // one user with just legacy token\n            createUserWithToken(true, false, false);\n\n            numToken++;\n\n            checkUserWithLegacyTokenListHasSizeOf(wc, monitor, numToken, numFreshToken, numRecentToken);\n        }\n        { // one user with a fresh token\n            // fresh \u003d created after the last use of the legacy token (or its creation)\n            createUserWithToken(true, true, false);\n\n            numToken++;\n            numFreshToken++;\n\n            checkUserWithLegacyTokenListHasSizeOf(wc, monitor, numToken, numFreshToken, numRecentToken);\n        }\n        { // one user with a recent token (that is not fresh)\n            // recent \u003d last use after the last use of the legacy token (or its creation)\n            createUserWithToken(true, false, true);\n\n            numToken++;\n            numRecentToken++;\n\n            checkUserWithLegacyTokenListHasSizeOf(wc, monitor, numToken, numFreshToken, numRecentToken);\n        }\n        { // one user with a fresh + recent token\n            createUserWithToken(true, true, true);\n\n            numToken++;\n            numFreshToken++;\n            numRecentToken++;\n\n            checkUserWithLegacyTokenListHasSizeOf(wc, monitor, numToken, numFreshToken, numRecentToken);\n        }\n    }"},{"className":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest","methodSignature":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest.monitorManagePageFilterAreWorking:void()","methodSource":"@Test\n    public void monitorManagePageFilterAreWorking() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setCreationOfLegacyTokenEnabled(true);\n        config.setTokenGenerationOnCreationEnabled(false);\n\n        // create 1 user with legacy, 2 with fresh, 3 with recent and 4 with fresh+recent\n        prepareUsersForFilters();\n\n        LegacyApiTokenAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(monitor.getUrl() + \"/manage\");\n        checkUserWithLegacyTokenListHasSizeOf(page, 1 + 2 + 3 + 4, 2 + 4, 3 + 4);\n\n        HtmlElement document \u003d page.getDocumentElement();\n        HtmlElement filterDiv \u003d document.getOneHtmlElementByAttribute(\"div\", \"class\", \"selection-panel\");\n        DomNodeList\u003cHtmlElement\u003e filters \u003d filterDiv.getElementsByTagName(\"a\");\n        assertEquals(3, filters.size());\n        HtmlAnchor filterAll \u003d (HtmlAnchor) filters.get(0);\n        HtmlAnchor filterOnlyFresh \u003d (HtmlAnchor) filters.get(1);\n        HtmlAnchor filterOnlyRecent \u003d (HtmlAnchor) filters.get(2);\n\n        { // test just the filterAll\n            checkNumberOfSelectedTr(document, 0);\n\n            HtmlElementUtil.click(filterAll);\n            checkNumberOfSelectedTr(document, 1 + 2 + 3 + 4);\n\n            HtmlElementUtil.click(filterAll);\n            checkNumberOfSelectedTr(document, 0);\n        }\n        { // test just the filterOnlyFresh\n            HtmlElementUtil.click(filterOnlyFresh);\n            checkNumberOfSelectedTr(document, 2 + 4);\n\n            HtmlElementUtil.click(filterOnlyFresh);\n            checkNumberOfSelectedTr(document, 0);\n        }\n        { // test just the filterOnlyRecent\n            HtmlElementUtil.click(filterOnlyRecent);\n            checkNumberOfSelectedTr(document, 3 + 4);\n\n            HtmlElementUtil.click(filterOnlyRecent);\n            checkNumberOfSelectedTr(document, 0);\n        }\n        { // test interaction\n            HtmlElementUtil.click(filterOnlyFresh);\n            checkNumberOfSelectedTr(document, 2 + 4);\n\n            // the 4 (recent+fresh) are still selected\n            HtmlElementUtil.click(filterOnlyRecent);\n            checkNumberOfSelectedTr(document, 3 + 4);\n\n            HtmlElementUtil.click(filterAll);\n            checkNumberOfSelectedTr(document, 1 + 2 + 3 + 4);\n        }\n    }"},{"className":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest","methodSignature":"jenkins.security.apitoken.LegacyApiTokenAdministrativeMonitorTest.monitorManagePageCanRevokeToken:void()","methodSource":"@Test\n    public void monitorManagePageCanRevokeToken() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setCreationOfLegacyTokenEnabled(true);\n        config.setTokenGenerationOnCreationEnabled(false);\n\n        // create 1 user with legacy, 2 with fresh, 3 with recent and 4 with fresh+recent\n        prepareUsersForFilters();\n\n        LegacyApiTokenAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(LegacyApiTokenAdministrativeMonitor.class);\n        assertTrue(monitor.isActivated());\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(monitor.getUrl() + \"/manage\");\n        checkUserWithLegacyTokenListHasSizeOf(page, 1 + 2 + 3 + 4, 2 + 4, 3 + 4);\n\n        { // select 2\n            HtmlAnchor filterOnlyFresh \u003d getFilterByIndex(page, SelectFilter.ONLY_FRESH);\n            HtmlElementUtil.click(filterOnlyFresh);\n        }\n        // revoke them\n        HtmlButton revokeSelected \u003d getRevokeSelected(page);\n        HtmlElementUtil.click(revokeSelected);\n\n        HtmlPage newPage \u003d checkUserWithLegacyTokenListHasSizeOf(wc, monitor, 1 + 3, 0, 3);\n        assertTrue(monitor.isActivated());\n\n        { // select 1 + 3\n            HtmlAnchor filterAll \u003d getFilterByIndex(newPage, SelectFilter.ALL);\n            HtmlElementUtil.click(filterAll);\n        }\n        // revoke them\n        revokeSelected \u003d getRevokeSelected(newPage);\n        HtmlElementUtil.click(revokeSelected);\n        checkUserWithLegacyTokenListHasSizeOf(wc, monitor, 0, 0, 0);\n        assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.basics:void()","methodSource":"@Test\n    public void basics() throws Exception {\n        ApiTokenPropertyConfiguration tokenConfig \u003d ApiTokenPropertyConfiguration.get();\n        tokenConfig.setTokenGenerationOnCreationEnabled(true);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u \u003d User.getById(\"foo\", true);\n        j.createWebClient().withBasicApiToken(u);\n        final ApiTokenProperty t \u003d u.getProperty(ApiTokenProperty.class);\n        final String token \u003d t.getApiToken();\n\n        // Make sure that user is able to get the token via the interface\n        try (ACLContext acl \u003d ACL.as(u)) {\n            assertEquals(\"User is unable to get its own token\", token, t.getApiToken());\n        }\n\n        // test the authentication via Token\n        WebClient wc \u003d createClientForUser(\"foo\");\n        assertEquals(u, wc.executeOnServer(User::current));\n\n        // Make sure the UI shows the token to the user\n        HtmlPage config \u003d wc.goTo(u.getUrl() + \"/configure\");\n        HtmlForm form \u003d config.getFormByName(\"config\");\n        assertEquals(token, form.getInputByName(\"_.apiToken\").getValue());\n\n        // round-trip shouldn\u0027t change the API token\n        j.submit(form);\n        assertSame(t, u.getProperty(ApiTokenProperty.class));\n    }"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.security49Upgrade:void()","methodSource":"@Test\n    public void security49Upgrade() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u \u003d User.getOrCreateByIdOrFullName(\"foo\");\n        String historicalInitialValue \u003d Util.getDigestOf(Jenkins.get().getSecretKey() + \":\" + u.getId());\n\n        // we won\u0027t accept historically used initial value as it may be compromised\n        ApiTokenProperty t \u003d new ApiTokenProperty(historicalInitialValue);\n        u.addProperty(t);\n        String apiToken1 \u003d t.getApiToken();\n        assertNotEquals(apiToken1, Util.getDigestOf(historicalInitialValue));\n\n        // the replacement for the compromised value must be consistent and cannot be random\n        ApiTokenProperty t2 \u003d new ApiTokenProperty(historicalInitialValue);\n        u.addProperty(t2);\n        assertEquals(apiToken1, t2.getApiToken());\n\n        // any other value is OK. those are changed values\n        t \u003d new ApiTokenProperty(historicalInitialValue + \"somethingElse\");\n        u.addProperty(t);\n        assertEquals(t.getApiToken(), Util.getDigestOf(historicalInitialValue + \"somethingElse\"));\n    }"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.adminsShouldBeUnableToSeeTokensByDefault:void()","methodSource":"@Issue(\"SECURITY-200\")\n    @Test\n    public void adminsShouldBeUnableToSeeTokensByDefault() throws Exception {\n        ApiTokenPropertyConfiguration tokenConfig \u003d ApiTokenPropertyConfiguration.get();\n        tokenConfig.setTokenGenerationOnCreationEnabled(true);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User u \u003d User.getOrCreateByIdOrFullName(\"foo\");\n        final ApiTokenProperty t \u003d u.getProperty(ApiTokenProperty.class);\n        t.generateNewToken(\"test\");\n        final String token \u003d t.getApiToken();\n\n        // Make sure the UI does not show the token to another user\n        WebClient wc \u003d createClientForUser(\"bar\");\n        HtmlPage config \u003d wc.goTo(u.getUrl() + \"/configure\");\n        HtmlForm form \u003d config.getFormByName(\"config\");\n        assertEquals(Messages.ApiTokenProperty_ChangeToken_TokenIsHidden(), form.getInputByName(\"_.apiToken\").getValue());\n    }","advisory":"SECURITY-200"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.adminsShouldBeUnableToChangeTokensByDefault:void()","methodSource":"@Issue(\"SECURITY-200\")\n    @Test\n    public void adminsShouldBeUnableToChangeTokensByDefault() throws Exception {\n        ApiTokenPropertyConfiguration tokenConfig \u003d ApiTokenPropertyConfiguration.get();\n        tokenConfig.setTokenGenerationOnCreationEnabled(true);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User foo \u003d User.getOrCreateByIdOrFullName(\"foo\");\n        User bar \u003d User.getOrCreateByIdOrFullName(\"bar\");\n        final ApiTokenProperty t \u003d foo.getProperty(ApiTokenProperty.class);\n        final ApiTokenProperty.DescriptorImpl descriptor \u003d (ApiTokenProperty.DescriptorImpl) t.getDescriptor();\n\n        // Make sure that Admin can reset a token of another user\n        WebClient wc \u003d createClientForUser(\"bar\")\n                .withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage requirePOST \u003d wc.goTo(foo.getUrl() + \"/\" + descriptor.getDescriptorUrl() + \"/changeToken\");\n        assertEquals(\"method should not be allowed\",\n                HttpURLConnection.HTTP_BAD_METHOD,\n                requirePOST.getWebResponse().getStatusCode());\n\n        wc.setThrowExceptionOnFailingStatusCode(true);\n        WebRequest request \u003d new WebRequest(new URI(j.getURL().toString() + foo.getUrl() + \"/\" + descriptor.getDescriptorUrl() + \"/changeToken\").toURL(), HttpMethod.POST);\n        HtmlPage res \u003d wc.getPage(request);\n\n        // TODO This nicer alternative requires https://github.com/jenkinsci/jenkins/pull/2268 or similar to work\n//        HtmlPage res \u003d requirePOST.getPage().getForms().get(0).getElementsByAttribute(\"input\", \"type\", \"submit\").get(0).click();\n        assertEquals(\"Update token response is incorrect\",\n                Messages.ApiTokenProperty_ChangeToken_SuccessHidden(), \"\u003cdiv\u003e\" + res.getBody().asNormalizedText() + \"\u003c/div\u003e\");\n    }","advisory":"SECURITY-200"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.postWithUsernameAndTokenInBasicAuthHeader:void()","methodSource":"@Test\n    public void postWithUsernameAndTokenInBasicAuthHeader() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"bar\");\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User.getById(\"foo\", true);\n\n        WebClient wc \u003d createClientForUser(\"foo\");\n        WebRequest wr \u003d new WebRequest(new URL(j.getURL(), \"job/bar/build\"), HttpMethod.POST);\n\n        assertEquals(HttpURLConnection.HTTP_CREATED, wc.getPage(wr).getWebResponse().getStatusCode());\n\n        j.waitUntilNoActivity();\n\n        Cause.UserIdCause triggeredBy \u003d p.getBuildByNumber(1).getCause(Cause.UserIdCause.class);\n        assertEquals(\"foo\", triggeredBy.getUserId());\n    }"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.generateNewTokenWithoutName:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32776\")\n    public void generateNewTokenWithoutName() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        // user is still able to connect with legacy token\n        User admin \u003d User.getById(\"admin\", true);\n\n        WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", \"admin\");\n\n        GenerateNewTokenResponse token1 \u003d generateNewToken(wc, \"admin\", \"\");\n        assertNotEquals(\"\", token1.tokenName.trim());\n\n        GenerateNewTokenResponse token2 \u003d generateNewToken(wc, \"admin\", \"New Token\");\n        assertEquals(\"New Token\", token2.tokenName);\n    }","advisory":"JENKINS-32776"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.migrationFromLegacyToken:void()","methodSource":"@Test\n    @LocalData\n    @Issue(\"JENKINS-32776\")\n    public void migrationFromLegacyToken() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n\n        // user is still able to connect with legacy token\n        User admin \u003d User.getById(\"admin\", false);\n        assertNotNull(\"Admin user not configured correctly in local data\", admin);\n        ApiTokenProperty apiTokenProperty \u003d admin.getProperty(ApiTokenProperty.class);\n\n        WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", \"admin\");\n        checkUserIsConnected(wc);\n\n        // 7be8e81ad5a350fa3f3e2acfae4adb14\n        String localLegacyToken \u003d apiTokenProperty.getApiTokenInsecure();\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", localLegacyToken);\n        checkUserIsConnected(wc);\n\n        // can still renew it after (using API)\n        assertEquals(1, apiTokenProperty.getTokenList().size());\n        apiTokenProperty.changeApiToken();\n        assertEquals(1, apiTokenProperty.getTokenList().size());\n        String newLegacyToken \u003d apiTokenProperty.getApiTokenInsecure();\n\n        // use the new legacy api token\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", newLegacyToken);\n        checkUserIsConnected(wc);\n\n        // but previous one is not more usable\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", localLegacyToken);\n        checkUserIsNotConnected(wc);\n\n        // \u003d\u003d\u003d\u003d\u003d new system \u003d\u003d\u003d\u003d\u003d\n\n        // revoke the legacy\n        ApiTokenStore.HashedToken legacyToken \u003d apiTokenProperty.getTokenStore().getLegacyToken();\n        assertNotNull(legacyToken);\n        String legacyUuid \u003d legacyToken.getUuid();\n\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", newLegacyToken);\n        revokeToken(wc, \"admin\", legacyUuid);\n\n        assertEquals(0, apiTokenProperty.getTokenList().size());\n\n        // check it does not work any more\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", newLegacyToken);\n        checkUserIsNotConnected(wc);\n\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", localLegacyToken);\n        checkUserIsNotConnected(wc);\n\n        // ensure the user can still connect using its username / password\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", \"admin\");\n        checkUserIsConnected(wc);\n\n        // generate new token with the new system\n        wc \u003d j.createWebClient();\n        wc.login(\"admin\", \"admin\");\n        GenerateNewTokenResponse newToken \u003d generateNewToken(wc, \"admin\", \"New Token\");\n\n        // use the new one\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"admin\", newToken.tokenValue);\n        checkUserIsConnected(wc);\n    }","advisory":"JENKINS-32776"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.legacyTokenChange:void()","methodSource":"@Test\n    @Issue(\"JENKINS-32776\")\n    public void legacyTokenChange() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n\n        config.setTokenGenerationOnCreationEnabled(true);\n\n        User user \u003d User.getById(\"user\", true);\n        WebClient wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"user\", \"user\");\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        { // with one legacy token, we can change it using web UI or direct internal call\n            String currentLegacyToken \u003d apiTokenProperty.getApiToken();\n            assertEquals(1, apiTokenProperty.getTokenList().size());\n\n            config.setCreationOfLegacyTokenEnabled(true);\n            {\n                // change using web UI\n                changeLegacyToken(wc, \"user\", true);\n                String newLegacyToken \u003d apiTokenProperty.getApiToken();\n                assertNotEquals(newLegacyToken, currentLegacyToken);\n\n                // change using internal call\n                apiTokenProperty.changeApiToken();\n                String newLegacyToken2 \u003d apiTokenProperty.getApiToken();\n                assertNotEquals(newLegacyToken2, newLegacyToken);\n                assertNotEquals(newLegacyToken2, currentLegacyToken);\n\n                currentLegacyToken \u003d newLegacyToken2;\n            }\n\n            config.setCreationOfLegacyTokenEnabled(false);\n            {\n                // change using web UI\n                changeLegacyToken(wc, \"user\", true);\n                String newLegacyToken \u003d apiTokenProperty.getApiToken();\n                assertNotEquals(newLegacyToken, currentLegacyToken);\n\n                // change using internal call\n                apiTokenProperty.changeApiToken();\n                String newLegacyToken2 \u003d apiTokenProperty.getApiToken();\n                assertNotEquals(newLegacyToken2, newLegacyToken);\n                assertNotEquals(newLegacyToken2, currentLegacyToken);\n            }\n        }\n        { // but without any legacy token, the direct internal call remains but web UI depends on config\n            revokeAllToken(wc, user);\n\n            checkCombinationWithConfigAndMethodForLegacyTokenCreation(config, wc, user);\n        }\n        { // only the legacy token have impact on that capability\n            generateNewToken(wc, \"user\", \"New token\");\n\n            checkCombinationWithConfigAndMethodForLegacyTokenCreation(config, wc, user);\n        }\n    }","advisory":"JENKINS-32776"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.script_addFixedNewToken_Regular:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57484\")\n    public void script_addFixedNewToken_Regular() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        Collection\u003cApiTokenStore.HashedToken\u003e beforeTokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n\n        String tokenPlainTextValue \u003d \"110123456789abcdef0123456789abcdef\";\n        apiTokenProperty.addFixedNewToken(\"fixed-token\", tokenPlainTextValue);\n\n        Collection\u003cApiTokenStore.HashedToken\u003e afterTokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        // ensure the token is created\n        assertEquals(beforeTokenList.size() + 1, afterTokenList.size());\n        // ensure the token is working\n\n        checkTokenIsWorking(user.getId(), tokenPlainTextValue);\n    }","advisory":"JENKINS-57484"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.script_addFixedNewToken_Invalid:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57484\")\n    public void script_addFixedNewToken_Invalid() throws Exception {\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        Collection\u003cApiTokenStore.HashedToken\u003e beforeTokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n\n        checkInvalidTokenValue(apiTokenProperty, \"invalid-token: too-long\", \"110123456789abcdef0123456789abcdefg\");\n        checkInvalidTokenValue(apiTokenProperty, \"invalid-token: too-short\", \"110123456789abcdef0123456789abcde\");\n        checkInvalidTokenValue(apiTokenProperty, \"invalid-token: non-hex\", \"110123456789abcdef0123456789abcdeg\");\n        checkInvalidTokenValue(apiTokenProperty, \"invalid-token: invalid-version\", \"120123456789abcdef0123456789abcdef\");\n\n        Collection\u003cApiTokenStore.HashedToken\u003e afterTokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        // ensure there is no new tokens\n        assertEquals(beforeTokenList.size(), afterTokenList.size());\n    }","advisory":"JENKINS-57484"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.script_generateNewToken:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57484\")\n    public void script_generateNewToken() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        Collection\u003cApiTokenStore.HashedToken\u003e beforeTokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n\n        TokenUuidAndPlainValue token1 \u003d apiTokenProperty.generateNewToken(\"token1\");\n\n        Collection\u003cApiTokenStore.HashedToken\u003e afterTokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        assertEquals(beforeTokenList.size() + 1, afterTokenList.size());\n\n        checkTokenIsWorking(user.getId(), token1.plainValue);\n\n        TokenUuidAndPlainValue token2 \u003d apiTokenProperty.generateNewToken(\"token2\");\n        checkTokenIsWorking(user.getId(), token2.plainValue);\n        TokenUuidAndPlainValue token3 \u003d apiTokenProperty.generateNewToken(\"token3\");\n        checkTokenIsWorking(user.getId(), token3.plainValue);\n\n        Collection\u003cApiTokenStore.HashedToken\u003e afterTokenList2 \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        assertEquals(beforeTokenList.size() + 3, afterTokenList2.size());\n    }","advisory":"JENKINS-57484"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.script_revokeAllTokens:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57484\")\n    public void script_revokeAllTokens() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setTokenGenerationOnCreationEnabled(true);\n\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        apiTokenProperty.revokeAllTokens();\n        Collection\u003cApiTokenStore.HashedToken\u003e tokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        // legacy token removed\n        assertThat(tokenList, empty());\n\n        apiTokenProperty.generateNewToken(\"token1\");\n        apiTokenProperty.revokeAllTokens();\n        tokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        assertThat(tokenList, empty());\n\n        String tokenPlainTextValue \u003d \"110123456789abcdef0123456789abcdef\";\n        apiTokenProperty.addFixedNewToken(\"fixed-token\", tokenPlainTextValue);\n        checkTokenIsWorking(user.getId(), tokenPlainTextValue);\n        apiTokenProperty.revokeAllTokens();\n        checkTokenIsNotWorking(user.getId(), tokenPlainTextValue);\n\n        tokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        assertThat(tokenList, empty());\n    }","advisory":"JENKINS-57484"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.script_revokeAllTokensExceptOne:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57484\")\n    public void script_revokeAllTokensExceptOne() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setTokenGenerationOnCreationEnabled(true);\n\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        apiTokenProperty.generateNewToken(\"token0\");\n        TokenUuidAndPlainValue token1 \u003d apiTokenProperty.generateNewToken(\"token1\");\n        TokenUuidAndPlainValue token2 \u003d apiTokenProperty.generateNewToken(\"token2\");\n        apiTokenProperty.generateNewToken(\"token3\");\n\n        checkTokenIsWorking(user.getId(), token1.plainValue);\n        checkTokenIsWorking(user.getId(), token2.plainValue);\n        apiTokenProperty.revokeAllTokensExceptOne(token1.tokenUuid);\n        checkTokenIsWorking(user.getId(), token1.plainValue);\n        checkTokenIsNotWorking(user.getId(), token2.plainValue);\n\n        Collection\u003cApiTokenStore.HashedToken\u003e tokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        assertThat(tokenList, hasSize(1));\n        assertEquals(token1.tokenUuid, tokenList.iterator().next().getUuid());\n\n        String tokenPlainTextValue \u003d \"110123456789abcdef0123456789abcdef\";\n        apiTokenProperty.addFixedNewToken(\"fixed-token\", tokenPlainTextValue);\n        TokenUuidAndPlainValue token4 \u003d apiTokenProperty.generateNewToken(\"token4\");\n        apiTokenProperty.revokeAllTokensExceptOne(token4.tokenUuid);\n\n        tokenList \u003d apiTokenProperty.getTokenStore().getTokenListSortedByName();\n        assertThat(tokenList, hasSize(1));\n        assertEquals(token4.tokenUuid, tokenList.iterator().next().getUuid());\n\n        checkTokenIsNotWorking(user.getId(), token1.plainValue);\n        checkTokenIsNotWorking(user.getId(), tokenPlainTextValue);\n        checkTokenIsWorking(user.getId(), token4.plainValue);\n    }","advisory":"JENKINS-57484"},{"className":"jenkins.security.ApiTokenPropertyTest","methodSignature":"jenkins.security.ApiTokenPropertyTest.script_revokeToken:void()","methodSource":"@Test\n    @Issue(\"JENKINS-57484\")\n    public void script_revokeToken() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        ApiTokenPropertyConfiguration config \u003d ApiTokenPropertyConfiguration.get();\n        config.setTokenGenerationOnCreationEnabled(true);\n\n        User user \u003d User.getById(\"user\", true);\n        ApiTokenProperty apiTokenProperty \u003d user.getProperty(ApiTokenProperty.class);\n\n        apiTokenProperty.revokeAllTokens();\n\n        TokenUuidAndPlainValue token1 \u003d apiTokenProperty.generateNewToken(\"token1\");\n        TokenUuidAndPlainValue token2 \u003d apiTokenProperty.generateNewToken(\"token2\");\n        TokenUuidAndPlainValue token3 \u003d apiTokenProperty.generateNewToken(\"token3\");\n\n        checkTokenIsWorking(user.getId(), token1.plainValue);\n        checkTokenIsWorking(user.getId(), token2.plainValue);\n        checkTokenIsWorking(user.getId(), token3.plainValue);\n\n        apiTokenProperty.revokeToken(token1.tokenUuid);\n\n        checkTokenIsNotWorking(user.getId(), token1.plainValue);\n        checkTokenIsWorking(user.getId(), token2.plainValue);\n        checkTokenIsWorking(user.getId(), token3.plainValue);\n\n        apiTokenProperty.revokeToken(token3.tokenUuid);\n\n        checkTokenIsNotWorking(user.getId(), token1.plainValue);\n        checkTokenIsWorking(user.getId(), token2.plainValue);\n        checkTokenIsNotWorking(user.getId(), token3.plainValue);\n\n        // no effect\n        apiTokenProperty.revokeToken(\"invalid-uuid\");\n\n        checkTokenIsNotWorking(user.getId(), token1.plainValue);\n        checkTokenIsWorking(user.getId(), token2.plainValue);\n        checkTokenIsNotWorking(user.getId(), token3.plainValue);\n    }","advisory":"JENKINS-57484"},{"className":"jenkins.security.BasicHeaderApiTokenAuthenticatorTest","methodSignature":"jenkins.security.BasicHeaderApiTokenAuthenticatorTest.legacyToken_regularCase:void()","methodSource":"@Test\n    @Issue(\"SECURITY-896\")\n    public void legacyToken_regularCase() throws Throwable {\n        AtomicReference\u003cString\u003e token \u003d new AtomicReference\u003c\u003e();\n        sessions.then(j -\u003e {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity(j);\n\n                {\n                    JenkinsRule.WebClient wc \u003d j.createWebClient();\n                    // default SecurityListener will save the user when adding the LastGrantedAuthoritiesProperty\n                    // and so the user is persisted\n                    wc.login(\"user1\");\n                    HtmlPage page \u003d wc.goTo(\"user/user1/configure\");\n                    String tokenValue \u003d ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n        });\n        sessions.then(j -\u003e {\n                User user \u003d User.getById(\"user1\", false);\n                assertNotNull(user);\n\n                JenkinsRule.WebClient wc \u003d j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                { // for invalid token, no effect\n                    WebRequest request \u003d new WebRequest(new URI(j.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { // for invalid user, no effect\n                    WebRequest request \u003d new WebRequest(new URI(j.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n\n                assertNull(User.getById(\"user-not-valid\", false));\n\n                { // valid user with valid token, ok\n                    WebRequest request \u003d new WebRequest(new URI(j.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage \u003d wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n        });\n    }","advisory":"SECURITY-896"},{"className":"jenkins.security.BasicHeaderApiTokenAuthenticatorTest","methodSignature":"jenkins.security.BasicHeaderApiTokenAuthenticatorTest.legacyToken_withoutLastGrantedAuthorities:void()","methodSource":"@Test\n    @Issue(\"SECURITY-896\")\n    public void legacyToken_withoutLastGrantedAuthorities() throws Throwable {\n        AtomicReference\u003cString\u003e token \u003d new AtomicReference\u003c\u003e();\n        sessions.then(j -\u003e {\n                enableLegacyTokenGenerationOnUserCreation();\n                configureSecurity(j);\n\n                {\n                    JenkinsRule.WebClient wc \u003d j.createWebClient();\n                    wc.login(\"user1\");\n                    HtmlPage page \u003d wc.goTo(\"user/user1/configure\");\n                    String tokenValue \u003d ((HtmlTextInput) page.getDocumentElement().querySelector(\"#apiToken\")).getText();\n                    token.set(tokenValue);\n                }\n        });\n        sessions.then(j -\u003e {\n                User user \u003d User.getById(\"user1\", false);\n                assertNull(user);\n\n                JenkinsRule.WebClient wc \u003d j.createWebClient();\n                wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n                { // for invalid token, no effect\n                    WebRequest request \u003d new WebRequest(new URI(j.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", \"invalid-token\"));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n                { // for invalid user, no effect\n                    WebRequest request \u003d new WebRequest(new URI(j.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user-not-valid\", token.get()));\n                    assertThat(wc.getPage(request).getWebResponse().getStatusCode(), equalTo(401));\n                }\n\n                assertNull(User.getById(\"user1\", false));\n                assertNull(User.getById(\"user-not-valid\", false));\n\n                { // valid user with valid token, ok\n                    WebRequest request \u003d new WebRequest(new URI(j.jenkins.getRootUrl() + \"whoAmI/api/xml\").toURL());\n                    request.setAdditionalHeader(\"Authorization\", base64(\"user1\", token.get()));\n                    XmlPage xmlPage \u003d wc.getPage(request);\n                    assertThat(xmlPage, hasXPath(\"//name\", is(\"user1\")));\n                }\n        });\n        sessions.then(j -\u003e {\n                User user \u003d User.getById(\"user1\", false);\n                assertNull(user);\n        });\n    }","advisory":"SECURITY-896"},{"className":"jenkins.security.BasicHeaderProcessorTest","methodSignature":"jenkins.security.BasicHeaderProcessorTest.testVariousWaysToCall:void()","methodSource":"@Test\n    public void testVariousWaysToCall() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        wc \u003d j.createWebClient();\n        User foo \u003d User.getById(\"foo\", true);\n        User.getById(\"bar\", true);\n\n        // call without authentication\n        makeRequestAndVerify(\"anonymous\");\n        spySecurityListener.authenticatedCalls.assertNoNewEvents();\n        spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();\n\n        // call with API token\n        wc \u003d j.createWebClient();\n        wc.withBasicApiToken(\"foo\");\n        makeRequestAndVerify(\"foo\");\n        spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -\u003e u.getUsername().equals(\"foo\"));\n\n        // call with invalid API token\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"foo\", \"abcd\" + foo.getProperty(ApiTokenProperty.class).getApiToken());\n        makeRequestAndFail();\n        spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");\n\n        // call with password\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"foo\");\n        makeRequestAndVerify(\"foo\");\n        spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -\u003e u.getUsername().equals(\"foo\"));\n\n        // call with incorrect password\n        wc \u003d j.createWebClient();\n        wc.withBasicCredentials(\"foo\", \"bar\");\n        makeRequestAndFail();\n        spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");\n\n        wc \u003d j.createWebClient();\n        wc.login(\"bar\");\n        spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -\u003e u.getUsername().equals(\"bar\"));\n        spySecurityListener.loggedInCalls.assertLastEventIsAndThenRemoveIt(\"bar\");\n\n        // if the session cookie is valid, then basic header won\u0027t be needed\n        makeRequestAndVerify(\"bar\");\n        spySecurityListener.authenticatedCalls.assertNoNewEvents();\n        spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();\n\n        // if the session cookie is valid, and basic header is set anyway login should not fail either\n        wc.withBasicCredentials(\"bar\");\n        makeRequestAndVerify(\"bar\");\n        spySecurityListener.authenticatedCalls.assertNoNewEvents();\n        spySecurityListener.failedToAuthenticateCalls.assertNoNewEvents();\n\n        // but if the password is incorrect, it should fail, instead of silently logging in as the user indicated by session\n        wc.withBasicCredentials(\"foo\", \"bar\");\n        makeRequestAndFail();\n        spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");\n    }"},{"className":"jenkins.security.BasicHeaderProcessorTest","methodSignature":"jenkins.security.BasicHeaderProcessorTest.testAuthHeaderCaseInSensitive:void()","methodSource":"@Test\n    public void testAuthHeaderCaseInSensitive() throws Exception {\n        ApiTokenPropertyConfiguration tokenConfig \u003d ApiTokenPropertyConfiguration.get();\n        tokenConfig.setTokenGenerationOnCreationEnabled(true);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        User foo \u003d User.getOrCreateByIdOrFullName(\"foo\");\n        wc \u003d j.createWebClient();\n\n        String[] basicCandidates \u003d {\"Basic\", \"BASIC\", \"basic\", \"bASIC\"};\n\n        for (String prefix : basicCandidates) {\n            // call with API token\n            ApiTokenProperty t \u003d foo.getProperty(ApiTokenProperty.class);\n            final String token \u003d t.getApiToken();\n            String authCode1 \u003d encode(prefix, \"foo:\" + token);\n            makeRequestWithAuthCodeAndVerify(authCode1, \"foo\");\n            spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -\u003e u.getUsername().equals(\"foo\"));\n\n            // call with invalid API token\n            String authCode2 \u003d encode(prefix, \"foo:abcd\" + token);\n            makeRequestWithAuthCodeAndFail(authCode2);\n            spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");\n\n            // call with password\n            String authCode3 \u003d encode(prefix, \"foo:foo\");\n            makeRequestWithAuthCodeAndVerify(authCode3, \"foo\");\n            spySecurityListener.authenticatedCalls.assertLastEventIsAndThenRemoveIt(u -\u003e u.getUsername().equals(\"foo\"));\n\n            // call with incorrect password\n            String authCode4 \u003d encode(prefix, \"foo:bar\");\n            makeRequestWithAuthCodeAndFail(authCode4);\n            spySecurityListener.failedToAuthenticateCalls.assertLastEventIsAndThenRemoveIt(\"foo\");\n        }\n    }"},{"className":"jenkins.security.ClassFilterImplTest","methodSignature":"jenkins.security.ClassFilterImplTest.controllerToAgentBypassesWhitelist:void()","methodSource":"@Test\n    public void controllerToAgentBypassesWhitelist() throws Exception {\n        assumeThat(ClassFilterImpl.WHITELISTED_CLASSES, not(contains(LinkedListMultimap.class.getName())));\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setAssignedNode(r.createSlave());\n        p.getBuildersList().add(new M2SBuilder());\n        r.assertLogContains(\"sent {}\", r.buildAndAssertSuccess(p));\n    }"},{"className":"jenkins.security.ClassFilterImplTest","methodSignature":"jenkins.security.ClassFilterImplTest.agentToControllerRequiresWhitelist:void()","methodSource":"@Test\n    public void agentToControllerRequiresWhitelist() throws Exception {\n        assumeThat(ClassFilterImpl.WHITELISTED_CLASSES, not(contains(LinkedListMultimap.class.getName())));\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setAssignedNode(r.createSlave());\n        p.getBuildersList().add(new S2MBuilder());\n        r.buildAndAssertStatus(Result.FAILURE, p);\n    }"},{"className":"jenkins.security.ClassFilterImplTest","methodSignature":"jenkins.security.ClassFilterImplTest.xstreamRequiresWhitelist:void()","methodSource":"@Test\n    public void xstreamRequiresWhitelist() throws Exception {\n        assumeThat(ClassFilterImpl.WHITELISTED_CLASSES, not(contains(LinkedListMultimap.class.getName())));\n        Config config \u003d GlobalConfiguration.all().get(Config.class);\n        config.save();\n        config.obj \u003d LinkedListMultimap.create();\n        config.save();\n        assertThat(config.getConfigFile().asString(), not(containsString(\"LinkedListMultimap\")));\n        config.unrelated \u003d \"modified\";\n        Files.writeString(config.getConfigFile().getFile().toPath(), new XStream(XStream2.getDefaultDriver()).toXML(config), StandardCharsets.UTF_8);\n        assertThat(config.getConfigFile().asString(), allOf(containsString(\"LinkedListMultimap\"), containsString(\"modified\")));\n        config.obj \u003d null;\n        config.unrelated \u003d null;\n        config.load();\n        assertNull(config.obj);\n        assertEquals(\"modified\", config.unrelated);\n        Map\u003cSaveable, OldDataMonitor.VersionRange\u003e data \u003d ExtensionList.lookupSingleton(OldDataMonitor.class).getData();\n        assertEquals(Set.of(config), data.keySet());\n        assertThat(data.values().iterator().next().extra, allOf(containsString(\"LinkedListMultimap\"), containsString(\"https://www.jenkins.io/redirect/class-filter/\")));\n    }"},{"className":"jenkins.security.csrf.CSRFAdministrativeMonitorTest","methodSignature":"jenkins.security.csrf.CSRFAdministrativeMonitorTest.testWithoutIssuer:void()","methodSource":"@Test\n    @Issue(\"JENKINS-47372\")\n    public void testWithoutIssuer() {\n        j.jenkins.setCrumbIssuer(null);\n\n        CSRFAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(CSRFAdministrativeMonitor.class);\n        assertTrue(\"Monitor must not be activated\", monitor.isActivated());\n    }","advisory":"JENKINS-47372"},{"className":"jenkins.security.csrf.CSRFAdministrativeMonitorTest","methodSignature":"jenkins.security.csrf.CSRFAdministrativeMonitorTest.testWithIssuer:void()","methodSource":"@Test\n    @Issue(\"JENKINS-47372\")\n    public void testWithIssuer() {\n        j.jenkins.setCrumbIssuer(new DefaultCrumbIssuer(false));\n\n        CSRFAdministrativeMonitor monitor \u003d j.jenkins.getExtensionList(AdministrativeMonitor.class).get(CSRFAdministrativeMonitor.class);\n        assertFalse(\"Monitor must be activated\", monitor.isActivated());\n    }","advisory":"JENKINS-47372"},{"className":"jenkins.security.CustomClassFilterTest","methodSignature":"jenkins.security.CustomClassFilterTest.smokes:void()","methodSource":"@WithPlugin(\"custom-class-filter.jpi\")\n    @Test\n    public void smokes() throws Exception {\n        assertBlacklisted(\"enabled via system property\", SimpleBindings.class, false);\n        assertBlacklisted(\"enabled via plugin\", ScriptException.class, false);\n        assertBlacklisted(\"disabled by ClassFilter.STANDARD\", ScriptEngineManager.class, true);\n        assertBlacklisted(\"part of Jenkins core, so why not?\", BuildListenerAdapter.class, false);\n        // As an aside, the following appear totally unused anyway!\n        assertBlacklisted(\"disabled via system property\", TreeString.class, true);\n        assertBlacklisted(\"disabled via plugin\", TreeStringBuilder.class, true);\n    }"},{"className":"jenkins.security.CustomClassFilterTest","methodSignature":"jenkins.security.CustomClassFilterTest.dynamicLoad:void()","methodSource":"@Test\n    public void dynamicLoad() throws Exception {\n        assertBlacklisted(\"not yet enabled via plugin\", ScriptException.class, true);\n        assertBlacklisted(\"not yet disabled via plugin\", TreeStringBuilder.class, false);\n        File jpi \u003d tmp.newFile(\"custom-class-filter.jpi\");\n        FileUtils.copyURLToFile(CustomClassFilterTest.class.getResource(\"/plugins/custom-class-filter.jpi\"), jpi);\n        r.jenkins.pluginManager.dynamicLoad(jpi);\n        assertBlacklisted(\"enabled via plugin\", ScriptException.class, false);\n        assertBlacklisted(\"disabled via plugin\", TreeStringBuilder.class, true);\n    }"},{"className":"jenkins.security.FilePathSecureTest","methodSignature":"jenkins.security.FilePathSecureTest.unzip:void()","methodSource":"@Test public void unzip() throws Exception {\n        FilePath dir \u003d root.child(\"dir\");\n        dir.mkdirs();\n        dir.child(\"stuff\").write(\"hello\", null);\n        FilePath zip \u003d root.child(\"dir.zip\");\n        dir.zip(zip);\n        zip.unzip(remote);\n        assertEquals(\"hello\", remote.child(\"dir/stuff\").readToString());\n    }"},{"className":"jenkins.security.FilePathSecureTest","methodSignature":"jenkins.security.FilePathSecureTest.untar:void()","methodSource":"@Test public void untar() throws Exception {\n        FilePath dir \u003d root.child(\"dir\");\n        dir.mkdirs();\n        dir.child(\"stuff\").write(\"hello\", null);\n        FilePath tar \u003d root.child(\"dir.tar\");\n        try (OutputStream os \u003d tar.write()) {\n            dir.tar(os, new DirScanner.Full());\n        }\n        tar.untar(remote, FilePath.TarCompression.NONE);\n        assertEquals(\"hello\", remote.child(\"dir/stuff\").readToString());\n    }"},{"className":"jenkins.security.FilePathSecureTest","methodSignature":"jenkins.security.FilePathSecureTest.zip:void()","methodSource":"@Test public void zip() throws Exception {\n        FilePath dir \u003d remote.child(\"dir\");\n        dir.mkdirs();\n        dir.child(\"stuff\").write(\"hello\", null);\n        FilePath zip \u003d root.child(\"dir.zip\");\n        dir.zip(zip);\n        zip.unzip(root);\n        assertEquals(\"hello\", remote.child(\"dir/stuff\").readToString());\n    }"},{"className":"jenkins.security.FilePathSecureTest","methodSignature":"jenkins.security.FilePathSecureTest.tar:void()","methodSource":"@Test public void tar() throws Exception {\n        FilePath dir \u003d remote.child(\"dir\");\n        dir.mkdirs();\n        dir.child(\"stuff\").write(\"hello\", null);\n        FilePath tar \u003d root.child(\"dir.tar\");\n        try (OutputStream os \u003d tar.write()) {\n            dir.tar(os, new DirScanner.Full());\n        }\n        tar.untar(root, FilePath.TarCompression.NONE);\n        assertEquals(\"hello\", remote.child(\"dir/stuff\").readToString());\n    }"},{"className":"jenkins.security.FrameOptionsPageDecoratorTest","methodSignature":"jenkins.security.FrameOptionsPageDecoratorTest.defaultHeaderPresent:void()","methodSource":"@Test\n    public void defaultHeaderPresent() throws IOException, SAXException {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage page \u003d wc.goTo(\"\");\n        assertEquals(\"Expected different X-Frame-Options value\", \"sameorigin\", getFrameOptionsFromResponse(page.getWebResponse()));\n    }"},{"className":"jenkins.security.FrameOptionsPageDecoratorTest","methodSignature":"jenkins.security.FrameOptionsPageDecoratorTest.testDisabledFrameOptions:void()","methodSource":"@Test\n    public void testDisabledFrameOptions() throws IOException, SAXException {\n        FrameOptionsPageDecorator.enabled \u003d false;\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage page \u003d wc.goTo(\"\");\n        assertNull(\"Expected X-Frame-Options unset\", getFrameOptionsFromResponse(page.getWebResponse()));\n    }"},{"className":"jenkins.security.Jenkins67105Test","methodSignature":"jenkins.security.Jenkins67105Test.arrayListMultimap:void()","methodSource":"@Issue(\"JENKINS-67105\")\n    @Test\n    public void arrayListMultimap() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setAssignedNode(r.createSlave());\n        p.getBuildersList().add(new GuavaBuilder(new ArrayListMultimapCallable()));\n        r.buildAndAssertSuccess(p);\n    }","advisory":"JENKINS-67105"},{"className":"jenkins.security.Jenkins67105Test","methodSignature":"jenkins.security.Jenkins67105Test.hashMultimap:void()","methodSource":"@Issue(\"JENKINS-67105\")\n    @Test\n    public void hashMultimap() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setAssignedNode(r.createSlave());\n        p.getBuildersList().add(new GuavaBuilder(new HashMultimapCallable()));\n        r.buildAndAssertSuccess(p);\n    }","advisory":"JENKINS-67105"},{"className":"jenkins.security.LastGrantedAuthoritiesPropertyTest","methodSignature":"jenkins.security.LastGrantedAuthoritiesPropertyTest.basicFlow:void()","methodSource":"@Test\n    public void basicFlow() throws Exception {\n        j.jenkins.setSecurityRealm(new TestSecurityRealm());\n\n        // login, and make sure it leaves the LastGrantedAuthoritiesProperty object\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(\"alice\", \"alice:development:us\");\n\n        hudson.model.User u \u003d hudson.model.User.getOrCreateByIdOrFullName(\"alice\");\n        LastGrantedAuthoritiesProperty p \u003d u.getProperty(LastGrantedAuthoritiesProperty.class);\n        assertAuthorities(p, \"alice:authenticated:development:us\");\n        assertAuthorities(u.impersonate2(), \"alice:authenticated:development:us\");\n\n        // visiting the configuration page shouldn\u0027t change authorities\n        HtmlPage pg \u003d wc.goTo(\"user/alice/configure\");\n        j.submit(pg.getFormByName(\"config\"));\n\n        p \u003d u.getProperty(LastGrantedAuthoritiesProperty.class);\n        assertAuthorities(p, \"alice:authenticated:development:us\");\n        assertAuthorities(u.impersonate2(), \"alice:authenticated:development:us\");\n\n        // change should be reflected right away\n        wc.login(\"alice\", \"alice:development:uk\");\n        p \u003d u.getProperty(LastGrantedAuthoritiesProperty.class);\n        assertAuthorities(p, \"alice:authenticated:development:uk\");\n        assertAuthorities(u.impersonate2(), \"alice:authenticated:development:uk\");\n\n        // if already receiving the authenticated group, we should avoid duplicate\n        wc.login(\"alice\", \"alice:authenticated:development:uk\");\n        p \u003d u.getProperty(LastGrantedAuthoritiesProperty.class);\n\n        assertAuthorities(p, \"alice:authenticated:development:uk\");\n        assertAuthorities(u.impersonate2(), \"alice:authenticated:development:uk\");\n    }"},{"className":"jenkins.security.RedactSecretJsonInErrorMessageSanitizerHtmlTest","methodSignature":"jenkins.security.RedactSecretJsonInErrorMessageSanitizerHtmlTest.passwordsAreRedacted_andOtherStayTheSame:void()","methodSource":"@Test\n    @Issue(\"SECURITY-765\")\n    public void passwordsAreRedacted_andOtherStayTheSame() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        TestPassword testPassword \u003d j.jenkins.getExtensionList(RootAction.class).get(TestPassword.class);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage page \u003d wc.goTo(\"test\");\n\n        String textSimple \u003d \"plain-1\";\n        String pwdSimple \u003d \"secret-1\";\n        ((HtmlInput) page.getElementById(\"text-simple\")).setValue(textSimple);\n        ((HtmlInput) page.getElementById(\"pwd-simple\")).setValue(pwdSimple);\n\n        String textLevelOne \u003d \"plain-2\";\n        String pwdLevelOneA \u003d \"secret-2\";\n        ((HtmlInput) page.getElementById(\"text-level-one\")).setValue(textLevelOne);\n        ((HtmlInput) page.getElementById(\"pwd-level-one-a\")).setValue(pwdLevelOneA);\n\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        Page formSubmitPage \u003d j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getStatusCode(), equalTo(200));\n\n        JSONObject rawJson \u003d testPassword.lastJsonReceived;\n        String rawJsonToString \u003d rawJson.toString();\n        assertThat(rawJsonToString, containsString(textSimple));\n        assertThat(rawJsonToString, containsString(pwdSimple));\n        assertThat(rawJsonToString, containsString(textLevelOne));\n        assertThat(rawJsonToString, containsString(pwdLevelOneA));\n\n        assertThat(rawJson.getString(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY), equalTo(\"pwd-simple\"));\n        assertThat(\n                rawJson.getJSONObject(\"sub-one\").getJSONArray(RedactSecretJsonInErrorMessageSanitizer.REDACT_KEY),\n                allOf(\n                        hasItem(\"pwd-level-one-a\"),\n                        hasItem(\"pwd-level-one-b\")\n                )\n        );\n\n        String pwdLevelOneB \u003d \"pre-set secret\"; // set in Jelly\n        JSONObject redactedJson \u003d RedactSecretJsonInErrorMessageSanitizer.INSTANCE.sanitize(rawJson);\n        String redactedJsonToString \u003d redactedJson.toString();\n        assertThat(redactedJsonToString, containsString(textSimple));\n        assertThat(redactedJsonToString, not(containsString(pwdSimple)));\n        assertThat(redactedJsonToString, containsString(textLevelOne));\n        assertThat(redactedJsonToString, not(containsString(pwdLevelOneA)));\n        assertThat(redactedJsonToString, not(containsString(pwdLevelOneB)));\n        assertThat(redactedJsonToString, containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE));\n    }","advisory":"SECURITY-765"},{"className":"jenkins.security.RedactSecretJsonInErrorMessageSanitizerHtmlTest","methodSignature":"jenkins.security.RedactSecretJsonInErrorMessageSanitizerHtmlTest.checkSanitizationIsApplied_inDescriptor:void()","methodSource":"@Test\n    @Issue(\"SECURITY-765\")\n    public void checkSanitizationIsApplied_inDescriptor() throws Exception {\n        logging.record(\"\", Level.WARNING).capture(100);\n\n        j.jenkins.setCrumbIssuer(null);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.goTo(\"testDescribable\");\n        String secret \u003d \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValue(secret);\n\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        Page formSubmitPage \u003d j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n\n        // check the system log also\n        Throwable thrown \u003d logging.getRecords().stream().filter(r -\u003e r.getMessage().contains(\"Error while serving\")).findAny().get().getThrown();\n        // the exception from Descriptor\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n\n        // the exception from RequestImpl\n        assertThat(thrown.getCause().getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n\n        StringWriter buffer \u003d new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack \u003d buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }","advisory":"SECURITY-765"},{"className":"jenkins.security.RedactSecretJsonInErrorMessageSanitizerHtmlTest","methodSignature":"jenkins.security.RedactSecretJsonInErrorMessageSanitizerHtmlTest.checkSanitizationIsApplied_inStapler:void()","methodSource":"@Test\n    @Issue(\"SECURITY-765\")\n    public void checkSanitizationIsApplied_inStapler() throws Exception {\n        logging.record(\"\", Level.WARNING).capture(100);\n\n        j.jenkins.setCrumbIssuer(null);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.goTo(\"testStapler\");\n        String secret \u003d \"s3cr3t\";\n        ((HtmlInput) page.getElementById(\"password\")).setValue(secret);\n\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        Page formSubmitPage \u003d j.submit(form);\n        assertThat(formSubmitPage.getWebResponse().getContentAsString(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n\n        // check the system log also\n        Throwable thrown \u003d logging.getRecords().stream().filter(r -\u003e r.getMessage().contains(\"Error while serving\")).findAny().get().getThrown();\n        // the exception from RequestImpl\n        assertThat(thrown.getCause().getMessage(), allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n\n        StringWriter buffer \u003d new StringWriter();\n        thrown.printStackTrace(new PrintWriter(buffer));\n        String fullStack \u003d buffer.getBuffer().toString();\n        assertThat(fullStack, allOf(\n                containsString(RedactSecretJsonInErrorMessageSanitizer.REDACT_VALUE),\n                not(containsString(secret))\n        ));\n    }","advisory":"SECURITY-765"},{"className":"jenkins.security.RekeySecretAdminMonitorTest","methodSignature":"jenkins.security.RekeySecretAdminMonitorTest.testBasicWorkflow:void()","methodSource":"@WithTestSecret\n    @Test\n    public void testBasicWorkflow() throws Exception {\n        putSomeOldData(j.jenkins.getRootDir());\n        monitor.setNeeded();\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        // one should see the warning. try scheduling it\n        assertFalse(monitor.isScanOnBoot());\n        HtmlForm form \u003d getRekeyForm(wc);\n        j.submit(form, \"schedule\");\n        assertTrue(monitor.isScanOnBoot());\n        form \u003d getRekeyForm(wc);\n        assertTrue(getButton(form, 1).isDisabled());\n\n        // run it now\n        assertFalse(monitor.getLogFile().exists());\n        j.submit(form, \"background\");\n        assertTrue(monitor.getLogFile().exists());\n\n        // should be no warning/error now\n        HtmlPage manage \u003d wc.goTo(\"manage\");\n        assertEquals(0, DomNodeUtil.selectNodes(manage, \"//*[class\u003d\u0027error\u0027]\").size());\n        assertEquals(0, DomNodeUtil.selectNodes(manage, \"//*[class\u003d\u0027warning\u0027]\").size());\n\n        // and the data should be rewritten\n        verifyRewrite(j.jenkins.getRootDir());\n        assertTrue(monitor.isDone());\n\n        // dismiss and the message will be gone\n        assertTrue(monitor.isEnabled());\n        form \u003d getRekeyForm(wc);\n        j.submit(form, \"dismiss\");\n        assertFalse(monitor.isEnabled());\n        assertThrows(ElementNotFoundException.class, () -\u003e getRekeyForm(wc));\n    }"},{"className":"jenkins.security.RekeySecretAdminMonitorTest","methodSignature":"jenkins.security.RekeySecretAdminMonitorTest.testScanOnBoot:void()","methodSource":"@WithTestSecret\n    @WithScanOnBoot\n    @Test\n    public void testScanOnBoot() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        // scan on boot should have run the scan\n        assertTrue(monitor.getLogFile().exists());\n        assertFalse(\"scan on boot should have turned this off\", monitor.isScanOnBoot());\n\n        // and data should be migrated\n        verifyRewrite(j.jenkins.getRootDir());\n\n        // should be no warning/error now\n        HtmlPage manage \u003d wc.goTo(\"manage\");\n        assertEquals(0, DomNodeUtil.selectNodes(manage, \"//*[class\u003d\u0027error\u0027]\").size());\n        assertEquals(0, DomNodeUtil.selectNodes(manage, \"//*[class\u003d\u0027warning\u0027]\").size());\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.secondDomainBasics:void()","methodSource":"@Test\n    public void secondDomainBasics() throws Exception {\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n\n        { // DBS directory listing is shown as always\n            Page page \u003d webClient.goTo(\"userContent\");\n            Assert.assertEquals(\"successful request\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"still on the original URL\", page.getUrl().toString().contains(\"/userContent\"));\n            Assert.assertTrue(\"web page\", page.isHtmlPage());\n            Assert.assertTrue(\"complex web page\", page.getWebResponse().getContentAsString().contains(\"javascript\"));\n        }\n\n        String resourceResponseUrl;\n        { // DBS on primary domain forwards to second domain when trying to access a file URL\n            webClient.setRedirectEnabled(true);\n            Page page \u003d webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl \u003d page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { // direct access to resource URL works\n            Page page \u003d webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl \u003d page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        { // show directory index\n            webClient.setRedirectEnabled(false);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page \u003d webClient.getPage(resourceResponseUrl.replace(\"readme.txt\", \"\"));\n            Assert.assertEquals(\"directory listing response\", 200, page.getWebResponse().getStatusCode());\n            String responseContent \u003d page.getWebResponse().getContentAsString();\n            Assert.assertTrue(\"directory listing shown\", responseContent.contains(\"readme.txt\"));\n            Assert.assertTrue(\"is HTML\", responseContent.contains(\"href\u003d\"));\n        }\n\n        String resourceRootUrl \u003d ResourceDomainConfiguration.get().getUrl();\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page \u003d webClient.getPage(resourceRootUrl);\n            Assert.assertEquals(\"resource root URL response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        {\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page \u003d webClient.getPage(resourceRootUrl + \"/static-files/\");\n            Assert.assertEquals(\"resource action index page response is 404\", 404, page.getWebResponse().getStatusCode());\n        }\n\n        { // second domain invalid URL gets 404\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            String uuid \u003d UUID.randomUUID().toString();\n            Page page \u003d webClient.getPage(resourceRootUrl + \"static-files/\" + uuid);\n            Assert.assertEquals(\"resource response is 404\", 404, page.getWebResponse().getStatusCode());\n            Assert.assertTrue(\"response URL is still the same\", page.getUrl().toString().contains(uuid));\n        }\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a \u003d new MockAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        { // fails without Overall/Read\n            webClient.withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false);\n            Page page \u003d webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl \u003d page.getUrl().toString();\n            Assert.assertEquals(\"resource response failed\", 403, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        }\n\n        a.grant(Jenkins.READ).onRoot().to(\"anonymous\");\n\n        { // now it works again\n            Page page \u003d webClient.getPage(resourceResponseUrl);\n            resourceResponseUrl \u003d page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.clearRootUrl:void()","methodSource":"@Test\n    public void clearRootUrl() throws Exception {\n        JenkinsLocationConfiguration.get().setUrl(null);\n\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n\n        String resourceResponseUrl;\n        {\n            webClient.setRedirectEnabled(true);\n            Page page \u003d webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl \u003d page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNotNull(\"CSP headers set\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertFalse(\"Not served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertFalse(\"Not served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n            Assert.assertTrue(\"Original URL\", resourceResponseUrl.contains(\"userContent/readme.txt\"));\n        }\n\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.secondDomainCannotBeFaked:void()","methodSource":"@Test\n    public void secondDomainCannotBeFaked() throws Exception {\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n\n        String resourceResponseUrl;\n        { // first, obtain a resource response URL\n            webClient.setRedirectEnabled(true);\n            webClient.setThrowExceptionOnFailingStatusCode(false);\n            Page page \u003d webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n            resourceResponseUrl \u003d page.getUrl().toString();\n            Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n            Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n            Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n            Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n        }\n\n        {\n            // now, modify its prefix to have an invalid HMAC\n            String modifiedUrl \u003d resourceResponseUrl.replaceAll(\"static[-]files[/]....\", \"static-files/aaaa\");\n            Page page \u003d webClient.getPage(modifiedUrl);\n            Assert.assertEquals(\"resource not found\", 404, page.getWebResponse().getStatusCode());\n            assertThat(\"resource not found\", page.getWebResponse().getContentAsString(), containsString(ResourceDomainFilter.ERROR_RESPONSE));\n        }\n\n\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.missingPermissionsCause403:void()","methodSource":"@Test\n    public void missingPermissionsCause403() throws Exception {\n        // setup: A job that creates a file in its workspace\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"\u003chtml\u003e\u003cbody\u003ethe content\u003c/body\u003e\u003c/html\u003e\"));\n        project.save();\n\n        // setup: Everyone has permission to Jenkins and the job\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a \u003d new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ, Item.WORKSPACE).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        // basics work\n        HtmlPage page \u003d webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL anonUrl \u003d page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", anonUrl.toString().contains(\"/static-files/\"));\n\n        // now remove workspace permission from all users\n        a \u003d new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.READ).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        // and we get a 403 response\n        page \u003d webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: anonymous is missing the Job/Workspace permission\"));\n\n        // now remove Job/Read permission from all users (but grant Discover)\n        a \u003d new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        a.grant(Item.DISCOVER).onItems(project).toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        // and we get a 403 response asking to log in (Job/Discover is basically meant to be granted to anonymous only)\n        page \u003d webClient.getPage(anonUrl);\n        Assert.assertEquals(\"page is not found\", 403, page.getWebResponse().getStatusCode());\n        assertThat(\"Response mentions workspace permission\", page.getWebResponse().getContentAsString(), containsString(\"Failed permission check: Please login to access job\"));\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.projectWasRenamedCauses404:void()","methodSource":"@Test\n    public void projectWasRenamedCauses404() throws Exception {\n        // setup: A job that creates a file in its workspace\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"file.html\", \"\u003chtml\u003e\u003cbody\u003ethe content\u003c/body\u003e\u003c/html\u003e\"));\n        project.save();\n\n        // setup: Everyone has permission to Jenkins and the job\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a \u003d new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.WORKSPACE).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page \u003d webClient.getPage(project, \"ws/file.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url \u003d page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        project.renameTo(\"new-job-name\"); // or delete, doesn\u0027t really matter\n\n        Page failedPage \u003d webClient.getPage(url);\n        Assert.assertEquals(\"page is not found\", 404, failedPage.getWebResponse().getStatusCode());\n        Assert.assertEquals(\"page is not found\", \"Not Found\", failedPage.getWebResponse().getStatusMessage()); // TODO Is this not done through our exception handler?\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.adminMonitorShowsUpWithOverriddenCSP:void()","methodSource":"@Test\n    public void adminMonitorShowsUpWithOverriddenCSP() {\n        ResourceDomainRecommendation monitor \u003d ExtensionList.lookupSingleton(ResourceDomainRecommendation.class);\n        Assert.assertFalse(monitor.isActivated());\n        System.setProperty(DirectoryBrowserSupport.class.getName() + \".CSP\", \"\");\n        try {\n            Assert.assertFalse(monitor.isActivated());\n            ResourceDomainConfiguration.get().setUrl(null);\n            Assert.assertTrue(monitor.isActivated());\n        } finally {\n            System.clearProperty(DirectoryBrowserSupport.class.getName() + \".CSP\");\n        }\n        Assert.assertFalse(monitor.isActivated());\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.testColonUserName:void()","methodSource":"@Test\n    public void testColonUserName() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        MockAuthorizationStrategy a \u003d new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setRedirectEnabled(true);\n        webClient.login(\"foo:bar\");\n\n        Page page \u003d webClient.goTo(\"userContent/readme.txt\", \"text/plain\");\n        String resourceResponseUrl \u003d page.getUrl().toString();\n        Assert.assertEquals(\"resource response success\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertNull(\"no CSP headers\", page.getWebResponse().getResponseHeaderValue(\"Content-Security-Policy\"));\n        Assert.assertTrue(\"Served from resource domain\", resourceResponseUrl.contains(RESOURCE_DOMAIN));\n        Assert.assertTrue(\"Served from resource action\", resourceResponseUrl.contains(\"static-files\"));\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.testRedirectUrls:void()","methodSource":"@Test\n    public void testRedirectUrls() {\n        ResourceDomainRootAction rootAction \u003d ResourceDomainRootAction.get();\n        String url \u003d rootAction.getRedirectUrl(new ResourceDomainRootAction.Token(\"foo\", \"bar\", Instant.now()), \"foo bar baz\");\n        Assert.assertFalse(\"urlencoded\", url.contains(\" \"));\n    }"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.testUrlEncoding:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59849\")\n    public void testUrlEncoding() throws Exception {\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(new CreateFileBuilder(\"This has spaces and is 100% evil.html\", \"\u003chtml\u003e\u003cbody\u003ethe content\u003c/body\u003e\u003c/html\u003e\"));\n        project.save();\n\n        j.buildAndAssertSuccess(project);\n\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        HtmlPage page \u003d webClient.getPage(project, \"ws/This%20has%20spaces%20and%20is%20100%25%20evil.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"the content\"));\n\n        URL url \u003d page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n    }","advisory":"JENKINS-59849"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.testMoreUrlEncoding:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59849\")\n    public void testMoreUrlEncoding() throws Exception {\n        assumeFalse(\"TODO: Implement this test on Windows\", Functions.isWindows());\n        JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(true);\n\n        Page page \u003d webClient.goTo(\"100%25%20evil/%20100%25%20evil%20dir%20name%20%20%20/%20100%25%20evil%20content%20.html\");\n        Assert.assertEquals(\"page is found\", 200, page.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is as expected\", page.getWebResponse().getContentAsString().contains(\"this is the content\"));\n\n        URL url \u003d page.getUrl();\n        Assert.assertTrue(\"page is served by resource domain\", url.toString().contains(\"/static-files/\"));\n\n        URL dirUrl \u003d new URI(url.toString().replace(\"%20100%25%20evil%20content%20.html\", \"\")).toURL();\n        Page dirPage \u003d webClient.getPage(dirUrl);\n        Assert.assertEquals(\"page is found\", 200, dirPage.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is HTML\", dirPage.getWebResponse().getContentAsString().contains(\"href\"));\n        Assert.assertTrue(\"page content references file\", dirPage.getWebResponse().getContentAsString().contains(\"evil content\"));\n\n        URL topDirUrl \u003d new URI(url.toString().replace(\"%20100%25%20evil%20dir%20name%20%20%20/%20100%25%20evil%20content%20.html\", \"\")).toURL();\n        Page topDirPage \u003d webClient.getPage(topDirUrl);\n        Assert.assertEquals(\"page is found\", 200, topDirPage.getWebResponse().getStatusCode());\n        Assert.assertTrue(\"page content is HTML\", topDirPage.getWebResponse().getContentAsString().contains(\"href\"));\n        Assert.assertTrue(\"page content references directory\", topDirPage.getWebResponse().getContentAsString().contains(\"evil dir name\"));\n    }","advisory":"JENKINS-59849"},{"className":"jenkins.security.ResourceDomainTest","methodSignature":"jenkins.security.ResourceDomainTest.authenticatedCannotAccessResourceDomain:void()","methodSource":"@Test\n    public void authenticatedCannotAccessResourceDomain() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        final MockAuthorizationStrategy authorizationStrategy \u003d new MockAuthorizationStrategy();\n        authorizationStrategy.grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").grant(Jenkins.READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n        final String resourceUrl;\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient().withRedirectEnabled(false).withThrowExceptionOnFailingStatusCode(false)) {\n            final Page htmlPage \u003d wc.goTo(\"userContent/readme.txt\", \"\");\n            resourceUrl \u003d htmlPage.getWebResponse().getResponseHeaderValue(\"Location\");\n        }\n        assertThat(resourceUrl, containsString(\"static-files/\"));\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient().withBasicApiToken(\"admin\")) {\n            assertThat(assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(new URL(resourceUrl))).getStatusCode(), is(400));\n        }\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient().withBasicCredentials(\"admin\")) {\n            assertThat(assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(new URL(resourceUrl))).getStatusCode(), is(400));\n        }\n    }"},{"className":"jenkins.security.Security177Test","methodSignature":"jenkins.security.Security177Test.nosniff:void()","methodSource":"@Test\n    public void nosniff() throws Exception {\n        WebClient wc \u003d jenkins.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n\n        URL u \u003d jenkins.getURL();\n        verifyNoSniff(wc.getPage(new URL(u, \"adjuncts/507db12b/nosuch/adjunct.js\")));\n        verifyNoSniff(wc.getPage(new URL(u, \"no-such-page\")));\n        verifyNoSniff(wc.getPage(new URL(u, \"images/title.svg\")));\n        verifyNoSniff(wc.getPage(u));\n    }"},{"className":"jenkins.security.Security218Test","methodSignature":"jenkins.security.Security218Test.dumbSlave:void()","methodSource":"@Test\n    public void dumbSlave() throws Exception {\n        check(j.createOnlineSlave());\n    }"},{"className":"jenkins.security.Security218Test","methodSignature":"jenkins.security.Security218Test.jnlpSlave:void()","methodSource":"@Test\n    public void jnlpSlave() throws Exception {\n        DumbSlave a \u003d (DumbSlave) inboundAgents.createAgent(j, InboundAgentRule.Options.newBuilder().secret().build());\n        try {\n            j.createWebClient().goTo(\"computer/\" + a.getNodeName() + \"/jenkins-agent.jnlp?encrypt\u003dtrue\", \"application/octet-stream\");\n            check(a);\n        } finally {\n            inboundAgents.stop(j, a.getNodeName());\n        }\n    }"},{"className":"jenkins.security.Security2278Test","methodSignature":"jenkins.security.Security2278Test.testUi:void()","methodSource":"@Test\n    public void testUi() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage topPage \u003d webClient.goTo(\"\");\n        final String contentAsString \u003d topPage.getWebResponse().getContentAsString();\n        assertThat(contentAsString, containsString(\"Build Executor Status\"));\n        assertThat(contentAsString, containsString(\"Unknown Task\"));\n        assertThat(contentAsString, not(containsString(\"job/foo/job/bar\")));\n        assertThat(contentAsString, not(containsString(\"stop-button-link\")));\n    }"},{"className":"jenkins.security.Security2278Test","methodSignature":"jenkins.security.Security2278Test.testUiWithPermission:void()","methodSource":"@Test\n    public void testUiWithPermission() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient().login(\"alice\");\n        final HtmlPage topPage \u003d webClient.goTo(\"\");\n        final String contentAsString \u003d topPage.getWebResponse().getContentAsString();\n        assertThat(contentAsString, containsString(\"Build Executor Status\"));\n        assertThat(contentAsString, not(containsString(\"Unknown Task\")));\n        assertThat(contentAsString, containsString(\"job/foo/job/bar\"));\n        assertThat(contentAsString, containsString(\"stop-button-link\"));\n    }"},{"className":"jenkins.security.Security2278Test","methodSignature":"jenkins.security.Security2278Test.testQueueCancelWithoutPermission:void()","methodSource":"@Test\n    public void testQueueCancelWithoutPermission() throws Exception {\n        final Queue.Item[] items \u003d j.jenkins.getQueue().getItems();\n        Assert.assertEquals(1, items.length);\n        final long id \u003d items[0].getId();\n\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(false);\n\n        final Page stopResponse \u003d webClient.getPage(addReferer(webClient.addCrumb(new WebRequest(new URL(j.jenkins.getRootUrl() + \"/queue/cancelItem?id\u003d\" + id), HttpMethod.POST)), j.jenkins.getRootUrl()));\n        assertEquals(404, stopResponse.getWebResponse().getStatusCode());\n        Assert.assertEquals(1, j.jenkins.getQueue().getItems().length);\n    }"},{"className":"jenkins.security.Security2278Test","methodSignature":"jenkins.security.Security2278Test.testWebMethodWithoutPermission:void()","methodSource":"@Test\n    public void testWebMethodWithoutPermission() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        webClient.setThrowExceptionOnFailingStatusCode(false);\n        webClient.setRedirectEnabled(false);\n\n        final Executor busyExecutor \u003d project.getBuilds().stream().findFirst().orElseThrow(() -\u003e new IllegalStateException(\"expected build\")).getExecutor();\n        final Computer computer \u003d j.jenkins.toComputer();\n        assertNotNull(computer);\n        final List\u003cExecutor\u003e executors \u003d computer.getExecutors();\n        int found \u003d -1;\n        for (int i \u003d 0; i \u003c computer.getNumExecutors(); i++) {\n            if (executors.get(i) \u003d\u003d busyExecutor) {\n                found \u003d i;\n                break;\n            }\n        }\n        if (found \u003c 0) {\n            throw new IllegalStateException(\"didn\u0027t find executor\");\n        }\n        final Page stopResponse \u003d webClient.getPage(addReferer(webClient.addCrumb(new WebRequest(new URL(j.jenkins.getRootUrl() + \"/computer/(master)/executors/\" + found + \"/stop/\"), HttpMethod.POST)), j.jenkins.getRootUrl()));\n        assertEquals(302, stopResponse.getWebResponse().getStatusCode());\n\n        final FreeStyleBuild build \u003d project.getBuildByNumber(1);\n        assertTrue(build.isBuilding());\n        assertFalse(Objects.requireNonNull(build.getExecutor()).isInterrupted());\n    }"},{"className":"jenkins.security.Security2458Test","methodSignature":"jenkins.security.Security2458Test.rejectBadCallable:void()","methodSource":"@Test\n    public void rejectBadCallable() throws Throwable {\n        // If the role check is empty, fail\n        assertThrowsIOExceptionCausedBySecurityException(() -\u003e Objects.requireNonNull(r.createOnlineSlave().getChannel()).call(new CallableCaller(new BadCallable())));\n\n        // If it performs a no-op check, fail. This used to work when required role checks were introduced, but later prohibited.\n        assertThrowsIOExceptionCausedBySecurityException(() -\u003e Objects.requireNonNull(r.createOnlineSlave().getChannel()).call(new CallableCaller(new EvilCallable())));\n\n        // Explicit role check.\n        Objects.requireNonNull(r.createOnlineSlave().getChannel()).call(new CallableCaller(new GoodCallable()));\n    }"},{"className":"jenkins.security.Security2761Test","methodSignature":"jenkins.security.Security2761Test.symbolIconAltIsEscaped:void()","methodSource":"@Issue(\"SECURITY-2761\")\n    @Test\n    public void symbolIconAltIsEscaped() throws Exception {\n        final AtomicBoolean alerted \u003d new AtomicBoolean(false);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.setAlertHandler((page, s) -\u003e alerted.set(true));\n        HtmlPage page \u003d wc.getPage(new URI(wc.getContextPath() + ACTION_URL).toURL());\n        String responseContent \u003d page.getWebResponse().getContentAsString();\n        wc.waitForBackgroundJavaScript(5000);\n\n        assertThat(responseContent, not(containsString(\"\u003cimg src\u003dx\")));\n        assertThat(responseContent, containsString(\"\u003cspan class\u003d\\\"jenkins-visually-hidden\\\"\u003e\u0026lt;img src\u003dx\"));\n        assertFalse(\"no alert expected\", alerted.get());\n    }","advisory":"SECURITY-2761"},{"className":"jenkins.security.Security2776Test","methodSignature":"jenkins.security.Security2776Test.escapedTooltipIsEscaped:void()","methodSource":"@Test\n    public void escapedTooltipIsEscaped() throws Exception {\n        assertExpectedBehaviorForTooltip(\"#symbol-icons .unsafe svg\",\n                \"\u0026lt;img src\u003d\\\"x\\\" onerror\u003d\\\"alert(1)\\\"\u0026gt;\");\n        assertExpectedBehaviorForTooltip(\"#symbol-icons .safe svg\",\n                Functions.htmlAttributeEscape(_getSafeTooltip()));\n        assertExpectedBehaviorForTooltip(\"#png-icons .unsafe img\",\n                \"\u0026lt;img src\u003d\\\"x\\\" onerror\u003d\\\"alert(1)\\\"\u0026gt;\");\n        assertExpectedBehaviorForTooltip(\"#png-icons .safe img\",\n                Functions.htmlAttributeEscape(_getSafeTooltip()));\n\n        // Outlier after the fix for SECURITY-1955\n        assertExpectedBehaviorForTooltip(\"#svgIcons .unsafe svg\",\n                \"\u0026lt;img src\u003d\\\"x\\\" onerror\u003d\\\"alert(1)\\\"\u0026gt;\");\n        assertExpectedBehaviorForTooltip(\"#svgIcons .safe svg\",\n                \"\u0026amp;lt;img src\u003d\u0026amp;quot;x\u0026amp;quot; onerror\u003d\u0026amp;quot;alert(1)\u0026amp;quot;\u0026amp;gt;\");\n    }"},{"className":"jenkins.security.Security2777Test","methodSignature":"jenkins.security.Security2777Test.testView:void()","methodSource":"@Test\n    public void testView() throws IOException {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        // no exception on action index page\n        wc.getPage(wc.getContextPath() + ACTION_URL);\n\n        final FailingHttpStatusCodeException ex2 \u003d Assert.assertThrows(\"no icon, no response\", FailingHttpStatusCodeException.class, () -\u003e wc.getPage(wc.getContextPath() + ACTION_URL + \"/fragmentWithoutIcon\"));\n        Assert.assertEquals(\"it\u0027s 404\", 404, ex2.getStatusCode());\n\n        final FailingHttpStatusCodeException ex3 \u003d Assert.assertThrows(\"icon, still no response\", FailingHttpStatusCodeException.class, () -\u003e wc.getPage(wc.getContextPath() + ACTION_URL + \"/fragmentWithIcon\"));\n        Assert.assertEquals(\"it\u0027s 404\", 404, ex3.getStatusCode());\n    }"},{"className":"jenkins.security.Security2779Test","methodSignature":"jenkins.security.Security2779Test.noXssInHelpLinkPanel:void()","methodSource":"@Test\n    public void noXssInHelpLinkPanel() throws Exception {\n        noCrossSiteScriptingInHelp(\"#link-panel a\");\n    }"},{"className":"jenkins.security.Security2779Test","methodSignature":"jenkins.security.Security2779Test.noXssInHelpIconPanel:void()","methodSource":"@Test\n    public void noXssInHelpIconPanel() throws Exception {\n        noCrossSiteScriptingInHelp(\"#icon-panel svg\");\n    }"},{"className":"jenkins.security.Security2780Test","methodSignature":"jenkins.security.Security2780Test.buildButtonTooltipHasNoXss:void()","methodSource":"@Test\n    public void buildButtonTooltipHasNoXss() throws Exception {\n        FreeStyleProject project \u003d this.j.createFreeStyleProject();\n        project.setDisplayName(\"\u003cimg src\u003dx onerror\u003dalert(1)\u003e\");\n        JenkinsRule.WebClient wc \u003d this.j.createWebClient();\n\n        AtomicBoolean alertTriggered \u003d new AtomicBoolean(false);\n        wc.setAlertHandler((p, s) -\u003e alertTriggered.set(true));\n        HtmlPage page \u003d wc.goTo(\"\");\n        page.executeJavaScript(\"document.querySelector(\u0027a.jenkins-table__button\u0027)._tippy.show()\");\n        wc.waitForBackgroundJavaScript(2000L);\n        ScriptResult result \u003d page.executeJavaScript(\"document.querySelector(\u0027.tippy-content\u0027).innerHTML;\");\n        Object jsResult \u003d result.getJavaScriptResult();\n        assertThat(jsResult, instanceOf(String.class));\n        String jsResultString \u003d (String) jsResult;\n\n        assertThat(\"No unsafe HTML expected in the tooltip\", jsResultString, not(containsString(\"\u003cimg\")));\n        assertThat(\"Safe HTML expected in the tooltip\", jsResultString, containsString(\"Schedule a Build for \u0026lt;img\"));\n        Assert.assertFalse(\"No alert expected\", alertTriggered.get());\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.fewFilesStapler:void()","methodSource":"@Test\n    public void fewFilesStapler() throws IOException {\n        assertSubmissionOK(StaplerRequestFormAction.instance(), 20, 10, 1024 * 1024);\n        assertSubmissionOK(StaplerRequestFormAction.instance(), 10, 41, 10);\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.tooManyFilesStapler:void()","methodSource":"@Test\n    public void tooManyFilesStapler() throws Exception {\n        ServletException ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 10, 1000, 20, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 1000, 10, 10, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        try (FieldValue v \u003d withStaticField(RequestImpl.class, \"FILEUPLOAD_MAX_FILES\", 10_000)) {\n            assertSubmissionOK(StaplerRequestFormAction.instance(), 1000, 10, 10);\n            ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 10_000, 10, 10, FileCountLimitExceededException.class);\n            assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        }\n        ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 10, 1000, 20, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 1000, 10, 10, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.tooLargeFilesStapler:void()","methodSource":"@Test\n    public void tooLargeFilesStapler() throws Exception {\n        assertSubmissionOK(StaplerRequestFormAction.instance(), 1, 50, 10 * 1024 * 1024);\n        try (FieldValue v \u003d withStaticField(RequestImpl.class, \"FILEUPLOAD_MAX_FILE_SIZE\", 1024 * 1024)) {\n            assertSubmissionOK(StaplerRequestFormAction.instance(), 200, 100, 1024);\n            ServletException ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 1, 50, 10 * 1024 * 1024, FileUploadBase.FileSizeLimitExceededException.class);\n            assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_FILE_SIZE\"));\n        }\n        assertSubmissionOK(StaplerRequestFormAction.instance(), 1, 50, 10 * 1024 * 1024);\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.tooLargeSubmissionStapler:void()","methodSource":"@Test\n    public void tooLargeSubmissionStapler() throws Exception {\n        assertSubmissionOK(StaplerRequestFormAction.instance(), 1, 50, 10 * 1024 * 1024);\n        try (FieldValue v \u003d withStaticField(RequestImpl.class, \"FILEUPLOAD_MAX_SIZE\", 1024 * 1024)) {\n            assertSubmissionOK(StaplerRequestFormAction.instance(), 200, 100, 1024);\n            ServletException ex \u003d assertSubmissionThrows(StaplerRequestFormAction.instance(), 1, 50, 10 * 1024 * 1024, FileUploadBase.SizeLimitExceededException.class);\n            assertThat(ex.getMessage(), containsString(RequestImpl.class.getName() + \".FILEUPLOAD_MAX_SIZE\"));\n        }\n        assertSubmissionOK(StaplerRequestFormAction.instance(), 1, 50, 10 * 1024 * 1024);\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.fewFilesParser:void()","methodSource":"@Test\n    public void fewFilesParser() throws IOException {\n        assertSubmissionOK(MultipartFormDataParserAction.instance(), 20, 10, 1024 * 1024);\n        assertSubmissionOK(MultipartFormDataParserAction.instance(), 200, 100, 1024);\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.tooManyFilesParser:void()","methodSource":"@Test\n    public void tooManyFilesParser() throws Exception {\n        ServletException ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 10, 1000, 20, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 1000, 10, 10, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        try (FieldValue v \u003d withStaticField(MultipartFormDataParser.class, \"FILEUPLOAD_MAX_FILES\", 10_000)) {\n            assertSubmissionOK(MultipartFormDataParserAction.instance(), 1000, 10, 10);\n            ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 10_000, 10, 10, FileCountLimitExceededException.class);\n            assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        }\n        ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 10, 1000, 20, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n        ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 1000, 10, 10, FileCountLimitExceededException.class);\n        assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_FILES\"));\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.tooLargeFilesParser:void()","methodSource":"@Test\n    public void tooLargeFilesParser() throws Exception {\n        assertSubmissionOK(MultipartFormDataParserAction.instance(), 1, 50, 10 * 1024 * 1024);\n        try (FieldValue v \u003d withStaticField(MultipartFormDataParser.class, \"FILEUPLOAD_MAX_FILE_SIZE\", 1024 * 1024)) {\n            assertSubmissionOK(MultipartFormDataParserAction.instance(), 200, 100, 1024);\n            ServletException ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 1, 50, 10 * 1024 * 1024, FileUploadBase.FileSizeLimitExceededException.class);\n            assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_FILE_SIZE\"));\n        }\n        assertSubmissionOK(MultipartFormDataParserAction.instance(), 1, 50, 10 * 1024 * 1024);\n    }"},{"className":"jenkins.security.Security3030Test","methodSignature":"jenkins.security.Security3030Test.tooLargeSubmissionParser:void()","methodSource":"@Test\n    public void tooLargeSubmissionParser() throws Exception {\n        assertSubmissionOK(MultipartFormDataParserAction.instance(), 1, 50, 10 * 1024 * 1024);\n        try (FieldValue v \u003d withStaticField(MultipartFormDataParser.class, \"FILEUPLOAD_MAX_SIZE\", 1024 * 1024)) {\n            assertSubmissionOK(MultipartFormDataParserAction.instance(), 200, 100, 1024);\n            ServletException ex \u003d assertSubmissionThrows(MultipartFormDataParserAction.instance(), 1, 50, 10 * 1024 * 1024, FileUploadBase.SizeLimitExceededException.class);\n            assertThat(ex.getMessage(), containsString(MultipartFormDataParser.class.getName() + \".FILEUPLOAD_MAX_SIZE\"));\n        }\n        assertSubmissionOK(MultipartFormDataParserAction.instance(), 1, 50, 10 * 1024 * 1024);\n    }"},{"className":"jenkins.security.Security3135Test","methodSignature":"jenkins.security.Security3135Test.contextMenuShouldNotBypassCSRFProtection:void()","methodSource":"@Test\n    @Issue(\"SECURITY-3135\")\n    public void contextMenuShouldNotBypassCSRFProtection() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"FreestyleProject\");\n        ViewHolder viewHolder \u003d j.jenkins.getExtensionList(ViewHolder.class).get(ViewHolder.class);\n        boolean exceptionThrown \u003d false;\n\n        HtmlPage page \u003d wc.goTo(ACTION_URL);\n        DomElement standardMenu \u003d page.getElementById(\"standard-menu\");\n        standardMenu.click();\n        DomElement contextMenu \u003d page.getElementById(\"context-menu\");\n        try {\n            contextMenu.click();\n        } catch (FailingHttpStatusCodeException e) {\n            if (e.getStatusCode() \u003d\u003d 405) {\n                exceptionThrown \u003d true;\n            }\n        }\n\n        j.waitUntilNoActivityUpTo(2000); // Give the job 2 seconds to be submitted\n\n        assertTrue(\"Request was not made\", viewHolder.isRequestMade());\n        assertTrue(\"Expected 405 Method Not Allowed\", exceptionThrown);\n        assertNull(\"Build should not be scheduled\", j.jenkins.getQueue().getItem(project));\n        assertNull(\"Build should not be scheduled\", project.getBuildByNumber(1));\n    }","advisory":"SECURITY-3135"},{"className":"jenkins.security.Security3188Test","methodSignature":"jenkins.security.Security3188Test.linkCannotAttributeEscape:void()","methodSource":"@Issue(\"SECURITY-3188\")\n    @Test\n    public void linkCannotAttributeEscape() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        p.getBuildersList().add(getScript(\"echo \\\"https://acme.com/search?q\u003d\u0027onmouseover\u003dalert(1);\u0027Hello World\\\"\"));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(p);\n\n        AtomicBoolean alerts \u003d new AtomicBoolean();\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            wc.setAlertHandler((pr, s) -\u003e alerts.set(true));\n            final HtmlPage page \u003d wc.goTo(build.getUrl() + \"console\");\n            String content \u003d page.getWebResponse().getContentAsString();\n            assertThat(content, containsString(\"\u003ca href\u003d\u0027https://acme.com/search?q\u003d\u0026#39;onmouseover\u003dalert(1);\u0026#39;Hello\u0027\"));\n\n            // Execute JavaScript code to simulate mouseover event\n            String jsCode \u003d \"document.querySelector(\u0027pre.console-output a:nth-child(2)\u0027).dispatchEvent(new MouseEvent(\u0027mouseover\u0027));\";\n            page.executeJavaScript(jsCode);\n\n            Assert.assertFalse(\"Alert not expected\", alerts.get());\n        }\n    }","advisory":"SECURITY-3188"},{"className":"jenkins.security.Security3245Test","methodSignature":"jenkins.security.Security3245Test.captionCannotAttributeEscape:void()","methodSource":"@Issue(\"SECURITY-3245\")\n    @Test\n    public void captionCannotAttributeEscape() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        p.getBuildersList().add(new ExpandableDetailsNoteTestAction(\"\u0027 onclick\u003dalert(1) foo\u003d\u0027bar\", \"\u003ch1\u003e\u003c/h1\u003e\"));\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(p);\n\n        AtomicBoolean alerts \u003d new AtomicBoolean();\n        try (JenkinsRule.WebClient wc \u003d j.createWebClient()) {\n            wc.setAlertHandler((pr, s) -\u003e alerts.set(true));\n            final HtmlPage page \u003d wc.goTo(build.getUrl() + \"console\");\n            String content \u003d page.getWebResponse().getContentAsString();\n            assertThat(content, containsString(\"\u003cinput type\u003dbutton value\u003d\u0027\u0026#39; onclick\u003dalert(1) foo\u003d\u0026#39;bar\u0027 class\u003d\u0027reveal-expandable-detail\u0027\u003e\"));\n\n            // Execute JavaScript code to simulate click event\n            String jsCode \u003d \"document.querySelector(\u0027.reveal-expandable-detail\u0027).dispatchEvent(new MouseEvent(\u0027click\u0027));\";\n            page.executeJavaScript(jsCode);\n\n            Assert.assertFalse(\"Alert not expected\", alerts.get());\n        }\n    }","advisory":"SECURITY-3245"},{"className":"jenkins.security.Security3314Test","methodSignature":"jenkins.security.Security3314Test.commandShouldNotParseAt:void()","methodSource":"@Test\n    public void commandShouldNotParseAt() throws Exception {\n        CLICommandInvoker command \u003d new CLICommandInvoker(j, commandName);\n\n        Path tempPath \u003d Files.createTempFile(\"tempFile\", \".txt\");\n        tempPath.toFile().deleteOnExit();\n        String content \u003d \"AtGotParsed\";\n        Files.write(tempPath, content.getBytes());\n\n        final CLICommandInvoker.Result result \u003d command\n                .authorizedTo(Jenkins.READ)\n                .invokeWithArgs(\"@\" + tempPath);\n\n        assertThat(result.stderr(), containsString(\"@\" + tempPath));\n        assertThat(result.stderr(), not(containsString(\"AtGotParsed\")));\n    }"},{"className":"jenkins.security.Security380Test","methodSignature":"jenkins.security.Security380Test.testGetItemsWithoutAnonRead:void()","methodSource":"@Issue(\"SECURITY-380\")\n    @Test\n    public void testGetItemsWithoutAnonRead() throws Exception {\n        FullControlOnceLoggedInAuthorizationStrategy strategy \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        strategy.setAllowAnonymousRead(false);\n        Jenkins.get().setAuthorizationStrategy(strategy);\n\n        Jenkins.get().setSecurityRealm(j.createDummySecurityRealm());\n\n        j.createFreeStyleProject();\n        ACL.impersonate2(Jenkins.ANONYMOUS2, () -\u003e Assert.assertEquals(\"no items\", 0, Jenkins.get().getItems().size()));\n    }","advisory":"SECURITY-380"},{"className":"jenkins.security.Security380Test","methodSignature":"jenkins.security.Security380Test.testGetItems:void()","methodSource":"@Issue(\"SECURITY-380\")\n    @Test\n    public void testGetItems() throws Exception {\n        FullControlOnceLoggedInAuthorizationStrategy strategy \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        strategy.setAllowAnonymousRead(true);\n        Jenkins.get().setAuthorizationStrategy(strategy);\n\n        Jenkins.get().setSecurityRealm(j.createDummySecurityRealm());\n\n        j.createFreeStyleProject();\n        ACL.impersonate2(Jenkins.ANONYMOUS2, () -\u003e Assert.assertEquals(\"one item\", 1, Jenkins.get().getItems().size()));\n    }","advisory":"SECURITY-380"},{"className":"jenkins.security.Security380Test","methodSignature":"jenkins.security.Security380Test.testWithUnprotectedRootAction:void()","methodSource":"@Issue(\"SECURITY-380\")\n    @Test\n    public void testWithUnprotectedRootAction() throws Exception {\n        FullControlOnceLoggedInAuthorizationStrategy strategy \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        strategy.setAllowAnonymousRead(false);\n        Jenkins.get().setAuthorizationStrategy(strategy);\n\n        Jenkins.get().setSecurityRealm(j.createDummySecurityRealm());\n        j.createFreeStyleProject();\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        Page page \u003d wc.goTo(\"listJobs\", \"text/plain\");\n        // return \"0\\r\\n\"\n        Assert.assertEquals(\"expect 0 items\", \"0\", page.getWebResponse().getContentAsString().trim());\n    }","advisory":"SECURITY-380"},{"className":"jenkins.security.Security637Test","methodSignature":"jenkins.security.Security637Test.urlSafeDeserialization_handler_inSameJVMRemotingContext:void()","methodSource":"@Test\n    @Issue(\"SECURITY-637\")\n    public void urlSafeDeserialization_handler_inSameJVMRemotingContext() throws Throwable {\n        sessions.then(j -\u003e {\n                DumbSlave slave \u003d j.createOnlineSlave(null, new EnvVars(\"JAVA_TOOL_OPTIONS\", \"--add-opens\u003djava.base/java.net\u003dALL-UNNAMED\"));\n                String unsafeHandlerClassName \u003d slave.getChannel().call(new URLHandlerCallable(new URL(\"https://www.google.com/\")));\n                assertThat(unsafeHandlerClassName, containsString(\"SafeURLStreamHandler\"));\n\n                String safeHandlerClassName \u003d slave.getChannel().call(new URLHandlerCallable(new URL(\"file\", null, -1, \"\", null)));\n                assertThat(safeHandlerClassName, not(containsString(\"SafeURLStreamHandler\")));\n        });\n    }","advisory":"SECURITY-637"},{"className":"jenkins.security.Security637Test","methodSignature":"jenkins.security.Security637Test.urlDnsEquivalence:void()","methodSource":"@Ignore(\"TODO these map to different IPs now\")\n    @Test\n    @Issue(\"SECURITY-637\")\n    public void urlDnsEquivalence() throws Throwable {\n        sessions.then(j -\u003e {\n                // due to the DNS resolution they are equal\n                assertEquals(\n                        new URI(\"https://jenkins.io\").toURL(),\n                        new URI(\"https://www.jenkins.io\").toURL()\n                );\n        });\n    }","advisory":"SECURITY-637"},{"className":"jenkins.security.Security637Test","methodSignature":"jenkins.security.Security637Test.urlSafeDeserialization_urlBuiltInAgent_inSameJVMRemotingContext:void()","methodSource":"@Ignore(\"TODO these map to different IPs now\")\n    @Test\n    @Issue(\"SECURITY-637\")\n    public void urlSafeDeserialization_urlBuiltInAgent_inSameJVMRemotingContext() throws Throwable {\n        sessions.then(j -\u003e {\n                DumbSlave slave \u003d j.createOnlineSlave();\n\n                // we bypass the standard equals method that resolve the hostname\n                assertThat(\n                        slave.getChannel().call(new URLBuilderCallable(\"https://jenkins.io\")),\n                        not(equalTo(\n                                slave.getChannel().call(new URLBuilderCallable(\"https://www.jenkins.io\"))\n                        ))\n                );\n        });\n    }","advisory":"SECURITY-637"},{"className":"jenkins.security.Security637Test","methodSignature":"jenkins.security.Security637Test.urlSafeDeserialization_urlBuiltInMaster_inSameJVMRemotingContext:void()","methodSource":"@Ignore(\"TODO these map to different IPs now\")\n    @Test\n    @Issue(\"SECURITY-637\")\n    public void urlSafeDeserialization_urlBuiltInMaster_inSameJVMRemotingContext() throws Throwable {\n        sessions.then(j -\u003e {\n                DumbSlave slave \u003d j.createOnlineSlave();\n\n                // we bypass the standard equals method that resolve the hostname\n                assertThat(\n                        slave.getChannel().call(new URLTransferCallable(new URL(\"https://jenkins.io\"))),\n                        not(equalTo(\n                                slave.getChannel().call(new URLTransferCallable(new URL(\"https://www.jenkins.io\")))\n                        ))\n                );\n\n                // due to the DNS resolution they are equal\n                assertEquals(\n                        new URI(\"https://jenkins.io\").toURL(),\n                        new URI(\"https://www.jenkins.io\").toURL()\n                );\n        });\n    }","advisory":"SECURITY-637"},{"className":"jenkins.security.Security637Test","methodSignature":"jenkins.security.Security637Test.urlSafeDeserialization_inXStreamContext:void()","methodSource":"@Test\n    @Issue(\"SECURITY-637\")\n    public void urlSafeDeserialization_inXStreamContext() throws Throwable {\n        sessions.then(j -\u003e {\n                FreeStyleProject project \u003d j.createFreeStyleProject(\"project-with-url\");\n                URLJobProperty URLJobProperty \u003d new URLJobProperty(\n                        // url to be wrapped\n                        new URI(\"https://www.google.com/\").toURL(),\n                        // safe url, not required to be wrapped\n                        new URL(\"https\", null, -1, \"\", null)\n                );\n                project.addProperty(URLJobProperty);\n\n                project.save();\n        });\n\n        sessions.then(j -\u003e {\n                FreeStyleProject project \u003d j.jenkins.getItemByFullName(\"project-with-url\", FreeStyleProject.class);\n                assertNotNull(project);\n\n                Field handlerField \u003d URL.class.getDeclaredField(\"handler\");\n                try {\n                    handlerField.setAccessible(true);\n                } catch (RuntimeException e) {\n                    assumeNoException(e);\n                }\n\n                URLJobProperty urlJobProperty \u003d project.getProperty(URLJobProperty.class);\n                for (URL url : urlJobProperty.urlSet) {\n                    URLStreamHandler handler \u003d (URLStreamHandler) handlerField.get(url);\n                    if (url.getHost() \u003d\u003d null || url.getHost().isEmpty()) {\n                        assertThat(handler.getClass().getName(), not(containsString(\"SafeURLStreamHandler\")));\n                    } else {\n                        assertThat(handler.getClass().getName(), containsString(\"SafeURLStreamHandler\"));\n                    }\n                }\n        });\n    }","advisory":"SECURITY-637"},{"className":"jenkins.security.Security857Test","methodSignature":"jenkins.security.Security857Test.testJellyEscapingTrue:void()","methodSource":"@Issue(\"SECURITY-857\")\n    @Test\n    public void testJellyEscapingTrue() throws Exception {\n        testJelly(true);\n    }","advisory":"SECURITY-857"},{"className":"jenkins.security.Security857Test","methodSignature":"jenkins.security.Security857Test.testJellyEscapingFalse:void()","methodSource":"@Issue(\"SECURITY-857\")\n    @Test\n    public void testJellyEscapingFalse() throws Exception {\n        testJelly(false);\n    }","advisory":"SECURITY-857"},{"className":"jenkins.security.Security857Test","methodSignature":"jenkins.security.Security857Test.testJellyEscapingDefault:void()","methodSource":"@Issue(\"SECURITY-857\")\n    @Test\n    public void testJellyEscapingDefault() throws Exception {\n        testJelly(null);\n    }","advisory":"SECURITY-857"},{"className":"jenkins.security.SecurityContextExecutorServiceTest","methodSignature":"jenkins.security.SecurityContextExecutorServiceTest.testRunnableAgainstAllContexts:void()","methodSource":"@Test\n    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)\n    public void testRunnableAgainstAllContexts() throws Exception {\n        Runnable r \u003d () -\u003e runnableThreadContext \u003d SecurityContextHolder.getContext();\n        SecurityContextHolder.setContext(systemContext);\n        Future systemResult \u003d wrappedService.submit(r);\n        // Assert the runnable completed successfully\n        assertNull(systemResult.get());\n        // Assert the context inside the runnable thread was set to ACL.SYSTEM2\n        assertEquals(systemContext, runnableThreadContext);\n\n        SecurityContextHolder.setContext(userContext);\n        Future userResult \u003d wrappedService.submit(r);\n        // Assert the runnable completed successfully\n        assertNull(userResult.get());\n        // Assert the context inside the runnable thread was set to the user\u0027s context\n        assertEquals(userContext, runnableThreadContext);\n\n        SecurityContextHolder.setContext(nullContext);\n        Future nullResult \u003d wrappedService.submit(r);\n        // Assert the runnable completed successfully\n        assertNull(nullResult.get());\n        // Assert the context inside the runnable thread was set to the null context\n        assertEquals(nullContext, runnableThreadContext);\n    }"},{"className":"jenkins.security.SecurityContextExecutorServiceTest","methodSignature":"jenkins.security.SecurityContextExecutorServiceTest.testCallableAgainstAllContexts:void()","methodSource":"@Test\n    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)\n    public void testCallableAgainstAllContexts() throws Exception {\n        Callable\u003cSecurityContext\u003e c \u003d () -\u003e SecurityContextHolder.getContext();\n        SecurityContextHolder.setContext(systemContext);\n        Future\u003cSecurityContext\u003e result \u003d wrappedService.submit(c);\n        // Assert the context inside the callable thread was set to ACL.SYSTEM2\n        assertEquals(systemContext, result.get());\n\n        SecurityContextHolder.setContext(userContext);\n        result \u003d wrappedService.submit(c);\n        // Assert the context inside the callable thread was set to the user\u0027s context\n        assertEquals(userContext, result.get());\n\n        SecurityContextHolder.setContext(nullContext);\n        result \u003d wrappedService.submit(c);\n        // Assert the context inside the callable thread was set to the null context\n        assertEquals(nullContext, result.get());\n    }"},{"className":"jenkins.security.SecurityContextExecutorServiceTest","methodSignature":"jenkins.security.SecurityContextExecutorServiceTest.testCallableCollectionAgainstAllContexts:void()","methodSource":"@Test\n    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)\n    public void testCallableCollectionAgainstAllContexts() throws Exception {\n        Collection\u003cCallable\u003cSecurityContext\u003e\u003e callables \u003d new ArrayList\u003c\u003e();\n        Callable\u003cSecurityContext\u003e c \u003d () -\u003e SecurityContextHolder.getContext();\n        callables.add(c);\n        callables.add(c);\n        callables.add(c);\n\n        SecurityContextHolder.setContext(systemContext);\n        Collection\u003cFuture\u003cSecurityContext\u003e\u003e results \u003d wrappedService.invokeAll(callables);\n        for (Future\u003cSecurityContext\u003e result : results) {\n            // Assert each thread context was identical to the initial service context\n            SecurityContext value \u003d result.get();\n            assertEquals(systemContext, value);\n        }\n\n        SecurityContextHolder.setContext(userContext);\n        results \u003d wrappedService.invokeAll(callables);\n        for (Future\u003cSecurityContext\u003e result : results) {\n            // Assert each thread context was identical to the initial service context\n            assertEquals(userContext, result.get());\n        }\n\n        SecurityContextHolder.setContext(nullContext);\n        results \u003d wrappedService.invokeAll(callables);\n        for (Future\u003cSecurityContext\u003e result : results) {\n            // Assert each thread context was identical to the initial service context\n            assertEquals(nullContext, result.get());\n        }\n    }"},{"className":"jenkins.security.SecurityContextExecutorServiceTest","methodSignature":"jenkins.security.SecurityContextExecutorServiceTest.testFailedRunnableResetsContext:void()","methodSource":"@Test\n    @PresetData(PresetData.DataSet.NO_ANONYMOUS_READACCESS)\n    public void testFailedRunnableResetsContext() {\n        Runnable r \u003d () -\u003e {\n            SecurityContextHolder.setContext(nullContext);\n            throw new RuntimeException(\"Simulate a failure\");\n        };\n\n        SecurityContextHolder.setContext(systemContext);\n        try {\n            wrappedService.execute(r);\n        } catch (AssertionError expectedException) {\n            // Assert the current context is once again ACL.SYSTEM2\n            assertEquals(systemContext, SecurityContextHolder.getContext());\n        }\n\n        SecurityContextHolder.setContext(userContext);\n        try {\n            wrappedService.execute(r);\n        } catch (AssertionError expectedException) {\n            // Assert the current context is once again the userContext\n            assertEquals(userContext, SecurityContextHolder.getContext());\n        }\n    }"},{"className":"jenkins.security.seed.UserSeedChangeListenerTest","methodSignature":"jenkins.security.seed.UserSeedChangeListenerTest.onProgrammaticUserSeedChange_listenerTriggered:void()","methodSource":"@Test\n    public void onProgrammaticUserSeedChange_listenerTriggered() {\n        TestUserSeedChangeListener testListener \u003d j.jenkins.getExtensionList(UserSeedChangeListener.class).get(TestUserSeedChangeListener.class);\n\n        String userId \u003d \"alice\";\n        User alice \u003d User.getById(userId, true);\n        assertNull(testListener.lastUserIdReceived);\n\n        UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n        assertNull(testListener.lastUserIdReceived);\n\n        userSeed.renewSeed();\n        assertThat(testListener.lastUserIdReceived, is(userId));\n        assertThat(testListener.userWasNull, is(false));\n    }"},{"className":"jenkins.security.seed.UserSeedChangeListenerTest","methodSignature":"jenkins.security.seed.UserSeedChangeListenerTest.onWebCallUserSeedChange_listenerTriggered:void()","methodSource":"@Test\n    public void onWebCallUserSeedChange_listenerTriggered() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n\n        TestUserSeedChangeListener testListener \u003d j.jenkins.getExtensionList(UserSeedChangeListener.class).get(TestUserSeedChangeListener.class);\n\n        String userId \u003d \"alice\";\n        User alice \u003d User.getById(userId, true);\n        UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        WebRequest webRequest \u003d new WebRequest(\n                new URI(j.getURL() + alice.getUrl() + \"/\" + userSeed.getDescriptor().getDescriptorUrl() + \"/renewSessionSeed\").toURL(),\n                HttpMethod.POST\n        );\n\n        assertNull(testListener.lastUserIdReceived);\n        wc.getPage(webRequest);\n        assertThat(testListener.lastUserIdReceived, is(userId));\n        assertThat(testListener.userWasNull, is(false));\n    }"},{"className":"jenkins.security.seed.UserSeedPropertyRestartTest","methodSignature":"jenkins.security.seed.UserSeedPropertyRestartTest.initialSeedIsSaved:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void initialSeedIsSaved() throws Throwable {\n        AtomicReference\u003cString\u003e initialSeedRef \u003d new AtomicReference\u003c\u003e();\n\n        sessions.then(j -\u003e {\n                j.jenkins.setCrumbIssuer(null);\n                j.jenkins.save();\n\n                User alice \u003d User.getById(\"alice\", true);\n                alice.save();\n                initialSeedRef.set(alice.getProperty(UserSeedProperty.class).getSeed());\n        });\n        sessions.then(j -\u003e {\n                User alice \u003d User.getById(\"alice\", false);\n                String initialSeed \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n                assertEquals(initialSeed, initialSeedRef.get());\n        });\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyRestartTest","methodSignature":"jenkins.security.seed.UserSeedPropertyRestartTest.renewSeedSavesTheChange:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void renewSeedSavesTheChange() throws Throwable {\n        AtomicReference\u003cString\u003e initialSeedRef \u003d new AtomicReference\u003c\u003e();\n        AtomicReference\u003cString\u003e seedRef \u003d new AtomicReference\u003c\u003e();\n\n        sessions.then(j -\u003e {\n                j.jenkins.setCrumbIssuer(null);\n                j.jenkins.save();\n\n                User alice \u003d User.getById(\"alice\", true);\n                alice.save();\n                initialSeedRef.set(alice.getProperty(UserSeedProperty.class).getSeed());\n\n                requestRenewSeedForUser(alice, j);\n\n                seedRef.set(alice.getProperty(UserSeedProperty.class).getSeed());\n                assertNotEquals(initialSeedRef.get(), seedRef.get());\n        });\n        sessions.then(j -\u003e {\n                User alice \u003d User.getById(\"alice\", false);\n                assertNotNull(alice);\n                String currentSeed \u003d alice.getProperty(UserSeedProperty.class).getSeed();\n                assertEquals(currentSeed, seedRef.get());\n        });\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userCreation_implies_userSeedCreation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void userCreation_implies_userSeedCreation() {\n        User alice \u003d User.getById(\"alice\", true);\n        assertNotNull(alice);\n        UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n        assertNotNull(userSeed);\n        assertNotNull(userSeed.getSeed());\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userSeedRenewal_changeTheSeed:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void userSeedRenewal_changeTheSeed() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        Set\u003cString\u003e seeds \u003d new HashSet\u003c\u003e();\n\n        User alice \u003d User.getById(\"alice\", true);\n\n        UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n        seeds.add(userSeed.getSeed());\n\n        int times \u003d 10;\n        for (int i \u003d 1; i \u003c times; i++) {\n            requestRenewSeedForUser(alice);\n            userSeed \u003d alice.getProperty(UserSeedProperty.class);\n            seeds.add(userSeed.getSeed());\n        }\n\n        assertThat(seeds.size(), equalTo(times));\n        assertFalse(seeds.contains(\"\"));\n        assertFalse(seeds.contains(null));\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.initialUserSeedIsAlwaysDifferent:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void initialUserSeedIsAlwaysDifferent() throws Exception {\n        Set\u003cString\u003e seeds \u003d new HashSet\u003c\u003e();\n\n        int times \u003d 10;\n        for (int i \u003d 0; i \u003c times; i++) {\n            User alice \u003d User.getById(\"alice\", true);\n            UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n            seeds.add(userSeed.getSeed());\n            alice.delete();\n        }\n\n        assertThat(seeds.size(), equalTo(times));\n        assertFalse(seeds.contains(\"\"));\n        assertFalse(seeds.contains(null));\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.differentUserHaveDifferentInitialSeeds:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void differentUserHaveDifferentInitialSeeds() throws Exception {\n        Set\u003cString\u003e seeds \u003d new HashSet\u003c\u003e();\n\n        List\u003cString\u003e userIds \u003d Arrays.asList(\"Alice\", \"Bob\", \"Charles\", \"Derek\", \"Edward\");\n        userIds.forEach(userId -\u003e {\n            User user \u003d User.getById(userId, true);\n            UserSeedProperty userSeed \u003d user.getProperty(UserSeedProperty.class);\n            seeds.add(userSeed.getSeed());\n        });\n\n        assertThat(seeds.size(), equalTo(userIds.size()));\n        assertFalse(seeds.contains(\"\"));\n        assertFalse(seeds.contains(null));\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userCreatedInThirdPartyRealm_cannotReconnect_afterSessionInvalidation_andRealmDeletion:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void userCreatedInThirdPartyRealm_cannotReconnect_afterSessionInvalidation_andRealmDeletion() throws Exception {\n        InMemorySecurityRealm realm \u003d new InMemorySecurityRealm();\n        j.jenkins.setSecurityRealm(realm);\n        j.jenkins.setCrumbIssuer(null);\n\n        String ALICE \u003d \"alice\";\n\n        realm.createAccount(ALICE);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(ALICE);\n\n        User alice \u003d User.getById(ALICE, false);\n        assertNotNull(alice);\n        UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n        assertNotNull(userSeed);\n\n        assertUserConnected(wc, ALICE);\n\n        realm.deleteAccount(ALICE);\n\n        // even after the security realm deleted the user, they can still connect, until session invalidation\n        assertUserConnected(wc, ALICE);\n\n        requestRenewSeedForUser(alice);\n\n        assertUserNotConnected(wc, ALICE);\n        assertUserConnected(wc, \"anonymous\");\n\n        FailingHttpStatusCodeException e \u003d assertThrows(\"Alice does not exist any longer and so should not be able to login\", FailingHttpStatusCodeException.class, () -\u003e wc.login(ALICE));\n        assertEquals(401, e.getStatusCode());\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userAfterBeingDeletedInThirdPartyRealm_canStillUseTheirSession_withDisabledSeed:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void userAfterBeingDeletedInThirdPartyRealm_canStillUseTheirSession_withDisabledSeed() throws Exception {\n        boolean currentStatus \u003d UserSeedProperty.DISABLE_USER_SEED;\n        try {\n            UserSeedProperty.DISABLE_USER_SEED \u003d true;\n\n            InMemorySecurityRealm realm \u003d new InMemorySecurityRealm();\n            j.jenkins.setSecurityRealm(realm);\n            j.jenkins.setCrumbIssuer(null);\n\n            String ALICE \u003d \"alice\";\n\n            realm.createAccount(ALICE);\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(ALICE);\n\n            User alice \u003d User.getById(ALICE, false);\n            assertNotNull(alice);\n            UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n            assertNotNull(userSeed);\n\n            assertUserConnected(wc, ALICE);\n\n            realm.deleteAccount(ALICE);\n\n            // even after the security realm deleted the user, they can still connect, until session invalidation\n            assertUserConnected(wc, ALICE);\n\n            // as the feature is disabled, we cannot renew the seed\n            assertThrows(\"The feature should be disabled\", FailingHttpStatusCodeException.class, () -\u003e requestRenewSeedForUser(alice));\n\n            // failed attempt to renew the seed does not have any effect\n            assertUserConnected(wc, ALICE);\n\n            UserSeedProperty userSeedProperty \u003d alice.getProperty(UserSeedProperty.class);\n            userSeedProperty.renewSeed();\n\n            // failed attempt to renew the seed does not have any effect\n            assertUserConnected(wc, ALICE);\n\n            JenkinsRule.WebClient wc2 \u003d j.createWebClient();\n            FailingHttpStatusCodeException e \u003d assertThrows(\"Alice is not longer backed by security realm\", FailingHttpStatusCodeException.class, () -\u003e wc2.login(ALICE));\n            assertEquals(401, e.getStatusCode());\n        } finally {\n            UserSeedProperty.DISABLE_USER_SEED \u003d currentStatus;\n        }\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userCreatedInThirdPartyRealm_canReconnect_afterSessionInvalidation:void()","methodSource":"@Test\n    @Issue(\"SECURITY-901\")\n    public void userCreatedInThirdPartyRealm_canReconnect_afterSessionInvalidation() throws Exception {\n        InMemorySecurityRealm realm \u003d new InMemorySecurityRealm();\n        j.jenkins.setSecurityRealm(realm);\n        j.jenkins.setCrumbIssuer(null);\n\n        String ALICE \u003d \"alice\";\n\n        realm.createAccount(ALICE);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(ALICE);\n\n        User alice \u003d User.getById(ALICE, false);\n        assertNotNull(alice);\n        UserSeedProperty userSeed \u003d alice.getProperty(UserSeedProperty.class);\n        assertNotNull(userSeed);\n\n        assertUserConnected(wc, ALICE);\n\n        requestRenewSeedForUser(alice);\n\n        assertUserNotConnected(wc, ALICE);\n        assertUserConnected(wc, \"anonymous\");\n\n        wc.login(ALICE);\n        assertUserConnected(wc, ALICE);\n    }","advisory":"SECURITY-901"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userSeedSection_isCorrectlyDisplayed:void()","methodSource":"@Test\n    public void userSeedSection_isCorrectlyDisplayed() throws Exception {\n        InMemorySecurityRealm realm \u003d new InMemorySecurityRealm();\n        j.jenkins.setSecurityRealm(realm);\n        j.jenkins.setCrumbIssuer(null);\n\n        String ALICE \u003d \"alice\";\n\n        realm.createAccount(ALICE);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(ALICE);\n\n        User alice \u003d User.getById(ALICE, false);\n        assertNotNull(alice);\n\n        HtmlPage htmlPage \u003d wc.goTo(alice.getUrl() + \"/configure\");\n        htmlPage.getDocumentElement().getOneHtmlElementByAttribute(\"div\", \"class\", \"user-seed-panel\");\n    }"},{"className":"jenkins.security.seed.UserSeedPropertyTest","methodSignature":"jenkins.security.seed.UserSeedPropertyTest.userSeedSection_isCorrectlyHidden_withSpecificSetting:void()","methodSource":"@Test\n    public void userSeedSection_isCorrectlyHidden_withSpecificSetting() throws Exception {\n        boolean currentStatus \u003d UserSeedProperty.HIDE_USER_SEED_SECTION;\n        try {\n            UserSeedProperty.HIDE_USER_SEED_SECTION \u003d true;\n\n            InMemorySecurityRealm realm \u003d new InMemorySecurityRealm();\n            j.jenkins.setSecurityRealm(realm);\n            j.jenkins.setCrumbIssuer(null);\n\n            String ALICE \u003d \"alice\";\n\n            realm.createAccount(ALICE);\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(ALICE);\n\n            User alice \u003d User.getById(ALICE, false);\n            assertNotNull(alice);\n\n            HtmlPage htmlPage \u003d wc.goTo(alice.getUrl() + \"/configure\");\n            assertThrows(\"Seed section should not be displayed\", ElementNotFoundException.class, () -\u003e htmlPage.getDocumentElement().getOneHtmlElementByAttribute(\"div\", \"class\", \"user-seed-panel\"));\n        }\n        finally {\n            UserSeedProperty.HIDE_USER_SEED_SECTION \u003d currentStatus;\n        }\n    }"},{"className":"jenkins.security.seed.UserSeedSecurityListenerTest","methodSignature":"jenkins.security.seed.UserSeedSecurityListenerTest.authenticateSecondaryUserWhileLoggedIn_shouldNotOverwritePrimaryUserSessionSeed:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59107\")\n    public void authenticateSecondaryUserWhileLoggedIn_shouldNotOverwritePrimaryUserSessionSeed() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        AuthenticationManager authenticationManager \u003d j.jenkins.getSecurityRealm().getSecurityComponents().manager2;\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(\"alice\").executeOnServer(() -\u003e {\n            HttpSession session \u003d Stapler.getCurrentRequest().getSession();\n            String existingSeed \u003d (String) session.getAttribute(UserSeedProperty.USER_SESSION_SEED);\n            assertNotNull(existingSeed);\n            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(\"bob\", \"bob\"));\n            String updatedSeed \u003d (String) session.getAttribute(UserSeedProperty.USER_SESSION_SEED);\n            assertEquals(existingSeed, updatedSeed);\n            return null;\n        });\n    }","advisory":"JENKINS-59107"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.authenticationManageException:void()","methodSource":"@Test\n    public void authenticationManageException() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().grant(Jenkins.READ).everywhere().to(\"alice\"));\n        User alice \u003d User.getById(\"alice\", true);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.login(alice.getId());\n\n        wc.setThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.goTo(\"manage\");\n\n        String content \u003d page.getWebResponse().getContentAsString();\n        assertThat(content, containsString(alice.getId() + \" is missing the Overall/Administer permission\"));\n        assertThat(content, not(containsString(\"Caused by\")));\n    }"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.nonexistentAdjunct:void()","methodSource":"@Test\n    public void nonexistentAdjunct() throws Exception {\n        /* This test belongs in Stapler but it\u0027s easy to put it together here.\n           This test is based upon Stapler throwing an exception for this broken request.\n           If Stapler is improved to better handle this error, this test may erroneously fail. */\n\n        String relativePath \u003d \"adjuncts/40331c1bldu3i%3b//\u0027%3b//\\\"%3b//%25\u003e%3f\u003euezm3\u003cscript\u003ealert(1)\u003c/script\u003efoo/org/kohsuke/stapler/jquery/jquery.full.js\";\n        String detailString \u003d \"AdjunctManager.doDynamic\";\n        SuspiciousRequestFilter.allowSemicolonsInPath \u003d true;\n        checkSuppressedStack(relativePath, detailString);\n        SuspiciousRequestFilter.allowSemicolonsInPath \u003d false;\n    }"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.nonexistentAdjunctShowsTrace:void()","methodSource":"@Test\n    public void nonexistentAdjunctShowsTrace() throws Exception {\n        /* This test belongs in Stapler but it\u0027s easy to put it together here.\n           This test is based upon Stapler throwing an exception for this broken request.\n           If Stapler is improved to better handle this error, this test may erroneously fail. */\n        String relativePath \u003d \"adjuncts/40331c1bldu3i%3b//\u0027%3b//\\\"%3b//%25\u003e%3f\u003euezm3\u003cscript\u003ealert(1)\u003c/script\u003efoo/org/kohsuke/stapler/jquery/jquery.full.js\";\n        String detailString \u003d \"AdjunctManager.doDynamic\";\n        SuspiciousRequestFilter.allowSemicolonsInPath \u003d true;\n        checkDisplayedStackTrace(relativePath, detailString);\n        SuspiciousRequestFilter.allowSemicolonsInPath \u003d false;\n    }"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.exception:void()","methodSource":"@Test\n    public void exception() throws Exception {\n        /* This test is based upon an incomplete / incorrect project implementation\n           throwing an uncaught exception.\n           If Jenkins is improved to better handle this error, this test may erroneously fail. */\n        FreeStyleProject projectError \u003d createBrokenProject();\n\n        String relativePath \u003d \"job/\" + projectError.getName() + \"/configure\";\n        String detailString \u003d \"JellyTagException\";\n        checkSuppressedStack(relativePath, detailString);\n    }"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.exceptionShowsTrace:void()","methodSource":"@Test\n    public void exceptionShowsTrace() throws Exception {\n        /* This test is based upon an incomplete / incorrect project implementation\n           throwing an uncaught exception.\n           If Jenkins is improved to better handle this error, this test may erroneously fail. */\n        FreeStyleProject projectError \u003d createBrokenProject();\n\n        String relativePath \u003d \"job/\" + projectError.getName() + \"/configure\";\n        String detailString \u003d \"JellyTagException\";\n        checkDisplayedStackTrace(relativePath, detailString);\n    }"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.exceptionEndpoint:void()","methodSource":"@Test\n    public void exceptionEndpoint() throws Exception {\n        /* This test is based upon a testing endpoint that really shouldn\u0027t exist in production code.\n           If Jenkins is improved to eliminate this endpoint, this test may erroneously fail. */\n        String relativePath \u003d \"exception\";\n        String detailString \u003d \"Jenkins.doException\";\n        checkSuppressedStack(relativePath, detailString);\n    }"},{"className":"jenkins.security.StackTraceSuppressionTest","methodSignature":"jenkins.security.StackTraceSuppressionTest.exceptionEndpointShowsTrace:void()","methodSource":"@Test\n    public void exceptionEndpointShowsTrace() throws Exception {\n        /* This test is based upon a testing endpoint that really shouldn\u0027t exist in production code.\n           If Jenkins is improved to eliminate this endpoint, this test may erroneously fail. */\n        String relativePath \u003d \"exception\";\n        String detailString \u003d \"Jenkins.doException\";\n        checkDisplayedStackTrace(relativePath, detailString);\n    }"},{"className":"jenkins.security.stapler.CustomRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.CustomRoutingDecisionProviderTest.customRoutingWhitelistProvider:void()","methodSource":"@Test\n    public void customRoutingWhitelistProvider() throws Exception {\n        Page okPage \u003d j.createWebClient().goTo(\"custom/legitGetter\", null);\n        assertThat(okPage.getWebResponse().getStatusCode(), is(200));\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        Page errorPage \u003d wc.goTo(\"custom/legitxxxGetter\", null);\n        assertThat(errorPage.getWebResponse().getStatusCode(), is(404));\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testProtectedMethodDispatch:void()","methodSource":"@Test\n    public void testProtectedMethodDispatch() throws Exception {\n        try {\n            wc.goTo(\"testAccessModifierUrl/public/value\", null);\n        } catch (FailingHttpStatusCodeException e) {\n            throw new AssertionError(\"should have access to a public method\", e);\n        }\n        FailingHttpStatusCodeException x \u003d assertThrows(\"should not have allowed protected access\", FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"testAccessModifierUrl/protected/value\", null));\n        assertEquals(HttpServletResponse.SC_NOT_FOUND, x.getStatusCode());\n        x \u003d assertThrows(\"should not have allowed internal access\", FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"testAccessModifierUrl/internal/value\", null));\n        assertEquals(HttpServletResponse.SC_NOT_FOUND, x.getStatusCode());\n        x \u003d assertThrows(\"should not have allowed private access\", FailingHttpStatusCodeException.class, () -\u003e wc.goTo(\"testAccessModifierUrl/private/value\", null));\n        assertEquals(HttpServletResponse.SC_NOT_FOUND, x.getStatusCode());\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_staticWithRequest:void()","methodSource":"@Test\n    public void testMethodSignatureOk_staticWithRequest() throws Exception {\n        assertReachable(\"testNewRulesOk/staticWithRequest/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withRequest:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withRequest() throws Exception {\n        assertReachable(\"testNewRulesOk/withRequest/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withRequestAndReturnString:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withRequestAndReturnString() throws Exception {\n        assertReachable(\"testNewRulesOk/withRequestAndReturnString/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withHttpRequest:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withHttpRequest() throws Exception {\n        assertReachable(\"testNewRulesOk/withHttpRequest/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withHttpResponse:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withHttpResponse() throws Exception {\n        assertReachable(\"testNewRulesOk/withHttpResponse/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withResponse:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withResponse() throws Exception {\n        assertReachable(\"testNewRulesOk/withResponse/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withThrowHttpResponseException:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withThrowHttpResponseException() throws Exception {\n        assertReachable(\"testNewRulesOk/withThrowHttpResponseException/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withThrowHttpResponseExceptionChild:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withThrowHttpResponseExceptionChild() throws Exception {\n        assertReachable(\"testNewRulesOk/withThrowHttpResponseExceptionChild/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withThrowExceptionImplementingOnlyHttpResponse:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withThrowExceptionImplementingOnlyHttpResponse() throws Exception {\n        assertReachable(\"testNewRulesOk/withThrowExceptionImplementingOnlyHttpResponse/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withThrowOtherException:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withThrowOtherException() throws Exception {\n        assertNotReachable(\"testNewRulesOk/withThrowOtherException/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withReturnHttpResponse:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withReturnHttpResponse() throws Exception {\n        assertReachable(\"testNewRulesOk/withReturnHttpResponse/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testMethodSignatureOk_withReturnHttpResponseChild:void()","methodSource":"@Test\n    public void testMethodSignatureOk_withReturnHttpResponseChild() throws Exception {\n        assertReachable(\"testNewRulesOk/withReturnHttpResponseChild/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_webMethodUrl:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_webMethodUrl() throws Exception {\n        assertReachable(\"testNewRulesOk/webMethodUrl/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_webMethodUrl2:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_webMethodUrl2() throws Exception {\n        assertReachable(\"testNewRulesOk/webMethodUrl2/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedGet:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedGet() throws Exception {\n        assertReachable(\"testNewRulesOk/annotatedGet/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedPost:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedPost() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedPost/\"));\n        settings.setHttpMethod(HttpMethod.POST);\n        settings.setRequestBody(\"\");\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedPut:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedPut() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedPut/\"));\n        settings.setHttpMethod(HttpMethod.PUT);\n        settings.setRequestBody(\"\");\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedDelete:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedDelete() throws Exception {\n        assertReachable(\"testNewRulesOk/annotatedDelete/\", HttpMethod.DELETE);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedRequirePost:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedRequirePost() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedRequirePost/\"));\n        settings.setHttpMethod(HttpMethod.POST);\n        settings.setRequestBody(\"\");\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedJavaScriptScriptMethod:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedJavaScriptScriptMethod() throws Exception {\n        webApp.setCrumbIssuer(new CrumbIssuer() {\n            @Override\n            public String issueCrumb(StaplerRequest request) {\n                return \"test\";\n            }\n\n            @Override\n            public void validateCrumb(StaplerRequest request, String submittedCrumb) {\n                // no exception thrown \u003d validated\n            }\n        });\n\n\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedJavaScriptScriptMethod/\"));\n        settings.setAdditionalHeader(\"Content-Type\", \"application/x-stapler-method-invocation\");\n        settings.setHttpMethod(HttpMethod.POST);\n        settings.setRequestBody(JSONArray.fromObject(Collections.emptyList()).toString());\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedResponseSuccess:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedResponseSuccess() throws Exception {\n        assertReachable(\"testNewRulesOk/annotatedResponseSuccess/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedJsonResponse:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedJsonResponse() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedJsonResponse/\"));\n        settings.setHttpMethod(HttpMethod.POST);\n        settings.setRequestBody(JSONObject.fromObject(Collections.emptyMap()).toString());\n        Page page \u003d wc.getPage(settings);\n        assertEquals(200, page.getWebResponse().getStatusCode());\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedMethodOk_annotatedLimitedTo:void()","methodSource":"@Test\n    public void testAnnotatedMethodOk_annotatedLimitedTo() {\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e wc.getPage(new URL(j.getURL(), \"testNewRulesOk/annotatedLimitedTo/\")));\n        assertEquals(500, e.getStatusCode());\n        assertTrue(e.getResponse().getContentAsString().contains(\"Needs to be in role\"));\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedParameterOk_annotatedParamQueryParameter:void()","methodSource":"@Test\n    public void testAnnotatedParameterOk_annotatedParamQueryParameter() throws Exception {\n        // parameter is optional by default\n        assertReachable(\"testNewRulesOk/annotatedParamQueryParameter/\");\n        assertReachable(\"testNewRulesOk/annotatedParamQueryParameter/?value\u003dtest\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedParameterOk_annotatedParamAncestorInPath:void()","methodSource":"@Test\n    public void testAnnotatedParameterOk_annotatedParamAncestorInPath() throws Exception {\n        assertReachable(\"testNewRulesOk/annotatedParamAncestorInPath/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedParameterOk_annotatedParamHeader:void()","methodSource":"@Test\n    public void testAnnotatedParameterOk_annotatedParamHeader() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedParamHeader/\"));\n        settings.setAdditionalHeader(\"test-header\", \"TestBrowser\");\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedParameterOk_annotatedParamJsonBody:void()","methodSource":"@Test\n    public void testAnnotatedParameterOk_annotatedParamJsonBody() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedParamJsonBody/\"));\n        // WebClient forces us to use POST to have the possibility to send requestBody\n        settings.setHttpMethod(HttpMethod.POST);\n        settings.setAdditionalHeader(\"Content-Type\", \"application/json\");\n        settings.setRequestBody(JSONObject.fromObject(Map.of(\"name\", \"Test\")).toString());\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testAnnotatedParameterOk_annotatedParamSubmittedForm:void()","methodSource":"@Test\n    public void testAnnotatedParameterOk_annotatedParamSubmittedForm() throws Exception {\n        WebRequest settings \u003d new WebRequest(new URL(j.getURL(), \"testNewRulesOk/annotatedParamSubmittedForm/\"));\n        settings.setHttpMethod(HttpMethod.POST);\n\n        settings.setRequestParameters(List.of(\n                new NameValuePair(\n                        \"json\",\n                        JSONObject.fromObject(Map.of(\"name\", \"Test\")).toString()\n                )\n        ));\n        assertReachableWithSettings(settings);\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testOk__CallMeBecauseOfMyUnderscore:void()","methodSource":"@Test\n    public void testOk__CallMeBecauseOfMyUnderscore() throws Exception {\n        assertReachable(\"testNewRulesOk/_CallMeBecauseOfMyUnderscore/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testOk_$CallMeBecauseOfMyDollar:void()","methodSource":"@Test\n    public void testOk_$CallMeBecauseOfMyDollar() throws Exception {\n        assertReachable(\"testNewRulesOk/$CallMeBecauseOfMyDollar/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testSpecialCasesOk:void()","methodSource":"@Test\n    public void testSpecialCasesOk() throws Exception {\n        assertReachable(\"testNewRulesOkDynamic/anyString/\");\n        assertReachable(\"testNewRulesOkIndex/\");\n        assertReachable(\"testNewRulesOkDoIndex/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOk_ntCallMeBecauseOfMyDont:void()","methodSource":"@Test\n    public void testNotOk_ntCallMeBecauseOfMyDont() throws Exception {\n        assertNotReachable(\"testNewRulesNotOk/ntCallMeBecauseOfMyDont/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOk_something:void()","methodSource":"@Test\n    public void testNotOk_something() throws Exception {\n        assertNotReachable(\"testNewRulesNotOk/something/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOk_returnString:void()","methodSource":"@Test\n    public void testNotOk_returnString() throws Exception {\n        assertNotReachable(\"testNewRulesNotOk/returnString/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOk_returnObject:void()","methodSource":"@Test\n    public void testNotOk_returnObject() throws Exception {\n        assertNotReachable(\"testNewRulesNotOk/returnObject/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOkSpecialCases_withServletRequest:void()","methodSource":"@Test\n    public void testNotOkSpecialCases_withServletRequest() throws Exception {\n        assertNotReachable(\"testNewRulesNotOkSpecialCases/withServletRequest/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOkSpecialCases_withServletResponse:void()","methodSource":"@Test\n    public void testNotOkSpecialCases_withServletResponse() throws Exception {\n        assertNotReachable(\"testNewRulesNotOkSpecialCases/withServletResponse/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOkSpecialCases_withRequestImpl:void()","methodSource":"@Test\n    public void testNotOkSpecialCases_withRequestImpl() throws Exception {\n        assertNotReachable(\"testNewRulesNotOkSpecialCases/withRequestImpl/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOkSpecialCases_withResponseImpl:void()","methodSource":"@Test\n    public void testNotOkSpecialCases_withResponseImpl() throws Exception {\n        assertNotReachable(\"testNewRulesNotOkSpecialCases/withResponseImpl/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testNotOkSpecialCases_annotatedResponseSuccess:void()","methodSource":"@Test\n    public void testNotOkSpecialCases_annotatedResponseSuccess() throws Exception {\n        assertNotReachable(\"testNewRulesNotOkSpecialCases/annotatedResponseSuccess/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testClassInheritance_notAnnotatedAtAll:void()","methodSource":"@Test\n    public void testClassInheritance_notAnnotatedAtAll() throws Exception {\n        assertNotReachable(\"aBCase/notAnnotatedAtAll/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testClassInheritance_onlyAnnotatedInA:void()","methodSource":"@Test\n    public void testClassInheritance_onlyAnnotatedInA() throws Exception {\n        assertReachable(\"aBCase/onlyAnnotatedInA/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testClassInheritance_onlyAnnotatedInB:void()","methodSource":"@Test\n    public void testClassInheritance_onlyAnnotatedInB() throws Exception {\n        assertReachable(\"aBCase/onlyAnnotatedInB/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testClassInheritance_onlyAnnotatedInANotOverrided:void()","methodSource":"@Test\n    public void testClassInheritance_onlyAnnotatedInANotOverrided() throws Exception {\n        assertNotReachable(\"aBCase/onlyAnnotatedInANotOverrided/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testClassInheritance_annotatedButDifferent1:void()","methodSource":"@Test\n    public void testClassInheritance_annotatedButDifferent1() throws Exception {\n        // only the last webMethod annotation is used\n        //TODO it breaks the Liskov substitutability\n//        assertReachable(\"b/annotatedButDifferent1/\");\n        assertNotReachable(\"aBCase/annotatedButDifferent1/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testClassInheritance_annotatedButDifferent2:void()","methodSource":"@Test\n    public void testClassInheritance_annotatedButDifferent2() throws Exception {\n        assertReachable(\"aBCase/annotatedButDifferent2/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testInterfaceImplementation_notAnnotated:void()","methodSource":"@Test\n    public void testInterfaceImplementation_notAnnotated() throws Exception {\n        assertNotReachable(\"iJCase/notAnnotated/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testInterfaceImplementation_annotatedBoth:void()","methodSource":"@Test\n    public void testInterfaceImplementation_annotatedBoth() throws Exception {\n        assertReachable(\"iJCase/annotatedBoth/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testInterfaceImplementation_annotatedOnlyI:void()","methodSource":"@Test\n    public void testInterfaceImplementation_annotatedOnlyI() throws Exception {\n        assertReachable(\"iJCase/annotatedOnlyI/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testInterfaceImplementation_annotatedOnlyJ:void()","methodSource":"@Test\n    public void testInterfaceImplementation_annotatedOnlyJ() throws Exception {\n        assertReachable(\"iJCase/annotatedOnlyJ/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testInterfaceImplementation_annotatedButDifferent1:void()","methodSource":"@Test\n    public void testInterfaceImplementation_annotatedButDifferent1() throws Exception {\n        // only the last webMethod annotation is used\n        //TODO it breaks the Liskov substitutability\n        // assertReachable(\"j/annotatedButDifferent1/\");\n        assertNotReachable(\"iJCase/annotatedButDifferent1/\");\n    }"},{"className":"jenkins.security.stapler.DoActionFilterTest","methodSignature":"jenkins.security.stapler.DoActionFilterTest.testInterfaceImplementation_annotatedButDifferent2:void()","methodSource":"@Test\n    public void testInterfaceImplementation_annotatedButDifferent2() throws Exception {\n        assertReachable(\"iJCase/annotatedButDifferent2/\");\n    }"},{"className":"jenkins.security.stapler.DynamicTest","methodSignature":"jenkins.security.stapler.DynamicTest.testRequestsDispatchedToEligibleDynamic:void()","methodSource":"@Test\n    public void testRequestsDispatchedToEligibleDynamic() {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        Stream.of(\"whatever\", \"displayName\", \"iconFileName\", \"urlName\", \"response1\", \"response2\").forEach(url -\u003e\n        {\n            try {\n                assertThat(wc.goTo(\"root/\" + url).getWebResponse().getContentAsString(), containsString(url));\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            }\n        });\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnJavaPlatformObject_string:void()","methodSource":"@Test\n    public void testWithReturnJavaPlatformObject_string() throws Exception {\n        assertNotReachable(\"testWithReturnJavaPlatformObject/string/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnJavaPlatformObject_objectString:void()","methodSource":"@Test\n    public void testWithReturnJavaPlatformObject_objectString() throws Exception {\n        assertNotReachable(\"testWithReturnJavaPlatformObject/objectString/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnJavaPlatformObject_objectCustom:void()","methodSource":"@Test\n    public void testWithReturnJavaPlatformObject_objectCustom() throws Exception {\n        assertNotReachable(\"testWithReturnJavaPlatformObject/objectCustom/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnJavaPlatformObject_point:void()","methodSource":"@Test\n    public void testWithReturnJavaPlatformObject_point() throws Exception {\n        assertNotReachable(\"testWithReturnJavaPlatformObject/point/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnJavaPlatformObject_pointCustomChild:void()","methodSource":"@Test\n    public void testWithReturnJavaPlatformObject_pointCustomChild() throws Exception {\n        assertNotReachable(\"testWithReturnJavaPlatformObject/pointCustomChild/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnJavaPlatformObject_pointWithListener:void()","methodSource":"@Test\n    public void testWithReturnJavaPlatformObject_pointWithListener() throws Exception {\n        TestWithReturnJavaPlatformObject.called \u003d false;\n        assertFalse(TestWithReturnJavaPlatformObject.called);\n        // could potentially trigger some side-effects\n        assertNotReachable(\"testWithReturnJavaPlatformObject/pointWithListener/x/\");\n        assertFalse(TestWithReturnJavaPlatformObject.called);\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_list:void()","methodSource":"@Test\n    public void testWithReturnMultiple_list() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/list/\");\n        assertNotReachable(\"testWithReturnMultiple/list/0/\");\n        assertNotReachable(\"testWithReturnMultiple/list/1/\");\n        assertNotReachable(\"testWithReturnMultiple/list/2/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_listOfPoint:void()","methodSource":"@Test\n    public void testWithReturnMultiple_listOfPoint() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/listOfPoint/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfPoint/0/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfPoint/1/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_listOfList:void()","methodSource":"@Test\n    public void testWithReturnMultiple_listOfList() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/listOfList/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfList/0/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfList/1/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfList/0/0/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfList/0/1/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfList/0/2/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_array:void()","methodSource":"@Test\n    public void testWithReturnMultiple_array() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/array/\");\n        assertReachable(\"testWithReturnMultiple/array/0/\");\n        assertReachable(\"testWithReturnMultiple/array/1/\");\n        assertNotReachable(\"testWithReturnMultiple/array/2/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_arrayOfPoint:void()","methodSource":"@Test\n    public void testWithReturnMultiple_arrayOfPoint() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/arrayOfPoint/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfPoint/0/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfPoint/1/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_arrayOfArray:void()","methodSource":"@Test\n    public void testWithReturnMultiple_arrayOfArray() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/arrayOfArray/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfArray/0/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfArray/1/\");\n        assertReachable(\"testWithReturnMultiple/arrayOfArray/0/0/\");\n        assertReachable(\"testWithReturnMultiple/arrayOfArray/0/1/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfArray/0/2/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_arrayOfList:void()","methodSource":"@Test\n    public void testWithReturnMultiple_arrayOfList() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/arrayOfList/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfList/0/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfList/1/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfList/0/0/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfList/0/1/\");\n        assertNotReachable(\"testWithReturnMultiple/arrayOfList/0/2/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_listOfArray:void()","methodSource":"@Test\n    public void testWithReturnMultiple_listOfArray() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/listOfArray/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfArray/0/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfArray/1/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfArray/0/0/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfArray/0/1/\");\n        assertNotReachable(\"testWithReturnMultiple/listOfArray/0/2/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnMultiple_map:void()","methodSource":"@Test\n    public void testWithReturnMultiple_map() throws Exception {\n        assertNotReachable(\"testWithReturnMultiple/map/\");\n        assertNotReachable(\"testWithReturnMultiple/map/a/\");\n        assertNotReachable(\"testWithReturnMultiple/map/b/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnCoreObject_people:void()","methodSource":"@Test\n    public void testWithReturnCoreObject_people() throws Exception {\n        assertReachableWithoutOk(\"testWithReturnCoreObject/people/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTopLevelItemIsLegal:void()","methodSource":"@Test\n    public void testTopLevelItemIsLegal() throws Exception {\n        TopLevelItem item \u003d j.createFreeStyleProject();\n        assertReachableWithoutOk(\"job/\" + item.getName());\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnPluginObject_folder:void()","methodSource":"@Test\n    public void testWithReturnPluginObject_folder() throws Exception {\n        // the search part is just to get something from the call\n        assertReachableWithoutOk(\"testWithReturnPluginObject/folder/search/suggest/?query\u003dxxx\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnThirdPartyObject_base32:void()","methodSource":"@Test\n    public void testWithReturnThirdPartyObject_base32() throws Exception {\n        assertNotReachable(\"testWithReturnThirdPartyObject/base32/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnThirdPartyObject_encoder:void()","methodSource":"@Test\n    public void testWithReturnThirdPartyObject_encoder() throws Exception {\n        assertNotReachable(\"testWithReturnThirdPartyObject/encoder/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnThirdPartyObject_encoderCustomChild:void()","methodSource":"@Test\n    public void testWithReturnThirdPartyObject_encoderCustomChild() throws Exception {\n        assertNotReachable(\"testWithReturnThirdPartyObject/encoderCustomChild/\");\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_integer:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_integer() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/integer/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_integerObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_integerObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/integerObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_long:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_long() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/long/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_longObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_longObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/longObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_short:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_short() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/short/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_shortObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_shortObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/shortObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_byte:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_byte() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/byte/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_byteObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_byteObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/byteObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_boolean:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_boolean() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/boolean/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_booleanObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_booleanObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/booleanObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_char:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_char() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/char/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_charObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_charObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/charObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_float:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_float() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/float/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_floatObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_floatObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/floatObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_double:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_double() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/double/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_doubleObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_doubleObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/doubleObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_void:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_void() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/void/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testTestWithReturnPrimitives_voidObject:void()","methodSource":"@Test\n    public void testTestWithReturnPrimitives_voidObject() throws Exception {\n        assertNotReachable(\"testWithReturnPrimitives/voidObject/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.GetterMethodFilterTest","methodSignature":"jenkins.security.stapler.GetterMethodFilterTest.testWithReturnWithinStaplerScope_renderable:void()","methodSource":"@Test\n    public void testWithReturnWithinStaplerScope_renderable() throws Exception {\n        assertReachable(\"testWithReturnWithinStaplerScope/renderable/\");\n        assertReachable(\"testWithReturnWithinStaplerScope/renderable/valid/\");\n    }"},{"className":"jenkins.security.stapler.JenkinsSupportAnnotationsTest","methodSignature":"jenkins.security.stapler.JenkinsSupportAnnotationsTest.testPluginWithAnnotations:void()","methodSource":"@Test\n    @WithPlugin(\"annotations-test.hpi\")\n    public void testPluginWithAnnotations() throws Exception {\n        assumeFalse(\"TODO: Implement this test on Windows\", Functions.isWindows());\n        // test fails if TypedFilter ignores @StaplerDispatchable\n        j.createWebClient().goTo(\"annotationsTest/whatever\", \"\");\n\n        // test fails if TypedFilter ignores @StaplerAccessibleType\n        j.createWebClient().goTo(\"annotationsTest/transit/response\", \"\");\n    }"},{"className":"jenkins.security.stapler.PreventRoutingTest","methodSignature":"jenkins.security.stapler.PreventRoutingTest.getTargetNull_isNotRoutable:void()","methodSource":"@Test\n    // TODO un-ignore once we use a Stapler release with the fix for this\n    @Ignore(\"Does not behave as intended before https://github.com/stapler/stapler/pull/149\")\n    public void getTargetNull_isNotRoutable() throws Exception {\n        assertNotReachable(\"target-null/legitRoutable\");\n    }"},{"className":"jenkins.security.stapler.PreventRoutingTest","methodSignature":"jenkins.security.stapler.PreventRoutingTest.getTargetNewObject_isNotRoutable:void()","methodSource":"@Test\n    public void getTargetNewObject_isNotRoutable() throws Exception {\n        assertNotReachable(\"target-new-object/legitRoutable\");\n    }"},{"className":"jenkins.security.stapler.PreventRoutingTest","methodSignature":"jenkins.security.stapler.PreventRoutingTest.regularGetter_notARequest:void()","methodSource":"@Test\n    public void regularGetter_notARequest() throws Exception {\n        assertReachable(\"not-a-request/legitRoutable2\");\n        assertNotReachable(\"not-a-request/legitRoutable\");\n    }"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.asyncDoRun:void()","methodSource":"@Test\n    @Issue(\"SECURITY-391\")\n    public void asyncDoRun() throws Exception {\n        j.createWebClient().assertFails(\"extensionList/\" + AsyncPeriodicWork.class.getName() + \"/\" + Work.class.getName() + \"/run\", HttpURLConnection.HTTP_NOT_FOUND);\n        Thread.sleep(1000); // give the thread a moment to finish\n        assertFalse(\"should never have run\", ran);\n    }","advisory":"SECURITY-391"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.triggerCronDoRun:void()","methodSource":"@Test\n    @Issue(\"SECURITY-397\")\n    // particular case of SECURITY-391\n    public void triggerCronDoRun() throws Exception {\n        j.createWebClient().assertFails(\"extensionList/\" + PeriodicWork.class.getName() + \"/\" + Trigger.Cron.class.getName() + \"/run\", HttpURLConnection.HTTP_NOT_FOUND);\n        assertRequestWasBlockedAndResetFlag();\n    }","advisory":"SECURITY-397"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.avoidDangerousAccessToSession:void()","methodSource":"@Test\n    @Issue(\"SECURITY-404\")\n    public void avoidDangerousAccessToSession() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(\n                new MockAuthorizationStrategy()\n                        .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\")\n                        .grant(Jenkins.READ).everywhere().to(\"user\")\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        wc.login(\"admin\");\n\n        JenkinsRule.WebClient wc2 \u003d j.createWebClient();\n        wc2.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        wc2.login(\"user\");\n\n        Page page;\n\n        page \u003d wc.goTo(\"whoAmI/api/xml/\", null);\n        System.out.println(page.getWebResponse().getContentAsString());\n        assertThat(page.getWebResponse().getContentAsString(), containsString(\"\u003canonymous\u003efalse\u003c/anonymous\u003e\"));\n\n        page \u003d wc2.goTo(\"whoAmI/api/xml/\", null);\n        System.out.println(page.getWebResponse().getContentAsString());\n        assertThat(page.getWebResponse().getContentAsString(), containsString(\"\u003canonymous\u003efalse\u003c/anonymous\u003e\"));\n\n        assertRequestWasNotBlocked();\n\n        // the doXxx fix prevents the doStop to be executed\n        // and in addition the getXxx fix prevents the getContextHandler to be used as navigation\n\n        // the first beans/0 return the HashedSession\n        // the second beans/0 return the HashSessionManager\n        page \u003d wc2.goTo(\"adjuncts/\u003crandomString\u003e/webApp/context/contextHandler/beans/0/beans/0/stop\", null);\n        // other possible path\n        // page \u003d wc.goTo(\"adjuncts/\u003crandomString\u003e/webApp/someStapler/currentRequest/session/servletContext/contextHandler/beans/0/beans/0/stop\", null);\n        // page \u003d wc.goTo(\"adjuncts/\u003crandomString\u003e/webApp/someStapler/currentRequest/servletContext/contextHandler/beans/0/beans/0/stop\", null);\n\n//        assertEquals(404, page.getWebResponse().getStatusCode());\n//        assertRequestWasBlockedAndResetFlag();\n        // getWebApp is now forbidden\n        assertEquals(403, page.getWebResponse().getStatusCode());\n\n        // if the call was successful, both are disconnected and anonymous would have been true\n\n        page \u003d wc.goTo(\"whoAmI/api/xml/\", null);\n        System.out.println(page.getWebResponse().getContentAsString());\n        assertThat(page.getWebResponse().getContentAsString(), containsString(\"\u003canonymous\u003efalse\u003c/anonymous\u003e\"));\n\n        page \u003d wc2.goTo(\"whoAmI/api/xml/\", null);\n        System.out.println(page.getWebResponse().getContentAsString());\n        assertThat(page.getWebResponse().getContentAsString(), containsString(\"\u003canonymous\u003efalse\u003c/anonymous\u003e\"));\n\n        assertRequestWasNotBlocked();\n\n        // similar approach but different impact:\n        // can put null into desired session key (no impact yet)\n        // session impl. is HashedSession\n        // page \u003d wc.goTo(\"adjuncts/\u003crandomString\u003e/webApp/someStapler/currentRequest/session/putOrRemove/ACEGI_SECURITY_CONTEXT/\", null);\n    }","advisory":"SECURITY-404"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.ensureDoStopStillReachable:void()","methodSource":"@Test\n    @Issue(\"SECURITY-404\")\n    public void ensureDoStopStillReachable() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        // used as a reference passed to the build step\n        AtomicInteger atomicResult \u003d new AtomicInteger(0);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        final Semaphore semaphore \u003d new Semaphore(0);\n\n        p.getBuildersList().add(new SemaphoredBuilder(semaphore, atomicResult));\n\n        // to be sure to reach the correct one\n        j.jenkins.setNumExecutors(1);\n\n        { // preliminary test, calling the stop method without any executor results in 404\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"computers/0/executors/0/stop\").toURL(), HttpMethod.POST);\n            Page page \u003d wc.getPage(request);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n        }\n\n        { // first try, we let the build finishes normally\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            // let the build finishes\n            semaphore.release(1);\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n            assertEquals(1, atomicResult.get());\n        }\n\n        { // second try, we need to reach the stop method in executor to interrupt the build\n            atomicResult.set(0);\n            assertEquals(0, atomicResult.get());\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            FreeStyleBuild build \u003d futureBuild.waitForStart();\n\n            // we need to wait until the SemaphoreBuilder is running (blocked) otherwise the job is ABORTED not FAILURE\n            j.waitForMessage(SemaphoredBuilder.START_MESSAGE, build);\n\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"computers/0/executors/0/stop\").toURL(), HttpMethod.POST);\n            Page page \u003d wc.getPage(request);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            j.assertBuildStatus(Result.FAILURE, futureBuild);\n            assertEquals(3, atomicResult.get());\n        }\n    }","advisory":"SECURITY-404"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.ensureDoStopBuildWorks:void()","methodSource":"@Test\n    @Issue(\"JENKINS-59656\")\n    public void ensureDoStopBuildWorks() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false); // we expect 404\n        wc.getOptions().setPrintContentOnFailingStatusCode(false); // be less verbose\n\n        // gives access to the build result code\n        final AtomicInteger atomicResult \u003d new AtomicInteger(0);\n        // blocks execution of the build step\n        final Semaphore semaphore \u003d new Semaphore(0);\n        // the test project with a semaphored build step\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new SemaphoredBuilder(semaphore, atomicResult));\n\n        // to be sure to reach the correct one\n        j.jenkins.setNumExecutors(1);\n\n        { // preliminary test, calling stopBuild without any executor results in 404\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"computers/0/executors/0/stopBuild\").toURL(), HttpMethod.POST);\n            Page page \u003d wc.getPage(request);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n        }\n\n        { // first try, we let the build finishes normally\n            // reset semaphore and result code\n            semaphore.drainPermits();\n            atomicResult.set(0);\n\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            // let the build finishes\n            semaphore.release(1);\n\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n            assertEquals(1, atomicResult.get());\n        }\n\n        { // second try, calling stopBuild without parameter interrupts the build (same as calling stop)\n            // reset semaphore and result code\n            semaphore.drainPermits();\n            atomicResult.set(0);\n\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"computers/0/executors/0/stopBuild\").toURL(), HttpMethod.POST);\n            Page page \u003d wc.getPage(request);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            // let the build finish quickly (if not interrupted already)\n            semaphore.release(1);\n\n            j.assertBuildStatus(Result.FAILURE, futureBuild);\n            assertEquals(3, atomicResult.get()); // interrupted\n        }\n\n        { // third try, calling stopBuild with the right parameter interrupts the build\n            // reset semaphore and result code\n            semaphore.drainPermits();\n            atomicResult.set(0);\n\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            FreeStyleBuild build \u003d futureBuild.waitForStart();\n            String runExtId \u003d URLEncoder.encode(build.getExternalizableId(), StandardCharsets.UTF_8);\n\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"computers/0/executors/0/stopBuild?runExtId\u003d\" + runExtId).toURL(), HttpMethod.POST);\n            Page page \u003d wc.getPage(request);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            // let the build finish quickly (if not interrupted already)\n            semaphore.release(1);\n\n            j.assertBuildStatus(Result.FAILURE, futureBuild);\n            assertEquals(3, atomicResult.get()); // interrupted\n        }\n\n        { // fourth try, calling stopBuild with a parameter not matching build id doesn\u0027t interrupt the build\n            // reset semaphore and result code\n            semaphore.drainPermits();\n            atomicResult.set(0);\n\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"computers/0/executors/0/stopBuild?runExtId\u003dwhatever\").toURL(), HttpMethod.POST);\n            Page page \u003d wc.getPage(request);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            // let the build finishes\n            semaphore.release(1);\n\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n            assertEquals(1, atomicResult.get());\n        }\n    }","advisory":"JENKINS-59656"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.anonCannotReadTextConsole:void()","methodSource":"@Test\n    @Issue(\"SECURITY-404\")\n    public void anonCannotReadTextConsole() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        FullControlOnceLoggedInAuthorizationStrategy authorizationStrategy \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        authorizationStrategy.setAllowAnonymousRead(false);\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        Semaphore semaphore \u003d new Semaphore(0);\n\n        p.getBuildersList().add(new SemaphoredBuilder(semaphore, new AtomicInteger(0)));\n\n        // to be sure to reach the correct one\n        j.jenkins.setNumExecutors(1);\n\n        { // preliminary test, calling the consoleText method without any executor results in 404\n            Page page \u003d wc.goTo(\"computers/0/executors/0/currentExecutable/consoleText\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertRequestWasNotBlocked();\n        }\n\n        { // as Connected User, we start the build and try to get the console, ensure current expected behavior still works\n            wc.login(\"foo\");\n\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            Page page \u003d wc.goTo(\"computers/0/executors/0/currentExecutable/consoleText\", null);\n            assertEquals(200, page.getWebResponse().getStatusCode());\n            assertThat(page.getWebResponse().getContentAsString(), containsString(SemaphoredBuilder.START_MESSAGE));\n            assertRequestWasNotBlocked();\n\n            semaphore.release(1);\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n        }\n\n        { // as Anonymous, we start the build and try to get the console\n            wc \u003d j.createWebClient();\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            Page page \u003d wc.goTo(\"computers/0/executors/0/currentExecutable/consoleText\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertThat(page.getWebResponse().getContentAsString(), not(containsString(SemaphoredBuilder.START_MESSAGE)));\n            assertRequestWasNotBlocked();\n\n            semaphore.release(1);\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n        }\n    }","advisory":"SECURITY-404"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.anonCannotAccessExecutorApi:void()","methodSource":"@Test\n    @Issue(\"SECURITY-404\")\n    public void anonCannotAccessExecutorApi() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        FullControlOnceLoggedInAuthorizationStrategy authorizationStrategy \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        authorizationStrategy.setAllowAnonymousRead(false);\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        Semaphore semaphore \u003d new Semaphore(0);\n\n        p.getBuildersList().add(new SemaphoredBuilder(semaphore, new AtomicInteger(0)));\n\n        // to be sure to reach the correct one\n        j.jenkins.setNumExecutors(1);\n\n        {\n            Page page \u003d wc.goTo(\"computers/0/executors/0/api/xml\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertRequestWasNotBlocked();\n        }\n\n        { // as Connected User, we start the build and can access the executor api\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            wc.login(\"foo\");\n            Page page \u003d wc.goTo(\"computers/0/executors/0/api/xml\", null);\n            assertEquals(200, page.getWebResponse().getStatusCode());\n            assertThat(page.getWebResponse().getContentAsString(), containsString(p.getUrl()));\n            assertRequestWasNotBlocked();\n\n            semaphore.release(1);\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n\n            wc \u003d j.createWebClient();\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n        }\n\n        { // as Anonymous, we start the build and cannot access the executor api\n            QueueTaskFuture\u003cFreeStyleBuild\u003e futureBuild \u003d p.scheduleBuild2(0);\n            futureBuild.waitForStart();\n\n            Page page \u003d wc.goTo(\"computers/0/executors/0/api/xml\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertThat(page.getWebResponse().getContentAsString(), not(containsString(p.getUrl())));\n            assertRequestWasNotBlocked();\n\n            semaphore.release(1);\n            j.assertBuildStatus(Result.SUCCESS, futureBuild);\n        }\n    }","advisory":"SECURITY-404"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.anonCannotAccessJenkinsItemMap:void()","methodSource":"@Test\n    @Issue(\"SECURITY-404\")\n    public void anonCannotAccessJenkinsItemMap() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        { // try to access /itemMap/\u003cjobName\u003e\n            wc.login(\"foo\");\n            Page page \u003d wc.goTo(\"itemMap/\" + p.getName() + \"/api/xml\", null);\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertThat(page.getWebResponse().getContentAsString(), not(containsString(\"\u003cfreeStyleProject\")));\n            assertRequestWasBlockedAndResetFlag();\n        }\n    }","advisory":"SECURITY-404"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.ensureLogRecordManagerAccessibleOnlyByAdmin:void()","methodSource":"@Test\n    @Issue(\"SECURITY-471\")\n    public void ensureLogRecordManagerAccessibleOnlyByAdmin() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n        j.jenkins.setAuthorizationStrategy(\n                new MockAuthorizationStrategy()\n                        .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\")\n                        .grant(Jenkins.READ).everywhere().to(\"user\")\n        );\n\n        String logNameForAdmin \u003d \"testLoggerAdmin\";\n        String logNameForUser \u003d \"testLoggerUser\";\n\n        { // admin can do everything\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(\"admin\");\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            // ensure the logger does not exist before the creation\n            assertEquals(404, wc.goTo(\"log/\" + logNameForAdmin + \"/autoCompleteLoggerName/?value\u003da\", null).getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"log/newLogRecorder/?name\u003d\" + logNameForAdmin).toURL(), HttpMethod.POST);\n\n            wc.getOptions().setRedirectEnabled(false);\n            Page page \u003d wc.getPage(request);\n            assertEquals(302, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            // after creation the logger exists\n            j.assertGoodStatus(wc.goTo(\"log/\" + logNameForAdmin + \"/autoCompleteLoggerName/?value\u003da\", null));\n            assertRequestWasNotBlocked();\n\n            assertEquals(404, wc.goTo(\"log/\" + \"nonExistingName\" + \"/autoCompleteLoggerName/?value\u003da\", null).getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n        }\n\n        { // user is blocked\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(\"user\");\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            // no right to check the existence of a logger\n            assertEquals(403, wc.goTo(\"log/\" + logNameForUser + \"/autoCompleteLoggerName/?value\u003da\", null).getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"log/newLogRecorder/?name\u003d\" + logNameForUser).toURL(), HttpMethod.POST);\n\n            wc.getOptions().setRedirectEnabled(false);\n            Page page \u003d wc.getPage(request);\n            assertEquals(403, page.getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n\n            // after the failed attempt, the logger is not created\n            assertEquals(403, wc.goTo(\"log/\" + logNameForUser + \"/autoCompleteLoggerName/?value\u003da\", null).getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n        }\n\n        { // admin can check the non-existence after user failed creation also\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(\"admin\");\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            // ensure the logger was not created by the user (check in case the request returned 403 but created the logger silently)\n            assertEquals(404, wc.goTo(\"log/\" + logNameForUser + \"/autoCompleteLoggerName/?value\u003da\", null).getWebResponse().getStatusCode());\n            assertRequestWasNotBlocked();\n        }\n    }","advisory":"SECURITY-471"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.anonCannotHaveTheListOfUsers:void()","methodSource":"@Test\n    public void anonCannotHaveTheListOfUsers() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n\n        FullControlOnceLoggedInAuthorizationStrategy authorizationStrategy \u003d new FullControlOnceLoggedInAuthorizationStrategy();\n        j.jenkins.setAuthorizationStrategy(authorizationStrategy);\n\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        securityRealm.createAccount(\"admin\", \"admin\");\n        securityRealm.createAccount(\"secretUser\", \"secretUser\");\n\n        { // admin should have access to the user list\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(\"admin\");\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            Page page \u003d wc.goTo(\"securityRealm\");\n            assertEquals(200, page.getWebResponse().getStatusCode());\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"secretUser\"));\n            assertRequestWasNotBlocked();\n        }\n\n        // with or without the anonymousRead, anonymous are not allowed to have access to\n        // list of users in securityRealm\n        authorizationStrategy.setAllowAnonymousRead(true);\n        { // without any read permission the anon have access to the user list\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n            wc.getOptions().setRedirectEnabled(false);\n\n            Page page \u003d wc.goTo(\"securityRealm/\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertThat(page.getWebResponse().getContentAsString(), not(containsString(\"secretUser\")));\n            assertRequestWasNotBlocked();\n\n            page \u003d wc.goTo(\"asynchPeople/\", null);\n            assertEquals(200, page.getWebResponse().getStatusCode());\n            // javascript will load the user list asynch\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"Includes all known\"));\n            assertRequestWasNotBlocked();\n        }\n\n        authorizationStrategy.setAllowAnonymousRead(false);\n        { // and with restriction, the anonymous users cannot read the user list\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n            wc.getOptions().setRedirectEnabled(false);\n\n            Page page \u003d wc.goTo(\"securityRealm/\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertThat(page.getWebResponse().getContentAsString(), not(containsString(\"secretUser\")));\n            assertRequestWasNotBlocked();\n\n            // with the restriction we disallow the anon to even read the list of all users\n            page \u003d wc.goTo(\"asynchPeople/\", null);\n            checkPageIsRedirectedToLogin(page);\n            assertThat(page.getWebResponse().getContentAsString(), not(containsString(\"secretUser\")));\n            assertRequestWasNotBlocked();\n        }\n    }"},{"className":"jenkins.security.stapler.Security400Test","methodSignature":"jenkins.security.stapler.Security400Test.noAccessToAllUsers:void()","methodSource":"@Test\n    @Issue(\"SECURITY-722\")\n    public void noAccessToAllUsers() throws Exception {\n        j.jenkins.setCrumbIssuer(null);\n        HudsonPrivateSecurityRealm securityRealm \u003d new HudsonPrivateSecurityRealm(false, false, null);\n        j.jenkins.setSecurityRealm(securityRealm);\n        securityRealm.createAccount(\"admin\", \"admin\");\n\n        j.jenkins.setAuthorizationStrategy(\n                new MockAuthorizationStrategy()\n                        .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\")\n        );\n\n        { // neither anon have access to the allUsers end point\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            // anonymous user\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            Page page \u003d wc.goTo(\"securityRealm/allUsers/\" + 0 + \"/descriptorByName/jenkins.security.ApiTokenProperty/help/apiToken/\");\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasBlockedAndResetFlag();\n        }\n\n        { // nor the admin have that access\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            wc.login(\"admin\");\n            wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n            Page page \u003d wc.goTo(\"securityRealm/allUsers/\" + 0 + \"/descriptorByName/jenkins.security.ApiTokenProperty/help/apiToken/\");\n            assertEquals(404, page.getWebResponse().getStatusCode());\n            assertRequestWasBlockedAndResetFlag();\n        }\n    }","advisory":"SECURITY-722"},{"className":"jenkins.security.stapler.Security867Test","methodSignature":"jenkins.security.stapler.Security867Test.folderTraversalPrevented_avoidStealingSecretInView:void()","methodSource":"@Test\n    @Issue(\"SECURITY-867\")\n    public void folderTraversalPrevented_avoidStealingSecretInView() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        String publicContent \u003d \"Test OK\";\n        String secretContent \u003d \"s3cr3t\";\n\n        // to validate the attack reproduction you can disable the protection\n        // Facet.ALLOW_VIEW_NAME_PATH_TRAVERSAL \u003d true;\n\n        // regular behavior\n        assertThat(getContentAndCheck200(wc, \"rootAction1/public\"), containsString(publicContent));\n\n        // malicious usage prevention\n\n        // looking for /jenkins/security/stapler/Security867Test/NotRootAction2/secret\n        assertThat(getContent(wc, \"rootAction1/%2fjenkins%2fsecurity%2fstapler%2fSecurity867Test%2fNotRootAction2%2fsecret\"),\n                not(containsString(secretContent)));\n\n        // looking for /jenkins\\security\\stapler\\Security867Test\\NotRootAction2\\secret \u003d\u003e\n        // absolute path with backslash (initial forward one is required for absolute)\n        assertThat(getContent(wc, \"rootAction1/%2fjenkins%5csecurity%5cstapler%5cSecurity867Test%5cNotRootAction2%5csecret\"),\n                not(containsString(secretContent)));\n\n        // looking for ../NotRootAction2/secret \u003d\u003e relative path\n        assertThat(getContent(wc, \"rootAction1/%2e%2e%2fNotRootAction2%2fsecret\"),\n                not(containsString(secretContent)));\n\n        // looking for ..\\NotRootAction2\\secret \u003d\u003e relative path without forward slash\n        assertThat(getContent(wc, \"rootAction1/%2e%2e%5cNotRootAction2%5csecret\"),\n                not(containsString(secretContent)));\n    }","advisory":"SECURITY-867"},{"className":"jenkins.security.stapler.Security867Test","methodSignature":"jenkins.security.stapler.Security867Test.folderTraversalPrevented_avoidStealingSecretFromDifferentObject:void()","methodSource":"@Test\n    @Issue(\"SECURITY-867\")\n    public void folderTraversalPrevented_avoidStealingSecretFromDifferentObject() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        wc.getOptions().setThrowExceptionOnFailingStatusCode(false);\n\n        String action1Config \u003d j.jenkins.getExtensionList(RootAction.class).get(RootAction1.class).getMyConfig();\n        String action3Config \u003d j.jenkins.getExtensionList(RootAction.class).get(RootAction3.class).getMyConfig();\n\n        // to validate the attack reproduction you can disable the protection\n        // Facet.ALLOW_VIEW_NAME_PATH_TRAVERSAL \u003d true;\n\n        // regular behavior, the config is only displayed in ActionRoot3\n        assertThat(getContentAndCheck200(wc, \"rootAction1/public\"), not(containsString(action1Config)));\n        assertThat(getContentAndCheck200(wc, \"rootAction3/showConfig\"), allOf(\n                containsString(action3Config),\n                not(containsString(action1Config))\n        ));\n\n        // the main point here is the last node visited will be \"it\" for the view scope\n        // if we navigate by RootAction1, we pass it to the RootAction3\u0027s view\n\n        // malicious usage prevention, looking for ../RootAction3/showConfig \u003d\u003e relative path\n        // without the prevention, the config value of RootAction1 will be used here\n        assertThat(getContent(wc, \"rootAction1/%2e%2e%2fRootAction3%2fshowConfig\"), allOf(\n                not(containsString(action1Config)),\n                not(containsString(action3Config))\n        ));\n    }","advisory":"SECURITY-867"},{"className":"jenkins.security.stapler.Security914Test","methodSignature":"jenkins.security.stapler.Security914Test.cannotUseInvalidLocale_toTraverseFolder:void()","methodSource":"@Test\n    public void cannotUseInvalidLocale_toTraverseFolder() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        assertNotNull(j.getPluginManager().getPlugin(\"credentials\"));\n        j.createWebClient().goTo(\"plugin/credentials/images/credentials.svg\", \"image/svg+xml\");\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"plugin/credentials/.xml\").toURL());\n        // plugin deployed in: test\\target\\jenkins7375296945862059919tmp\n        // rootDir is in     : test\\target\\jenkinsTests.tmp\\jenkins1274934531848159942test\n        // j.jenkins.getRootDir().getName() \u003d jenkins1274934531848159942test\n        request.setAdditionalHeader(\"Accept-Language\", \"../../../../jenkinsTests.tmp/\" + j.jenkins.getRootDir().getName() + \"/config\");\n\n        Page p \u003d wc.getPage(request);\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, p.getWebResponse().getStatusCode());\n        assertNotEquals(p.getWebResponse().getContentType(), \"application/xml\");\n    }"},{"className":"jenkins.security.stapler.Security914Test","methodSignature":"jenkins.security.stapler.Security914Test.cannotUseInvalidLocale_toAnyFileInSystem:void()","methodSource":"@Test\n    public void cannotUseInvalidLocale_toAnyFileInSystem() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        assertNotNull(j.getPluginManager().getPlugin(\"credentials\"));\n        j.createWebClient().goTo(\"plugin/credentials/images/credentials.svg\", \"image/svg+xml\");\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient()\n                .withThrowExceptionOnFailingStatusCode(false);\n        WebRequest request \u003d new WebRequest(new URI(j.getURL() + \"plugin/credentials/.ini\").toURL());\n        // ../ can be multiply to infinity, no impact, we just need to have enough to reach the root\n        request.setAdditionalHeader(\"Accept-Language\", \"../../../../../../../../../../../../windows/win\");\n\n        Page p \u003d wc.getPage(request);\n        assertEquals(HttpURLConnection.HTTP_NOT_FOUND, p.getWebResponse().getStatusCode());\n        assertEquals(\"text/html\", p.getWebResponse().getContentType());\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canViewStaplerViews:void()","methodSource":"@Test\n    @For(StaplerViews.class)\n    public void canViewStaplerViews() throws Exception {\n        String[] urls \u003d {\"annotated/explicitRoot\", \"extended/explicitRoot\", \"extended/whitelistedRoot\"};\n        for (String url : urls) {\n            HtmlPage root \u003d j.createWebClient().goTo(url);\n            assertEquals(\"Fragment\", root.getElementById(\"frag\").asNormalizedText());\n            assertEquals(\"Explicit Fragment\", root.getElementById(\"explicit-frag\").asNormalizedText());\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.cannotViewStaplerFragments:void()","methodSource":"@Test\n    @For(StaplerFragments.class)\n    public void cannotViewStaplerFragments() throws Exception {\n        String[] urls \u003d {\"annotated/explicitFrag\", \"extended/explicitFrag\"};\n        for (String url : urls) {\n            j.createWebClient().assertFails(url, HttpURLConnection.HTTP_NOT_FOUND);\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canViewRoot:void()","methodSource":"@Test\n    public void canViewRoot() throws Exception {\n        String[] urls \u003d {\"annotated/root\", \"groovy/root\", \"jelly/root\", \"whitelist/root\"};\n        for (String url : urls) {\n            HtmlPage root \u003d j.createWebClient().goTo(url);\n            assertEquals(\"Fragment\", root.getElementById(\"frag\").getChildNodes().get(0).getNodeValue());\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canViewIndex:void()","methodSource":"@Test\n    public void canViewIndex() throws Exception {\n        String[] urls \u003d {\"annotated\", \"groovy\", \"jelly\"};\n        for (String url : urls) {\n            HtmlPage root \u003d j.createWebClient().goTo(url);\n            assertEquals(\"Fragment\", root.getElementById(\"frag\").asNormalizedText());\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canViewPagesThatIncludeViews:void()","methodSource":"@Test\n    public void canViewPagesThatIncludeViews() throws Exception {\n        String[] urls \u003d {\"groovy/include\", \"jelly/include\"};\n        for (String url : urls) {\n            HtmlPage root \u003d j.createWebClient().goTo(url);\n            assertEquals(\"Fragment\", root.getElementById(\"frag\").asNormalizedText());\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canViewPagesThatRedirectToViews:void()","methodSource":"@Test\n    public void canViewPagesThatRedirectToViews() throws Exception {\n        String[] urls \u003d {\"groovy/redirect\", \"jelly/redirect\"};\n        for (String url : urls) {\n            HtmlPage root \u003d j.createWebClient().goTo(url);\n            assertEquals(\"Fragment\", root.getElementById(\"frag\").asNormalizedText());\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canViewCompressedViews:void()","methodSource":"@Test\n    public void canViewCompressedViews() throws Exception {\n        String[] urls \u003d {\"groovy/compress\", \"jelly/compress\"};\n        for (String url : urls) {\n            HtmlPage root \u003d j.createWebClient().goTo(url);\n            assertEquals(\"Fragment\", root.getElementById(\"frag\").asNormalizedText());\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.cannotViewFragment:void()","methodSource":"@Test\n    public void cannotViewFragment() throws Exception {\n        String[] urls \u003d {\"annotated/frag\", \"groovy/frag\", \"jelly/frag\", \"whitelist/frag\"};\n        for (String url : urls) {\n            j.createWebClient().assertFails(url, HttpURLConnection.HTTP_NOT_FOUND);\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerDispatchValidatorTest","methodSignature":"jenkins.security.stapler.StaplerDispatchValidatorTest.canSetStatusCodeBeforeValidation:void()","methodSource":"@Test\n    public void canSetStatusCodeBeforeValidation() throws Exception {\n        String[] urls \u003d {\"groovy/error\", \"jelly/error\"};\n        for (String url : urls) {\n            j.createWebClient().assertFails(url, 400);\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableActionTest","methodSignature":"jenkins.security.stapler.StaplerRoutableActionTest.testNewRulesRoutableAction_notDoName:void()","methodSource":"@Test\n    public void testNewRulesRoutableAction_notDoName() throws Exception {\n        assertNotReachable(\"testNewRulesRoutableAction/notDoName/\");\n        // not even considered as a blocked action because the filter is not even called, they are lacking do* or @WebMethod\n        // assertDoActionRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"testNewRulesRoutableAction/tDoName/\");\n        // assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableActionTest","methodSignature":"jenkins.security.stapler.StaplerRoutableActionTest.testNewRulesRoutableAction_webMethod1:void()","methodSource":"@Test\n    public void testNewRulesRoutableAction_webMethod1() throws Exception {\n        assertReachable(\"testNewRulesRoutableAction/webMethod1/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableActionTest","methodSignature":"jenkins.security.stapler.StaplerRoutableActionTest.testNewRulesRoutableAction_webMethod3Through5:void()","methodSource":"@Test\n    public void testNewRulesRoutableAction_webMethod3Through5() throws Exception {\n        assertReachable(\"testNewRulesRoutableAction/webMethod3/\");\n        assertReachable(\"testNewRulesRoutableAction/webMethod4/\");\n        assertReachable(\"testNewRulesRoutableAction/webMethod5/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableActionTest","methodSignature":"jenkins.security.stapler.StaplerRoutableActionTest.testNewRulesRoutableAction_webMethod2:void()","methodSource":"@Test\n    public void testNewRulesRoutableAction_webMethod2() throws Exception {\n        assertNotReachable(\"testNewRulesRoutableAction/webMethod2/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableActionTest","methodSignature":"jenkins.security.stapler.StaplerRoutableActionTest.testNewRulesNonroutableAction_webMethod1:void()","methodSource":"@Test\n    public void testNewRulesNonroutableAction_webMethod1() throws Exception {\n        assertNotReachable(\"testNewRulesNonroutableAction/webMethod1/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableActionTest","methodSignature":"jenkins.security.stapler.StaplerRoutableActionTest.testNewRulesNonroutableAction_webMethod2:void()","methodSource":"@Test\n    public void testNewRulesNonroutableAction_webMethod2() throws Exception {\n        // priority of negative over positive\n        assertNotReachable(\"testNewRulesNonroutableAction/webMethod2/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testFieldNotAnnotated:void()","methodSource":"@Test\n    public void testFieldNotAnnotated() throws Exception {\n        assertReachable(\"test/renderableNotAnnotated/\");\n        assertReachable(\"test/renderableNotAnnotated/valid/\");\n\n        assertNotReachable(\"test/parentRenderableNotAnnotated/\");\n        assertNotReachable(\"test/parentRenderableNotAnnotated/renderable/\");\n        assertNotReachable(\"test/parentRenderableNotAnnotated/renderable/valid/\");\n\n        assertNotReachable(\"test/objectNotAnnotated/\");\n        assertNotReachable(\"test/objectNotAnnotated/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testFieldNotAnnotated_escapeHatch:void()","methodSource":"@Test\n    public void testFieldNotAnnotated_escapeHatch() throws Exception {\n        boolean currentValue \u003d TypedFilter.SKIP_TYPE_CHECK;\n        try {\n            TypedFilter.SKIP_TYPE_CHECK \u003d true;\n            // to apply the new configuration\n            webApp.clearMetaClassCache();\n\n            assertReachable(\"test/renderableNotAnnotated/\");\n            assertReachable(\"test/renderableNotAnnotated/valid/\");\n\n            assertNotReachable(\"test/parentRenderableNotAnnotated/\");\n            assertReachable(\"test/parentRenderableNotAnnotated/renderable/\");\n            assertReachable(\"test/parentRenderableNotAnnotated/renderable/valid/\");\n        } finally {\n            TypedFilter.SKIP_TYPE_CHECK \u003d currentValue;\n            // to reset the configuration\n            webApp.clearMetaClassCache();\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testFieldAnnotatedOk:void()","methodSource":"@Test\n    public void testFieldAnnotatedOk() throws Exception {\n        assertReachable(\"test/renderableAnnotatedOk/\");\n        assertReachable(\"test/renderableAnnotatedOk/valid/\");\n\n        assertReachable(\"test/objectAnnotatedOk/\");\n        assertReachable(\"test/objectAnnotatedOk/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testFieldAnnotatedKo:void()","methodSource":"@Test\n    public void testFieldAnnotatedKo() throws Exception {\n        assertNotReachable(\"test/renderableAnnotatedKo/\");\n        assertNotReachable(\"test/renderableAnnotatedKo/valid/\");\n\n        assertNotReachable(\"test/objectAnnotatedKo/\");\n        assertNotReachable(\"test/objectAnnotatedKo/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testFieldDoubleAnnotated:void()","methodSource":"@Test\n    public void testFieldDoubleAnnotated() throws Exception {\n        assertNotReachable(\"test/renderableDoubleAnnotated/\");\n        assertNotReachable(\"test/renderableDoubleAnnotated/valid/\");\n\n        assertNotReachable(\"test/objectDoubleAnnotated/\");\n        assertNotReachable(\"test/objectDoubleAnnotated/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testStaticFieldNotAnnotated:void()","methodSource":"@Test\n    public void testStaticFieldNotAnnotated() throws Exception {\n        assertNotReachable(\"test/staticRenderableNotAnnotated/\");\n        assertNotReachable(\"test/staticRenderableNotAnnotated/valid/\");\n\n        assertNotReachable(\"test/staticObjectNotAnnotated/\");\n        assertNotReachable(\"test/staticObjectNotAnnotated/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testStaticFieldNotAnnotated_escapeHatch:void()","methodSource":"@Test\n    public void testStaticFieldNotAnnotated_escapeHatch() throws Exception {\n        boolean currentValue \u003d TypedFilter.PROHIBIT_STATIC_ACCESS;\n        try {\n            TypedFilter.PROHIBIT_STATIC_ACCESS \u003d false;\n            // to apply the new configuration\n            webApp.clearMetaClassCache();\n\n            assertReachable(\"test/staticRenderableNotAnnotated/\");\n            assertReachable(\"test/staticRenderableNotAnnotated/valid/\");\n\n            assertNotReachable(\"test/staticObjectNotAnnotated/\");\n            assertNotReachable(\"test/staticObjectNotAnnotated/valid/\");\n        } finally {\n            TypedFilter.PROHIBIT_STATIC_ACCESS \u003d currentValue;\n            // to reset the configuration\n            webApp.clearMetaClassCache();\n        }\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableFieldTest","methodSignature":"jenkins.security.stapler.StaplerRoutableFieldTest.testStaticFieldAnnotatedOk:void()","methodSource":"@Test\n    public void testStaticFieldAnnotatedOk() throws Exception {\n        assertReachable(\"test/staticRenderableAnnotatedOk/\");\n        assertReachable(\"test/staticRenderableAnnotatedOk/valid/\");\n\n        assertReachable(\"test/staticObjectAnnotatedOk/\");\n        assertReachable(\"test/staticObjectAnnotatedOk/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableGetterTest","methodSignature":"jenkins.security.stapler.StaplerRoutableGetterTest.testForceGetterMethod:void()","methodSource":"@Test\n    public void testForceGetterMethod() throws Exception {\n        assertNotReachable(\"test/falseWithoutAnnotation/\");\n        assertNotReachable(\"test/falseWithoutAnnotation/valid/\");\n\n        filteredGetMethodTriggered \u003d false;\n\n        assertReachable(\"test/falseWithAnnotation/\");\n        assertReachable(\"test/falseWithAnnotation/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableGetterTest","methodSignature":"jenkins.security.stapler.StaplerRoutableGetterTest.testForceNotGetterMethod:void()","methodSource":"@Test\n    public void testForceNotGetterMethod() throws Exception {\n        assertReachable(\"test/trueWithoutAnnotation/\");\n        assertReachable(\"test/trueWithoutAnnotation/valid/\");\n        assertNotReachable(\"test/trueWithAnnotation/\");\n        assertNotReachable(\"test/trueWithAnnotation/valid/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableGetterTest","methodSignature":"jenkins.security.stapler.StaplerRoutableGetterTest.testPriorityIsNegative:void()","methodSource":"@Test\n    public void testPriorityIsNegative() throws Exception {\n        assertNotReachable(\"test/priorityToNegative/\");\n    }"},{"className":"jenkins.security.stapler.StaplerRoutableGetterTest","methodSignature":"jenkins.security.stapler.StaplerRoutableGetterTest.testInheritanceOfAnnotation_childHasLastWord:void()","methodSource":"@Test\n    public void testInheritanceOfAnnotation_childHasLastWord() throws Exception {\n        assertNotReachable(\"test-child/parentKoButChildOk/\");\n        assertNotReachable(\"test-child/parentKoButChildNone/\");\n\n        filteredGetMethodTriggered \u003d false;\n\n        assertReachable(\"test-child/parentNoneButChildOk/\");\n\n        assertNotReachable(\"test-child/parentNoneButChildKo/\");\n        assertNotReachable(\"test-child/parentOkButChildKo/\");\n\n        filteredGetMethodTriggered \u003d false;\n\n        assertReachable(\"test-child/parentOkButChildNone/\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_empty_Loading:void()","methodSource":"@Test\n    @LocalData(\"whitelist_empty\")\n    public void userControlledWhitelist_empty_Loading() {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n        assertThat(\n                wl.decide(\"public java.lang.Object jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider.getObjectCustom()\"),\n                is(RoutingDecisionProvider.Decision.UNKNOWN)\n        );\n        assertThat(\n                wl.decide(\"blabla\"),\n                is(RoutingDecisionProvider.Decision.UNKNOWN)\n        );\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_monoline_Loading:void()","methodSource":"@Test\n    @LocalData(\"whitelist_monoline\")\n    public void userControlledWhitelist_monoline_Loading() {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n        assertThat(\n                wl.decide(\"method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom\"),\n                is(RoutingDecisionProvider.Decision.ACCEPTED)\n        );\n        assertThat(\n                wl.decide(\"blabla\"),\n                is(RoutingDecisionProvider.Decision.UNKNOWN)\n        );\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_multiline_Loading:void()","methodSource":"@Test\n    @LocalData(\"whitelist_multiline\")\n    public void userControlledWhitelist_multiline_Loading() {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n        assertThat(\n                wl.decide(\"method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom\"),\n                is(RoutingDecisionProvider.Decision.ACCEPTED)\n        );\n        assertThat(\n                wl.decide(\"method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom2\"),\n                is(RoutingDecisionProvider.Decision.ACCEPTED)\n        );\n        assertThat(\n                wl.decide(\"blabla\"),\n                is(RoutingDecisionProvider.Decision.UNKNOWN)\n        );\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_commentsAreIgnored:void()","methodSource":"@Test\n    @LocalData(\"comment_ignored\")\n    public void userControlledWhitelist_commentsAreIgnored() {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n        assertThat(wl.decide(\"this line is not read\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        assertThat(wl.decide(\"not-this-one\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        assertThat(wl.decide(\"neither\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        assertThat(wl.decide(\"finally-not\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n\n        assertThat(wl.decide(\"this-one-is\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        assertThat(wl.decide(\"this-one-also\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_emptyLinesAreIgnored:void()","methodSource":"@Test\n    @LocalData(\"whitelist_emptyline\")\n    public void userControlledWhitelist_emptyLinesAreIgnored() {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n        assertThat(wl.decide(\"signature-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        assertThat(wl.decide(\"signature-2\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        assertThat(wl.decide(\"signature-3\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        // neither the empty line or an exclamation mark followed by nothing or spaces are not considered\n        assertThat(wl.decide(\"\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_whiteAndBlack:void()","methodSource":"@Test\n    @LocalData(\"greylist_multiline\")\n    public void userControlledWhitelist_whiteAndBlack() {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n        assertThat(wl.decide(\"signature-1-ok\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        assertThat(wl.decide(\"signature-3-ok\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n\n        assertThat(wl.decide(\"signature-2-not-ok\"), is(RoutingDecisionProvider.Decision.REJECTED));\n        assertThat(wl.decide(\"signature-4-not-ok\"), is(RoutingDecisionProvider.Decision.REJECTED));\n\n        // the exclamation mark is not used\n        assertThat(wl.decide(\"!signature-2-not-ok\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.defaultList:void()","methodSource":"@Test\n    public void defaultList() throws Exception {\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n\n        assertThat(\n                wl.decide(\"method io.jenkins.blueocean.service.embedded.rest.AbstractRunImpl getLog\"),\n                is(RoutingDecisionProvider.Decision.ACCEPTED)\n        );\n        assertThat(\n                wl.decide(\"method io.jenkins.blueocean.rest.impl.pipeline.PipelineNodeImpl getLog\"),\n                is(RoutingDecisionProvider.Decision.ACCEPTED)\n        );\n        assertThat(\n                wl.decide(\"method io.jenkins.blueocean.rest.impl.pipeline.PipelineStepImpl getLog\"),\n                is(RoutingDecisionProvider.Decision.ACCEPTED)\n        );\n\n        assertThat(wl.decide(\"method jenkins.security.stapler.StaticRoutingDecisionProviderTest$ContentProvider getObjectCustom\"),\n                is(RoutingDecisionProvider.Decision.UNKNOWN)\n        );\n        assertThat(wl.decide(\"blabla\"),\n                is(RoutingDecisionProvider.Decision.UNKNOWN)\n        );\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProvider2Test.userControlledWhitelist_savedCorrectly:void()","methodSource":"@Test\n    public void userControlledWhitelist_savedCorrectly() throws Exception {\n        Path whitelistUserControlledList \u003d j.jenkins.getRootDir().toPath().resolve(\"stapler-whitelist.txt\");\n\n        assertFalse(Files.exists(whitelistUserControlledList));\n\n        StaticRoutingDecisionProvider wl \u003d new StaticRoutingDecisionProvider();\n\n        assertFalse(Files.exists(whitelistUserControlledList));\n\n        assertThat(wl.decide(\"nothing\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n\n        wl.save();\n        assertTrue(Files.exists(whitelistUserControlledList));\n        assertThat(Files.readString(whitelistUserControlledList, StandardCharsets.UTF_8), is(\"\"));\n\n        wl.add(\"white-1\");\n\n        assertThat(wl.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n\n        assertTrue(Files.exists(whitelistUserControlledList));\n        assertThat(Files.readString(whitelistUserControlledList, StandardCharsets.UTF_8), containsString(\"white-1\"));\n        {\n            StaticRoutingDecisionProvider temp \u003d new StaticRoutingDecisionProvider();\n            assertThat(temp.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        }\n\n        wl.addBlacklistSignature(\"black-2\");\n\n        assertThat(wl.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        assertThat(wl.decide(\"black-2\"), is(RoutingDecisionProvider.Decision.REJECTED));\n        assertThat(Files.readString(whitelistUserControlledList, StandardCharsets.UTF_8), allOf(\n                containsString(\"white-1\"),\n                containsString(\"!black-2\")\n        ));\n\n        {\n            StaticRoutingDecisionProvider temp \u003d new StaticRoutingDecisionProvider();\n            assertThat(temp.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n            assertThat(temp.decide(\"black-2\"), is(RoutingDecisionProvider.Decision.REJECTED));\n        }\n\n        wl.removeBlacklistSignature(\"black-2\");\n\n        assertThat(wl.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n        assertThat(wl.decide(\"black-2\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        assertThat(Files.readString(whitelistUserControlledList, StandardCharsets.UTF_8), allOf(\n                containsString(\"white-1\"),\n                not(containsString(\"black-2\"))\n        ));\n\n        {\n            StaticRoutingDecisionProvider temp \u003d new StaticRoutingDecisionProvider();\n            assertThat(temp.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.ACCEPTED));\n            assertThat(temp.decide(\"black-2\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        }\n\n        wl.remove(\"white-1\");\n\n        assertThat(wl.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        assertThat(wl.decide(\"black-2\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        assertThat(Files.readString(whitelistUserControlledList, StandardCharsets.UTF_8), allOf(\n                not(containsString(\"white-1\")),\n                not(containsString(\"black-2\"))\n        ));\n\n        {\n            StaticRoutingDecisionProvider temp \u003d new StaticRoutingDecisionProvider();\n            assertThat(temp.decide(\"white-1\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n            assertThat(temp.decide(\"black-2\"), is(RoutingDecisionProvider.Decision.UNKNOWN));\n        }\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_job_index:void()","methodSource":"@Test\n    public void test_job_index() throws Exception {\n        j.createFreeStyleProject(\"testProject\");\n        assertReachableWithoutOk(\"contentProvider/job/\");\n        assertTrue(ContentProvider.called);\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_string:void()","methodSource":"@Test\n    public void test_string() throws Exception {\n        assertNotReachable(\"contentProvider/string/\");\n        assertFalse(ContentProvider.called);\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_objectString:void()","methodSource":"@Test\n    public void test_objectString() throws Exception {\n        assertNotReachable(\"contentProvider/objectString/\");\n        assertFalse(ContentProvider.called);\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_objectCustom:void()","methodSource":"@Test\n    public void test_objectCustom() throws Exception {\n        assertNotReachable(\"contentProvider/objectCustom/\");\n        assertFalse(ContentProvider.called);\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_objectCustom_withUserControlledSavedWhitelist:void()","methodSource":"@Test\n    public void test_objectCustom_withUserControlledSavedWhitelist() throws Throwable {\n        String whitelist \u003d ContentProvider.OBJECT_CUSTOM_SIGNATURE + \"\\n\";\n        Path whitelistFile \u003d j.jenkins.getRootDir().toPath().resolve(\"stapler-whitelist.txt\");\n        Files.writeString(whitelistFile, whitelist, StandardCharsets.UTF_8);\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).reload();\n        try {\n            assertNotReachable(\"contentProvider/objectString/\");\n            assertFalse(ContentProvider.called);\n            assertGetMethodRequestWasBlockedAndResetFlag();\n            assertReachable(\"contentProvider/objectCustom/\");\n            assertTrue(ContentProvider.called);\n        } finally {\n            Files.deleteIfExists(whitelistFile);\n            ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).reload();\n        }\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_objectCustom_withUserControlledEditedWhitelist:void()","methodSource":"@Test\n    public void test_objectCustom_withUserControlledEditedWhitelist() throws Exception {\n        try {\n            assertNotReachable(\"contentProvider/objectString/\");\n            assertFalse(ContentProvider.called);\n            assertNotReachable(\"contentProvider/objectCustom/\");\n            assertFalse(ContentProvider.called);\n\n            ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(ContentProvider.OBJECT_CUSTOM_SIGNATURE);\n\n            assertNotReachable(\"contentProvider/objectString/\");\n            assertFalse(ContentProvider.called);\n            assertFalse(ContentProvider.called2);\n            assertGetMethodRequestWasBlockedAndResetFlag();\n\n            assertReachable(\"contentProvider/objectCustom/\");\n            assertTrue(ContentProvider.called);\n            assertTrue(ContentProvider.called2);\n\n            ContentProvider.called \u003d false;\n            ContentProvider.called2 \u003d false;\n\n            ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).remove(ContentProvider.OBJECT_CUSTOM_SIGNATURE);\n\n            assertNotReachable(\"contentProvider/objectString/\");\n            assertFalse(ContentProvider.called);\n            assertNotReachable(\"contentProvider/objectCustom/\");\n            assertFalse(ContentProvider.called);\n        } finally {\n            //TODO check if the file is created per test or in general\n            ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).reload();\n        }\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.test_objectCustom_withStandardWhitelist:void()","methodSource":"@Test\n    public void test_objectCustom_withStandardWhitelist() throws Exception {\n        assertNotReachable(\"contentProvider/objectString/\");\n        assertFalse(ContentProvider.called);\n        assertGetMethodRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"contentProvider/objectCustom/\");\n        assertFalse(ContentProvider.called);\n\n        StaticRoutingDecisionProvider whitelist \u003d ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class);\n\n        { // add entry in the set loaded from the standard whitelist file and reload\n            Method resetMetaClassCache \u003d StaticRoutingDecisionProvider.class.getDeclaredMethod(\"resetMetaClassCache\");\n            resetMetaClassCache.setAccessible(true);\n\n            Field field \u003d StaticRoutingDecisionProvider.class.getDeclaredField(\"whitelistSignaturesFromFixedList\");\n            field.setAccessible(true);\n            @SuppressWarnings(\"unchecked\")\n            Set\u003cString\u003e standardWhitelist \u003d (Set\u003cString\u003e) field.get(whitelist);\n\n            standardWhitelist.add(ContentProvider.OBJECT_CUSTOM_SIGNATURE);\n            // just call this method to avoid to reload the file and so override our new signature\n            resetMetaClassCache.invoke(whitelist);\n        }\n\n        assertNotReachable(\"contentProvider/objectString/\");\n        assertFalse(ContentProvider.called);\n        assertFalse(ContentProvider.called2);\n        assertGetMethodRequestWasBlockedAndResetFlag();\n        assertReachable(\"contentProvider/objectCustom/\");\n        assertTrue(ContentProvider.called);\n        assertTrue(ContentProvider.called2);\n\n        { // reset to previous state\n            ContentProvider.called \u003d false;\n            ContentProvider.called2 \u003d false;\n\n            whitelist.reload();\n        }\n\n        assertNotReachable(\"contentProvider/objectString/\");\n        assertFalse(ContentProvider.called);\n        assertNotReachable(\"contentProvider/objectCustom/\");\n        assertFalse(ContentProvider.called);\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.doAction_regular:void()","methodSource":"@Test\n    public void doAction_regular() throws Exception {\n        assertReachable(\"do-action/action/\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(ActionWithWhitelist.DO_ACTION_SIGNATURE);\n\n        assertReachable(\"do-action/action/\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).remove(ActionWithWhitelist.DO_ACTION_SIGNATURE);\n\n        assertReachable(\"do-action/action/\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(ActionWithWhitelist.DO_ACTION_SIGNATURE);\n\n        assertNotReachable(\"do-action/action/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).removeBlacklistSignature(ActionWithWhitelist.DO_ACTION_SIGNATURE);\n\n        assertReachable(\"do-action/action/\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.doAction_actionWithStaplerDispatchable:void()","methodSource":"@Test\n    public void doAction_actionWithStaplerDispatchable() throws Exception {\n        assertReachable(\"do-action/actionWithStaplerDispatchable/\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(ActionWithWhitelist.DO_ACTION_STAPLER_ROUTABLE_SIGNATURE);\n\n        assertReachable(\"do-action/actionWithStaplerDispatchable/\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.doAction_actionWithWebMethod:void()","methodSource":"@Test\n    public void doAction_actionWithWebMethod() throws Exception {\n        assertReachable(\"do-action/actionWithWebMethod/\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(ActionWithWhitelist.DO_ACTION_STAPLER_WEBMETHOD_SIGNATURE);\n\n        assertNotReachable(\"do-action/actionWithWebMethod/\");\n        assertDoActionRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.getItem_regular:void()","methodSource":"@Test\n    public void getItem_regular() throws Exception {\n        assertReachable(\"getter/item/\");\n        assertReachable(\"getter/item/valid\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(GetterWithWhitelist.GET_ITEM_SIGNATURE);\n\n        assertNotReachable(\"getter/item/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"getter/item/valid\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.getItem_getterWithStaplerDispatchable:void()","methodSource":"@Test\n    public void getItem_getterWithStaplerDispatchable() throws Exception {\n        assertReachable(\"getter/itemWithStaplerDispatchable/\");\n        assertReachable(\"getter/itemWithStaplerDispatchable/valid\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(GetterWithWhitelist.GET_ITEM_STAPLER_ROUTABLE_SIGNATURE);\n\n        // Annotation overrides whitelist/blacklist\n        assertReachable(\"getter/itemWithStaplerDispatchable/\");\n        assertReachable(\"getter/itemWithStaplerDispatchable/valid\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.getItem_getterWithStaplerNotDispatchable:void()","methodSource":"@Test\n    public void getItem_getterWithStaplerNotDispatchable() throws Exception {\n        assertNotReachable(\"getter/itemWithStaplerNotDispatchable/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"getter/itemWithStaplerNotDispatchable/valid\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(GetterWithWhitelist.GET_ITEM_STAPLER_NONROUTABLE_SIGNATURE);\n\n        // Annotation overrides whitelist/blacklist\n        assertNotReachable(\"getter/itemWithStaplerNotDispatchable/\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"getter/itemWithStaplerNotDispatchable/valid\");\n        assertGetMethodRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.field_regular:void()","methodSource":"@Test\n    public void field_regular() throws Exception {\n        assertReachable(\"field/renderable/\");\n        assertReachable(\"field/renderable/valid\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(FieldWithWhitelist.FIELD_SIGNATURE);\n\n        assertNotReachable(\"field/renderable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/renderable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.field_regular_returnType:void()","methodSource":"@Test\n    public void field_regular_returnType() throws Exception {\n        assertReachable(\"field/renderable/\");\n        assertReachable(\"field/renderable/valid\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(RENDERABLE_CLASS_SIGNATURE);\n\n        assertNotReachable(\"field/renderable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/renderable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).removeBlacklistSignature(RENDERABLE_CLASS_SIGNATURE);\n\n        assertReachable(\"field/renderable/\");\n        assertReachable(\"field/renderable/valid\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(RENDERABLE_CLASS_SIGNATURE);\n        // method is checked first as it\u0027s more specific\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(FieldWithWhitelist.FIELD_SIGNATURE);\n\n        assertNotReachable(\"field/renderable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/renderable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n\n        // reverse, now we blacklist the type but whitelist the method \u003d\u003e it\u0027s ok\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).remove(RENDERABLE_CLASS_SIGNATURE);\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).removeBlacklistSignature(FieldWithWhitelist.FIELD_SIGNATURE);\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(RENDERABLE_CLASS_SIGNATURE);\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(FieldWithWhitelist.FIELD_SIGNATURE);\n\n        assertReachable(\"field/renderable/\");\n        assertReachable(\"field/renderable/valid\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.field_withStaplerDispatchable:void()","methodSource":"@Test\n    public void field_withStaplerDispatchable() throws Exception {\n        assertReachable(\"field/renderableWithStaplerDispatchable/\");\n        assertReachable(\"field/renderableWithStaplerDispatchable/valid\");\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(FieldWithWhitelist.FIELD_STAPLER_ROUTABLE_SIGNATURE);\n\n        assertReachable(\"field/renderableWithStaplerDispatchable/\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.field_withStaplerNotDispatchable:void()","methodSource":"@Test\n    public void field_withStaplerNotDispatchable() throws Exception {\n        assertNotReachable(\"field/renderableWithStaplerNotDispatchable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/renderableWithStaplerNotDispatchable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(FieldWithWhitelist.FIELD_STAPLER_NONROUTABLE_SIGNATURE);\n\n        assertNotReachable(\"field/renderableWithStaplerNotDispatchable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/renderableWithStaplerNotDispatchable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.fieldStatic_regular:void()","methodSource":"@Test\n    public void fieldStatic_regular() throws Exception {\n        assertNotReachable(\"field/staticRenderable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/staticRenderable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(FieldWithWhitelist.FIELD_STATIC_SIGNATURE);\n\n        assertReachable(\"field/staticRenderable/\");\n        assertReachable(\"field/staticRenderable/valid\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.fieldStatic_withStaplerDispatchable:void()","methodSource":"@Test\n    public void fieldStatic_withStaplerDispatchable() throws Exception {\n        assertReachable(\"field/staticRenderableWithStaplerDispatchable/\");\n        assertReachable(\"field/staticRenderableWithStaplerDispatchable/valid\");\n\n        // doesn\u0027t do anything\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).addBlacklistSignature(FieldWithWhitelist.FIELD_STATIC_STAPLER_ROUTABLE_SIGNATURE);\n\n        assertReachable(\"field/staticRenderableWithStaplerDispatchable/\");\n    }"},{"className":"jenkins.security.stapler.StaticRoutingDecisionProviderTest","methodSignature":"jenkins.security.stapler.StaticRoutingDecisionProviderTest.fieldStatic_withStaplerNotDispatchable:void()","methodSource":"@Test\n    public void fieldStatic_withStaplerNotDispatchable() throws Exception {\n        assertNotReachable(\"field/staticRenderableWithStaplerNotDispatchable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/staticRenderableWithStaplerNotDispatchable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n\n        ExtensionList.lookupSingleton(StaticRoutingDecisionProvider.class).add(FieldWithWhitelist.FIELD_STATIC_STAPLER_NONROUTABLE_SIGNATURE);\n\n        assertNotReachable(\"field/staticRenderableWithStaplerNotDispatchable/\");\n        assertFieldRequestWasBlockedAndResetFlag();\n        assertNotReachable(\"field/staticRenderableWithStaplerNotDispatchable/valid\");\n        assertFieldRequestWasBlockedAndResetFlag();\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getTarget_withoutArg_isNotRoutableDirectly:void()","methodSource":"@Test\n    public void getTarget_withoutArg_isNotRoutableDirectly() throws Exception {\n        assertNotReachable(\"getTarget1/target/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getTarget_withoutArg_isRoutableWithAnnotation:void()","methodSource":"@Test\n    public void getTarget_withoutArg_isRoutableWithAnnotation() throws Exception {\n        assertReachable(\"getTarget2/target/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getTarget_withArg_isNotRoutableWithStaplerNotDispatchable:void()","methodSource":"@Test\n    public void getTarget_withArg_isNotRoutableWithStaplerNotDispatchable() throws Exception {\n        assertNotReachable(\"getTarget3/target/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getTarget_withArg_isRoutable:void()","methodSource":"@Test\n    public void getTarget_withArg_isRoutable() throws Exception {\n        assertReachable(\"getTarget4/target/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getStaplerFallback_withoutArg_isNotRoutableDirectly:void()","methodSource":"@Test\n    public void getStaplerFallback_withoutArg_isNotRoutableDirectly() throws Exception {\n        assertNotReachable(\"getStaplerFallback1/staplerFallback/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getStaplerFallback_withoutArg_isRoutableWithAnnotation:void()","methodSource":"@Test\n    public void getStaplerFallback_withoutArg_isRoutableWithAnnotation() throws Exception {\n        assertReachable(\"getStaplerFallback2/staplerFallback/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getStaplerFallback_withArg_isNotRoutableWithStaplerNotDispatchable:void()","methodSource":"@Test\n    public void getStaplerFallback_withArg_isNotRoutableWithStaplerNotDispatchable() throws Exception {\n        assertNotReachable(\"getStaplerFallback3/staplerFallback/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getStaplerFallback_withArg_isRoutable:void()","methodSource":"@Test\n    public void getStaplerFallback_withArg_isRoutable() throws Exception {\n        assertReachable(\"getStaplerFallback4/staplerFallback/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.typeImplementingStaplerProxy_isRoutableByDefault:void()","methodSource":"@Test\n    public void typeImplementingStaplerProxy_isRoutableByDefault() throws Exception {\n        assertReachable(\"getTypeImplementingStaplerProxy/typeImplementingStaplerProxy/\");\n        assertReachable(\"getTypeImplementingStaplerProxy/typeImplementingStaplerProxy/valid\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.typeExtendingParentImplementingStaplerProxy_isRoutableByDefault:void()","methodSource":"@Test\n    public void typeExtendingParentImplementingStaplerProxy_isRoutableByDefault() throws Exception {\n        assertReachable(\"getTypeImplementingStaplerProxy/typeExtendingTypeImplementingStaplerProxy/\");\n        assertReachable(\"getTypeImplementingStaplerProxy/typeExtendingTypeImplementingStaplerProxy/valid/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.typeImplementingStaplerProxy_isNotRoutableWithNonroutable:void()","methodSource":"@Test\n    public void typeImplementingStaplerProxy_isNotRoutableWithNonroutable() throws Exception {\n        //TODO no way to avoid routability if implementing StaplerProxy\n//        assertNotReachable(\"getTypeImplementingStaplerProxy/typeImplementingStaplerProxy2/\");\n//        assertNotReachable(\"getTypeImplementingStaplerProxy/typeImplementingStaplerProxy2/valid/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.typeExtendingParentImplementingStaplerProxy_isNotRoutableWithNonroutable:void()","methodSource":"@Test\n    public void typeExtendingParentImplementingStaplerProxy_isNotRoutableWithNonroutable() throws Exception {\n        //TODO no way to avoid routability if super type implementing StaplerProxy\n//        assertNotReachable(\"getTypeImplementingStaplerProxy/typeExtendingTypeImplementingStaplerProxy2/\");\n//        assertNotReachable(\"getTypeImplementingStaplerProxy/typeExtendingTypeImplementingStaplerProxy2/valid/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getDynamic_withoutArg_isRoutable:void()","methodSource":"@Test\n    public void getDynamic_withoutArg_isRoutable() throws Exception {\n        assertReachable(\"getDynamic1/dynamic/\");\n        assertNotReachable(\"getDynamic1/\u003canyString\u003e/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getDynamic_withArgStartingWithString_isRoutable:void()","methodSource":"@Test\n    public void getDynamic_withArgStartingWithString_isRoutable() throws Exception {\n        // dynamic is \"just\" a subcase of regular getDynamic usage\n        assertReachable(\"getDynamic2/dynamic/\");\n        assertReachable(\"getDynamic2/\u003canyString\u003e/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getDynamic_withArgNotStartingWithString_isNotRoutable:void()","methodSource":"@Test\n    public void getDynamic_withArgNotStartingWithString_isNotRoutable() throws Exception {\n        assertNotReachable(\"getDynamic3/dynamic/\");\n        assertNotReachable(\"getDynamic3/\u003canyString\u003e/\");\n    }"},{"className":"jenkins.security.stapler.TypedFilterTest","methodSignature":"jenkins.security.stapler.TypedFilterTest.getDynamic_withArgNotIncludingString_isRoutable:void()","methodSource":"@Test\n    public void getDynamic_withArgNotIncludingString_isRoutable() throws Exception {\n        assertReachable(\"getDynamic4/dynamic/\");\n        // there is no magic here, as the string argument is missing, just a regular getter\n        assertNotReachable(\"getDynamic4/\u003canyString\u003e/\");\n    }"},{"className":"jenkins.security.SuspiciousRequestFilterTest","methodSignature":"jenkins.security.SuspiciousRequestFilterTest.denySemicolonInRequestPathByDefault:void()","methodSource":"@Test\n    public void denySemicolonInRequestPathByDefault() throws Exception {\n        WebResponse response \u003d get(\"foo/bar/..;/?baz\u003dbruh\");\n        assertThat(Foo.getInstance().baz, is(nullValue()));\n        assertThat(response.getStatusCode(), is(HttpServletResponse.SC_BAD_REQUEST));\n        // Actually served by Jetty; never even gets as far as SuspiciousRequestFilter.\n        assertThat(response.getContentAsString(), containsString(\"path parameter\"));\n    }"},{"className":"jenkins.security.SuspiciousRequestFilterTest","methodSignature":"jenkins.security.SuspiciousRequestFilterTest.allowSemicolonsInRequestPathWhenEscapeHatchEnabled:void()","methodSource":"@Ignore(\"No longer passes Jetty\")\n    @Test\n    public void allowSemicolonsInRequestPathWhenEscapeHatchEnabled() throws Exception {\n        SuspiciousRequestFilter.allowSemicolonsInPath \u003d true;\n        try {\n            WebResponse response \u003d get(\"foo/bar/..;/..;/cli?baz\u003dbruh\");\n            assertThat(Foo.getInstance().baz, is(\"bruh\"));\n            assertThat(response.getStatusCode(), is(HttpServletResponse.SC_OK));\n        } finally {\n            SuspiciousRequestFilter.allowSemicolonsInPath \u003d false;\n        }\n    }"},{"className":"jenkins.security.SuspiciousRequestFilterTest","methodSignature":"jenkins.security.SuspiciousRequestFilterTest.allowSemicolonsInQueryParameters:void()","methodSource":"@Test\n    public void allowSemicolonsInQueryParameters() throws Exception {\n        WebResponse response \u003d get(\"foo/bar?baz\u003dfoo;bar\u003dbaz\");\n        assertThat(Foo.getInstance().baz, is(\"foo;bar\u003dbaz\"));\n        assertThat(response.getStatusCode(), is(HttpServletResponse.SC_OK));\n    }"},{"className":"jenkins.security.UserDetailsCacheTest","methodSignature":"jenkins.security.UserDetailsCacheTest.getCachedTrue:void()","methodSource":"@Test\n    public void getCachedTrue() throws Exception {\n        UserDetailsCache cache \u003d UserDetailsCache.get();\n        assertNotNull(cache);\n        UserDetails alice \u003d cache.loadUserByUsername(\"alice\");\n        assertNotNull(alice);\n        UserDetails alice1 \u003d cache.getCached(\"alice\");\n        assertNotNull(alice1);\n    }"},{"className":"jenkins.security.UserDetailsCacheTest","methodSignature":"jenkins.security.UserDetailsCacheTest.getCachedFalse:void()","methodSource":"@Test\n    public void getCachedFalse() {\n        UserDetailsCache cache \u003d UserDetailsCache.get();\n        assertNotNull(cache);\n        UserDetails alice1 \u003d cache.getCached(\"alice\");\n        assertNull(alice1);\n    }"},{"className":"jenkins.security.UserDetailsCacheTest","methodSignature":"jenkins.security.UserDetailsCacheTest.getCachedTrueNotFound:void()","methodSource":"@Test\n    public void getCachedTrueNotFound() throws Exception {\n\n        UserDetailsCache cache \u003d UserDetailsCache.get();\n        assertNotNull(cache);\n        assertThrows(UsernameNotFoundException.class, () -\u003e cache.loadUserByUsername(\"bob\"));\n        assertThrows(UsernameNotFoundException.class, () -\u003e cache.getCached(\"bob\"));\n    }"},{"className":"jenkins.security.UserDetailsCacheTest","methodSignature":"jenkins.security.UserDetailsCacheTest.getCachedFalseNotFound:void()","methodSource":"@Test\n    public void getCachedFalseNotFound() {\n        UserDetailsCache cache \u003d UserDetailsCache.get();\n        assertNotNull(cache);\n        UserDetails bob \u003d cache.getCached(\"bob\");\n        assertNull(bob);\n    }"},{"className":"jenkins.slaves.OldRemotingAgentTest","methodSignature":"jenkins.slaves.OldRemotingAgentTest.shouldBeAbleToConnectAgentWithMinimumSupportedVersion:void()","methodSource":"@Test\n    @Issue(\"JENKINS-48761\")\n    public void shouldBeAbleToConnectAgentWithMinimumSupportedVersion() throws Exception {\n        Label agentLabel \u003d new LabelAtom(\"old-agent\");\n        Slave agent \u003d j.createOnlineSlave(agentLabel);\n        boolean isUnix \u003d agent.getComputer().isUnix();\n        assertThat(\"Received wrong agent version. A minimum supported version is expected\",\n                agent.getComputer().getSlaveVersion(),\n                equalTo(RemotingVersionInfo.getMinimumSupportedVersion().toString()));\n\n        // Just ensure we are able to run something on the agent\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"foo\");\n        project.setAssignedLabel(agentLabel);\n        project.getBuildersList().add(isUnix ? new Shell(\"echo Hello\") : new BatchFile(\"echo \u0027hello\u0027\"));\n        j.buildAndAssertSuccess(project);\n\n        // Run agent monitors\n        NodeMonitorAssert.assertMonitors(NodeMonitor.getAll(), agent.getComputer());\n    }","advisory":"JENKINS-48761"},{"className":"jenkins.slaves.OldRemotingAgentTest","methodSignature":"jenkins.slaves.OldRemotingAgentTest.remoteConsoleNote:void()","methodSource":"@Issue(\"JENKINS-55257\")\n    @Test\n    public void remoteConsoleNote() throws Exception {\n        Slave agent \u003d j.createOnlineSlave();\n        FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.setAssignedLabel(agent.getSelfLabel());\n        project.getBuildersList().add(new TestBuilder() {\n            @Override\n            public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                build.getWorkspace().act(new RemoteConsoleNotePrinter(listener));\n                return true;\n            }\n        });\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(project);\n        StringWriter sw \u003d new StringWriter();\n        // The note will not actually work by default; we just want to ensure that the attempt is ignored without breaking the build.\n        // But for purposes of testing, check that the note really made it into the log.\n        boolean insecureOriginal \u003d ConsoleNote.INSECURE;\n        ConsoleNote.INSECURE \u003d true;\n        try {\n            b.getLogText().writeHtmlTo(0, sw);\n        } finally {\n            ConsoleNote.INSECURE \u003d insecureOriginal;\n        }\n        assertThat(sw.toString(), containsString(\"@@@ANNOTATED@@@\"));\n    }","advisory":"JENKINS-55257"},{"className":"jenkins.slaves.RemotingVersionInfoTest","methodSignature":"jenkins.slaves.RemotingVersionInfoTest.warShouldIncludeRemotingManifestEntries:void()","methodSource":"@Test\n    @Issue(\"JENKINS-48766\")\n    public void warShouldIncludeRemotingManifestEntries() throws Exception {\n        ZipFile jenkinsWar \u003d new ZipFile(new File(j.getWebAppRoot(), \"../jenkins.war\"));\n        ZipEntry entry \u003d new JarEntry(\"META-INF/MANIFEST.MF\");\n        try (InputStream inputStream \u003d jenkinsWar.getInputStream(entry)) {\n            assertNotNull(\"Cannot open input stream for /META-INF/MANIFEST.MF\", inputStream);\n            Manifest manifest \u003d new Manifest(inputStream);\n\n            assertAttributeValue(manifest, \"Remoting-Embedded-Version\", RemotingVersionInfo.getEmbeddedVersion());\n            assertAttributeValue(manifest, \"Remoting-Minimum-Supported-Version\", RemotingVersionInfo.getMinimumSupportedVersion());\n        }\n    }","advisory":"JENKINS-48766"},{"className":"jenkins.slaves.restarter.JnlpSlaveRestarterInstallerTest","methodSignature":"jenkins.slaves.restarter.JnlpSlaveRestarterInstallerTest.tcpReconnection:void()","methodSource":"@Issue(\"JENKINS-19055\")\n    @Test\n    public void tcpReconnection() throws Throwable {\n        reconnection(false);\n    }","advisory":"JENKINS-19055"},{"className":"jenkins.slaves.restarter.JnlpSlaveRestarterInstallerTest","methodSignature":"jenkins.slaves.restarter.JnlpSlaveRestarterInstallerTest.webSocketReconnection:void()","methodSource":"@Issue(\"JENKINS-66446\")\n    @Test\n    public void webSocketReconnection() throws Throwable {\n        reconnection(true);\n    }","advisory":"JENKINS-66446"},{"className":"jenkins.slaves.UnsupportedRemotingAgentEscapeHatchTest","methodSignature":"jenkins.slaves.UnsupportedRemotingAgentEscapeHatchTest.shouldBeAbleToConnectAgentWithUnsupportedVersionWithEscapeHatch:void()","methodSource":"@Issue(\"JENKINS-50211\")\n    @Test\n    public void shouldBeAbleToConnectAgentWithUnsupportedVersionWithEscapeHatch() throws Exception {\n        Slave agent \u003d j.createOnlineSlave();\n        assertThat(agent.toComputer().getLog(), containsString(\"The Remoting version is older than the minimum required version\"));\n        assertThat(agent.toComputer().getLog(), containsString(\"The connection will be allowed, but compatibility is NOT guaranteed\"));\n\n        // Ensure we are able to run something on the agent\n        FreeStyleProject project \u003d j.createFreeStyleProject(\"foo\");\n        project.setAssignedLabel(agent.getSelfLabel());\n        project.getBuildersList().add(agent.getComputer().isUnix()\n                ? new Shell(\"echo Hello\")\n                : new BatchFile(\"echo \u0027hello\u0027\"));\n        j.buildAndAssertSuccess(project);\n    }","advisory":"JENKINS-50211"},{"className":"jenkins.slaves.UnsupportedRemotingAgentTest","methodSignature":"jenkins.slaves.UnsupportedRemotingAgentTest.shouldNotBeAbleToConnectAgentWithUnsupportedVersion:void()","methodSource":"@Issue(\"JENKINS-50211\")\n    @Test\n    public void shouldNotBeAbleToConnectAgentWithUnsupportedVersion() throws Exception {\n        Slave agent \u003d j.createSlave();\n        ExecutionException e \u003d assertThrows(ExecutionException.class, () -\u003e agent.toComputer().connect(false).get());\n        assertThat(e.getCause(), instanceOf(IOException.class));\n        assertThat(e.getMessage(), containsString(\"Agent failed to connect\"));\n        assertThat(agent.toComputer().getLog(), containsString(\"Rejecting the connection because the Remoting version is older than the minimum required version\"));\n    }","advisory":"JENKINS-50211"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.retainVariable_removeUnwantedVariables_batch:void()","methodSource":"@Test\n    public void retainVariable_removeUnwantedVariables_batch() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        BatchFile batch \u003d new BatchFile(\"echo \\\"begin %what% %who% end\\\"\");\n        p.getBuildersList().add(batch);\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"what\", \"Hello\"),\n                new StringParameterDefinition(\"who\", \"World\")\n        ));\n\n        { // the rule allows the user to retain only a subset of variable\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"who\", \"world\")\n            )));\n\n            assertContainsSequentially(build, \"begin hello  end\");\n            assertDoesNotContainsSequentially(build, \"world\");\n        }\n\n        { // the rule allows the user to retain only a subset of variable (second example)\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"who\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"who\", \"world\")\n            )));\n\n            assertContainsSequentially(build, \"begin  world end\");\n            assertDoesNotContainsSequentially(build, \"hello\");\n        }\n    }"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.retainVariable_removeModifiedSystemEnv_batch:void()","methodSource":"@Test\n    public void retainVariable_removeModifiedSystemEnv_batch() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        BatchFile batch \u003d new BatchFile(\"echo \\\"begin %what% [\u003d[%path%]\u003d] end\\\"\");\n        p.getBuildersList().add(batch);\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"what\", \"Hello\"),\n                // override the System env variable\n                new StringParameterDefinition(\"path\", null)\n        ));\n\n        String initialValueOfPath;\n\n        { // no attempt to modify path (except other plugin)\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\")\n            )));\n\n            initialValueOfPath \u003d findStringEnclosedBy(build, \"[\u003d[\", \"]\u003d]\");\n            assertContainsSequentially(build, \"hello\");\n        }\n\n        { // does not accept modification of path\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"path\", \"modificationOfPath\")\n            )));\n\n            // potentially plugins modified the path also\n            assertContainsSequentially(build, \"begin hello\");\n            assertContainsSequentially(build, initialValueOfPath);\n            assertDoesNotContainsSequentially(build, \"modificationOfPath\");\n        }\n\n        { // accept modification of path\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what path\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"path\", \"modificationOfPath;$PATH\")\n            )));\n\n            // potentially plugins modified the path also\n            assertContainsSequentially(build, \"begin hello\");\n            assertContainsSequentially(build, \"modificationOfPath\");\n        }\n    }"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.retainVariable_removeModifiedSystemEnv_shell:void()","methodSource":"@Test\n    public void retainVariable_removeModifiedSystemEnv_shell() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        Shell batch \u003d new Shell(\"echo \\\"begin $what [\u003d[$PATH]\u003d] end\\\"\");\n        p.getBuildersList().add(batch);\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"what\", \"Hello\"),\n                // override the System env variable\n                new StringParameterDefinition(\"path\", null)\n        ));\n\n        String initialValueOfPath;\n\n        { // no attempt to modify path (except other plugin)\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\")\n            )));\n\n            initialValueOfPath \u003d findStringEnclosedBy(build, \"[\u003d[\", \"]\u003d]\");\n            assertContainsSequentially(build, \"hello\");\n        }\n\n        { // does not accept modification of path\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"path\", \"modificationOfPath\")\n            )));\n\n            // potentially plugins modified the path also\n            assertContainsSequentially(build, \"begin hello\");\n            assertContainsSequentially(build, initialValueOfPath);\n            assertDoesNotContainsSequentially(build, \"modificationOfPath\");\n        }\n\n        { // accept modification of path\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what path\");\n            batch.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"path\", \"modificationOfPath;$PATH\")\n            )));\n\n            // potentially plugins modified the path also\n            assertContainsSequentially(build, \"begin hello\");\n            assertContainsSequentially(build, \"modificationOfPath\");\n        }\n    }"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.retainVariable_removeUnwantedVariables_shell:void()","methodSource":"@Test\n    public void retainVariable_removeUnwantedVariables_shell() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        Shell shell \u003d new Shell(\"echo \\\"begin $what $who end\\\"\");\n        p.getBuildersList().add(shell);\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"what\", \"Hello\"),\n                new StringParameterDefinition(\"who\", \"World\")\n        ));\n\n        { // the rule allows the user to retain only a subset of variable\n            RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n            localRule.setVariables(\"what\");\n            shell.setConfiguredLocalRules(List.of(localRule));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"who\", \"world\")\n            )));\n\n            assertContainsSequentially(build, \"begin hello  end\");\n            assertDoesNotContainsSequentially(build, \"world\");\n        }\n    }"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.retainVariable_removeSystemVariables_shell:void()","methodSource":"@Test\n    public void retainVariable_removeSystemVariables_shell() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        Shell shell \u003d new Shell(\"env\");\n        p.getBuildersList().add(shell);\n\n        FreeStyleBuild build \u003d j.buildAndAssertSuccess(p);\n        List\u003cString\u003e unfilteredLogOutput \u003d build.getLog(200).stream().filter(s -\u003e s.contains(\"\u003d\")).map(s -\u003e s.substring(0, s.indexOf(\u0027\u003d\u0027))).collect(Collectors.toList());\n\n        p.getBuildersList().remove(shell);\n\n        Shell filteredShell \u003d new Shell(\"env\");\n\n        RetainVariablesLocalRule localRule \u003d new RetainVariablesLocalRule();\n        localRule.setVariables(\"path\"); // seems to work without but may be env dependent\n        localRule.setRetainCharacteristicEnvVars(false);\n        localRule.setProcessVariablesHandling(RetainVariablesLocalRule.ProcessVariablesHandling.REMOVE);\n        filteredShell.setConfiguredLocalRules(List.of(localRule));\n        p.getBuildersList().add(filteredShell);\n\n        build \u003d j.buildAndAssertSuccess(p);\n        List\u003cString\u003e filteredLogOutput \u003d build.getLog(200).stream().filter(s -\u003e s.contains(\"\u003d\")).map(s -\u003e s.substring(0, s.indexOf(\u0027\u003d\u0027))).collect(Collectors.toList());\n\n        assertTrue(filteredLogOutput.size() \u003c unfilteredLogOutput.size() - 10); // 10 is a value slightly larger than the number of characteristic env vars (7)\n        List\u003cString\u003e filteredButNotUnfiltered \u003d new ArrayList\u003c\u003e(filteredLogOutput);\n        filteredButNotUnfiltered.removeAll(unfilteredLogOutput);\n        assertFalse(filteredLogOutput.contains(\"HOME\"));\n        assertFalse(filteredLogOutput.contains(\"USER\"));\n        assertFalse(filteredLogOutput.contains(\"JENKINS_HOME\"));\n        assertFalse(filteredLogOutput.contains(\"\"));\n    }"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.multipleBuildSteps_haveSeparateRules_batch:void()","methodSource":"@Test\n    public void multipleBuildSteps_haveSeparateRules_batch() throws Exception {\n        assumeTrue(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        BatchFile batch1 \u003d new BatchFile(\"echo \\\"Step1: %what% %who%\\\"\");\n        BatchFile batch2 \u003d new BatchFile(\"echo \\\"Step2: %what% %who%\\\"\");\n        p.getBuildersList().add(batch1);\n        p.getBuildersList().add(batch2);\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"what\", \"Hello\"),\n                new StringParameterDefinition(\"who\", \"World\")\n        ));\n\n        { // two steps with a specified local rule on each, there is not interaction\n            RetainVariablesLocalRule localRule1 \u003d new RetainVariablesLocalRule();\n            // take care to allow the PATH to be used, without that the cmd is not found\n            localRule1.setVariables(\"what\");\n            batch1.setConfiguredLocalRules(List.of(localRule1));\n\n            RetainVariablesLocalRule localRule2 \u003d new RetainVariablesLocalRule();\n            // take care to allow the PATH to be used, without that the cmd is not found\n            localRule2.setVariables(\"who\");\n            batch2.setConfiguredLocalRules(List.of(localRule2));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"who\", \"world\")\n            )));\n\n            assertContainsSequentially(build, \"Step1: hello\");\n            // due to the display of each command, the log displays `echo \"Step2:  world\"`, then on the next line the result\n            assertDoesNotContainsSequentially(build, \"world\", \"Step2:\", \"world\");\n            assertContainsSequentially(build, \"Step2:  world\");\n        }\n    }"},{"className":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest","methodSignature":"jenkins.tasks.filters.impl.RetainVariablesLocalRuleTest.multipleBuildSteps_haveSeparateRules_shell:void()","methodSource":"@Test\n    public void multipleBuildSteps_haveSeparateRules_shell() throws Exception {\n        assumeFalse(Functions.isWindows());\n\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        Shell batch1 \u003d new Shell(\"echo \\\"Step1: $what $who\\\"\");\n        Shell batch2 \u003d new Shell(\"echo \\\"Step2: $what $who\\\"\");\n        p.getBuildersList().add(batch1);\n        p.getBuildersList().add(batch2);\n        p.addProperty(new ParametersDefinitionProperty(\n                new StringParameterDefinition(\"what\", \"Hello\"),\n                new StringParameterDefinition(\"who\", \"World\")\n        ));\n\n        { // two steps with a specified local rule on each, there is not interaction\n            RetainVariablesLocalRule localRule1 \u003d new RetainVariablesLocalRule();\n            // take care to allow the PATH to be used, without that the cmd is not found\n            localRule1.setVariables(\"what\");\n            batch1.setConfiguredLocalRules(List.of(localRule1));\n\n            RetainVariablesLocalRule localRule2 \u003d new RetainVariablesLocalRule();\n            // take care to allow the PATH to be used, without that the cmd is not found\n            localRule2.setVariables(\"who\");\n            batch2.setConfiguredLocalRules(List.of(localRule2));\n\n            FreeStyleBuild build \u003d j.assertBuildStatus(Result.SUCCESS, p.scheduleBuild2(0, (Cause) null, new ParametersAction(\n                    new StringParameterValue(\"what\", \"hello\"),\n                    new StringParameterValue(\"who\", \"world\")\n            )));\n\n            assertContainsSequentially(build, \"Step1: hello\");\n            // due to the display of each command, the log displays `echo \"Step2:  world\"`, then on the next line the result\n            assertDoesNotContainsSequentially(build, \"world\", \"Step2:\", \"world\");\n            assertContainsSequentially(build, \"Step2:  world\");\n        }\n    }"},{"className":"jenkins.tasks.SimpleBuildStepTest","methodSignature":"jenkins.tasks.SimpleBuildStepTest.builderReceivesEnvVars:void()","methodSource":"@Issue(\"JENKINS-29144\")\n    @Test\n    public void builderReceivesEnvVars() throws Exception {\n        final FreeStyleProject p \u003d this.r.createFreeStyleProject(\"JENKINS-29144\");\n        p.addProperty(new ParametersDefinitionProperty(new StringParameterDefinition(\"HELLO\", \"WORLD\")));\n        final Slave slave \u003d r.createOnlineSlave(null, new EnvVars(\"TICKET\", \"JENKINS-29144\"));\n        r.jenkins.addNode(slave);\n        p.setAssignedNode(slave);\n        final Builder bs \u003d new StepThatGetsEnvironmentContents();\n        p.getBuildersList().add(bs);\n        r.buildAndAssertSuccess(p);\n    }","advisory":"JENKINS-29144"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.envOverride:void()","methodSource":"@Test public void envOverride() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildWrappersList().add(new WrapperWithEnvOverride());\n        CaptureEnvironmentBuilder captureEnvironment \u003d new CaptureEnvironmentBuilder();\n        p.getBuildersList().add(captureEnvironment);\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        String path \u003d captureEnvironment.getEnvVars().get(\"PATH\");\n        assertTrue(path, path.startsWith(b.getWorkspace().child(\"bin\").getRemote() + File.pathSeparatorChar));\n    }"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.envOverrideExpand:void()","methodSource":"@Test public void envOverrideExpand() throws Exception {\n        Assume.assumeFalse(Functions.isWindows());\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildWrappersList().add(new WrapperWithEnvOverrideExpand());\n        SpecialEnvSlave slave \u003d new SpecialEnvSlave(tmp.getRoot(), r.createComputerLauncher(null));\n        r.jenkins.addNode(slave);\n        p.setAssignedNode(slave);\n        JDK jdk \u003d new JDK(\"test\", \"/opt/jdk\");\n        r.jenkins.getJDKs().add(jdk);\n        p.setJDK(jdk);\n        CaptureEnvironmentBuilder captureEnvironment \u003d new CaptureEnvironmentBuilder();\n        p.getBuildersList().add(captureEnvironment);\n        p.getBuildersList().add(new Shell(\"echo effective PATH\u003d$PATH\"));\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        String expected \u003d \"/home/jenkins/extra/bin:/opt/jdk/bin:/usr/bin:/bin\";\n        assertEquals(expected, captureEnvironment.getEnvVars().get(\"PATH\"));\n        // TODO why is /opt/jdk/bin added twice? In CommandInterpreter.perform, envVars right before Launcher.launch is correct, but this somehow sneaks in.\n        r.assertLogContains(\"effective PATH\u003d/opt/jdk/bin:\" + expected, b);\n    }"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.disposer:void()","methodSource":"@Test public void disposer() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildWrappersList().add(new WrapperWithDisposer());\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"ran DisposerImpl #1\", b);\n        r.assertLogNotContains(\"ran DisposerImpl #2\", b);\n    }"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.disposerForPreCheckoutWrapper:void()","methodSource":"@Test public void disposerForPreCheckoutWrapper() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildWrappersList().add(new PreCheckoutWrapperWithDisposer());\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(p);\n        r.assertLogContains(\"ran DisposerImpl #1\", b);\n        r.assertLogNotContains(\"ran DisposerImpl #2\", b);\n    }"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.disposerForPreCheckoutWrapperWithScmError:void()","methodSource":"@Issue(\"JENKINS-43889\")\n    @Test public void disposerForPreCheckoutWrapperWithScmError() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.setScm(new FailingSCM());\n        p.getBuildWrappersList().add(new PreCheckoutWrapperWithDisposer());\n        FreeStyleBuild b \u003d r.buildAndAssertStatus(Result.FAILURE, p);\n        r.assertLogContains(\"ran DisposerImpl #1\", b);\n        r.assertLogNotContains(\"ran DisposerImpl #2\", b);\n    }","advisory":"JENKINS-43889"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.failedJobWithInterruptedDisposer:void()","methodSource":"@Test public void failedJobWithInterruptedDisposer() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildersList().add(new FailureBuilder());\n        p.getBuildWrappersList().add(new WrapperWithDisposer());\n        p.getBuildWrappersList().add(new InterruptedDisposerWrapper());\n        // build is ABORTED because of InterruptedException during tearDown (trumps the FAILURE result)\n        FreeStyleBuild b \u003d r.buildAndAssertStatus(Result.ABORTED, p);\n        r.assertLogContains(\"tearDown InterruptedDisposerImpl\", b);\n        r.assertLogContains(\"ran DisposerImpl\", b); // ran despite earlier InterruptedException\n    }"},{"className":"jenkins.tasks.SimpleBuildWrapperTest","methodSignature":"jenkins.tasks.SimpleBuildWrapperTest.loggerDecorator:void()","methodSource":"@Issue(\"JENKINS-27392\")\n    @Test public void loggerDecorator() throws Exception {\n        FreeStyleProject p \u003d r.createFreeStyleProject();\n        p.getBuildWrappersList().add(new WrapperWithLogger());\n        p.getBuildersList().add(new TestBuilder() {\n            @Override public boolean perform(AbstractBuild\u003c?, ?\u003e build, Launcher launcher, BuildListener listener) throws InterruptedException, IOException {\n                listener.getLogger().println(\"sending a message\");\n                return true;\n            }\n        });\n        r.assertLogContains(\"SENDING A MESSAGE\", r.buildAndAssertSuccess(p));\n    }","advisory":"JENKINS-27392"},{"className":"jenkins.telemetry.TelemetryTest","methodSignature":"jenkins.telemetry.TelemetryTest.testSubmission:void()","methodSource":"@Test\n    public void testSubmission() throws Exception {\n        j.jenkins.setNoUsageStatistics(false); // tests usually don\u0027t submit this, but we need this\n        assertEquals(\"no requests received\", 0, counter);\n        ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(logger::getMessages, hasItem(\"Telemetry submission received response 200 for: test-data\"));\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(logger::getMessages, hasItem(\"Skipping telemetry for \u0027future\u0027 as it is configured to start later\"));\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(logger::getMessages, hasItem(\"Skipping telemetry for \u0027past\u0027 as it is configured to end in the past\"));\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(logger::getMessages, hasItem(\"Skipping telemetry for \u0027empty\u0027 as it has no data\"));\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e types, hasItem(\"test-data\"));\n        assertThat(types, not(hasItem(\"future\")));\n        assertThat(types, not(hasItem(\"past\")));\n        assertThat(correlators.size(), is(counter));\n        assertTrue(Pattern.compile(\"[0-9a-f]+\").matcher(correlators.first()).matches());\n        assertThat(types, not(hasItem(\"empty\")));\n        assertTrue(\"at least one request received\", counter \u003e 0); // TestTelemetry plus whatever real impls exist\n    }"},{"className":"jenkins.telemetry.TelemetryTest","methodSignature":"jenkins.telemetry.TelemetryTest.testPerTrialCorrelator:void()","methodSource":"@Test\n    public void testPerTrialCorrelator() throws Exception {\n        Correlator correlator \u003d ExtensionList.lookupSingleton(Correlator.class);\n        String correlationId \u003d \"00000000-0000-0000-0000-000000000000\";\n        correlator.setCorrelationId(correlationId);\n\n        ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e types, hasItem(\"test-data\"));\n        //90ecf3ce1cd5ba1e5ad3cde7ad08a941e884f2e4d9bd463361715abab8efedc5\n        assertThat(correlators, hasItem(DigestUtils.sha256Hex(correlationId + \"test-data\")));\n    }"},{"className":"jenkins.telemetry.TelemetryTest","methodSignature":"jenkins.telemetry.TelemetryTest.testNonSubmissionOnError:void()","methodSource":"@Test\n    public void testNonSubmissionOnError() throws Exception {\n        assertEquals(\"no requests received\", 0, counter);\n        ExtensionList.lookupSingleton(Telemetry.TelemetryReporter.class).doRun();\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(logger::getMessages, hasItem(\"Failed to build telemetry content for: \u0027throwing\u0027\"));\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(2, TimeUnit.SECONDS)\n                .until(logger::getMessages, hasItem(\"Skipping telemetry for \u0027throwing\u0027 as it has no data\"));\n        await().pollInterval(250, TimeUnit.MILLISECONDS)\n                .atMost(10, TimeUnit.SECONDS)\n                .until(() -\u003e types, is(not(empty())));\n        assertThat(types, not(contains(\"throwing\")));\n    }"},{"className":"jenkins.triggers.ReverseBuildTriggerAfterRestartTest","methodSignature":"jenkins.triggers.ReverseBuildTriggerAfterRestartTest.testExecutionOfReverseBuildTriggersAfterRestart:void()","methodSource":"@Issue(\"JENKINS-67237\")\n    @Test\n    public void testExecutionOfReverseBuildTriggersAfterRestart() throws Throwable {\n        String nameOfUpstreamProject \u003d \"upstreamProject\";\n        String nameOfDownstreamProject \u003d \"downstreamProject\";\n\n        rule.then(j -\u003e {\n            j.createFreeStyleProject(nameOfUpstreamProject);\n            FreeStyleProject downstreamProject \u003d j.createFreeStyleProject(nameOfDownstreamProject);\n            downstreamProject.addTrigger(new ReverseBuildTrigger(nameOfUpstreamProject));\n            downstreamProject.save();\n        });\n\n        rule.then(j -\u003e {\n            FreeStyleProject upstreamProject \u003d j.jenkins.getItem(nameOfUpstreamProject, j.jenkins, FreeStyleProject.class);\n            j.buildAndAssertSuccess(upstreamProject);\n            j.waitUntilNoActivity();\n\n            FreeStyleProject downstreamProject \u003d j.jenkins.getItem(nameOfDownstreamProject, j.jenkins, FreeStyleProject.class);\n            assertNotNull(downstreamProject.getLastBuild());\n        });\n    }","advisory":"JENKINS-67237"},{"className":"jenkins.triggers.ReverseBuildTriggerTest","methodSignature":"jenkins.triggers.ReverseBuildTriggerTest.configRoundtrip:void()","methodSource":"@Test public void configRoundtrip() throws Exception {\n        r.createFreeStyleProject(\"upstream\");\n        FreeStyleProject downstream \u003d r.createFreeStyleProject(\"downstream\");\n        FreeStyleProject wayDownstream \u003d r.createFreeStyleProject(\"wayDownstream\");\n        downstream.addTrigger(new ReverseBuildTrigger(\"upstream\", Result.SUCCESS));\n        downstream.getPublishersList().add(new BuildTrigger(Set.of(wayDownstream), Result.SUCCESS));\n        downstream.save();\n        r.configRoundtrip(downstream);\n        ReverseBuildTrigger rbt \u003d downstream.getTrigger(ReverseBuildTrigger.class);\n        assertNotNull(rbt);\n        assertEquals(\"upstream\", rbt.getUpstreamProjects());\n        assertEquals(Result.SUCCESS, rbt.getThreshold());\n        BuildTrigger bt \u003d downstream.getPublishersList().get(BuildTrigger.class);\n        assertNotNull(bt);\n        assertEquals(List.of(wayDownstream), bt.getChildProjects(downstream));\n        assertEquals(Result.SUCCESS, bt.getThreshold());\n    }"},{"className":"jenkins.triggers.ReverseBuildTriggerTest","methodSignature":"jenkins.triggers.ReverseBuildTriggerTest.upstreamProjectSecurity:void()","methodSource":"@Test public void upstreamProjectSecurity() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        MockAuthorizationStrategy auth \u003d new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"alice\", \"bob\")\n                .grant(Computer.BUILD).everywhere().to(\"alice\", \"bob\")\n                .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\");\n        r.jenkins.setAuthorizationStrategy(auth);\n        String upstreamName \u003d \"upstr3am\"; // do not clash with English messages!\n        final FreeStyleProject upstream \u003d r.createFreeStyleProject(upstreamName);\n        String downstreamName \u003d \"d0wnstr3am\";\n        FreeStyleProject downstream \u003d r.createFreeStyleProject(downstreamName);\n        auth.grant(Item.READ).onItems(downstream).to(\"alice\")\n            .grant(Item.READ).onItems(upstream).to(\"bob\");\n        @SuppressWarnings(\"rawtypes\") Trigger\u003cJob\u003e t \u003d new ReverseBuildTrigger(upstreamName, Result.SUCCESS);\n        downstream.addTrigger(t);\n        t.start(downstream, true); // as in AbstractProject.submit\n        r.jenkins.rebuildDependencyGraph(); // as in AbstractProject.doConfigSubmit\n        assertEquals(List.of(downstream), upstream.getDownstreamProjects());\n        // TODO could check doCheckUpstreamProjects, though it is not terribly interesting\n        // Legacy mode: alice has no read permission on upstream but it works anyway\n        FreeStyleBuild b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogContains(downstreamName, b);\n        r.waitUntilNoActivity();\n        assertNotNull(JenkinsRule.getLog(b), downstream.getLastBuild());\n        assertEquals(1, downstream.getLastBuild().number);\n        // A QIA is configured but does not specify any authentication for downstream, so upstream should not trigger it:\n        QueueItemAuthenticatorConfiguration.get()\n                .getAuthenticators()\n                .add(new MockQueueItemAuthenticator()\n                        .authenticate(upstreamName, User.get(\"admin\").impersonate2())\n                        .authenticate(downstreamName, Jenkins.ANONYMOUS2));\n        b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogContains(downstreamName, b);\n        r.assertLogContains(Messages.ReverseBuildTrigger_running_as_cannot_even_see_for_trigger_f(\"anonymous\", upstreamName, downstreamName), b);\n        r.waitUntilNoActivity();\n        assertEquals(1, downstream.getLastBuild().number);\n        // Auth for upstream is defined but cannot see downstream, so no message is printed about it:\n        QueueItemAuthenticatorConfiguration.get()\n                .getAuthenticators()\n                .replace(new MockQueueItemAuthenticator()\n                        .authenticate(upstreamName, User.get(\"bob\").impersonate2())\n                        .authenticate(downstreamName, Jenkins.ANONYMOUS2));\n        b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogNotContains(downstreamName, b);\n        r.waitUntilNoActivity();\n        assertEquals(1, downstream.getLastBuild().number);\n        // Alice can see upstream, so downstream gets built, but the upstream build cannot see downstream:\n        auth.grant(Item.READ).onItems(upstream).to(\"alice\", \"bob\");\n        QueueItemAuthenticatorConfiguration.get()\n                .getAuthenticators()\n                .replace(new MockQueueItemAuthenticator()\n                        .authenticate(upstreamName, User.get(\"bob\").impersonate2())\n                        .authenticate(downstreamName, User.get(\"alice\").impersonate2()));\n        b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogNotContains(downstreamName, b);\n        r.waitUntilNoActivity();\n        assertEquals(2, downstream.getLastBuild().number);\n        assertEquals(new Cause.UpstreamCause((Run) b), downstream.getLastBuild().getCause(Cause.UpstreamCause.class));\n        // Now if upstream build is permitted to report on downstream:\n        QueueItemAuthenticatorConfiguration.get()\n                .getAuthenticators()\n                .replace(new MockQueueItemAuthenticator()\n                        .authenticate(upstreamName, User.get(\"admin\").impersonate2())\n                        .authenticate(downstreamName, User.get(\"alice\").impersonate2()));\n        b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogContains(downstreamName, b);\n        r.waitUntilNoActivity();\n        assertEquals(3, downstream.getLastBuild().number);\n        assertEquals(new Cause.UpstreamCause((Run) b), downstream.getLastBuild().getCause(Cause.UpstreamCause.class));\n\n        // Alice can only DISCOVER upstream, so downstream does not get built, but the upstream build cannot DISCOVER downstream\n        auth \u003d new MockAuthorizationStrategy()\n                .grant(Jenkins.READ).everywhere().to(\"alice\", \"bob\")\n                .grant(Computer.BUILD).everywhere().to(\"alice\", \"bob\")\n                .grant(Jenkins.ADMINISTER).everywhere().to(\"admin\")\n                .grant(Item.READ).onItems(upstream).to(\"bob\")\n                .grant(Item.DISCOVER).onItems(upstream).to(\"alice\");\n        r.jenkins.setAuthorizationStrategy(auth);\n        auth.grant(Item.READ).onItems(downstream).to(\"alice\");\n        QueueItemAuthenticatorConfiguration.get()\n                .getAuthenticators()\n                .replace(new MockQueueItemAuthenticator()\n                        .authenticate(upstreamName, User.get(\"bob\").impersonate2())\n                        .authenticate(downstreamName, User.get(\"alice\").impersonate2()));\n        b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogNotContains(downstreamName, b);\n        r.waitUntilNoActivity();\n        assertEquals(3, downstream.getLastBuild().number);\n\n        // A QIA is configured but does not specify any authentication for downstream, anonymous can only DISCOVER upstream\n        // so no message is printed about it, and no Exception neither (JENKINS-42707)\n        auth.grant(Item.READ).onItems(upstream).to(\"bob\");\n        auth.grant(Item.DISCOVER).onItems(upstream).to(\"anonymous\");\n        QueueItemAuthenticatorConfiguration.get()\n                .getAuthenticators()\n                .replace(new MockQueueItemAuthenticator()\n                        .authenticate(upstreamName, User.get(\"bob\").impersonate2())\n                        .authenticate(downstreamName, Jenkins.ANONYMOUS2));\n        b \u003d r.buildAndAssertSuccess(upstream);\n        r.assertLogNotContains(downstreamName, b);\n        r.assertLogNotContains(\"Please login to access job \" + upstreamName, b);\n        r.waitUntilNoActivity();\n        assertEquals(3, downstream.getLastBuild().number);\n    }"},{"className":"jenkins.triggers.ReverseBuildTriggerTest","methodSignature":"jenkins.triggers.ReverseBuildTriggerTest.nullJobInTriggerNotCausesNPE:void()","methodSource":"@Issue(\"JENKINS-29876\")\n    @Test\n    public void nullJobInTriggerNotCausesNPE() throws Exception {\n        final FreeStyleProject upstreamJob \u003d r.createFreeStyleProject(\"upstream\");\n\n        //job with trigger.job \u003d\u003d null\n        final FreeStyleProject downstreamJob1 \u003d r.createFreeStyleProject(\"downstream1\");\n        final ReverseBuildTrigger reverseBuildTrigger \u003d new ReverseBuildTrigger(\"upstream\", Result.SUCCESS);\n        downstreamJob1.addTrigger(reverseBuildTrigger);\n        downstreamJob1.save();\n\n        //job with trigger.job !\u003d null\n        final FreeStyleProject downstreamJob2 \u003d r.createFreeStyleProject(\"downstream2\");\n        final ReverseBuildTrigger reverseBuildTrigger2 \u003d new ReverseBuildTrigger(\"upstream\", Result.SUCCESS);\n        downstreamJob2.addTrigger(reverseBuildTrigger2);\n        downstreamJob2.save();\n        r.configRoundtrip(downstreamJob2);\n\n        r.jenkins.rebuildDependencyGraph();\n        final FreeStyleBuild build \u003d r.buildAndAssertSuccess(upstreamJob);\n        r.waitUntilNoActivity();\n\n        r.assertLogNotContains(\"java.lang.NullPointerException\", build);\n        assertThat(\"Build should be not triggered\", downstreamJob1.getBuilds(), hasSize(0));\n        assertThat(\"Build should be triggered\", downstreamJob2.getBuilds(), not(hasSize(0)));\n    }","advisory":"JENKINS-29876"},{"className":"jenkins.triggers.ReverseBuildTriggerTest","methodSignature":"jenkins.triggers.ReverseBuildTriggerTest.nullUpstreamProjectsNoNPE:void()","methodSource":"@Issue(\"JENKINS-45909\")\n    @Test\n    public void nullUpstreamProjectsNoNPE() throws Exception {\n        //job with trigger.upstreamProjects \u003d\u003d null\n        final FreeStyleProject downstreamJob1 \u003d r.createFreeStyleProject(\"downstream1\");\n        ReverseBuildTrigger trigger \u003d new ReverseBuildTrigger(null);\n        downstreamJob1.addTrigger(trigger);\n        downstreamJob1.save();\n        r.configRoundtrip(downstreamJob1);\n\n        // The reported issue was with Pipeline jobs, which calculate their dependency graphs via\n        // ReverseBuildTrigger.RunListenerImpl, so an additional test may be needed downstream.\n        trigger.buildDependencyGraph(downstreamJob1, Jenkins.get().getDependencyGraph());\n    }","advisory":"JENKINS-45909"},{"className":"jenkins.triggers.ReverseBuildTriggerTest","methodSignature":"jenkins.triggers.ReverseBuildTriggerTest.testGetUpstreamProjectsShouldNullSafe:void()","methodSource":"@Issue(\"JENKINS-46161\")\n    @Test\n    public void testGetUpstreamProjectsShouldNullSafe() throws Exception {\n        ReverseBuildTrigger trigger1 \u003d new ReverseBuildTrigger(null);\n        String upstream1 \u003d trigger1.getUpstreamProjects();\n        assertEquals(\"\", upstream1);\n\n        ReverseBuildTrigger trigger2 \u003d new ReverseBuildTrigger(\"upstream\");\n        String upstream2 \u003d trigger2.getUpstreamProjects();\n        assertEquals(\"upstream\", upstream2);\n\n        ReverseBuildTrigger trigger3 \u003d new ReverseBuildTrigger(\"\");\n        String upstream3 \u003d trigger3.getUpstreamProjects();\n        assertEquals(\"\", upstream3);\n    }","advisory":"JENKINS-46161"},{"className":"jenkins.triggers.TriggerTest","methodSignature":"jenkins.triggers.TriggerTest.testTimerSpentTooMuchTime:void()","methodSource":"@Test\n    public void testTimerSpentTooMuchTime() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"test\");\n\n        l.record(Logger.getLogger(Trigger.class.getName()), Level.WARNING);\n        l.capture(10);\n\n        final BadTimerTrigger trigger \u003d new BadTimerTrigger(\"* * * * *\");\n        p.addTrigger(trigger);\n        p.doReload();\n        while (p.getBuildByNumber(1) \u003d\u003d null) {\n            Thread.sleep(100);\n        }\n        j.waitUntilNoActivity();\n        assertThat(l.getMessages().toArray(new String[0]) [0],\n                containsString(\"Trigger \u0027\" + trigger.getDescriptor().getDisplayName() + \"\u0027 triggered by \u0027\" + p.getFullDisplayName() + \"\u0027 (\" + p.getFullName() + \") spent too much time \"));\n    }"},{"className":"jenkins.triggers.TriggerTest","methodSignature":"jenkins.triggers.TriggerTest.testSlowTriggerAdminMonitorMaxExtries:void()","methodSource":"@Test\n    public void testSlowTriggerAdminMonitorMaxExtries() throws Exception {\n        final FreeStyleProject freeStyleProject \u003d j.createFreeStyleProject();\n        SlowTriggerAdminMonitor stam \u003d SlowTriggerAdminMonitor.getInstance();\n        SlowTriggerAdminMonitor.MAX_ENTRIES \u003d 5;\n        stam.clear();\n\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor1.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor2.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor3.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor4.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor5.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n\n        slowTriggerAdminMonitorCheck(stam, 1, SlowTriggerAdminMonitor.MAX_ENTRIES);\n\n        // Replace the oldest entries\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor6.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        slowTriggerAdminMonitorCheck(stam, 2, SlowTriggerAdminMonitor.MAX_ENTRIES + 1);\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor7.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        slowTriggerAdminMonitorCheck(stam, 3, SlowTriggerAdminMonitor.MAX_ENTRIES + 2);\n\n        // Replace other entry\n        stam.report(DummyTrigger.BadTimerTriggerDescriptor5.class, freeStyleProject.getFullName(), 111);\n        Thread.sleep(100);\n        slowTriggerAdminMonitorCheck(stam, 3, SlowTriggerAdminMonitor.MAX_ENTRIES + 2);\n    }"},{"className":"jenkins.util.FullDuplexHttpServiceTest","methodSignature":"jenkins.util.FullDuplexHttpServiceTest.smokes:void()","methodSource":"@Test\n    public void smokes() throws Exception {\n        logging.record(\"org.eclipse.jetty\", Level.ALL);\n        FullDuplexHttpStream con \u003d new FullDuplexHttpStream(r.getURL(), \"test/\", null);\n        InputStream is \u003d con.getInputStream();\n        OutputStream os \u003d con.getOutputStream();\n        os.write(33);\n        os.flush();\n        Logger.getLogger(FullDuplexHttpServiceTest.class.getName()).info(\"uploaded initial content\");\n        assertEquals(0, is.read()); // see FullDuplexHttpStream.getInputStream\n        assertEquals(66, is.read());\n    }"},{"className":"jenkins.util.JenkinsJVMRealTest","methodSignature":"jenkins.util.JenkinsJVMRealTest.isJenkinsJVM:void()","methodSource":"@Test\n    public void isJenkinsJVM() throws Throwable {\n        assertThat(new IsJenkinsJVM().call(), is(true));\n        Node slave \u003d j.createOnlineSlave();\n        assertThat(slave.getChannel().call(new IsJenkinsJVM()), is(false));\n    }"},{"className":"jenkins.util.ResourceBundleUtilTest","methodSignature":"jenkins.util.ResourceBundleUtilTest.test_known_locale:void()","methodSource":"@Test\n    public void test_known_locale() {\n        JSONObject bundle \u003d ResourceBundleUtil.getBundle(\"hudson.logging.Messages\", Locale.GERMAN);\n        assertEquals(\"Initialisiere Log-Rekorder\", bundle.getString(\"LogRecorderManager.init\"));\n        bundle \u003d ResourceBundleUtil.getBundle(\"hudson.logging.Messages\", new Locale(\"de\"));\n        assertEquals(\"Initialisiere Log-Rekorder\", bundle.getString(\"LogRecorderManager.init\"));\n\n        // Test caching - should get the same bundle instance back...\n        assertSame(ResourceBundleUtil.getBundle(\"hudson.logging.Messages\", new Locale(\"de\")), bundle);\n    }"},{"className":"jenkins.util.ResourceBundleUtilTest","methodSignature":"jenkins.util.ResourceBundleUtilTest.noFallbackLocale:void()","methodSource":"@Test\n    public void noFallbackLocale() {\n        try (var ignored \u003d new DefaultLocale(new Locale(\"fr\"))) {\n            var bundle \u003d ResourceBundleUtil.getBundle(\"hudson.logging.Messages\", new Locale(\"en\"));\n            assertEquals(\"System Log\", bundle.getString(\"LogRecorderManager.DisplayName\"));\n        }\n    }"},{"className":"jenkins.util.ResourceBundleUtilTest","methodSignature":"jenkins.util.ResourceBundleUtilTest.test_unknown_locale:void()","methodSource":"@Test\n    public void test_unknown_locale() {\n        JSONObject bundle \u003d ResourceBundleUtil.getBundle(\"hudson.logging.Messages\", new Locale(\"kok\")); // konkani\n        assertEquals(\"Initializing log recorders\", bundle.getString(\"LogRecorderManager.init\"));\n    }"},{"className":"jenkins.util.ResourceBundleUtilTest","methodSignature":"jenkins.util.ResourceBundleUtilTest.test_unknown_bundle:void()","methodSource":"@Test\n    public void test_unknown_bundle() {\n        assertThrows(MissingResourceException.class, () -\u003e ResourceBundleUtil.getBundle(\"hudson.blah.Whatever\"));\n    }"},{"className":"jenkins.util.SetContextClassLoaderTest","methodSignature":"jenkins.util.SetContextClassLoaderTest.positive:void()","methodSource":"@Test\n    public void positive() throws Throwable {\n        rr.then(SetContextClassLoaderTest::_positive);\n    }"},{"className":"jenkins.util.SetContextClassLoaderTest","methodSignature":"jenkins.util.SetContextClassLoaderTest.negative:void()","methodSource":"@Test\n    public void negative() throws Throwable {\n        rr.then(SetContextClassLoaderTest::_negative);\n    }"},{"className":"jenkins.util.SystemPropertiesTest","methodSignature":"jenkins.util.SystemPropertiesTest.shouldReturnNullIfUndefined:void()","methodSource":"@Test\n    public void shouldReturnNullIfUndefined() throws Exception {\n        assertThat(\"Properties should be null by default\",\n                SystemProperties.getString(\"foo.bar\"), nullValue());\n    }"},{"className":"jenkins.util.SystemPropertiesTest","methodSignature":"jenkins.util.SystemPropertiesTest.shouldInitializeFromSystemProperty:void()","methodSource":"@Test\n    public void shouldInitializeFromSystemProperty() throws Exception {\n        System.setProperty(\"foo.bar\", \"myVal\");\n        assertThat(\"System property should assign the value\",\n                SystemProperties.getString(\"foo.bar\"), equalTo(\"myVal\"));\n    }"},{"className":"jenkins.util.SystemPropertiesTest","methodSignature":"jenkins.util.SystemPropertiesTest.shouldInitializeFromWebAppProperty:void()","methodSource":"@Test\n    public void shouldInitializeFromWebAppProperty() throws Exception {\n        assertThat(\"Property is undefined before test\",\n                SystemProperties.getString(\"foo.bar\"), equalTo(null));\n        setWebAppInitParameter(\"foo.bar\", \"myVal\");\n        assertThat(\"Web App property should assign the value\",\n                SystemProperties.getString(\"foo.bar\"), equalTo(\"myVal\"));\n    }"},{"className":"jenkins.util.SystemPropertiesTest","methodSignature":"jenkins.util.SystemPropertiesTest.shouldUseSystemPropertyAsAHighPriority:void()","methodSource":"@Test\n    public void shouldUseSystemPropertyAsAHighPriority() throws Exception {\n        setWebAppInitParameter(\"install-wizard-path\", \"myVal1\");\n        System.setProperty(\"install-wizard-path\", \"myVal2\");\n        assertThat(\"System property should take system property with a high priority\",\n                SystemProperties.getString(\"install-wizard-path\"), equalTo(\"myVal2\"));\n    }"},{"className":"jenkins.util.SystemPropertiesTest","methodSignature":"jenkins.util.SystemPropertiesTest.shouldReturnWebAppPropertyIfSystemPropertyNotSetAndDefaultIsSet:void()","methodSource":"@Test\n    public void shouldReturnWebAppPropertyIfSystemPropertyNotSetAndDefaultIsSet() throws Exception {\n        assertThat(\"Property is undefined before test\",\n                SystemProperties.getString(\"foo.bar\"), equalTo(null));\n        setWebAppInitParameter(\"foo.bar\", \"myVal\");\n        assertThat(\"Should return web app property if system property is not set and default value is set\",\n                SystemProperties.getString(\"foo.bar\", \"defaultVal\"), equalTo(\"myVal\"));\n    }"},{"className":"jenkins.widgets.BuildListTableTest","methodSignature":"jenkins.widgets.BuildListTableTest.linksFromFolders:void()","methodSource":"@Issue(\"JENKINS-19310\")\n    @Test public void linksFromFolders() throws Exception {\n        MockFolder d \u003d r.createFolder(\"d\");\n        ListView v1 \u003d new ListView(\"v1\", r.jenkins);\n        v1.add(d);\n        r.jenkins.addView(v1);\n        MockFolder d2 \u003d d.createProject(MockFolder.class, \"d2\");\n        FreeStyleProject p \u003d d2.createProject(FreeStyleProject.class, \"p\");\n        r.buildAndAssertSuccess(p);\n        ListView v2 \u003d new ListView(\"v2\", d);\n        v2.setRecurse(true);\n        v2.add(p);\n        d.addView(v2);\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        HtmlPage page \u003d wc.goTo(\"view/v1/job/d/view/v2/builds\");\n        assertEquals(0, wc.waitForBackgroundJavaScript(120000));\n        HtmlAnchor anchor \u003d page.getAnchorByText(\"d » d2 » p\");\n        String href \u003d anchor.getHrefAttribute();\n        URL target \u003d URI.create(page.getUrl().toExternalForm()).resolve(href).toURL();\n        wc.getPage(target);\n        assertEquals(href, r.getURL() + \"view/v1/job/d/view/v2/job/d2/job/p/\", target.toString());\n        page \u003d wc.goTo(\"job/d/view/All/builds\");\n        assertEquals(0, wc.waitForBackgroundJavaScript(120000));\n        anchor \u003d page.getAnchorByText(\"d » d2 » p\");\n        href \u003d anchor.getHrefAttribute();\n        target \u003d URI.create(page.getUrl().toExternalForm()).resolve(href).toURL();\n        wc.getPage(target);\n        assertEquals(href, r.getURL() + \"job/d/job/d2/job/p/\", target.toString());\n    }","advisory":"JENKINS-19310"},{"className":"jenkins.widgets.BuildTimeTrendTest","methodSignature":"jenkins.widgets.BuildTimeTrendTest.withAbstractJob_OnBuiltInNode:void()","methodSource":"@Test\n    public void withAbstractJob_OnBuiltInNode() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        wc.withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"buildTimeTrend\");\n\n        HtmlTable table \u003d page.getDocumentElement().querySelector(\"table[data-is-distributed-build-enabled\u003dfalse]\");\n        assertNotNull(table);\n    }"},{"className":"jenkins.widgets.BuildTimeTrendTest","methodSignature":"jenkins.widgets.BuildTimeTrendTest.withAbstractJob_OnAgentNode:void()","methodSource":"@Test\n    public void withAbstractJob_OnAgentNode() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        DumbSlave agent \u003d j.createSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.setAssignedNode(agent);\n\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        wc.withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"buildTimeTrend\");\n        DomNodeList\u003cDomNode\u003e anchors \u003d page.getDocumentElement().querySelectorAll(\"table[data-is-distributed-build-enabled\u003dtrue] td a\");\n        Optional\u003cDomNode\u003e anchor \u003d anchors.stream()\n                .filter(a -\u003e a.getTextContent().equals(agent.getNodeName()))\n                .findFirst();\n        assertTrue(anchor.isPresent());\n    }"},{"className":"jenkins.widgets.BuildTimeTrendTest","methodSignature":"jenkins.widgets.BuildTimeTrendTest.withAbstractJob_OnBoth:void()","methodSource":"@Test\n    public void withAbstractJob_OnBoth() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        DumbSlave agent \u003d j.createSlave();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n\n        p.setAssignedNode(j.jenkins);\n        j.buildAndAssertSuccess(p);\n\n        p.setAssignedNode(agent);\n        j.buildAndAssertSuccess(p);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        wc.withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"buildTimeTrend\");\n\n        DomNodeList\u003cDomNode\u003e anchors \u003d page.getDocumentElement().querySelectorAll(\"table[data-is-distributed-build-enabled\u003dtrue] td a\");\n        Optional\u003cDomNode\u003e anchor \u003d anchors.stream()\n                .filter(a -\u003e a.getTextContent().equals(agent.getNodeName()))\n                .findFirst();\n        // for the build on agent\n        assertTrue(anchor.isPresent());\n\n        String builtInNode \u003d hudson.model.Messages.Hudson_Computer_DisplayName();\n        DomNodeList\u003cDomNode\u003e tds \u003d page.getDocumentElement().querySelectorAll(\"table[data-is-distributed-build-enabled\u003dtrue] td\");\n        Optional\u003cDomNode\u003e td \u003d tds.stream()\n                .filter(t -\u003e t.getTextContent().equals(builtInNode))\n                .findFirst();\n        // for the build on built-in node\n        assertTrue(td.isPresent());\n    }"},{"className":"jenkins.widgets.BuildTimeTrendTest","methodSignature":"jenkins.widgets.BuildTimeTrendTest.withNonAbstractJob_withoutAgents:void()","methodSource":"@Test\n    @LocalData(\"localDataNonAbstractJob\")\n    public void withNonAbstractJob_withoutAgents() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        TopLevelItem p \u003d j.jenkins.getItem(\"job0\");\n        assertThat(p, instanceOf(NonAbstractJob.class));\n\n        wc.withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"buildTimeTrend\");\n\n        DomNodeList\u003cDomNode\u003e tds \u003d page.getDocumentElement().querySelectorAll(\"table[data-is-distributed-build-enabled\u003dfalse] td\");\n        Optional\u003cDomNode\u003e td \u003d tds.stream()\n                .filter(t -\u003e t.getTextContent().equals(\"#1\"))\n                .findFirst();\n        // for the stored build\n        assertTrue(td.isPresent());\n    }"},{"className":"jenkins.widgets.BuildTimeTrendTest","methodSignature":"jenkins.widgets.BuildTimeTrendTest.withNonAbstractJob_withAgents:void()","methodSource":"@Test\n    @LocalData(\"localDataNonAbstractJob\")\n    @Issue(\"JENKINS-63232\")\n    public void withNonAbstractJob_withAgents() throws Exception {\n        assumeFalse(\"TODO: Windows container agents do not have enough resources to run this test\", Functions.isWindows() \u0026\u0026 System.getenv(\"CI\") !\u003d null);\n        // just to trigger data-is-distributed-build-enabled \u003d true\n        j.createSlave();\n\n        // Before the correction, if there was an agent and the build was not inheriting from AbstractBuild, we got\n        // Uncaught TypeError: Cannot read property \u0027escapeHTML\u0027 of undefined\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        TopLevelItem p \u003d j.jenkins.getItem(\"job0\");\n        assertThat(p, instanceOf(NonAbstractJob.class));\n\n        wc.withThrowExceptionOnFailingStatusCode(false);\n        HtmlPage page \u003d wc.getPage(p, \"buildTimeTrend\");\n\n        DomNodeList\u003cDomNode\u003e tds \u003d page.getDocumentElement().querySelectorAll(\"table[data-is-distributed-build-enabled\u003dtrue] td\");\n        Optional\u003cDomNode\u003e td \u003d tds.stream()\n                .filter(t -\u003e t.getTextContent().equals(\"#1\"))\n                .findFirst();\n        // for the stored build\n        assertTrue(td.isPresent());\n        // with the correction, the last cell is just empty instead of throwing the TypeError\n    }","advisory":"JENKINS-63232"},{"className":"jenkins.widgets.HistoryPageFilterCaseSensitiveSearchTest","methodSignature":"jenkins.widgets.HistoryPageFilterCaseSensitiveSearchTest.should_search_case_sensitively_when_enabled_for_user:void()","methodSource":"@Test\n    public void should_search_case_sensitively_when_enabled_for_user() throws IOException {\n        setCaseSensitiveSearchForUserAndCheckAssertionForGivenSearchString(\"FAILURE\", historyPageFilter -\u003e {\n                Assert.assertEquals(1, historyPageFilter.runs.size());\n                Assert.assertEquals(HistoryPageEntry.getEntryId(2), historyPageFilter.runs.get(0).getEntryId());\n        });\n    }"},{"className":"jenkins.widgets.HistoryPageFilterCaseSensitiveSearchTest","methodSignature":"jenkins.widgets.HistoryPageFilterCaseSensitiveSearchTest.should_skip_result_with_different_capitalization_when_case_sensitively_search_is_enabled_for_user:void()","methodSource":"@Test\n    public void should_skip_result_with_different_capitalization_when_case_sensitively_search_is_enabled_for_user() throws IOException {\n        setCaseSensitiveSearchForUserAndCheckAssertionForGivenSearchString(\n                \"failure\", historyPageFilter -\u003e Assert.assertEquals(0, historyPageFilter.runs.size()));\n    }"},{"className":"jenkins.widgets.HistoryPageFilterTest","methodSignature":"jenkins.widgets.HistoryPageFilterTest.doNotFindSensitiveBuildParams:void()","methodSource":"@Test\n    public void doNotFindSensitiveBuildParams() throws Exception {\n        final FreeStyleProject freeStyleProject \u003d j.createFreeStyleProject();\n        final PasswordParameterDefinition passwordParameterDefinition \u003d new PasswordParameterDefinition(\"password\", Secret.fromString(\"t0ps3cr3t\"), \"description\");\n        final StringParameterDefinition stringParameterDefinition \u003d new StringParameterDefinition(\"key\", \"value\", \"desc\");\n        freeStyleProject.addProperty(new ParametersDefinitionProperty(passwordParameterDefinition, stringParameterDefinition));\n        final FreeStyleBuild build1 \u003d j.buildAndAssertSuccess(freeStyleProject);\n        final FreeStyleBuild build2 \u003d j.waitForCompletion(Objects.requireNonNull(freeStyleProject.scheduleBuild2(\n                0,\n                new ParametersAction(\n                        passwordParameterDefinition.createValue(\"p4ssw0rd\"),\n                        stringParameterDefinition.createValue(\"value123\"))))\n                .waitForStart());\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"value\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs.stream().map(HistoryPageEntry::getEntry).collect(Collectors.toList()), contains(build2, build1));\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"t0p\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs, empty());\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"value123\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs.stream().map(HistoryPageEntry::getEntry).collect(Collectors.toList()), contains(build2));\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"p4ss\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs, empty());\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n    }"},{"className":"jenkins.widgets.HistoryPageFilterTest","methodSignature":"jenkins.widgets.HistoryPageFilterTest.doNotFindSensitiveBuildWrapperVars:void()","methodSource":"@Test\n    public void doNotFindSensitiveBuildWrapperVars() throws Exception {\n        final FreeStyleProject freeStyleProject \u003d j.createFreeStyleProject();\n        freeStyleProject.getBuildWrappersList().add(new BuildWrapperWithSomeSensitiveVars(Map.of(\"key1\", \"value123\", \"key2\", \"value234\", \"key3\", \"s3cr3t\"), Set.of(\"key3\")));\n        final FreeStyleBuild build \u003d j.buildAndAssertSuccess(freeStyleProject);\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"value\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs.stream().map(HistoryPageEntry::getEntry).collect(Collectors.toList()), contains(build));\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"value123\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs.stream().map(HistoryPageEntry::getEntry).collect(Collectors.toList()), contains(build));\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n        {\n            final HistoryPageFilter\u003cFreeStyleBuild\u003e historyPageFilter \u003d new HistoryPageFilter\u003c\u003e(30);\n            historyPageFilter.setSearchString(\"s3cr3t\");\n            historyPageFilter.add(freeStyleProject.getBuilds());\n            assertThat(historyPageFilter.runs, empty());\n            assertThat(historyPageFilter.queueItems, empty());\n        }\n    }"},{"className":"lib.form.AdvancedButtonTest","methodSignature":"lib.form.AdvancedButtonTest.testNestedOptionalBlock:void()","methodSource":"@Test\n    public void testNestedOptionalBlock() throws Exception {\n        HtmlPage page \u003d j.createWebClient().goTo(\"self/testNestedOptionalBlock\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        HtmlFormUtil.getButtonByCaption(form, \"Advanced\").click();\n        form.getInputByName(\"c\").click();\n\n        j.submit(form);\n    }"},{"className":"lib.form.AdvancedButtonTest","methodSignature":"lib.form.AdvancedButtonTest.testSectionInsideOfAdvanced:void()","methodSource":"@Issue(\"JENKINS-14632\")\n    @Test\n    public void testSectionInsideOfAdvanced() throws Exception {\n        HtmlPage page \u003d j.createWebClient().goTo(\"self/testSectionInsideOfAdvanced\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        assertFalse(form.getInputByName(\"b\").isDisplayed());\n        HtmlFormUtil.getButtonByCaption(form, \"Advanced\").click();\n        assertTrue(form.getInputByName(\"b\").isDisplayed());\n    }","advisory":"JENKINS-14632"},{"className":"lib.form.ApplyButtonTest","methodSignature":"lib.form.ApplyButtonTest.editDescription:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18436\")\n    public void editDescription() throws Exception {\n        j.jenkins.setMarkupFormatter(RawHtmlMarkupFormatter.INSTANCE); // need something using CodeMirror\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        FreeStyleBuild b \u003d j.buildAndAssertSuccess(p);\n\n        HtmlPage config \u003d j.createWebClient().getPage(b, \"configure\");\n        HtmlForm form \u003d config.getFormByName(\"config\");\n        // HtmlUnit doesn\u0027t have JSON, so we need to emulate one\n        config.executeJavaScript(IOUtils.toString(ApplyButtonTest.class.getResource(\"JSON.js\"), StandardCharsets.UTF_8));\n        // it\u0027s hard to emulate the keytyping, so we just set the value into codemirror and test if this gets\n        // reflected back into TEXTAREA\n        config.executeJavaScript(\"document.getElementsByTagName(\u0027TEXTAREA\u0027)[0].codemirrorObject.setLine(0,\u0027foobar\u0027)\");\n        j.getButtonByCaption(form, \"Apply\").click();\n\n        assertEquals(\"foobar\", b.getDescription());\n    }","advisory":"JENKINS-18436"},{"className":"lib.form.BooleanRadioTest","methodSignature":"lib.form.BooleanRadioTest.test:void()","methodSource":"@Test\n    public void test() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/test1\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        f.getInputByName(\"_.f\").setChecked(true);\n        j.submit(f);\n    }"},{"className":"lib.form.ComboBoxTest","methodSignature":"lib.form.ComboBoxTest.testCompoundFieldDependentComboBox:void()","methodSource":"@Issue(\"JENKINS-16719\")\n    @Test\n    public void testCompoundFieldDependentComboBox() throws Exception {\n        Descriptor d1 \u003d new CompoundFieldComboBoxBuilder.DescriptorImpl();\n        Publisher.all().add(d1);\n        Descriptor d2 \u003d new CompoundField.DescriptorImpl();\n        Publisher.all().add(d2);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getPublishersList().add(new CompoundFieldComboBoxBuilder(new CompoundField(\"AABBCC\", \"XXYYZZ\"), null));\n        try {\n            j.createWebClient().getPage(p, \"configure\");\n\n        } catch (AssertionError e) {\n            if (e.getMessage().contains(\"doFillFooItems is broken\")) {\n                fail(\"Nested field values required for prefill were null\");\n            } else {\n                throw e;\n            }\n        } finally {\n            Publisher.all().remove(d1);\n            Publisher.all().remove(d2);\n        }\n    }","advisory":"JENKINS-16719"},{"className":"lib.form.ComboBoxTest","methodSignature":"lib.form.ComboBoxTest.testEnsureXssNotPossible:void()","methodSource":"@Issue(\"SECURITY-1525\")\n    @Test\n    public void testEnsureXssNotPossible() throws Exception {\n        XssProperty xssProperty \u003d new XssProperty();\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(xssProperty);\n\n        HtmlPage configurePage \u003d j.createWebClient().getPage(p, \"configure\");\n        int numberOfH1Before \u003d configurePage.getElementsByTagName(\"h1\").size();\n\n        HtmlElement comboBox \u003d configurePage.getElementByName(\"_.xss\");\n        HtmlElementUtil.click(comboBox);\n\n        // no additional h1, meaning the \"payload\" is not interpreted\n        int numberOfH1After \u003d configurePage.getElementsByTagName(\"h1\").size();\n\n        assertEquals(numberOfH1Before, numberOfH1After);\n    }","advisory":"SECURITY-1525"},{"className":"lib.form.DropdownListTest","methodSignature":"lib.form.DropdownListTest.test1:void()","methodSource":"@Test\n    public void test1() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/test1\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        j.submit(f);\n    }"},{"className":"lib.form.EnumSetTest","methodSignature":"lib.form.EnumSetTest.test1:void()","methodSource":"@Test\n    public void test1() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/test1\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        j.submit(f);\n    }"},{"className":"lib.form.EnumTest","methodSignature":"lib.form.EnumTest.testSelectionNoDefault:void()","methodSource":"@Test\n    public void testSelectionNoDefault() throws Exception {\n        HtmlForm form \u003d getForm(\"noDefault\");\n        HtmlSelect select;\n\n        select \u003d form.getSelectByName(\"enum1\");\n        assertEquals(BallColor.values().length, select.getOptionSize());\n        assertEquals(BallColor.YELLOW.name(), select.getDefaultValue());\n\n        select \u003d form.getSelectByName(\"enum2\");\n        assertEquals(BallColor.values().length, select.getOptionSize());\n        assertEquals(BallColor.values()[0].name(), select.getDefaultValue());\n    }"},{"className":"lib.form.EnumTest","methodSignature":"lib.form.EnumTest.testSelectionWithDefault:void()","methodSource":"@Test\n    public void testSelectionWithDefault() throws Exception {\n        HtmlForm form \u003d getForm(\"withDefault\");\n        HtmlSelect select;\n\n        select \u003d form.getSelectByName(\"enum1\");\n        assertEquals(BallColor.YELLOW.name(), select.getDefaultValue());\n\n        select \u003d form.getSelectByName(\"enum2\");\n        assertEquals(BallColor.BLUE.name(), select.getDefaultValue());\n    }"},{"className":"lib.form.ExpandableTextboxTest","methodSignature":"lib.form.ExpandableTextboxTest.testMultiline:void()","methodSource":"@Issue(\"JENKINS-2816\")\n    @Test\n    public void testMultiline() throws Exception {\n        // because attribute values are normalized, it\u0027s not very easy to encode multi-line string as @value. So let\u0027s use the system message here.\n        j.jenkins.setSystemMessage(\"foo\\nbar\\nzot\");\n        HtmlPage page \u003d evaluateAsHtml(\"\u003cl:layout\u003e\u003cl:main-panel\u003e\u003ctable\u003e\u003cj:set var\u003d\u0027instance\u0027 value\u003d\u0027${it}\u0027/\u003e\u003cf:expandableTextbox field\u003d\u0027systemMessage\u0027 /\u003e\u003c/table\u003e\u003c/l:main-panel\u003e\u003c/l:layout\u003e\");\n        // System.out.println(page.getWebResponse().getContentAsString());\n\n        NodeList textareas \u003d page.getElementsByTagName(\"textarea\");\n        assertEquals(1, textareas.getLength());\n        assertEquals(j.jenkins.getSystemMessage(), textareas.item(0).getTextContent());\n    }","advisory":"JENKINS-2816"},{"className":"lib.form.ExpandableTextboxTest","methodSignature":"lib.form.ExpandableTextboxTest.noInjectionArePossible:void()","methodSource":"@Test\n    public void noInjectionArePossible() throws Exception {\n        TestRootAction testParams \u003d j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);\n        assertNotNull(testParams);\n\n        checkRegularCase(testParams);\n        checkInjectionInName(testParams);\n    }"},{"className":"lib.form.ExpandableTextboxTest","methodSignature":"lib.form.ExpandableTextboxTest.noXssUsingInputValue:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1498\")\n    public void noXssUsingInputValue() throws Exception {\n        ExpandableTextBoxProperty xssProperty \u003d new ExpandableTextBoxProperty(\"\u003c/textarea\u003e\u003ch1\u003eHACK\u003c/h1\u003e\");\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(xssProperty);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage configurePage \u003d wc.getPage(p, \"configure\");\n\n        int numberOfH1Before \u003d configurePage.getElementsByTagName(\"h1\").size();\n\n        HtmlInput xssInput \u003d configurePage.getElementByName(\"_.theField\");\n        HtmlButton expandButton \u003d (HtmlButton) xssInput.getParentNode().getNextSibling().getFirstChild();\n        HtmlElementUtil.click(expandButton);\n\n        // no additional h1, meaning the \"payload\" is not interpreted\n        int numberOfH1After \u003d configurePage.getElementsByTagName(\"h1\").size();\n\n        assertEquals(numberOfH1Before, numberOfH1After);\n    }","advisory":"SECURITY-1498"},{"className":"lib.form.ExpandableTextboxTest","methodSignature":"lib.form.ExpandableTextboxTest.expandsIntoNewlines:void()","methodSource":"@Test\n    @Issue(\"JENKINS-67627\")\n    public void expandsIntoNewlines() throws Exception {\n        OptionalJobProperty property \u003d new ExpandableTextBoxProperty(\"foo bar baz\"); // A bit of a misnomer here, we\u0027re using code for an existing test\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.addProperty(property);\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage configurePage \u003d wc.getPage(p, \"configure\");\n\n        HtmlInput input \u003d configurePage.getElementByName(\"_.theField\");\n        HtmlButton expandButton \u003d (HtmlButton) input.getParentNode().getNextSibling().getFirstChild();\n        HtmlElementUtil.click(expandButton);\n        final DomElement textArea \u003d configurePage.getElementByName(\"_.theField\");\n        assertThat(textArea, instanceOf(HtmlTextArea.class));\n        assertEquals(\"foo\\nbar\\nbaz\", ((HtmlTextArea) textArea).getText());\n    }","advisory":"JENKINS-67627"},{"className":"lib.form.FormTest","methodSignature":"lib.form.FormTest.autocompleteOffByDefault:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18435\")\n    public void autocompleteOffByDefault() throws IOException, SAXException {\n        HtmlPage page \u003d j.createWebClient().goTo(\"autocompleteOffByDefault\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        String autocomplete \u003d form.getAttribute(\"autocomplete\");\n        assertNotNull(autocomplete);\n        assertEquals(\"off\", autocomplete);\n    }","advisory":"JENKINS-18435"},{"className":"lib.form.FormTest","methodSignature":"lib.form.FormTest.autocompleteOnWhenTrue:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18435\")\n    public void autocompleteOnWhenTrue() throws IOException, SAXException {\n        HtmlPage page \u003d j.createWebClient().goTo(\"autocompleteOnWhenTrue\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        String autocomplete \u003d form.getAttribute(\"autocomplete\");\n        assertNotNull(autocomplete);\n        assertEquals(\"on\", autocomplete);\n    }","advisory":"JENKINS-18435"},{"className":"lib.form.FormTest","methodSignature":"lib.form.FormTest.inputsCanSetAutocomplete:void()","methodSource":"@Test\n    @Issue(\"JENKINS-18435\")\n    public void inputsCanSetAutocomplete() throws IOException, SAXException {\n        HtmlPage page \u003d j.createWebClient().goTo(\"inputsCanSetAutocomplete\");\n        HtmlForm form \u003d page.getFormByName(\"config\");\n        HtmlInput a \u003d form.getInputByName(\"a\");\n        String autocomplete \u003d a.getAttribute(\"autocomplete\");\n        assertNotNull(autocomplete);\n        assertEquals(\"on\", autocomplete);\n    }","advisory":"JENKINS-18435"},{"className":"lib.form.HeteroListTest","methodSignature":"lib.form.HeteroListTest.xssPrevented_heteroList_usingDescriptorDisplayName:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2035\")\n    public void xssPrevented_heteroList_usingDescriptorDisplayName() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        RootActionImpl rootAction \u003d ExtensionList.lookupSingleton(RootActionImpl.class);\n        TestItemDescribable.DynamicDisplayNameDescriptor dynamic \u003d ExtensionList.lookupSingleton(TestItemDescribable.DynamicDisplayNameDescriptor.class);\n        rootAction.descriptorList \u003d List.of(dynamic);\n\n        dynamic.displayName \u003d \"Display\u003cstrong\u003eName\u003c/strong\u003e\";\n\n        HtmlPage page \u003d wc.goTo(\"root\");\n\n        page.executeJavaScript(\"document.querySelector(\u0027.hetero-list-add\u0027).click();\");\n        Object result \u003d page.executeJavaScript(\"document.querySelector(\u0027.jenkins-dropdown__item\u0027)\").getJavaScriptResult();\n        assertThat(result, instanceOf(HTMLButtonElement.class));\n        HTMLButtonElement menuItem \u003d (HTMLButtonElement) result;\n        String menuItemContent \u003d menuItem.getInnerHTML();\n        assertThat(menuItemContent, not(containsString(\"\u003c\")));\n    }","advisory":"SECURITY-2035"},{"className":"lib.form.HeteroListTest","methodSignature":"lib.form.HeteroListTest.xssPrevented_usingToolInstallation_repeatableAddExisting:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2035\")\n    public void xssPrevented_usingToolInstallation_repeatableAddExisting() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"configureTools/\");\n\n        // the existing add button can already trigger an XSS\n        Object result \u003d page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.textContent.indexOf(\u0027Add XSS\u0027) !\u003d\u003d -1)[0].innerHTML\").getJavaScriptResult();\n        assertThat(result, instanceOf(String.class));\n        String resultString \u003d (String) result;\n        assertThat(resultString, not(containsString(\"\u003c\")));\n    }","advisory":"SECURITY-2035"},{"className":"lib.form.HeteroListTest","methodSignature":"lib.form.HeteroListTest.xssPrevented_usingToolInstallation_repeatableAddAfterClick:void()","methodSource":"@Test\n    public void xssPrevented_usingToolInstallation_repeatableAddAfterClick() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"configureTools/\");\n\n        Optional\u003cDomElement\u003e addXssButtonRawOptional \u003d page.getElementsByTagName(\"button\").stream().filter(e -\u003e e.getTextContent().contains(\"Add XSS\")).findFirst();\n        assertTrue(addXssButtonRawOptional.isPresent());\n        assertThat(addXssButtonRawOptional.get(), instanceOf(HtmlButton.class));\n\n        HtmlButton addXssButton \u003d (HtmlButton) addXssButtonRawOptional.get();\n        HtmlElementUtil.click(addXssButton);\n\n        // checking only the newly created button (at the top of the panel), hence the [0]\n        Object result \u003d page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.textContent.indexOf(\u0027Add XSS\u0027) !\u003d\u003d -1)[0].innerHTML\").getJavaScriptResult();\n        assertThat(result, instanceOf(String.class));\n        String resultString \u003d (String) result;\n        assertThat(resultString, not(containsString(\"\u003c\")));\n    }"},{"className":"lib.form.HeteroListTest","methodSignature":"lib.form.HeteroListTest.xssPrevented_usingToolInstallation_repeatableAddWithExistingUsingInstallationsButton:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2035\")\n    public void xssPrevented_usingToolInstallation_repeatableAddWithExistingUsingInstallationsButton() throws Exception {\n        Xss.DescriptorImpl xssDescriptor \u003d ExtensionList.lookupSingleton(Xss.DescriptorImpl.class);\n        xssDescriptor.installations \u003d new Xss[]{ new Xss(\"name1\", \"home1\", null) };\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"configureTools/\");\n\n        // XSS: [img] installations...\n        Object result \u003d page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.textContent.indexOf(\u0027XSS:\u0027) !\u003d\u003d -1)[0].innerHTML\").getJavaScriptResult();\n        assertThat(result, instanceOf(String.class));\n        String resultString \u003d (String) result;\n        assertThat(resultString, not(containsString(\"\u003cimg\")));\n    }","advisory":"SECURITY-2035"},{"className":"lib.form.HeteroListTest","methodSignature":"lib.form.HeteroListTest.xssPrevented_usingToolInstallation_repeatableAddWithExistingAfterOpening:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2035\")\n    public void xssPrevented_usingToolInstallation_repeatableAddWithExistingAfterOpening() throws Exception {\n        Xss.DescriptorImpl xssDescriptor \u003d ExtensionList.lookupSingleton(Xss.DescriptorImpl.class);\n        xssDescriptor.installations \u003d new Xss[]{ new Xss(\"name1\", \"home1\", null) };\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"configureTools/\");\n\n        // Passing the installation button\n        page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.textContent.indexOf(\u0027XSS:\u0027) !\u003d\u003d -1)[0].click()\");\n\n        // Looking for all the buttons displayed, at this point there is one Add, one Delete and the second Add.\n        // Both add are generated through different code.\n        // While keeping away the installations... advanced button as it\u0027s covered in its own test\n        Object result \u003d page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.textContent.indexOf(\u0027XSS\u0027) !\u003d\u003d -1 \u0026\u0026 b.textContent.indexOf(\u0027...\u0027) \u003d\u003d\u003d -1).map(b \u003d\u003e b.innerHTML)\").getJavaScriptResult();\n        assertThat(result, instanceOf(List.class));\n        @SuppressWarnings(\"unchecked\")\n        List\u003cString\u003e resultList \u003d (List\u003cString\u003e) result;\n        for (String str : resultList) {\n            assertThat(str, not(containsString(\"\u003cimg\")));\n        }\n\n        // \"delete\" then \"add\" makes us coming back in scenario covered by xssUsingToolInstallationRepeatableAdd\n    }","advisory":"SECURITY-2035"},{"className":"lib.form.HeteroListTest","methodSignature":"lib.form.HeteroListTest.xssPrevented_usingToolInstallation_repeatableDelete:void()","methodSource":"@Test\n    @Issue(\"SECURITY-2035\")\n    public void xssPrevented_usingToolInstallation_repeatableDelete() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        HtmlPage page \u003d wc.goTo(\"configureTools/\");\n\n        // we could also re-use the same method as used in xssUsingToolInstallationRepeatableAdd\n        page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.textContent.indexOf(\u0027Add XSS\u0027) !\u003d\u003d -1)[0].click()\");\n\n        Object result \u003d page.executeJavaScript(\"Array.from(document.querySelectorAll(\u0027button\u0027)).filter(b \u003d\u003e b.title.includes(\u0027Delete XSS\u0027))[0].innerHTML\").getJavaScriptResult();\n        assertThat(result, instanceOf(String.class));\n        String resultString \u003d (String) result;\n        assertThat(resultString, not(containsString(\"\u003cimg\")));\n    }","advisory":"SECURITY-2035"},{"className":"lib.form.NameRefTest","methodSignature":"lib.form.NameRefTest.test:void()","methodSource":"@Test public void test() throws Exception {\n        r.jenkins.setCrumbIssuer(null);\n        HtmlPage p \u003d r.createWebClient().goTo(\"self/test1\");\n        r.submit(p.getFormByName(\"config\"));\n    }"},{"className":"lib.form.NumberTest","methodSignature":"lib.form.NumberTest.minValidation:void()","methodSource":"@Test\n    public void minValidation() throws IOException, SAXException {\n\n        HtmlPage page \u003d j.createWebClient().goTo(\"minValidation\");\n        HtmlForm form \u003d page.getFormByName(\"number\");\n\n        String errorMessage;\n        HtmlInput input;\n\n        // \u003cinput type\u003d\"number\" min\u003d\"5\"\u003e\n        input \u003d form.getInputByName(\"min-5\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"2\");\n        assertEquals(errorMessage, \"This value should be larger than 5\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"5\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"17\");\n        assertThat(errorMessage, emptyString());\n\n\n        // \u003cinput type\u003d\"number\" min\u003d\"wow\"\u003e\n        input \u003d form.getInputByName(\"min-wow\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"13\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"89\");\n        assertThat(errorMessage, emptyString());\n    }"},{"className":"lib.form.NumberTest","methodSignature":"lib.form.NumberTest.maxValidation:void()","methodSource":"@Test\n    public void maxValidation() throws IOException, SAXException {\n        HtmlPage page \u003d j.createWebClient().goTo(\"maxValidation\");\n        HtmlForm form \u003d page.getFormByName(\"number\");\n\n        String errorMessage;\n        HtmlInput input;\n\n        // \u003cinput type\u003d\"number\" max\u003d\"70\"\u003e\n        input \u003d form.getInputByName(\"max-70\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"58\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"70\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"87\");\n        assertEquals(errorMessage, \"This value should be less than 70\");\n\n\n        // \u003cinput type\u003d\"number\" max\u003d\"wow\"\u003e\n        input \u003d form.getInputByName(\"max-wow\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"72\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"135\");\n        assertThat(errorMessage, emptyString());\n    }"},{"className":"lib.form.NumberTest","methodSignature":"lib.form.NumberTest.minAndMaxValidation:void()","methodSource":"@Test\n    public void minAndMaxValidation() throws IOException, SAXException {\n        HtmlPage page \u003d j.createWebClient().goTo(\"minAndMaxValidation\");\n        HtmlForm form \u003d page.getFormByName(\"number\");\n\n        String errorMessage;\n        HtmlInput input;\n\n        // \u003cinput type\u003d\"number\" min\u003d\"5\" max\u003d\"70\"\u003e\n        input \u003d form.getInputByName(\"min-5-max-70\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"2\");\n        assertEquals(errorMessage, \"This value should be between 5 and 70\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"5\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"53\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"70\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"96\");\n        assertEquals(errorMessage, \"This value should be between 5 and 70\");\n\n\n        // \u003cinput type\u003d\"number\" min\u003d\"70\" max\u003d\"5\"\u003e\n        input \u003d form.getInputByName(\"min-70-max-5\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"2\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"53\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"96\");\n        assertThat(errorMessage, emptyString());\n\n\n        // \u003cinput type\u003d\"number\" min\u003d\"5\" max\u003d\"wow\"\u003e\n        input \u003d form.getInputByName(\"min-5-max-wow\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"2\");\n        assertEquals(errorMessage, \"This value should be larger than 5\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"5\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"95\");\n        assertThat(errorMessage, emptyString());\n\n\n        // \u003cinput type\u003d\"number\" min\u003d\"wow\" max\u003d\"70\"\u003e\n        input \u003d form.getInputByName(\"min-wow-max-70\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"2\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"70\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"95\");\n        assertEquals(errorMessage, \"This value should be less than 70\");\n\n\n        // \u003cinput type\u003d\"number\" min\u003d\"wow\" max\u003d\"jen\"\u003e\n        input \u003d form.getInputByName(\"min-wow-max-jen\");\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"2\");\n        assertThat(errorMessage, emptyString());\n\n        errorMessage \u003d typeValueAndGetErrorMessage(input, \"95\");\n        assertThat(errorMessage, emptyString());\n    }"},{"className":"lib.form.OptionTest","methodSignature":"lib.form.OptionTest.optionsAreCorrectlyEscaped:void()","methodSource":"@Test\n    @Issue(\"SECURITY-624\")\n    public void optionsAreCorrectlyEscaped() throws Exception {\n        checkNonDangerousOutputCorrect_simple();\n        checkNonDangerousOutputCorrect_advanced();\n        checkDangerousOutputNotActive();\n    }","advisory":"SECURITY-624"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.secretNotPlainText:void()","methodSource":"@Test\n    public void secretNotPlainText() throws Exception {\n        SecretNotPlainText.secret \u003d Secret.fromString(\"secret\");\n        HtmlPage p \u003d j.createWebClient().goTo(\"secretNotPlainText\");\n        String value \u003d ((HtmlInput) p.getElementById(\"password\")).getValue();\n        assertNotEquals(\"password shouldn\u0027t be plain text\", \"secret\", value);\n        assertEquals(\"secret\", Secret.fromString(value).getPlainText());\n    }"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.testExposedCiphertext:void()","methodSource":"@Issue({\"SECURITY-266\", \"SECURITY-304\"})\n    @Test\n    public void testExposedCiphertext() throws Exception {\n        boolean saveEnabled \u003d Item.EXTENDED_READ.getEnabled();\n        Item.EXTENDED_READ.setEnabled(true);\n        try {\n\n            //final String plain_regex_match \u003d \".*\\\\{[A-Za-z0-9+/]+\u003d{0,2}}.*\";\n            final String xml_regex_match \u003d \"\\\\{[A-Za-z0-9+/]+\u003d{0,2}}\";\n            final Pattern xml_regex_pattern \u003d Pattern.compile(xml_regex_match);\n            final String staticTest \u003d \"\\n\\nvalue\u003d\\\"{AQAAABAAAAAgXhXgopokysZkduhl+v1gm0UhUBBbjKDVpKz7bGk3mIO53cNTRdlu7LC4jZYEc+vF}\\\"\\n\";\n            //Just a quick verification on what could be on the page and that the regexp is correctly set up\n            assertThat(xml_regex_pattern.matcher(staticTest).find(), is(true));\n\n            j.jenkins.setSecurityRealm(new JenkinsRule().createDummySecurityRealm());\n            j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy().\n                grant(Jenkins.ADMINISTER).everywhere().to(\"admin\").\n                grant(Jenkins.READ, Item.READ, Item.EXTENDED_READ,\n                    Item.CREATE // so we can show CopyJobCommand would barf; more realistic would be to grant it only in a subfolder\n                ).everywhere().to(\"dev\"));\n            Secret s \u003d Secret.fromString(\"s3cr3t\");\n            //String sEnc \u003d s.getEncryptedValue();\n            FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n            p.setDisplayName(\"Unicode here ←\");\n            p.setDescription(\"This+looks+like+Base64+but+is+not+a+secret\");\n            p.addProperty(new VulnerableProperty(s));\n\n            User admin \u003d User.getById(\"admin\", true);\n            User dev \u003d User.getById(\"dev\", true);\n\n            JenkinsRule.WebClient wc \u003d j.createWebClient();\n            // Control case: an administrator can read and write configuration freely.\n            wc.withBasicApiToken(admin);\n            HtmlPage configure \u003d wc.getPage(p, \"configure\");\n            assertThat(xml_regex_pattern.matcher(configure.getWebResponse().getContentAsString()).find(), is(true));\n            j.submit(configure.getFormByName(\"config\"));\n            VulnerableProperty vp \u003d p.getProperty(VulnerableProperty.class);\n            assertNotNull(vp);\n            assertEquals(s, vp.secret);\n            Page configXml \u003d wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");\n            String xmlAdmin \u003d configXml.getWebResponse().getContentAsString();\n\n            assertThat(Pattern.compile(\"\u003csecret\u003e\" + xml_regex_match + \"\u003c/secret\u003e\").matcher(xmlAdmin).find(), is(true));\n            assertThat(xmlAdmin, containsString(\"\u003cdisplayName\u003e\" + p.getDisplayName() + \"\u003c/displayName\u003e\"));\n            assertThat(xmlAdmin, containsString(\"\u003cdescription\u003e\" + p.getDescription() + \"\u003c/description\u003e\"));\n            // CLICommandInvoker does not work here, as it sets up its own SecurityRealm + AuthorizationStrategy.\n            GetJobCommand getJobCommand \u003d new GetJobCommand();\n            Authentication adminAuth \u003d User.get(\"admin\").impersonate2();\n            getJobCommand.setTransportAuth2(adminAuth);\n            ByteArrayOutputStream baos \u003d new ByteArrayOutputStream();\n            String pName \u003d p.getFullName();\n            getJobCommand.main(List.of(pName), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);\n            assertEquals(xmlAdmin, baos.toString(configXml.getWebResponse().getContentCharset()));\n            CopyJobCommand copyJobCommand \u003d new CopyJobCommand();\n            copyJobCommand.setTransportAuth2(adminAuth);\n            String pAdminName \u003d pName + \"-admin\";\n            assertEquals(0, copyJobCommand.main(Arrays.asList(pName, pAdminName), Locale.ENGLISH, System.in, System.out, System.err));\n            FreeStyleProject pAdmin \u003d j.jenkins.getItemByFullName(pAdminName, FreeStyleProject.class);\n            assertNotNull(pAdmin);\n            pAdmin.setDisplayName(p.getDisplayName()); // counteract DisplayNameListener\n            assertEquals(p.getConfigFile().asString(), pAdmin.getConfigFile().asString());\n\n            // Test case: another user with EXTENDED_READ but not CONFIGURE should not get access even to encrypted secrets.\n            wc.withBasicApiToken(User.getById(\"dev\", false));\n            configure \u003d wc.getPage(p, \"configure\");\n            assertThat(xml_regex_pattern.matcher(configure.getWebResponse().getContentAsString()).find(), is(false));\n            configXml \u003d wc.goTo(p.getUrl() + \"config.xml\", \"application/xml\");\n            String xmlDev \u003d configXml.getWebResponse().getContentAsString();\n            assertThat(xml_regex_pattern.matcher(xmlDev).find(), is(false));\n            assertEquals(xmlAdmin.replaceAll(xml_regex_match, \"********\"), xmlDev);\n            getJobCommand \u003d new GetJobCommand();\n            Authentication devAuth \u003d User.get(\"dev\").impersonate2();\n            getJobCommand.setTransportAuth2(devAuth);\n            baos \u003d new ByteArrayOutputStream();\n            getJobCommand.main(List.of(pName), Locale.ENGLISH, System.in, new PrintStream(baos), System.err);\n            assertEquals(xmlDev, baos.toString(configXml.getWebResponse().getContentCharset()));\n            copyJobCommand \u003d new CopyJobCommand();\n            copyJobCommand.setTransportAuth2(devAuth);\n            String pDevName \u003d pName + \"-dev\";\n            assertThat(copyJobCommand.main(Arrays.asList(pName, pDevName), Locale.ENGLISH, System.in, System.out, System.err), not(0));\n            assertNull(j.jenkins.getItemByFullName(pDevName, FreeStyleProject.class));\n\n        } finally {\n            Item.EXTENDED_READ.setEnabled(saveEnabled);\n        }\n    }"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.testCheckMethod:void()","methodSource":"@Test\n    @Issue(\"SECURITY-616\")\n    public void testCheckMethod() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject(\"p\");\n        p.addProperty(new VulnerableProperty(null));\n        HtmlTextInput field \u003d j.createWebClient().getPage(p, \"configure\").getFormByName(\"config\").getInputByName(\"_.secret\");\n        while (VulnerableProperty.DescriptorImpl.incomingURL \u003d\u003d null) { // waitForBackgroundJavaScript does not work well\n            Thread.sleep(100); // form validation of saved value\n        }\n        VulnerableProperty.DescriptorImpl.incomingURL \u003d null;\n        String secret \u003d \"s3cr3t\";\n        // the fireEvent is required as setText\u0027s new behavior is not triggering the onChange event anymore\n        field.setText(secret);\n        field.fireEvent(\"change\");\n        while (VulnerableProperty.DescriptorImpl.incomingURL \u003d\u003d null) {\n            Thread.sleep(100); // form validation of edited value\n        }\n        assertThat(VulnerableProperty.DescriptorImpl.incomingURL, not(containsString(secret)));\n        assertEquals(secret, VulnerableProperty.DescriptorImpl.checkedSecret);\n    }","advisory":"SECURITY-616"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.testBackgroundSecretConversion:void()","methodSource":"@Test\n    public void testBackgroundSecretConversion() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient();\n        j.configRoundtrip();\n        // empty default values\n        assertEquals(\"\", PasswordHolderConfiguration.getInstance().secretWithSecretGetterAndSetter.getPlainText());\n        assertEquals(\"\", PasswordHolderConfiguration.getInstance().secretWithStringGetterAndSetter.getPlainText());\n        assertEquals(\"\", PasswordHolderConfiguration.getInstance().stringWithSecretGetterAndSetter);\n        assertEquals(\"\", PasswordHolderConfiguration.getInstance().stringWithStringGetterAndSetter);\n\n        // set some values and expect them to remain after round-trip\n        final Secret secretWithSecretGetterAndSetter \u003d Secret.fromString(\"secretWithSecretGetterAndSetter\");\n        secretWithSecretGetterAndSetter.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        PasswordHolderConfiguration.getInstance().secretWithSecretGetterAndSetter \u003d secretWithSecretGetterAndSetter;\n\n        final Secret secretWithStringGetterAndSetter \u003d Secret.fromString(\"secretWithStringGetterAndSetter\");\n        secretWithStringGetterAndSetter.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        PasswordHolderConfiguration.getInstance().secretWithStringGetterAndSetter \u003d secretWithStringGetterAndSetter;\n\n        PasswordHolderConfiguration.getInstance().stringWithSecretGetterAndSetter \u003d \"stringWithSecretGetterAndSetter\";\n        PasswordHolderConfiguration.getInstance().stringWithStringGetterAndSetter \u003d \"stringWithStringGetterAndSetter\";\n\n\n        final HtmlPage configPage \u003d wc.goTo(\"configure\");\n        for (DomElement element : configPage.getElementsByTagName(\"input\")) {\n            if (\"hidden\".equals(element.getAttribute(\"type\")) \u0026\u0026 element.getAttribute(\"class\").contains(\"complex-password-field\")) {\n                final HtmlHiddenInput input \u003d (HtmlHiddenInput) element;\n                // assert that all password fields contain encrypted values after we set plain values\n                assertTrue(input.getValue().startsWith(\"{\"));\n                assertTrue(input.getValue().endsWith(\"}\"));\n            }\n        }\n\n        j.configRoundtrip();\n\n        // confirm round-trip did not change effective values\n        assertEquals(\"secretWithSecretGetterAndSetter\", PasswordHolderConfiguration.getInstance().secretWithSecretGetterAndSetter.getPlainText());\n        assertEquals(\"secretWithStringGetterAndSetter\", PasswordHolderConfiguration.getInstance().secretWithStringGetterAndSetter.getPlainText());\n        assertEquals(\"stringWithSecretGetterAndSetter\", PasswordHolderConfiguration.getInstance().stringWithSecretGetterAndSetter);\n        assertEquals(\"stringWithStringGetterAndSetter\", PasswordHolderConfiguration.getInstance().stringWithStringGetterAndSetter);\n\n        assertEquals(secretWithSecretGetterAndSetter.getEncryptedValue(), PasswordHolderConfiguration.getInstance().secretWithSecretGetterAndSetter.getEncryptedValue());\n\n        // The following is because the serialized \"Secret\" value in the form gets decrypted, losing IV, to be passed as String into the setter, to be converted to Secret, getting new IV in #getEncryptedValue call.\n        assertNotEquals(secretWithStringGetterAndSetter.getEncryptedValue(), PasswordHolderConfiguration.getInstance().secretWithStringGetterAndSetter.getEncryptedValue());\n    }"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.testBuildStep:void()","methodSource":"@Test\n    public void testBuildStep() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(new PasswordHolderBuildStep());\n        project.save();\n        assertEquals(1, project.getBuilders().size());\n        j.configRoundtrip(project);\n\n        // empty default values after initial form submission\n        PasswordHolderBuildStep buildStep \u003d (PasswordHolderBuildStep) project.getBuildersList().get(0);\n        assertNotNull(buildStep);\n        assertEquals(\"\", buildStep.secretWithSecretGetterSecretSetter.getPlainText());\n        assertEquals(\"\", buildStep.secretWithSecretGetterStringSetter.getPlainText());\n        assertEquals(\"\", buildStep.secretWithStringGetterSecretSetter.getPlainText());\n        assertEquals(\"\", buildStep.secretWithStringGetterStringSetter.getPlainText());\n        assertEquals(\"\", buildStep.stringWithSecretGetterSecretSetter);\n        assertEquals(\"\", buildStep.stringWithSecretGetterStringSetter);\n        assertEquals(\"\", buildStep.stringWithStringGetterSecretSetter);\n        assertEquals(\"\", buildStep.stringWithStringGetterStringSetter);\n\n        buildStep \u003d (PasswordHolderBuildStep) project.getBuildersList().get(0);\n        assertNotNull(buildStep);\n\n\n        // set some values and expect them to remain after round-trip\n        final Secret secretWithSecretGetterSecretSetter \u003d Secret.fromString(\"secretWithSecretGetterSecretSetter\");\n        secretWithSecretGetterSecretSetter.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        buildStep.secretWithSecretGetterSecretSetter \u003d secretWithSecretGetterSecretSetter;\n\n        final Secret secretWithStringGetterStringSetter \u003d Secret.fromString(\"secretWithStringGetterStringSetter\");\n        secretWithStringGetterStringSetter.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        buildStep.secretWithStringGetterStringSetter \u003d secretWithStringGetterStringSetter;\n\n        final Secret secretWithStringGetterSecretSetter \u003d Secret.fromString(\"secretWithStringGetterSecretSetter\");\n        secretWithStringGetterSecretSetter.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        buildStep.secretWithStringGetterSecretSetter \u003d secretWithStringGetterSecretSetter;\n\n        final Secret secretWithSecretGetterStringSetter \u003d Secret.fromString(\"secretWithSecretGetterStringSetter\");\n        secretWithSecretGetterStringSetter.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        buildStep.secretWithSecretGetterStringSetter \u003d secretWithSecretGetterStringSetter;\n\n        buildStep.stringWithSecretGetterSecretSetter \u003d \"stringWithSecretGetterSecretSetter\";\n        buildStep.stringWithStringGetterStringSetter \u003d \"stringWithStringGetterStringSetter\";\n        buildStep.stringWithStringGetterSecretSetter \u003d \"stringWithStringGetterSecretSetter\";\n        buildStep.stringWithSecretGetterStringSetter \u003d \"stringWithSecretGetterStringSetter\";\n\n        project.save();\n\n        final HtmlPage configPage \u003d j.createWebClient().goTo(project.getUrl() + \"/configure\");\n        int i \u003d 0;\n        for (DomElement element : configPage.getElementsByTagName(\"input\")) {\n            if (\"hidden\".equals(element.getAttribute(\"type\")) \u0026\u0026 element.getAttribute(\"class\").contains(\"complex-password-field\")) {\n                final HtmlHiddenInput input \u003d (HtmlHiddenInput) element;\n                // assert that all password fields contain encrypted values after we set plain values\n                assertTrue(input.getValue().startsWith(\"{\"));\n                assertTrue(input.getValue().endsWith(\"}\"));\n                i++;\n            }\n        }\n        assertTrue(i \u003e\u003d 8); // at least 8 password fields expected on that job config form\n\n        j.configRoundtrip(project);\n        buildStep \u003d (PasswordHolderBuildStep) project.getBuildersList().get(0);\n\n        // confirm round-trip did not change effective values\n        assertEquals(\"secretWithSecretGetterSecretSetter\", buildStep.secretWithSecretGetterSecretSetter.getPlainText());\n        assertEquals(\"secretWithStringGetterStringSetter\", buildStep.secretWithStringGetterStringSetter.getPlainText());\n        assertEquals(\"secretWithStringGetterSecretSetter\", buildStep.secretWithStringGetterSecretSetter.getPlainText());\n        assertEquals(\"secretWithSecretGetterStringSetter\", buildStep.secretWithSecretGetterStringSetter.getPlainText());\n\n        assertEquals(\"stringWithSecretGetterSecretSetter\", buildStep.stringWithSecretGetterSecretSetter);\n        assertEquals(\"stringWithStringGetterStringSetter\", buildStep.stringWithStringGetterStringSetter);\n        assertEquals(\"stringWithStringGetterSecretSetter\", buildStep.stringWithStringGetterSecretSetter);\n        assertEquals(\"stringWithSecretGetterStringSetter\", buildStep.stringWithSecretGetterStringSetter);\n\n        // confirm the Secret getter/setter will not change encrypted value (keeps IV)\n        assertEquals(secretWithSecretGetterSecretSetter.getEncryptedValue(), buildStep.secretWithSecretGetterSecretSetter.getEncryptedValue());\n\n        // This depends on implementation; if the Getter returns the plain text (to be re-encrypted by Functions#getPasswordValue), then this won\u0027t work,\n        // but if the getter returns #getEncrytedValue (as implemented in the build step here), it does.\n        // While clever, would recommend fixing mismatched getters/setters here\n        assertEquals(secretWithStringGetterSecretSetter.getEncryptedValue(), buildStep.secretWithStringGetterSecretSetter.getEncryptedValue());\n\n        // This isn\u0027t equal because we expect that the code cannot handle an encrypted secret value passed to the setter, so we decrypt it\n        assertNotEquals(secretWithStringGetterStringSetter.getEncryptedValue(), buildStep.secretWithStringGetterStringSetter.getEncryptedValue());\n    }"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.testStringlyTypedSecrets:void()","methodSource":"@Test\n    public void testStringlyTypedSecrets() throws Exception {\n        final FreeStyleProject project \u003d j.createFreeStyleProject();\n        project.getBuildersList().add(new StringlyTypedSecretsBuilder(\"\"));\n        project.save();\n        assertEquals(1, project.getBuilders().size());\n        j.configRoundtrip(project);\n\n        // empty default values after initial form submission\n        StringlyTypedSecretsBuilder buildStep \u003d (StringlyTypedSecretsBuilder) project.getBuildersList().get(0);\n        assertNotNull(buildStep);\n        assertTrue(buildStep.mySecret.startsWith(\"{\"));\n        assertTrue(buildStep.mySecret.endsWith(\"}\"));\n        assertTrue(Secret.fromString(buildStep.mySecret).getPlainText().isEmpty());\n\n        // set a value and expect it to remain after round-trip\n        final Secret stringlyTypedSecret \u003d Secret.fromString(\"stringlyTypedSecret\");\n        stringlyTypedSecret.getEncryptedValue(); // ensure IV is set so the encrypted value is stable\n        buildStep.mySecret \u003d stringlyTypedSecret.getEncryptedValue();\n\n        project.save();\n\n        final HtmlPage configPage \u003d j.createWebClient().goTo(project.getUrl() + \"/configure\");\n        for (DomElement element : configPage.getElementsByTagName(\"input\")) {\n            if (\"hidden\".equals(element.getAttribute(\"type\")) \u0026\u0026 element.getAttribute(\"class\").contains(\"complex-password-field\")) {\n                final HtmlHiddenInput input \u003d (HtmlHiddenInput) element;\n                // assert that all password fields contain encrypted values after we set plain values\n                assertTrue(input.getValue().startsWith(\"{\"));\n                assertTrue(input.getValue().endsWith(\"}\"));\n            }\n        }\n\n        j.configRoundtrip(project);\n        buildStep \u003d (StringlyTypedSecretsBuilder) project.getBuildersList().get(0);\n\n        // confirm round-trip did not change effective values\n        assertEquals(\"stringlyTypedSecret\", Secret.fromString(buildStep.mySecret).getPlainText());\n\n        // Unfortunately the constructor parameter will be decrypted transparently now, so this is sort of a minor regression with this enhancement.\n        // Note that it\u0027s not enough to just undo the related changes to core/src/main to try this; as Functions#getPasswordValue will throw a SecurityException during tests only and break the previous assertion.\n        assertNotEquals(stringlyTypedSecret.getEncryptedValue(), buildStep.mySecret);\n    }"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.testBlankoutOfStringBackedPasswordFieldWithoutItemConfigure:void()","methodSource":"@Test\n    public void testBlankoutOfStringBackedPasswordFieldWithoutItemConfigure() throws Exception {\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage htmlPage \u003d wc.goTo(p.getUrl() + \"/passwordFields\");\n        for (DomElement element : htmlPage.getElementsByTagName(\"input\")) {\n            if (\"hidden\".equals(element.getAttribute(\"type\")) \u0026\u0026 element.getAttribute(\"class\").contains(\"complex-password-field\")) {\n                final HtmlHiddenInput input \u003d (HtmlHiddenInput) element;\n                // assert that all password fields contain encrypted values after we set plain values\n                assertTrue(input.getValue().startsWith(\"{\"));\n                assertTrue(input.getValue().endsWith(\"}\"));\n            }\n        }\n\n        final MockAuthorizationStrategy a \u003d new MockAuthorizationStrategy();\n        a.grant(Jenkins.READ, Item.READ, Item.EXTENDED_READ).everywhere().toEveryone();\n        j.jenkins.setAuthorizationStrategy(a);\n\n        /* Now go to the page without Item/Configure and expect asterisks */\n        htmlPage \u003d wc.goTo(p.getUrl() + \"/passwordFields\");\n        for (DomElement element : htmlPage.getElementsByTagName(\"input\")) {\n            if (\"hidden\".equals(element.getAttribute(\"type\")) \u0026\u0026 element.getAttribute(\"class\").contains(\"complex-password-field\")) {\n                final HtmlHiddenInput input \u003d (HtmlHiddenInput) element;\n                assertEquals(\"********\", input.getValue());\n            }\n        }\n    }"},{"className":"lib.form.PasswordTest","methodSignature":"lib.form.PasswordTest.computerExtendedReadNoSecretsRevealed:void()","methodSource":"@Test\n    public void computerExtendedReadNoSecretsRevealed() throws Exception {\n        Computer computer \u003d j.jenkins.getComputers()[0];\n        computer.addAction(new SecuredAction());\n\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        final String ADMIN \u003d \"admin\";\n        final String READONLY \u003d \"readonly\";\n        j.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy()\n                // full access\n                .grant(Jenkins.ADMINISTER).everywhere().to(ADMIN)\n\n                // Extended access\n                .grant(Computer.EXTENDED_READ).everywhere().to(READONLY)\n                .grant(Jenkins.READ).everywhere().to(READONLY)\n\n        );\n\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n\n        {\n            wc.login(READONLY);\n            HtmlPage page \u003d wc.goTo(\"computer/(built-in)/secured/\");\n\n            String value \u003d ((HtmlInput) page.getElementById(\"password\")).getValue();\n            assertThat(value, is(\"********\"));\n        }\n\n        {\n            wc.login(ADMIN);\n            HtmlPage page \u003d wc.goTo(\"computer/(built-in)/secured/\");\n\n            String value \u003d ((HtmlInput) page.getElementById(\"password\")).getValue();\n            assertThat(Secret.fromString(value).getPlainText(), is(\"abcdefgh\"));\n        }\n    }"},{"className":"lib.form.RepeatablePropertyTest","methodSignature":"lib.form.RepeatablePropertyTest.testSimple:void()","methodSource":"@Test\n    public void testSimple() throws Exception {\n        rootAction.testRepeatable \u003d createRepeatable();\n        assertFormContents(VIEW_WITHOUT_DEFAULT, rootAction.testRepeatable);\n    }"},{"className":"lib.form.RepeatablePropertyTest","methodSignature":"lib.form.RepeatablePropertyTest.testNullFieldNoDefault:void()","methodSource":"@Test\n    public void testNullFieldNoDefault() throws Exception {\n        assertFormContents(VIEW_WITHOUT_DEFAULT, new ArrayList\u003c\u003e());\n    }"},{"className":"lib.form.RepeatablePropertyTest","methodSignature":"lib.form.RepeatablePropertyTest.testNullFieldWithDefault:void()","methodSource":"@Test\n    public void testNullFieldWithDefault() throws Exception {\n        rootAction.defaults \u003d createRepeatable();\n        assertFormContents(VIEW_WITH_DEFAULT, rootAction.defaults);\n    }"},{"className":"lib.form.RepeatablePropertyTest","methodSignature":"lib.form.RepeatablePropertyTest.testFieldNotNullWithDefaultIgnoresDefaults:void()","methodSource":"@Test\n    public void testFieldNotNullWithDefaultIgnoresDefaults() throws Exception {\n        rootAction.testRepeatable \u003d createRepeatable();\n        rootAction.defaults \u003d new ArrayList\u003c\u003e(Arrays.asList(\n           new ExcitingObject(\"This default should be ignored\"),\n           new ExcitingObject(\"Ignore me too\")\n        ));\n        assertFormContents(VIEW_WITH_DEFAULT, rootAction.testRepeatable);\n    }"},{"className":"lib.form.RepeatablePropertyTest","methodSignature":"lib.form.RepeatablePropertyTest.testNestedRepeatableProperty:void()","methodSource":"@Issue(\"JENKINS-37599\")\n    @Test\n    public void testNestedRepeatableProperty() throws Exception {\n        rootAction.testRepeatableContainer \u003d Collections.emptyList();\n        // minimum\u003d\"1\" is set for the upper one,\n        // the form should be:\n        // * 1 ExcitingObjectCotainer\n        // * no ExcitingObject\n        final HtmlForm form \u003d getForm(\"nested\");\n        List\u003cHtmlTextInput\u003e containerNameInputs \u003d\n                form.getElementsByAttribute(\"input\", \"type\", \"text\").stream()\n                        .map(HtmlTextInput.class::cast)\n                        .filter(input -\u003e input.getNameAttribute().endsWith(\".containerName\"))\n                        .collect(Collectors.toList());\n        List\u003cHtmlTextInput\u003e greatPropertyInputs \u003d\n                form.getElementsByAttribute(\"input\", \"type\", \"text\").stream()\n                        .map(HtmlTextInput.class::cast)\n                        .filter(input -\u003e input.getNameAttribute().endsWith(\".greatProperty\"))\n                        .collect(Collectors.toList());\n        assertEquals(1, containerNameInputs.size());\n        assertEquals(0, greatPropertyInputs.size());\n    }","advisory":"JENKINS-37599"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testSimple:void()","methodSource":"@Test\n    public void testSimple() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testSimple\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        clickButton(wc, f, \"Add\", true);\n        doTestSimple(f, wc);\n\n        assertEqualsJsonArray(\"[{\\\"bool\\\":false,\\\"txt\\\":\\\"value one\\\"},\"\n            + \"{\\\"bool\\\":false,\\\"txt\\\":\\\"value two\\\"},{\\\"bool\\\":true,\\\"txt\\\":\\\"value three\\\"}]\",\n            rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testSimpleCheckNumberOfButtons:void()","methodSource":"@Test\n    public void testSimpleCheckNumberOfButtons() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testSimpleWithDeleteButton\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        String buttonCaption \u003d \"Add\";\n        assertEquals(1, getButtonsList(f, buttonCaption).size());\n        clickButton(wc, f, buttonCaption, true); // click Add button\n        assertEquals(1, getButtonsList(f, buttonCaption).size()); // check that second Add button is not present\n        clickButton(wc, f, \"Delete\", true); // click Delete button\n        assertEquals(1, getButtonsList(f, buttonCaption).size()); // check that only one Add button is in form\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testSimpleCheckNumberOfButtonsEnabledTopButton:void()","methodSource":"@Test\n    public void testSimpleCheckNumberOfButtonsEnabledTopButton() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testSimpleWithDeleteButtonTopButton\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        String buttonCaption \u003d \"Add\";\n        assertEquals(1, getButtonsList(f, buttonCaption).size());\n        clickButton(wc, f, buttonCaption, true); // click Add button\n        assertEquals(2, getButtonsList(f, buttonCaption).size()); // check that second Add button was added into form\n        clickButton(wc, f, \"Delete\", true); // click Delete button\n        assertEquals(1, getButtonsList(f, buttonCaption).size()); // check that only one Add button is in form\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testSimple_ExistingData:void()","methodSource":"@Test\n    public void testSimple_ExistingData() throws Exception {\n        addData();\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testSimple\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        clickButton(wc, f, \"Add\", false);\n        doTestSimple(f, wc);\n        assertEqualsJsonArray(\"[{\\\"bool\\\":true,\\\"txt\\\":\\\"existing one\\\"},\"\n            + \"{\\\"bool\\\":false,\\\"txt\\\":\\\"existing two\\\"},{\\\"bool\\\":true,\\\"txt\\\":\\\"value one\\\"},\"\n            + \"{\\\"bool\\\":false,\\\"txt\\\":\\\"value two\\\"},{\\\"bool\\\":false,\\\"txt\\\":\\\"value three\\\"}]\",\n            rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testMinimum:void()","methodSource":"@Test\n    public void testMinimum() throws Exception {\n        rootAction.minimum \u003d 3;\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testSimple\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        f.getInputByValue(\"\").setValue(\"value one\");\n        f.getInputByValue(\"\").setValue(\"value two\");\n        f.getInputByValue(\"\").setValue(\"value three\");\n        assertThrows(ElementNotFoundException.class, () -\u003e f.getInputByValue(\"\"));\n        f.getInputsByName(\"bool\").get(2).click();\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"bool\\\":false,\\\"txt\\\":\\\"value one\\\"},\"\n            + \"{\\\"bool\\\":false,\\\"txt\\\":\\\"value two\\\"},{\\\"bool\\\":true,\\\"txt\\\":\\\"value three\\\"}]\",\n            rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testMinimum_ExistingData:void()","methodSource":"@Test\n    public void testMinimum_ExistingData() throws Exception {\n        addData();\n        rootAction.minimum \u003d 3;\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testSimple\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        f.getInputByValue(\"\").setValue(\"new one\");\n        assertThrows(ElementNotFoundException.class, () -\u003e f.getInputByValue(\"\"));\n        f.getInputsByName(\"bool\").get(1).click();\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"bool\\\":true,\\\"txt\\\":\\\"existing one\\\"},\"\n            + \"{\\\"bool\\\":true,\\\"txt\\\":\\\"existing two\\\"},{\\\"bool\\\":false,\\\"txt\\\":\\\"new one\\\"}]\",\n            rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNoData:void()","methodSource":"@Test\n    public void testNoData() throws Exception {\n        rootAction.list \u003d null;\n        rootAction.defaults \u003d null;\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        gotoAndSubmitConfig(\"defaultForField\", wc);\n        assertNull(rootAction.formData.get(\"list\"));\n\n        gotoAndSubmitConfig(\"defaultForItems\", wc);\n        assertNull(rootAction.formData.get(\"list\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testItemsWithDefaults:void()","methodSource":"@Test\n    public void testItemsWithDefaults() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        assertWithDefaults(\"defaultForItems\", wc);\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testItemsDefaultsIgnoredIfFieldHasData:void()","methodSource":"@Test\n    public void testItemsDefaultsIgnoredIfFieldHasData() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        assertDefaultsIgnoredIfHaveData(\"defaultForItems\", wc);\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testFieldWithDefaults:void()","methodSource":"@Test\n    public void testFieldWithDefaults() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        assertWithDefaults(\"defaultForField\", wc);\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testFieldDefaultsIgnoredIfFieldHasData:void()","methodSource":"@Test\n    public void testFieldDefaultsIgnoredIfFieldHasData() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        assertDefaultsIgnoredIfHaveData(\"defaultForField\", wc);\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testRadio:void()","methodSource":"@Test\n    public void testRadio() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testRadio\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        clickButton(wc, f, \"Add\", true);\n        f.getInputByValue(\"\").setValue(\"txt one\");\n        f.getElementsByAttribute(\"INPUT\", \"type\", \"radio\").get(1).click();\n        clickButton(wc, f, \"Add\", false);\n        f.getInputByValue(\"\").setValue(\"txt two\");\n        f.getElementsByAttribute(\"INPUT\", \"type\", \"radio\").get(3).click();\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"radio\\\":\\\"two\\\",\\\"txt\\\":\\\"txt one\\\"},\"\n                + \"{\\\"radio\\\":\\\"two\\\",\\\"txt\\\":\\\"txt two\\\"}]\",\n                     rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testRadio_ExistingData:void()","methodSource":"@Test\n    public void testRadio_ExistingData() throws Exception {\n        rootAction.list.add(new FooRadio(\"1\", \"one\"));\n        rootAction.list.add(new FooRadio(\"2\", \"two\"));\n        rootAction.list.add(new FooRadio(\"three\", \"one\"));\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testRadio\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        clickButton(wc, f, \"Add\", false);\n        f.getInputByValue(\"\").setValue(\"txt 4\");\n        f.getElementsByAttribute(\"INPUT\", \"type\", \"radio\").get(7).click();\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"radio\\\":\\\"one\\\",\\\"txt\\\":\\\"1\\\"},{\\\"radio\\\":\\\"two\\\",\\\"txt\\\":\\\"2\\\"},\"\n                + \"{\\\"radio\\\":\\\"one\\\",\\\"txt\\\":\\\"three\\\"},{\\\"radio\\\":\\\"two\\\",\\\"txt\\\":\\\"txt 4\\\"}]\",\n                rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testRadioBlock:void()","methodSource":"@Test\n    public void testRadioBlock() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testRadioBlock\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        clickButton(wc, f, \"Add\", true);\n        f.getInputByValue(\"\").setValue(\"txt one\");\n        f.getInputByValue(\"\").setValue(\"avalue do not send\");\n        f.getElementsByAttribute(\"INPUT\", \"type\", \"radio\").get(1).click();\n        f.getInputByValue(\"\").setValue(\"bvalue\");\n        clickButton(wc, f, \"Add\", false);\n        f.getInputByValue(\"\").setValue(\"txt two\");\n        f.getElementsByAttribute(\"INPUT\", \"type\", \"radio\").get(2).click();\n        f.getInputByValue(\"\").setValue(\"avalue two\");\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"radio\\\":{\\\"b\\\":\\\"bvalue\\\",\\\"value\\\":\\\"two\\\"},\\\"txt\\\":\\\"txt one\\\"},\"\n                     + \"{\\\"radio\\\":{\\\"a\\\":\\\"avalue two\\\",\\\"value\\\":\\\"one\\\"},\\\"txt\\\":\\\"txt two\\\"}]\",\n                     rootAction.formData.get(\"foos\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testDropdownList:void()","methodSource":"@Test\n    public void testDropdownList() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testDropdownList\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        clickButton(wc, f, \"Add\", true);\n        f.getInputByValue(\"\").setValue(\"17\"); // seeds\n        f.getInputByValue(\"\").setValue(\"pie\"); // word\n        clickButton(wc, f, \"Add\", false);\n        // select banana in 2nd select element:\n        ((HtmlSelect) f.getElementsByTagName(\"select\").get(1)).getOption(1).click();\n        f.getInputsByName(\"yellow\").get(1).click(); // checkbox\n        f.getInputsByValue(\"\").get(1).setValue(\"split\"); // word\n        String xml \u003d f.asXml();\n        rootAction.bindClass \u003d Fruity.class;\n        j.submit(f);\n        assertEquals(rootAction.formData + \"\\n\" + xml,\n                     \"[Apple with 17 seeds pie, Yellow Banana split]\", rootAction.bindResult.toString());\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNested:void()","methodSource":"@Test\n    public void testNested() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testNested\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        try {\n            clickButton(wc, f, \"Add\", true);\n            f.getInputByValue(\"\").setValue(\"title one\");\n            clickButton(wc, f, \"Add Foo\", true);\n            f.getInputByValue(\"\").setValue(\"txt one\");\n            clickButton(wc, f, \"Add Foo\", false);\n            f.getInputByValue(\"\").setValue(\"txt two\");\n            f.getInputsByName(\"bool\").get(1).click();\n            clickButton(wc, f, \"Add\", false);\n            f.getInputByValue(\"\").setValue(\"title two\");\n            f.getElementsByTagName(\"button\").get(1).click(); // 2nd \"Add Foo\" button\n            WebClientUtil.waitForJSExec(wc);\n            f.getInputByValue(\"\").setValue(\"txt 2.1\");\n        } catch (Exception e) {\n            System.err.println(\"HTML at time of failure:\\n\" + p.getBody().asXml());\n            throw e;\n        }\n        rootAction.bindClass \u003d FooList.class;\n        j.submit(f);\n        assertEquals(\"[FooList:title one:[foo:txt one:false,foo:txt two:true], \"\n                     + \"FooList:title two:[foo:txt 2.1:false]]\", rootAction.bindResult.toString());\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNestedEnabledTopButton:void()","methodSource":"@Test\n    public void testNestedEnabledTopButton() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testNestedTopButton\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        try {\n            clickButton(wc, f, \"Add\", true);\n            f.getInputByValue(\"\").setValue(\"title one\");\n            clickButton(wc, f, \"Add Foo\", true);\n            f.getInputByValue(\"\").setValue(\"txt one\");\n            clickButton(wc, f, \"Add Foo\", false);\n            f.getInputByValue(\"\").setValue(\"txt two\");\n            f.getInputsByName(\"bool\").get(1).click();\n            clickButton(wc, f, \"Add\", false);\n            f.getInputByValue(\"\").setValue(\"title two\");\n            f.getElementsByTagName(\"button\").get(3).click(); // 2nd \"Add Foo\" button\n            WebClientUtil.waitForJSExec(wc);\n            f.getInputByValue(\"\").setValue(\"txt 2.1\");\n        } catch (Exception e) {\n            System.err.println(\"HTML at time of failure:\\n\" + p.getBody().asXml());\n            throw e;\n        }\n        rootAction.bindClass \u003d FooList.class;\n        j.submit(f);\n        assertEquals(\"[FooList:title one:[foo:txt one:false,foo:txt two:true], \"\n                     + \"FooList:title two:[foo:txt 2.1:false]]\", rootAction.bindResult.toString());\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNestedEnabledTopButtonInner:void()","methodSource":"@Test\n    public void testNestedEnabledTopButtonInner() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testNestedTopButtonInner\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        try {\n            clickButton(wc, f, \"Add\", true);\n            f.getInputByValue(\"\").setValue(\"title one\");\n            clickButton(wc, f, \"Add Foo\", true);\n            f.getInputByValue(\"\").setValue(\"txt one\");\n            clickButton(wc, f, \"Add Foo\", false);\n            f.getInputByValue(\"\").setValue(\"txt two\");\n            f.getInputsByName(\"bool\").get(1).click();\n            clickButton(wc, f, \"Add\", false);\n            f.getInputByValue(\"\").setValue(\"title two\");\n            f.getElementsByTagName(\"button\").get(2).click(); // 2nd \"Add Foo\" button\n            WebClientUtil.waitForJSExec(wc);\n            f.getInputByValue(\"\").setValue(\"txt 2.1\");\n        } catch (Exception e) {\n            System.err.println(\"HTML at time of failure:\\n\" + p.getBody().asXml());\n            throw e;\n        }\n        rootAction.bindClass \u003d FooList.class;\n        j.submit(f);\n        assertEquals(\"[FooList:title one:[foo:txt one:false,foo:txt two:true], \"\n                     + \"FooList:title two:[foo:txt 2.1:false]]\", rootAction.bindResult.toString());\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNestedEnabledTopButtonOuter:void()","methodSource":"@Test\n    public void testNestedEnabledTopButtonOuter() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testNestedTopButtonOuter\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        try {\n            clickButton(wc, f, \"Add\", true);\n            f.getInputByValue(\"\").setValue(\"title one\");\n            clickButton(wc, f, \"Add Foo\", true);\n            f.getInputByValue(\"\").setValue(\"txt one\");\n            clickButton(wc, f, \"Add Foo\", false);\n            f.getInputByValue(\"\").setValue(\"txt two\");\n            f.getInputsByName(\"bool\").get(1).click();\n            clickButton(wc, f, \"Add\", false);\n            f.getInputByValue(\"\").setValue(\"title two\");\n            f.getElementsByTagName(\"button\").get(2).click(); // 2nd \"Add Foo\" button\n            WebClientUtil.waitForJSExec(wc);\n            f.getInputByValue(\"\").setValue(\"txt 2.1\");\n        } catch (Exception e) {\n            System.err.println(\"HTML at time of failure:\\n\" + p.getBody().asXml());\n            throw e;\n        }\n        rootAction.bindClass \u003d FooList.class;\n        j.submit(f);\n        assertEquals(\"[FooList:title one:[foo:txt one:false,foo:txt two:true], \"\n                     + \"FooList:title two:[foo:txt 2.1:false]]\", rootAction.bindResult.toString());\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNestedRadio:void()","methodSource":"@Test\n    public void testNestedRadio() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testNestedRadio\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        try {\n            clickButton(wc, f, \"Add\", true);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(1).click(); // outer\u003dtwo\n            clickButton(wc, f, \"Add Moo\", true);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(2).click(); // inner\u003dinone\n            clickButton(wc, f, \"Add\", false);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(4).click(); // outer\u003done\n            Thread.sleep(500);\n            f.getElementsByTagName(\"button\").get(1).click(); // 2nd \"Add Moo\" button\n            WebClientUtil.waitForJSExec(wc);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(7).click(); // inner\u003dintwo\n            f.getElementsByTagName(\"button\").get(1).click();\n            WebClientUtil.waitForJSExec(wc);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(8).click(); // inner\u003dinone\n        } catch (Exception e) {\n            System.err.println(\"HTML at time of failure:\\n\" + p.getBody().asXml());\n            throw e;\n        }\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"moo\\\":{\\\"inner\\\":\\\"inone\\\"},\\\"outer\\\":\\\"two\\\"},\"\n                + \"{\\\"moo\\\":[{\\\"inner\\\":\\\"intwo\\\"},{\\\"inner\\\":\\\"inone\\\"}],\\\"outer\\\":\\\"one\\\"}]\",\n                rootAction.formData.get(\"items\"));\n    }"},{"className":"lib.form.RepeatableTest","methodSignature":"lib.form.RepeatableTest.testNestedRadioEnabledTopButton:void()","methodSource":"@Test\n    public void testNestedRadioEnabledTopButton() throws Exception {\n        JenkinsRule.WebClient wc \u003d j.createWebClient();\n        HtmlPage p \u003d wc.goTo(\"self/testNestedRadioTopButton\");\n        HtmlForm f \u003d p.getFormByName(\"config\");\n        try {\n            clickButton(wc, f, \"Add\", true);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(1).click(); // outer\u003dtwo\n            clickButton(wc, f, \"Add Moo\", true);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(2).click(); // inner\u003dinone\n            clickButton(wc, f, \"Add\", false);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(4).click(); // outer\u003done\n            Thread.sleep(500);\n            f.getElementsByTagName(\"button\").get(3).click(); // 2nd \"Add Moo\" button\n            WebClientUtil.waitForJSExec(wc);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(7).click(); // inner\u003dintwo\n            f.getElementsByTagName(\"button\").get(4).click();\n            WebClientUtil.waitForJSExec(wc);\n            f.getElementsByAttribute(\"input\", \"type\", \"radio\").get(8).click(); // inner\u003dinone\n        } catch (Exception e) {\n            System.err.println(\"HTML at time of failure:\\n\" + p.getBody().asXml());\n            throw e;\n        }\n        j.submit(f);\n        assertEqualsJsonArray(\"[{\\\"moo\\\":{\\\"inner\\\":\\\"inone\\\"},\\\"outer\\\":\\\"two\\\"},\"\n                + \"{\\\"moo\\\":[{\\\"inner\\\":\\\"intwo\\\"},{\\\"inner\\\":\\\"inone\\\"}],\\\"outer\\\":\\\"one\\\"}]\",\n                rootAction.formData.get(\"items\"));\n    }"},{"className":"lib.form.RowSetTest","methodSignature":"lib.form.RowSetTest.json:void()","methodSource":"@Test\n    public void json() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"test/test1\");\n        j.submit(p.getFormByName(\"config\"));\n    }"},{"className":"lib.form.RowVisibilityGroupTest","methodSignature":"lib.form.RowVisibilityGroupTest.test1:void()","methodSource":"@Test\n    public void test1() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/test1\");\n\n        HtmlElement outer \u003d DomNodeUtil.selectSingleNode(p, \"//INPUT[@name\u003d\u0027outer\u0027]\");\n        HtmlElement inner \u003d DomNodeUtil.selectSingleNode(p, \"//INPUT[@name\u003d\u0027inner\u0027]\");\n        HtmlInput field \u003d DomNodeUtil.selectSingleNode(p, \"//INPUT[@type\u003d\u0027text\u0027][@name\u003d\u0027_.field\u0027]\");\n\n        // outer gets unfolded, but inner should be still folded\n        outer.click();\n        assertFalse(field.isDisplayed());\n        // now click inner, to reveal the field\n        inner.click();\n        assertTrue(field.isDisplayed());\n\n        // folding outer should hide everything\n        outer.click();\n        assertFalse(field.isDisplayed());\n        // but if we unfold outer, everything should be revealed because inner is already checked.\n        outer.click();\n        assertTrue(field.isDisplayed());\n    }"},{"className":"lib.form.RowVisibilityGroupTest","methodSignature":"lib.form.RowVisibilityGroupTest.test2:void()","methodSource":"@Test\n    public void test2() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/test2\");\n\n        HtmlSelect s \u003d DomNodeUtil.selectSingleNode(p, \"//SELECT\");\n        List\u003cHtmlOption\u003e opts \u003d s.getOptions();\n\n        // those first selections will load additional HTMLs\n        s.setSelectedAttribute(opts.get(0), true);\n        s.setSelectedAttribute(opts.get(1), true);\n\n        // now select back what\u0027s already loaded, to cause the existing elements to be displayed\n        s.setSelectedAttribute(opts.get(0), true);\n\n        // make sure that the inner control is still hidden\n        List\u003cHtmlInput\u003e textboxes \u003d DomNodeUtil.selectNodes(p, \"//INPUT[@name\u003d\u0027_.textbox2\u0027]\");\n        assertEquals(2, textboxes.size());\n        for (HtmlInput e : textboxes)\n            assertFalse(e.isDisplayed());\n\n        // reveal the text box\n        List\u003cHtmlInput\u003e checkboxes \u003d DomNodeUtil.selectNodes(p, \"//INPUT[@name\u003d\u0027inner\u0027]\");\n        assertEquals(2, checkboxes.size());\n        checkboxes.get(0).click();\n        assertTrue(textboxes.get(0).isDisplayed());\n        textboxes.get(0).type(\"Budweiser\");\n\n        // toggle the selection again\n        s.setSelectedAttribute(opts.get(1), true);\n        s.setSelectedAttribute(opts.get(0), true);\n\n        // make sure it\u0027s still displayed this time\n        assertTrue(checkboxes.get(0).isChecked());\n        assertTrue(textboxes.get(0).isDisplayed());\n\n        // make sure we get what we expect\n        j.submit(p.getFormByName(\"config\"));\n        RootActionImpl rootAction \u003d ExtensionList.lookupSingleton(RootActionImpl.class);\n        j.assertEqualDataBoundBeans(rootAction.beer, new Beer(\"\", new Nested(\"Budweiser\")));\n    }"},{"className":"lib.form.SecretTextareaTest","methodSignature":"lib.form.SecretTextareaTest.addEmptySecret:void()","methodSource":"@Test\n    public void addEmptySecret() throws Exception {\n        j.configRoundtrip(project);\n        assertTestBuilderDataBoundEqual(TestBuilder.newDefault());\n    }"},{"className":"lib.form.SecretTextareaTest","methodSignature":"lib.form.SecretTextareaTest.addSecret:void()","methodSource":"@Test\n    public void addSecret() throws Exception {\n        setProjectSecret(\"testValue\");\n        assertTestBuilderDataBoundEqual(TestBuilder.fromString(\"testValue\"));\n    }"},{"className":"lib.form.SecretTextareaTest","methodSignature":"lib.form.SecretTextareaTest.addSecretAndUpdateDescription:void()","methodSource":"@Test\n    public void addSecretAndUpdateDescription() throws Exception {\n        setProjectSecret(\"Original Value\");\n        assertTestBuilderDataBoundEqual(TestBuilder.fromString(\"Original Value\"));\n        HtmlForm configForm \u003d goToConfigForm();\n        HtmlTextInput description \u003d configForm.getInputByName(\"_.description\");\n        description.setText(\"New description\");\n        j.submit(configForm);\n        assertTestBuilderDataBoundEqual(TestBuilder.fromStringWithDescription(\"Original Value\", \"New description\"));\n    }"},{"className":"lib.form.SecretTextareaTest","methodSignature":"lib.form.SecretTextareaTest.addSecretAndUpdateSecretWithEmptyValue:void()","methodSource":"@Test\n    public void addSecretAndUpdateSecretWithEmptyValue() throws Exception {\n        setProjectSecret(\"First\");\n        assertTestBuilderDataBoundEqual(TestBuilder.fromString(\"First\"));\n        HtmlForm configForm \u003d goToConfigForm();\n        String hiddenValue \u003d getHiddenSecretValue(configForm);\n        assertNotNull(hiddenValue);\n        assertNotEquals(\"First\", hiddenValue);\n        assertEquals(\"First\", Secret.fromString(hiddenValue).getPlainText());\n        clickSecretUpdateButton(configForm);\n        j.submit(configForm);\n        assertTestBuilderDataBoundEqual(TestBuilder.fromString(\"\"));\n    }"},{"className":"lib.form.TextAreaTest","methodSignature":"lib.form.TextAreaTest.validation:void()","methodSource":"@Test\n    @Issue(\"JENKINS-19457\")\n    public void validation() throws Exception {\n        j.jenkins.getInjector().injectMembers(this);\n        FreeStyleProject p \u003d j.createFreeStyleProject();\n        p.getBuildersList().add(new TestBuilder());\n        j.configRoundtrip(p);\n        assertEquals(\"This is text1\", d.text1);\n        assertEquals(\"Received This is text1\", d.text2);\n    }","advisory":"JENKINS-19457"},{"className":"lib.form.TextAreaTest","methodSignature":"lib.form.TextAreaTest.text:void()","methodSource":"@Issue(\"JENKINS-27505\")\n    @Test\n    public void text() throws Exception {\n        {\n            String TEXT_TO_TEST \u003d \"some\\nvalue\\n\";\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            TextareaTestBuilder target \u003d new TextareaTestBuilder(TEXT_TO_TEST);\n            p.getBuildersList().add(target);\n            j.configRoundtrip(p);\n            j.assertEqualDataBoundBeans(target, p.getBuildersList().get(TextareaTestBuilder.class));\n        }\n\n        // test for a textarea beginning with a empty line.\n        {\n            String TEXT_TO_TEST \u003d \"\\nbegin\\n\\nwith\\nempty\\nline\\n\\n\";\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            TextareaTestBuilder target \u003d new TextareaTestBuilder(TEXT_TO_TEST);\n            p.getBuildersList().add(target);\n            j.configRoundtrip(p);\n            j.assertEqualDataBoundBeans(target, p.getBuildersList().get(TextareaTestBuilder.class));\n        }\n\n        // test for a textarea beginning with two empty lines.\n        {\n            String TEXT_TO_TEST \u003d \"\\n\\nbegin\\n\\nwith\\ntwo\\nempty\\nline\\n\\n\";\n            FreeStyleProject p \u003d j.createFreeStyleProject();\n            TextareaTestBuilder target \u003d new TextareaTestBuilder(TEXT_TO_TEST);\n            p.getBuildersList().add(target);\n            j.configRoundtrip(p);\n            j.assertEqualDataBoundBeans(target, p.getBuildersList().get(TextareaTestBuilder.class));\n        }\n    }","advisory":"JENKINS-27505"},{"className":"lib.form.ValidateButtonTest","methodSignature":"lib.form.ValidateButtonTest.testValidateIsCalled:void()","methodSource":"@Test\n    public void testValidateIsCalled() throws Exception {\n        TestValidateIsCalled.DescriptorImpl d \u003d j.jenkins.getDescriptorByType(TestValidateIsCalled.DescriptorImpl.class);\n        assertNotNull(d);\n\n        d.test1Outcome \u003d new Exception(); // if doValidateTest1() doesn\u0027t get invoked, we want to know.\n        HtmlPage p \u003d j.createWebClient().goTo(\"test\");\n        HtmlButton button \u003d HtmlFormUtil.getButtonByCaption(p.getFormByName(\"config\"), \"test\");\n        HtmlElementUtil.click(button);\n\n        if (d.test1Outcome !\u003d null)\n            throw d.test1Outcome;\n    }"},{"className":"lib.form.ValidateButtonTest","methodSignature":"lib.form.ValidateButtonTest.noInjectionArePossible:void()","methodSource":"@Test\n    public void noInjectionArePossible() throws Exception {\n        NoInjectionArePossible.DescriptorImpl d \u003d j.jenkins.getDescriptorByType(NoInjectionArePossible.DescriptorImpl.class);\n        assertNotNull(d);\n\n        checkRegularCase(d);\n        checkInjectionInMethod(d);\n        checkInjectionInWith(d);\n    }"},{"className":"lib.form.ValidateButtonTest","methodSignature":"lib.form.ValidateButtonTest.regularUsageOfUsingDescriptorUrl:void()","methodSource":"@Test\n    public void regularUsageOfUsingDescriptorUrl() throws Exception {\n        checkValidateButtonWork(\"okName\");\n    }"},{"className":"lib.form.ValidateButtonTest","methodSignature":"lib.form.ValidateButtonTest.xssUsingDescriptorUrl:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1327\")\n    public void xssUsingDescriptorUrl() throws Exception {\n        checkValidateButtonWork(\"TESTawsCC\u0027,\u0027a\u0027,this)+alert(1)+validateButton(\u0027aaa\");\n    }","advisory":"SECURITY-1327"},{"className":"lib.hudson.ActionsTest","methodSignature":"lib.hudson.ActionsTest.override:void()","methodSource":"@Test\n    public void override() throws Exception {\n        assertNotNull(j.createWebClient().goTo(\"\").getElementById(\"bravo\"));\n    }"},{"className":"lib.hudson.ListScmBrowsersTest","methodSignature":"lib.hudson.ListScmBrowsersTest.selectBoxesUnique_FreeStyleProject:void()","methodSource":"@Test\n    public void selectBoxesUnique_FreeStyleProject() throws Exception {\n        check(j.createFreeStyleProject());\n    }"},{"className":"lib.hudson.ListScmBrowsersTest","methodSignature":"lib.hudson.ListScmBrowsersTest.selectBoxesUnique_MatrixProject:void()","methodSource":"@Test\n    public void selectBoxesUnique_MatrixProject() throws Exception {\n        check(j.jenkins.createProject(MatrixProject.class, \"p\"));\n    }"},{"className":"lib.layout.AjaxTest","methodSignature":"lib.layout.AjaxTest.rejectedLinks:void()","methodSource":"@Issue(\"JENKINS-21254\")\n    @Test public void rejectedLinks() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        String prefix \u003d r.contextPath + \u0027/\u0027;\n        for (DomElement e : wc.goTo(\"login\").getElementsByTagName(\"link\")) {\n            String href \u003d ((HtmlLink) e).getHrefAttribute();\n            if (!href.startsWith(prefix)) {\n                System.err.println(\"ignoring \" + href);\n                continue;\n            }\n            System.err.println(\"checking \" + href);\n            wc.goTo(href.substring(prefix.length()), null);\n        }\n    }","advisory":"JENKINS-21254"},{"className":"lib.layout.AjaxTest","methodSignature":"lib.layout.AjaxTest.ajaxPageRenderingPossibleWithoutJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void ajaxPageRenderingPossibleWithoutJellyTrace() throws Exception {\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        HtmlPage htmlPage \u003d wc.goTo(getExecutorsWidgetAjaxViewUrl());\n        r.assertGoodStatus(htmlPage);\n    }","advisory":"JENKINS-65288"},{"className":"lib.layout.AjaxTest","methodSignature":"lib.layout.AjaxTest.ajaxPageRenderingPossibleWithJellyTrace:void()","methodSource":"@Test\n    @Issue(\"JENKINS-65288\")\n    public void ajaxPageRenderingPossibleWithJellyTrace() throws Exception {\n        boolean currentValue \u003d JellyFacet.TRACE;\n        try {\n            JellyFacet.TRACE \u003d true;\n\n            JenkinsRule.WebClient wc \u003d r.createWebClient();\n            HtmlPage htmlPage \u003d wc.goTo(getExecutorsWidgetAjaxViewUrl());\n            r.assertGoodStatus(htmlPage);\n        } finally {\n            JellyFacet.TRACE \u003d currentValue;\n        }\n    }","advisory":"JENKINS-65288"},{"className":"lib.layout.ConfirmationLinkTest","methodSignature":"lib.layout.ConfirmationLinkTest.noInjectionArePossible:void()","methodSource":"@Test\n    public void noInjectionArePossible() throws Exception {\n        TestRootAction testParams \u003d j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);\n        assertNotNull(testParams);\n\n        checkRegularCase(testParams);\n        checkRegularCasePost(testParams);\n        checkInjectionInHref(testParams);\n        checkInjectionInMessage(testParams);\n        checkInjectionInPost(testParams);\n    }"},{"className":"lib.layout.IconTest","methodSignature":"lib.layout.IconTest.testIcons:void()","methodSource":"@Test\n    public void testIcons() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"testIcons\");\n        DomElement iconsBlock \u003d p.getElementById(\"iconsBlock\");\n        List\u003cDomElement\u003e icons \u003d StreamSupport\n            .stream(iconsBlock.getChildElements().spliterator(), false)\n            .collect(Collectors.toList());\n\n        assertIconToImageOkay(icons.get(0), \"/images/16x16/empty.png\", \"icon-empty icon-sm\");\n        assertIconToImageOkay(icons.get(1), \"/images/24x24/empty.png\", \"icon-empty icon-md\");\n        assertIconToImageOkay(icons.get(2), \"/images/32x32/empty.png\", \"icon-empty icon-lg\");\n        assertIconToImageOkay(icons.get(3), \"/images/48x48/empty.png\", \"icon-empty icon-xlg\");\n\n        // class specs not in \"normal\" order...\n        assertIconToImageOkay(icons.get(4), \"/images/16x16/empty.png\");\n        assertIconToImageOkay(icons.get(5), \"/images/24x24/empty.png\");\n\n        // src attribute...\n        assertIconToImageOkay(icons.get(6), \"/plugin/xxx/icon.png\");\n    }"},{"className":"lib.layout.IconTest","methodSignature":"lib.layout.IconTest.testBallColorTd:void()","methodSource":"@Test\n    public void testBallColorTd() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"testBallColorTd\");\n\n        DomElement ballColorAborted \u003d p.getElementById(\"ballColorAborted\");\n        List\u003cDomElement\u003e ballIcons \u003d StreamSupport.stream(ballColorAborted.getChildElements().spliterator(), false).collect(Collectors.toList());\n        assertIconToSvgIconOkay(ballIcons.get(0).getFirstElementChild(), \"icon-aborted icon-md\");\n\n        DomElement statusIcons \u003d p.getElementById(\"statusIcons\");\n        List\u003cDomElement\u003e statusIconsList \u003d StreamSupport.stream(statusIcons.getChildElements().spliterator(), false).collect(Collectors.toList());\n\n        assertIconToSvgOkay(statusIconsList.get(0).getFirstElementChild().getNextElementSibling(), \"icon-user icon-xlg\");\n\n        assertIconToImageOkay(statusIconsList.get(1).getFirstElementChild(), \"/plugin/12345/icons/s2.png\");\n    }"},{"className":"lib.layout.IconTest","methodSignature":"lib.layout.IconTest.testTasks:void()","methodSource":"@Test\n    public void testTasks() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"testTasks\");\n\n        DomElement tasksDiv \u003d p.getElementById(\"tasks\");\n        List\u003cDomElement\u003e taskDivs \u003d StreamSupport.stream(tasksDiv.getChildElements().spliterator(), false).collect(Collectors.toList());\n\n        assertIconToSymbolOkay(taskDivs.get(0).getElementsByTagName(\"svg\").get(0));\n        // this is loading the png from cloudbees-folder plugin\n        // when this is swapped to an SVG and the dep updated this test will need to change\n        assertIconToSvgOkay(taskDivs.get(1).getElementsByTagName(\"svg\").get(0), \"icon-folder icon-md\");\n        assertIconToImageOkay(taskDivs.get(2).getElementsByTagName(\"img\").get(0), \"/images/svgs/package.svg\");\n        assertIconToImageOkay(taskDivs.get(3).getElementsByTagName(\"img\").get(0), \"/images/svgs/package.svg\");\n        assertIconToImageOkay(taskDivs.get(4).getElementsByTagName(\"img\").get(0), \"/images/svgs/package.svg\");\n        assertIconToSymbolOkay(taskDivs.get(5).getElementsByTagName(\"svg\").get(0));\n\n        assertIconToImageOkay(taskDivs.get(6).getElementsByTagName(\"img\").get(0), \"/plugin/xxx/icon.png\");\n        assertIconToImageOkay(taskDivs.get(7).getElementsByTagName(\"img\").get(0), \"/plugin/xxx/icon.png\");\n    }"},{"className":"lib.layout.LayoutTest","methodSignature":"lib.layout.LayoutTest.rejectedLinks:void()","methodSource":"@Issue(\"JENKINS-21254\")\n    @Test public void rejectedLinks() throws Exception {\n        r.jenkins.setSecurityRealm(r.createDummySecurityRealm());\n        r.jenkins.setAuthorizationStrategy(new MockAuthorizationStrategy());\n        JenkinsRule.WebClient wc \u003d r.createWebClient();\n        String prefix \u003d r.contextPath + \u0027/\u0027;\n        for (DomElement e : wc.goTo(\"login\").getElementsByTagName(\"link\")) {\n            String href \u003d ((HtmlLink) e).getHrefAttribute();\n            if (!href.startsWith(prefix)) {\n                System.err.println(\"ignoring \" + href);\n                continue;\n            }\n            System.err.println(\"checking \" + href);\n            wc.goTo(href.substring(prefix.length()), null);\n        }\n    }","advisory":"JENKINS-21254"},{"className":"lib.layout.RenderOnDemandTest","methodSignature":"lib.layout.RenderOnDemandTest.testBehaviour:void()","methodSource":"@Test\n    public void testBehaviour() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/testBehaviour\");\n\n        p.executeJavaScript(\"renderOnDemand(document.getElementsBySelector(\u0027.lazy\u0027)[0])\");\n        WebClientUtil.waitForJSExec(p.getWebClient());\n        // all AJAX calls complete before the above method returns\n\n        ScriptResult r \u003d p.executeJavaScript(\"var r\u003ddocument.getElementsBySelector(\u0027DIV.a\u0027); r[0].innerHTML+r[1].innerHTML+r[2].innerHTML\");\n        WebClientUtil.waitForJSExec(p.getWebClient());\n        assertEquals(\"AlphaBravoCharlie\", r.getJavaScriptResult().toString());\n    }"},{"className":"lib.layout.RenderOnDemandTest","methodSignature":"lib.layout.RenderOnDemandTest.testScript:void()","methodSource":"@Test\n    public void testScript() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/testScript\");\n        assertNull(p.getElementById(\"loaded\"));\n\n        p.getElementById(\"button\").click();\n        WebClientUtil.waitForJSExec(p.getWebClient());\n        // all AJAX calls complete before the above method returns\n        assertNotNull(p.getElementById(\"loaded\"));\n        ScriptResult r \u003d p.executeJavaScript(\"x\");\n        WebClientUtil.waitForJSExec(p.getWebClient());\n\n        assertEquals(\"xxx\", r.getJavaScriptResult().toString());\n\n        r \u003d p.executeJavaScript(\"y\");\n        WebClientUtil.waitForJSExec(p.getWebClient());\n        assertEquals(\"yyy\", r.getJavaScriptResult().toString());\n\n        // if you want to test this in the browser\n        /*\n        System.out.println(\"Try http://localhost:\"+localPort+\"/self/testScript\");\n        j.interactiveBreak();\n        */\n    }"},{"className":"lib.layout.StopButtonTest","methodSignature":"lib.layout.StopButtonTest.noInjectionArePossible:void()","methodSource":"@Test\n    public void noInjectionArePossible() throws Exception {\n        TestRootAction testParams \u003d j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);\n        assertNotNull(testParams);\n\n        checkRegularCase(testParams);\n        checkInjectionInHref(testParams);\n        checkInjectionInHrefWithConfirm(testParams);\n        checkInjectionInConfirm(testParams);\n    }"},{"className":"lib.layout.SvgIconTest","methodSignature":"lib.layout.SvgIconTest.regularUsage:void()","methodSource":"@Test\n    @Issue(\"JENKINS-60920\")\n    public void regularUsage() throws Exception {\n        TestRootAction testRootAction \u003d j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);\n\n        String desiredTooltip \u003d \"Hello world!\";\n        testRootAction.tooltipContent \u003d desiredTooltip;\n\n        HtmlPage p \u003d j.createWebClient().goTo(testRootAction.getUrlName());\n        assertThat(p.getWebResponse().getContentAsString(), containsString(desiredTooltip));\n    }","advisory":"JENKINS-60920"},{"className":"lib.layout.SvgIconTest","methodSignature":"lib.layout.SvgIconTest.onlyQuotesAreEscaped:void()","methodSource":"@Test\n    @Issue(\"JENKINS-60920\")\n    public void onlyQuotesAreEscaped() throws Exception {\n        TestRootAction testRootAction \u003d j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);\n\n        String pristineTooltip \u003d \"Special tooltip with double quotes \\\", simple quotes \u0027, and html characters \u003c\u003e\u0026.\";\n\n        String expectedTooltip \u003d \"Special tooltip with double quotes \u0026quot;, simple quotes \u0027, and html characters \u0026lt;\u0026gt;\u0026amp;.\";\n        testRootAction.tooltipContent \u003d pristineTooltip;\n\n        HtmlPage p \u003d j.createWebClient().goTo(testRootAction.getUrlName());\n        assertThat(p.getWebResponse().getContentAsString(), allOf(\n                containsString(expectedTooltip),\n                not(containsString(pristineTooltip))\n        ));\n    }","advisory":"JENKINS-60920"},{"className":"lib.layout.SvgIconTest","methodSignature":"lib.layout.SvgIconTest.preventXssFromTooltip:void()","methodSource":"@Test\n    @Issue(\"SECURITY-1955\")\n    public void preventXssFromTooltip() throws Exception {\n        TestRootAction testRootAction \u003d j.jenkins.getExtensionList(UnprotectedRootAction.class).get(TestRootAction.class);\n\n        String desiredTooltip \u003d \"Tooltip with \u003cimg src\u003dx onerror\u003dalert(123)\u003e payload included\";\n        testRootAction.tooltipContent \u003d desiredTooltip;\n\n        ensureXssIsPrevented(testRootAction, \"Tooltip with\", \"\u003cimg\");\n    }","advisory":"SECURITY-1955"},{"className":"lib.layout.TaskTest","methodSignature":"lib.layout.TaskTest.postLink:void()","methodSource":"@Test public void postLink() throws Exception {\n        WebClient wc \u003d j.createWebClient();\n        HtmlPage page \u003d wc.goTo(postLink.getUrlName());\n        HtmlElementUtil.click(page.getAnchorByText(\"POST\"));\n        assertTrue(\"Action method should be invoked\", postLink.called);\n    }"},{"className":"lib.layout.UserExperimentalFlagTest","methodSignature":"lib.layout.UserExperimentalFlagTest.testNonExistingClass:void()","methodSource":"@Test\n    public void testNonExistingClass() throws Exception {\n        assertFlagUsage(NON_EXISTING_FLAG_CLASS, \"\", null);\n    }"},{"className":"lib.layout.UserExperimentalFlagTest","methodSignature":"lib.layout.UserExperimentalFlagTest.testNonFlagClass:void()","methodSource":"@Test\n    public void testNonFlagClass() throws Exception {\n        assertFlagUsage(UNRELATED_CLASS, \"\", null);\n    }"},{"className":"lib.layout.UserExperimentalFlagTest","methodSignature":"lib.layout.UserExperimentalFlagTest.testExistingClassButNotRegisteredFlag:void()","methodSource":"@Test\n    public void testExistingClassButNotRegisteredFlag() throws Exception {\n        // No @Extension annotation\n        assertFlagUsage(NON_REGISTERED_FLAG_CLASS, \"\", null);\n    }"},{"className":"lib.layout.UserExperimentalFlagTest","methodSignature":"lib.layout.UserExperimentalFlagTest.testExistingFlagButAnonymousUser:void()","methodSource":"@Test\n    public void testExistingFlagButAnonymousUser() throws Exception {\n        // default value is true\n        assertFlagUsage(VALID_FLAG_CLASS, \"true\", null);\n    }"},{"className":"lib.layout.UserExperimentalFlagTest","methodSignature":"lib.layout.UserExperimentalFlagTest.testPropertyWithValues:void()","methodSource":"@Test\n    public void testPropertyWithValues() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getOrCreateByIdOrFullName(\"user\");\n        Map\u003cString, String\u003e flags \u003d new HashMap\u003c\u003e();\n        flags.put(\"test1.flag\", \"false\");\n        UserExperimentalFlagsProperty property \u003d new UserExperimentalFlagsProperty(flags);\n        user.addProperty(property);\n\n        assertFlagUsage(VALID_FLAG_CLASS, \"false\", user);\n    }"},{"className":"lib.layout.UserExperimentalFlagTest","methodSignature":"lib.layout.UserExperimentalFlagTest.testPropertyWithNull:void()","methodSource":"@Test\n    public void testPropertyWithNull() throws Exception {\n        j.jenkins.setSecurityRealm(j.createDummySecurityRealm());\n\n        User user \u003d User.getOrCreateByIdOrFullName(\"user\");\n        Map\u003cString, String\u003e flags \u003d new HashMap\u003c\u003e();\n        flags.put(\"test1.flag\", null);\n        UserExperimentalFlagsProperty property \u003d new UserExperimentalFlagsProperty(flags);\n        user.addProperty(property);\n\n        // default value is true\n        assertFlagUsage(VALID_FLAG_CLASS, \"true\", user);\n    }"},{"className":"org.jenkins.ui.symbol.SymbolJenkinsTest","methodSignature":"org.jenkins.ui.symbol.SymbolJenkinsTest.missingSymbolFromPluginDefaultsToPlaceholder:void()","methodSource":"@Test\n    @DisplayName(\"When resolving a symbol from a missing plugin, the placeholder is generated instead\")\n    public void missingSymbolFromPluginDefaultsToPlaceholder() throws Throwable {\n        rjr.then(SymbolJenkinsTest::_missingSymbolFromPluginDefaultsToPlaceholder);\n    }"},{"className":"org.jenkins.ui.symbol.SymbolJenkinsTest","methodSignature":"org.jenkins.ui.symbol.SymbolJenkinsTest.resolvingSymbolFromPlugin:void()","methodSource":"@Test\n    @DisplayName(\"Resolving a valid symbol from an installed plugin does not return the placeholder\")\n    public void resolvingSymbolFromPlugin() throws Throwable {\n        rjr.then(SymbolJenkinsTest::_resolvingSymbolFromPlugin);\n    }"},{"className":"org.kohsuke.stapler.beanutils.TagTest","methodSignature":"org.kohsuke.stapler.beanutils.TagTest.testVariousDefaultTagLibs:void()","methodSource":"@Test\n    public void testVariousDefaultTagLibs() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        {\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyDefineTagLib\");\n            final String content \u003d page.getWebResponse().getContentAsString();\n            assertThat(content, containsString(\"\u003cdiv class\u003d\\\"theFirstClass\\\"\u003eLabel:theFirstLabel\u003c/div\u003e\"));\n            assertThat(content, containsString(\"\u003cdiv class\u003d\\\"theSecondClass\\\"\u003eLabel:theSecondLabel\u003c/div\u003e\"));\n        }\n        {\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyViewWithReallyStaticTag\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"\u003ch1 class\u003d\\\"title\\\"\u003eIt works from Jelly!\u003c/h1\u003e\"));\n        }\n        {\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyViewWithReallyStaticTag\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"\u003ch1 class\u003d\\\"title\\\"\u003eIt works from Groovy!\u003c/h1\u003e\"));\n        }\n        {\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyViewWithTagLibTag\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"class:thisIsFromGroovy\"));\n        }\n        {\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyViewWithTagLibTag\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"class:thisIsFromJelly\"));\n        }\n    }"},{"className":"org.kohsuke.stapler.beanutils.TagTest","methodSignature":"org.kohsuke.stapler.beanutils.TagTest.testUserDefinedTagLibrary:void()","methodSource":"@Test\n    public void testUserDefinedTagLibrary() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        {\n            // This Jelly page, standalone, does cannot resolve the \u0027my\u0027 tag library\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyWithMyTagLibClassName\");\n            final String content \u003d page.getWebResponse().getContentAsString();\n            assertThat(content, not(containsString(\":thisIsJellyInclude\")));\n            assertThat(content, containsString(\"xmlns:my\u003d\"));\n        }\n        {\n            // With a Groovy wrapper defining the tag library so it can be resolved by class name, it works\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyCallingJellyBuilderJellyThenInclude\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\":thisIsJellyInclude\"));\n            // We\u0027re called from StaticTagLibrary, and assumed to be DynaTag (also, TagLibrary#getTag is needed, no returning null!)\n        }\n        {\n            // Groovy with DynaTag works\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyCallingJellyBuilderJellyThenTagWithStringProperty\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\":stringParam\"));\n        }\n        {\n            // Groovy without DynaTag fails -- this seems to be mostly the st.include case that would fail without workaround\n            final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyCallingJellyBuilderJellyThenTagWithObjectProperty\");\n            assertThat(page.getWebResponse().getContentAsString(), containsString(\"This tag does not understand\"));\n        }\n    }"},{"className":"org.kohsuke.stapler.beanutils.TagTest","methodSignature":"org.kohsuke.stapler.beanutils.TagTest.testIncludeTag:void()","methodSource":"@Test\n    public void testIncludeTag() throws Exception {\n        final JenkinsRule.WebClient wc \u003d j.createWebClient().withThrowExceptionOnFailingStatusCode(false);\n        { // Jelly views with basic include variants\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStIncludeIt\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStIncludeClass\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStIncludeClassByName\");\n                assertThat(page.getWebResponse().getStatusCode(), is(500)); // this has never worked, no conversion takes place (sadly)\n            }\n        }\n        { // Groovy views\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyLibInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyLibWithClassInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyLibWithItInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyNamespaceInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyNamespaceWithClassInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n            {\n                final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyNamespaceWithItInclude\");\n                assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n            }\n        }\n        try {\n            StaplerTagLibrary.DISABLE_INCLUDE_TAG_CLASS_ATTRIBUTE_REWRITING \u003d true;\n\n            { // Jelly views with basic include variants\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStIncludeIt\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStInclude\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStIncludeClass\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/jellyStIncludeClassByName\");\n                    assertThat(page.getWebResponse().getStatusCode(), is(500)); // this has never worked, no conversion takes place (sadly)\n                }\n            }\n            { // Groovy views\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyLibInclude\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyLibWithClassInclude\");\n                    assertThat(page.getWebResponse().getStatusCode(), is(500)); // the error we\u0027re preventing\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyLibWithItInclude\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyNamespaceInclude\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyNamespaceWithClassInclude\");\n                    assertThat(page.getWebResponse().getStatusCode(), is(500)); // the error we\u0027re preventing\n                }\n                {\n                    final HtmlPage page \u003d wc.goTo(ROOT_ACTION_URL + \"/groovyNamespaceWithItInclude\");\n                    assertThat(page.getWebResponse().getContentAsString(), containsString(\"Hello, World\"));\n                }\n            }\n        } finally {\n            StaplerTagLibrary.DISABLE_INCLUDE_TAG_CLASS_ATTRIBUTE_REWRITING \u003d false;\n        }\n    }"},{"className":"org.kohsuke.stapler.Security1097Test","methodSignature":"org.kohsuke.stapler.Security1097Test.testPostWorks:void()","methodSource":"@Test\n    public void testPostWorks() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage htmlPage1 \u003d webClient.goTo(\"security1097/post1\");\n        j.submit(htmlPage1.getFormByName(\"config\"));\n\n        final HtmlPage htmlPage2 \u003d webClient.goTo(\"security1097/post2\");\n        j.submit(htmlPage2.getFormByName(\"config\"));\n    }"},{"className":"org.kohsuke.stapler.Security1097Test","methodSignature":"org.kohsuke.stapler.Security1097Test.testGet1Fails:void()","methodSource":"@Test\n    public void testGet1Fails() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage htmlPage \u003d webClient.goTo(\"security1097/get1\");\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e j.submit(htmlPage.getFormByName(\"config\")));\n        assertEquals(HttpURLConnection.HTTP_BAD_REQUEST, e.getStatusCode());\n    }"},{"className":"org.kohsuke.stapler.Security1097Test","methodSignature":"org.kohsuke.stapler.Security1097Test.testGet2Fails:void()","methodSource":"@Test\n    public void testGet2Fails() throws Exception {\n        final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n        final HtmlPage htmlPage \u003d webClient.goTo(\"security1097/get2\");\n        FailingHttpStatusCodeException e \u003d assertThrows(FailingHttpStatusCodeException.class, () -\u003e j.submit(htmlPage.getFormByName(\"config\")));\n        assertEquals(HttpURLConnection.HTTP_INTERNAL_ERROR, e.getStatusCode());\n    }"},{"className":"org.kohsuke.stapler.Security1097Test","methodSignature":"org.kohsuke.stapler.Security1097Test.testGetWorksWithEscapeHatch:void()","methodSource":"@Test\n    public void testGetWorksWithEscapeHatch() throws Exception {\n        final Field allowed_http_verbs_for_forms \u003d RequestImpl.class.getDeclaredField(\"ALLOWED_HTTP_VERBS_FOR_FORMS\");\n        allowed_http_verbs_for_forms.setAccessible(true);\n        try {\n            allowed_http_verbs_for_forms.set(null, Arrays.asList(\"GET\", \"POST\"));\n            final JenkinsRule.WebClient webClient \u003d j.createWebClient();\n            final HtmlPage htmlPage1 \u003d webClient.goTo(\"security1097/get1\");\n            j.submit(htmlPage1.getFormByName(\"config\"));\n\n            final HtmlPage htmlPage2 \u003d webClient.goTo(\"security1097/get2\");\n            j.submit(htmlPage2.getFormByName(\"config\"));\n        } finally {\n            allowed_http_verbs_for_forms.set(null, List.of(\"POST\"));\n        }\n    }"},{"className":"scripts.BehaviorTest","methodSignature":"scripts.BehaviorTest.testCssSelectors:void()","methodSource":"@Test\n    public void testCssSelectors() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/testCssSelectors\");\n\n        // basic class selector, that we use the most often\n        assertEquals(2, asInt(p.executeJavaScript(\"findElementsBySelector(document.getElementById(\u0027test1\u0027),\u0027.a\u0027,true).length\")));\n        assertEquals(1, asInt(p.executeJavaScript(\"findElementsBySelector(document.getElementById(\u0027test1\u0027),\u0027.a\u0027,false).length\")));\n\n        // \u0027includeSelf\u0027 should only affect the first axis and not afterward\n        assertEquals(1, asInt(p.executeJavaScript(\"findElementsBySelector(document.getElementById(\u0027test2\u0027),\u0027.a .b\u0027,true).length\")));\n        assertEquals(1, asInt(p.executeJavaScript(\"findElementsBySelector(document.getElementById(\u0027test2\u0027),\u0027.a .b\u0027,false).length\")));\n\n        // tag.class. Should exclude itself anyway even if it\u0027s included\n        assertEquals(1, asInt(p.executeJavaScript(\"findElementsBySelector(document.getElementById(\u0027test3\u0027),\u0027P.a\u0027,true).length\")));\n        assertEquals(1, asInt(p.executeJavaScript(\"findElementsBySelector(document.getElementById(\u0027test3\u0027),\u0027P.a\u0027,false).length\")));\n    }"},{"className":"scripts.BehaviorTest","methodSignature":"scripts.BehaviorTest.testDuplicateRegistrations:void()","methodSource":"@Issue(\"JENKINS-14495\")\n    @Test\n    public void testDuplicateRegistrations() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/testDuplicateRegistrations\");\n        ScriptResult r \u003d p.executeJavaScript(\"document.getElementsBySelector(\u0027DIV.a\u0027)[0].innerHTML\");\n        assertEquals(\"initial and appended yet different\", r.getJavaScriptResult().toString());\n    }","advisory":"JENKINS-14495"},{"className":"scripts.BehaviorTest","methodSignature":"scripts.BehaviorTest.testSelectorOrdering:void()","methodSource":"@Test\n    public void testSelectorOrdering() throws Exception {\n        HtmlPage p \u003d j.createWebClient().goTo(\"self/testSelectorOrdering\");\n        ScriptResult r \u003d p.executeJavaScript(\"document.getElementsBySelector(\u0027DIV.a\u0027)[0].innerHTML\");\n        assertEquals(\"initial early counted! generic weevils! late\", r.getJavaScriptResult().toString());\n    }"}]