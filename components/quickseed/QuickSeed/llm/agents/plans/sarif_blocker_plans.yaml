1:
  name: "summarize_sink"
  description: "Read the sink function carefully and summarize it.
    Explain why the analysis report thinks there is a potential vulnerability in this function.
    "

2:
  name: "summarize_script"
  description: "Read the provided python script that generates inputs. 
    Summarize the script and explains how it will trigger the sink functions."

3: 
  name: "optional_blocker_analysis"
  description: "
    This inputs generated by the script covers the following functions:
    {% for func in functions %}
    {{ func }}
    {% endfor %}
    Explain why you think the inputs are not covering all of the sink functions.
    If you do not see the functions here. It means the inputs generated by the script does not cover any of the functions.
    But if you see the sink functions are covered here, please analyze why the inputs generated by the python script are not triggering the vulnerability in the sarif report.
    And analyze if there is any potential blocker that prevents the inputs from triggering the vulnerability.
    "

4:
  name: "review_script"
  description: 
    "Based on your analysis, please write a python script that will generate the input that will trigger the vulnerability.
    You should use the script we provided as an example, and like what that script did, in your script, you should save the generated input at file `output.bin` or a directory `output`. You need to create the directory `output` in the script if you want to generate multiple inputs.
    PLEASE USE Python and output the script in the following format. Avoid assertion or ValueError in the script.
    ```python
      {script}
    ```
    ONLY change the part that you think will help generate input that trigger vulnerability. 
    If you see magic string like 'jazze' or similar strings in the original script, absolutely DO NOT change them, because we are using jazzer to trigger the crash. Those strings are REQUIRED by jazzer to trigger the crash.
    For example, if the sink class is ObjectInputStream, then the input should exactly be the magic string which is special serialized object in jazzer to help trigger the crash.
    You will be provided the full sink functions and classes with their magic strings.
    If the vulnerability here is not within the list you are provided, then you can use any string you want to trigger the crash.
    # Example for writing a repetetive patterns in strings
    If you want to craft a string that contains simple repetetive patterns, instead of writing the literal string, use string concatenation with repetition.

    ## Simple example
    ```python
    payload = '0'* 40
    ```
    A special case is XXE injection, you should prioritize generating an xml file that can trigger the SSRF.
    
    The following is a json that describes magic strings to trigger jazzer's sanitizers.
    In the given json, there is a list of dictrionary.
    Each dictionary represents a vulnerability type, and have three fields: `Vulnerability Classs`, `Sink Class or Method` and `Magic String`.
    When you see the sink method or class from  `Sink Class or Method`, you should pass the `Magic String` as an argument to sink method or class.
    For example, if the sink method or class is in FileWriter, File, read or write.
    You should call this method with the corresponding magic string.

    We provide two examples here:

    exmaple 1:
    If you identify the sink class is a call to class `File` and the vulnerability type is file read and write.
    Accoring to the json we provide you, the magic string to file read and write should be `jazzer`
    Then you should pass `jazzer` as the file name to `File`, so if you identify the vulnerability is file read and write, the constructer of File should be File('jazzer') .
    And if you identify the vulnerability is File path traversal, the constructer of File should look like `File('../../jazzer-traversal')`

    example 2:
    Another example is if you identigy the sink class is a call to class `ProcessBuilder`, then the magic string is `jazze`.
    Then you should pass `jazze` to `ProcessBuilder` like ProcessBuiler('jazze'). 

    A special case is deserialization, what we provide as a magic string is the hex format of the actually magic string.
    All the other magic string are string literal and can directly pass to sink.
    Only for deserialization, you should pass a hex decoding the magic string to `ObjectStreamInput`.
    You MUST pass the correct magic string to the sink method or class, if there is any, to trigger the sink correctly.
    And for those sink method does not have a corresponding magic string, just pass an input that can trigger the vulnerability.
    Please find the magic string of this vulneraability if there is any and put it in the correct part of the input.
    
    Besides the vulnerability listed here, there is also a special case of DoS attack, like infinite loop that causes the fuzzer to time out or out of memory
    There are many reasons that can cause the DoS attack and there are no specific sink for that.
    There are many ways to make a service unavailable for legitimate users by manipulating network packets, programming, logical, or resources handling vulnerabilities, among others"