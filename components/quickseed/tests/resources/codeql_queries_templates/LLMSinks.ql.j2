
/**
 * @id java/CommandInjection
 * @kind problem
 * @name List all function calls in paths related to source and target functions
 * @severity information
 */

import java
import semmle.code.java.frameworks.javaee.ejb.EJBRestrictions

// Base predicate for direct calls
predicate edges(Callable pred, Callable succ) {
  pred.calls(succ) and
  succ.getName() != ""
}
predicate is_target_function(Callable c) { 
  // c.getQualifiedName().matches("%.ProcessBuilder") or 
  {% for i, name in enumerate(target_functions) %}
     {% if i > 0 %}or {% endif %}c.getQualifiedName().matches("%.{{ name }}")
    {% endfor %}
  //instanceof CommandInjectionSink
}


predicate target_reachable(Callable c) {
  is_target_function(c) or
  exists(Callable next | target_reachable(next) and edges(c, next))
}


from Callable prevcall, Callable inbetween, Callable dest, Call tcall
where
  // Must have a valid call relationship
  prevcall.calls(inbetween) and
  tcall = prevcall.getACallSite(inbetween) and
  
  // At least one of these must be true to be interesting
    target_reachable(inbetween) 
  and
  is_target_function(dest)



select
  prevcall.getQualifiedName() as source_qualified_name,
  inbetween.getQualifiedName() as target_qualified_name,
  tcall.getLocation().getFile().getAbsolutePath() as call_filepath,
  tcall.getLocation().getStartLine() as call_lineno,
  prevcall.getLocation().getFile().getAbsolutePath() as source_filepath,
  prevcall.getLocation().getStartLine() as source_lienno,
  inbetween.getLocation().getFile().getAbsolutePath() as target_filepath,
  inbetween.getLocation().getStartLine() as target_lineno,
  "LLM Sinks",
  dest.getQualifiedName() as sink_qualified_name
