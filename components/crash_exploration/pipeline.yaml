repo_classes:
  crs_tasks: MetadataRepository
  crs_tasks_cancelled: MetadataRepository
  project_harness_infos: MetadataRepository
  
  aflpp_build_artifacts: FilesystemRepository
  dedup_pov_report_representative_crashing_inputs: BlobRepository
  dedup_pov_report_representative_metadatas: MetadataRepository
  
  ################### OUTPUTS #####################
  crashing_harness_inputs_exploration: FilesystemRepository
  ################# INTERMEDIATES #################
  
  # raw_benign_harness_inputs:
  #   cls: BlobRepository
  #   required: false
  # raw_crashing_harness_inputs:
  #   cls: BlobRepository
  #   required: false

tasks:
  crash_exploration:
    long_running: false

    # "harness_queue" causes the pending jobs to be prioritized based on how many are queued for a given crashing_input_metadata.harness_info_id
    priority_function: "harness_queue"

    # TODO(FINALDEPLOY) Set max concurrent jobs!!

    priority: 2


    failure_ok: true
    job_quota:
      cpu: 1
      mem: "6Gi"

    # TODO(FINALDEPLOY) Set max concurrent jobs
    max_concurrent_jobs: 16

    links:

      crashing_input_metadata:
        repo: dedup_pov_report_representative_metadatas
        kind: InputMetadata
      
      crashing_input_id:
        repo: dedup_pov_report_representative_metadatas
        kind: InputId

      dedup_pov_report_representative_crashing_input_path:
        repo: dedup_pov_report_representative_crashing_inputs
        kind: InputFilepath
 
      project_id:
        repo: crs_tasks
        kind: InputId
        key: crashing_input_metadata.project_id
      
      crs_task:
        repo: crs_tasks
        kind: InputMetadata
        key: crashing_input_metadata.project_id

      harness_info:
        repo: project_harness_infos
        kind: InputMetadata
        key: crashing_input_metadata.harness_info_id

      project_cancel:
        repo: crs_tasks_cancelled
        kind: Cancel
        key: crashing_input_metadata.project_id

      harness_info_id:
        repo: project_harness_infos
        kind: InputId
        key:  crashing_input_metadata.harness_info_id
      
      # The /src/ /work/ and /out/ directories which will be mounted into the container
      aflpp_build_artifacts_dir:
        repo: aflpp_build_artifacts
        kind: InputFilepath
        key: harness_info.build_configuration_id
     
      crashes:
        repo: crashing_harness_inputs_exploration
        kind: OutputFilepath


    executable:
      cls: Container
      args:
        privileged: true
        image: "{{ crs_image_prefix | default('') }}shellphish-oss-fuzz-runner-{{crs_task.project_name}}--shellphish_aflpp"
        host_mounts:
          "/shared/": "/shared/"
          "/src/": "/tmp/src.{{ harness_info_id }}_ce"
          "/out/": "/tmp/out.{{ harness_info_id }}_ce"
          "/work/" : "/tmp/work.{{ harness_info_id }}_ce"
        template: |
          set -x
          set -e

          export CRS_TASK_NUM={{ crs_task.concurrent_target_num | default('1') }}

          export ARTIPHISHELL_AFL_TIMEOUT=300
          export ARTIPHISHELL_AFL_EXTRA_ARGS="-C"
          export ARTIPHISHELL_DO_NOT_CREATE_INPUT=1
          export FORCED_CREATE_INITIAL_INPUT=1
          export FORCED_USE_CUSTOM_MUTATOR=1
          export FORCED_USE_AFLPP_DICT=0
          export FORCED_FUZZER_TIMEOUT=4
          export FORCED_DO_CMPLOG=1
          export FORCED_USE_CORPUSGUY_DICT=0
          export CORPUS_DIR="/work/corpus_{{ crashing_input_id }}_ce"
          
          export SHELLPHISH_HARNESS_INFO_ID={{ harness_info_id | shquote}}
          export SHELLPHISH_HARNESS_NAME={{ harness_info.cp_harness_name | shquote }}
          export SHELLPHISH_PROJECT_ID={{ project_id }}
          export SHELLPHISH_BUILD_ARTIFACTS_DIR={{ aflpp_build_artifacts_dir | shquote }}/artifacts/

          export ARTIPHISHELL_PROJECT_NAME={{ crs_task.project_name | shquote }}
          export ARTIPHISHELL_HARNESS_NAME={{ harness_info.cp_harness_name | shquote }}
          export ARTIPHISHELL_HARNESS_INFO_ID={{ harness_info_id | shquote }}
          export ARTIPHISHELL_FUZZER_SYNC_DIR="/shared/fuzzer_sync/${ARTIPHISHELL_PROJECT_NAME}-${ARTIPHISHELL_HARNESS_NAME}-${ARTIPHISHELL_HARNESS_INFO_ID}-crash-exploration/"
          mkdir -p "$ARTIPHISHELL_FUZZER_SYNC_DIR"
          export ARTIPHISHELL_FUZZER_INSTANCE_NAME={{ crashing_input_id | shquote }}

          export FUZZING_LANGUAGE=$(yq -r '.language' "$SHELLPHISH_BUILD_ARTIFACTS_DIR/out/build_metadata.yaml")
          export SANITIZER=$(yq -r '.sanitizer' "$SHELLPHISH_BUILD_ARTIFACTS_DIR/out/build_metadata.yaml")
          export FUZZING_ENGINE=$(yq -r '.fuzzing_engine' "$SHELLPHISH_BUILD_ARTIFACTS_DIR/out/build_metadata.yaml")
          export RUN_FUZZER_MODE=interactive
          export CRASH_EXPLORATION_MODE=true

          mkdir -p /src
          mkdir -p /work
          mkdir -p /out

          # Overwrite the working directory to be the root of the container
          WD=$(pwd)
          cd /

          # We are going to use a lockfile to ensure that only one instance is copying the data per node
          LOCKFILE="/src/.rsync.lock"
          while true; do

            if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
              if [ -f /out/.rsync_complete ]; then
                # Skip sync if we already have the files for this configuration on this node
                rm -f "$LOCKFILE"
                break
              fi

              trap 'rm -f "$LOCKFILE"; exit $?' INT TERM EXIT

              # Copy the data over
              # The target source gets copied over the source in current directory
              for dir in src work out; do
                if [ -d "$SHELLPHISH_BUILD_ARTIFACTS_DIR"/$dir ]; then
                  rm -rf /$dir/*
                  rsync -ra "$SHELLPHISH_BUILD_ARTIFACTS_DIR"/$dir/ /$dir/
                fi
              done
              touch /out/.rsync_complete

              rm -f "$LOCKFILE"
              trap - INT TERM EXIT
              break
            else
              sleep 1
            fi
          done

          ls -al /src/
          ls -al /work/
          ls -al /out/

          mkdir -p $CORPUS_DIR
          ls -al $CORPUS_DIR

          cd $WD


          rsync -ra {{dedup_pov_report_representative_crashing_input_path | shquote}} $CORPUS_DIR
          cp {{dedup_pov_report_representative_crashing_input_path | shquote}} $CORPUS_DIR/crash_1
          cp {{dedup_pov_report_representative_crashing_input_path | shquote}} $CORPUS_DIR/crash_2
          ls -al $CORPUS_DIR
          cp {{dedup_pov_report_representative_crashing_input_path | shquote}} {{ crashes | shquote }}

          touch /out/{{ crashing_input_id }}_ce.stdout.log
          touch /out/{{ crashing_input_id }}_ce.stderr.log
          export SKIP_SEED_CORPUS=1

          # Final bash command to run
          (
          set -e

          ulimit -Sv unlimited
          ulimit -Hv 5242880

          run_fuzzer {{harness_info.cp_harness_name | shquote}}

          if [ $? -eq 0 ]; then
            touch /out/.run_success
          fi
          ) 2> /out/{{ crashing_input_id }}_ce.stderr.log | tee /out/{{ crashing_input_id }}_ce.stdout.log || true

          echo "===== STDOUT ====="
          cat /out/{{ crashing_input_id }}_ce.stdout.log
          echo "===== STDERR ====="
          cat /out/{{ crashing_input_id }}_ce.stderr.log
          echo "=================="

          touch /out/{{ crashing_input_id }}_ce.yaml
          echo "harness_info_id: {{ harness_info_id }}" >> /out/{{ crashing_input_id }}_ce.yaml
          echo "harness_name: {{ harness_info.cp_harness_name }}" >> /out/{{ crashing_input_id }}_ce.yaml
          echo "project_id: {{ project_id }}" >> /out/{{ crashing_input_id }}_ce.yaml
          ls -al $ARTIPHISHELL_FUZZER_SYNC_DIR/$ARTIPHISHELL_FUZZER_INSTANCE_NAME/crashes/
          if [ -f /out/.run_success ]; then
            echo "run_success: true" >> /out/{{ crashing_input_id }}_ce.yaml
          else
            echo "run_success: false" >> /out/{{ crashing_input_id }}_ce.yaml
          fi
          echo "FUZZ METADATA: "
          cat /out/{{ crashing_input_id }}_ce.yaml
          rsync -av "$ARTIPHISHELL_FUZZER_SYNC_DIR/$ARTIPHISHELL_FUZZER_INSTANCE_NAME/crashes/" "{{ crashes | shquote }}"
