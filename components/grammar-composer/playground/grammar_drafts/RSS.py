######################################################################
# Helper Functions
######################################################################

def artiphishell_base64_encode(data: bytes) -> bytes:
    import base64
    return base64.b64encode(data)

######################################################################
# Grammar Rules
######################################################################

ctx.rule('START', b'{XML_DECL}{WS}{DOCTYPE}{WS}{RSS_DOC}')
ctx.literal('XML_DECL', b'')
ctx.literal('XML_DECL', b'<?xml version="1.0" encoding="UTF-8"?>')
ctx.literal('DOCTYPE', b'')
ctx.rule('DOCTYPE', b'<!DOCTYPE rss [ <!ELEMENT rss ANY> <!ENTITY xxe SYSTEM "file:///etc/passwd"> ]>')
ctx.rule('DOCTYPE', b'<!DOCTYPE rss SYSTEM "http://example.com/rss.dtd">')
ctx.rule('RSS_DOC', b'<rss version="{VERSION}"{ROOT_ATTRS}{NAMESPACES}>{WS}{PROC_INST}{WS}{CHANNELS}{WS}</rss>')
ctx.literal('VERSION', b'2.0')
ctx.literal('VERSION', b'0.92')
ctx.literal('VERSION', b'1.0')
ctx.regex('VERSION', '[0-9]\\.[0-9]{1,2}')
ctx.literal('VERSION', b'9.9')
ctx.literal('ROOT_ATTRS', b'')
ctx.rule('ROOT_ATTRS', b' foo="{TEXT}"')
ctx.rule('ROOT_ATTRS', b' bar="{TEXT}" baz="{TEXT}"')
ctx.literal('NAMESPACES', b'')
ctx.literal('NAMESPACES', b' xmlns:content="http://purl.org/rss/1.0/modules/content/"')
ctx.literal('NAMESPACES', b' xmlns:dc="http://purl.org/dc/elements/1.1/"')
ctx.literal('NAMESPACES', b' xmlns:ext="http://example.com/ext"')
ctx.literal('NAMESPACES', b' xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"')
ctx.literal('PROC_INST', b'')
ctx.rule('PROC_INST', b'<?target {TEXT}?>')
ctx.rule('CHANNELS', b'{CHANNEL}{WS}{CHANNELS}')
ctx.literal('CHANNELS', b'')
ctx.rule('CHANNEL', b'<channel{CHAN_ATTR}>{WS}{COMMENTS}{WS}{CHANNEL_VARIANT}{WS}</channel>')
ctx.literal('CHAN_ATTR', b'')
ctx.rule('CHAN_ATTR', b' unknown="{TEXT}"')
ctx.literal('COMMENTS', b'')
ctx.rule('COMMENTS', b'<!--{COMMENT_TXT}-->{COMMENTS}')
ctx.regex('COMMENT_TXT', '[A-Za-z0-9 ._-]{0,60}')
ctx.rule('CHANNEL_VARIANT', b'<title>{TEXT}</title>{WS}<link>{URL}</link>{WS}<description>{DESC}</description>{WS}{CHANNEL_OPTS}{WS}{ITEMS}')
ctx.rule('CHANNEL_VARIANT', b'<link>{URL}</link>{WS}<title>{TEXT}</title>{WS}<description>{DESC}</description>{WS}{ITEMS}')
ctx.rule('CHANNEL_VARIANT', b'<title>{TEXT}</title>{WS}<link>{URL}</link>{WS}{ITEMS}')
ctx.literal('CHANNEL_OPTS', b'')
ctx.rule('CHANNEL_OPTS', b'{CHANNEL_OPT}{WS}{CHANNEL_OPTS}')
ctx.rule('CHANNEL_OPT', b'<language>{LANG}</language>')
ctx.rule('CHANNEL_OPT', b'<ttl>{TTL}</ttl>')
ctx.rule('CHANNEL_OPT', b'<category domain="{HOST}">{TEXT}</category>')
ctx.rule('CHANNEL_OPT', b'<image><url>{URL}</url><title>{TEXT}</title><link>{URL}</link></image>')
ctx.rule('CHANNEL_OPT', b'<dc:creator>{TEXT}</dc:creator>')
ctx.rule('CHANNEL_OPT', b'<ext:meta key="{TEXT}">{DESC}</ext:meta>')
ctx.literal('ITEMS', b'')
ctx.rule('ITEMS', b'{ITEM}{WS}{ITEMS}')
ctx.rule('ITEM', b'<item{ITEM_ATTR}>{WS}{ITEM_CORE}{WS}{ITEM_OPTS}{WS}</item>')
ctx.literal('ITEM_ATTR', b'')
ctx.rule('ITEM_ATTR', b' fuzz="{TEXT}"')
ctx.rule('ITEM_CORE', b'<title>{TEXT}</title>{WS}<link>{URL}</link>')
ctx.rule('ITEM_CORE', b'<link>{URL}</link>{WS}<title>{TEXT}</title>')
ctx.rule('ITEM_CORE', b'<title>{TEXT}</title>')
ctx.literal('ITEM_OPTS', b'')
ctx.rule('ITEM_OPTS', b'{ITEM_OPT}{WS}{ITEM_OPTS}')
ctx.rule('ITEM_OPT', b'<description>{DESC}</description>')
ctx.rule('ITEM_OPT', b'<author>{EMAIL}</author>')
ctx.rule('ITEM_OPT', b'<guid isPermaLink="{BOOL}">{GUID}</guid>')
ctx.rule('ITEM_OPT', b'<pubDate>{PUBDATE}</pubDate>')
ctx.rule('ITEM_OPT', b'<enclosure url="{URL}" length="{LENGTH}" type="{MIME}"/>')
ctx.rule('ITEM_OPT', b'<content:encoded><![CDATA[{CDATA_BIG}]]></content:encoded>')
ctx.rule('ITEM_OPT', b'&xxe;')
ctx.rule('ITEM_OPT', b'{EXT_ELEMENT}')
ctx.rule('EXT_ELEMENT', b'<ext:{EXTNAME}>{DESC}</ext:{EXTNAME}>')
ctx.literal('EXTNAME', b'blob')
ctx.literal('EXTNAME', b'debug')
ctx.literal('EXTNAME', b'payload')
ctx.literal('WS', b'')
ctx.regex('WS', '[ \\t\\n\\r]{1,5}')
ctx.regex('TEXT', '[A-Za-z0-9][A-Za-z0-9 .&;_-]{0,39}')
ctx.rule('DESC', b'{TEXT}')
ctx.rule('DESC', b'<![CDATA[{CDATA_BODY}]]>')
ctx.rule('DESC', b'{BASE64}')
ctx.regex('CDATA_BODY', '[ -~\\t\\n]{1,400}')
ctx.bytes('RANDOM_BYTES', 8)
ctx.rule('CDATA_BIG', b'{CDATA_BODY}{RANDOM_BYTES}{CDATA_BODY}')
ctx.regex('BASE64', '[A-Za-z0-9+/]{20,80}={0,2}')
ctx.rule('URL', b'http://{HOST}/{PATH}')
ctx.rule('URL', b'https://{HOST}/{PATH}')
ctx.rule('URL', b'ftp://{HOST}/{PATH}')
ctx.regex('HOST', '([a-z]{3,12}\\.[a-z]{2,6}|[0-9]{1,3}(\\.[0-9]{1,3}){3})')
ctx.regex('PATH', '[A-Za-z0-9/_\\-.]{0,40}')
ctx.regex('LANG', '[a-z]{2}(-[A-Za-z]{2})?')
ctx.regex('TTL', '[1-9][0-9]{0,2}')
ctx.literal('BOOL', b'true')
ctx.literal('BOOL', b'false')
ctx.regex('GUID', '[A-Fa-f0-9]{8,32}')
ctx.regex('PUBDATE', '[A-Za-z0-9, :+\\-]{15,45}')
ctx.regex('EMAIL', '[A-Za-z]{1,10}@[A-Za-z]{3,10}\\.[A-Za-z]{2,6}')
ctx.regex('LENGTH', '[1-9][0-9]{0,9}')
ctx.literal('MIME', b'audio/mpeg')
ctx.literal('MIME', b'image/png')
ctx.literal('MIME', b'video/mp4')
ctx.literal('MIME', b'application/octet-stream')
