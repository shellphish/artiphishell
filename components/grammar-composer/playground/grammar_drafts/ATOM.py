######################################################################
# Helper Functions
######################################################################

def artiphishell_base64_encode(data: bytes) -> bytes:
    import base64
    return base64.b64encode(data)

######################################################################
# Grammar Rules
######################################################################

ctx.rule('START', b'{BOM}{XML_DECL}{OPTIONAL_DTD}{PRE_DOC}{FEED}')
ctx.literal('BOM', b'')
ctx.literal('BOM', b'\xef\xbb\xbf')
ctx.literal('XML_DECL', b'<?xml version="1.0" encoding="UTF-8"?>')
ctx.literal('XML_DECL', b'<?xml version="1.1" encoding="UTF-8" standalone="yes"?>')
ctx.literal('XML_DECL', b'<?xml version="1.0" encoding="ISO-8859-1"?>')
ctx.literal('OPTIONAL_DTD', b'')
ctx.literal('OPTIONAL_DTD', b'<!DOCTYPE feed [<!ENTITY xxe SYSTEM "file:///etc/passwd">]>')
ctx.literal('OPTIONAL_DTD', b'<!DOCTYPE feed [<!ENTITY a "ha!"><!ENTITY b "&a;&a;"><!ENTITY c "&b;&b;">]>')
ctx.literal('PRE_DOC', b'')
ctx.rule('PRE_DOC', b'{COMMENT}{PRE_DOC}')
ctx.rule('PRE_DOC', b'{PI}{PRE_DOC}')
ctx.regex('COMMENT_TXT', '[A-Za-z0-9_ .\\-]{0,120}')
ctx.rule('COMMENT', b'<!--{COMMENT_TXT}-->')
ctx.regex('PI_TARGET', '[A-Za-z]{1,10}')
ctx.regex('PI_DATA', '[A-Za-z0-9_ .\\-]{0,60}')
ctx.rule('PI', b'<?{PI_TARGET} {PI_DATA}?>')
ctx.rule('FEED', b'<feed xmlns="http://www.w3.org/2005/Atom"{ATTRIBUTES}>{FEED_DECOR}{FEED_MANDATORY}{FEED_OPTIONAL}{ENTRIES}</feed>')
ctx.literal('ATTRIBUTES', b'')
ctx.rule('ATTRIBUTES', b' {ATTRIBUTE}{ATTRIBUTES}')
ctx.rule('ATTRIBUTE', b'{EXTRA_NS}')
ctx.rule('ATTRIBUTE', b'{XML_LANG}')
ctx.rule('ATTRIBUTE', b'{XML_BASE}')
ctx.rule('ATTRIBUTE', b'{UNKNOWN_ATTR}')
ctx.rule('ATTRIBUTE', b'{DUPLICATE_HREF}')
ctx.regex('NS_PREFIX', '[a-z]{1,8}')
ctx.regex('URL_NS', 'http://[A-Za-z0-9./_]{5,30}')
ctx.rule('EXTRA_NS', b'xmlns:{NS_PREFIX}="{URL_NS}"')
ctx.literal('EXTRA_NS', b'xmlns:media="http://search.yahoo.com/mrss/"')
ctx.literal('EXTRA_NS', b'xmlns:georss="http://www.georss.org/georss"')
ctx.literal('EXTRA_NS', b'xmlns:activity="http://activitystrea.ms/spec/1.0/"')
ctx.regex('LANG_CODE', '[a-z]{2}-[A-Z]{2}')
ctx.rule('XML_LANG', b'xml:lang="{LANG_CODE}"')
ctx.rule('XML_BASE', b'xml:base="{URL}"')
ctx.regex('UNAME', '[A-Za-z]{1,10}')
ctx.regex('UVAL', '[A-Za-z0-9_]{0,20}')
ctx.rule('UNKNOWN_ATTR', b'{UNAME}="{UVAL}"')
ctx.rule('DUPLICATE_HREF', b'href="{URL}" href="{URL}"')
ctx.literal('FEED_DECOR', b'')
ctx.rule('FEED_DECOR', b'{COMMENT}{FEED_DECOR}')
ctx.rule('FEED_DECOR', b'{PI}{FEED_DECOR}')
ctx.literal('ENTRY_DECOR', b'')
ctx.rule('ENTRY_DECOR', b'{COMMENT}{ENTRY_DECOR}')
ctx.rule('ENTRY_DECOR', b'{PI}{ENTRY_DECOR}')
ctx.rule('FEED_MANDATORY', b'{ID}{TITLE}{UPDATED}')
ctx.rule('FEED_MANDATORY', b'{ID}{ID}{TITLE}{UPDATED}')
ctx.literal('FEED_OPTIONAL', b'')
ctx.rule('FEED_OPTIONAL', b'{FEED_ELEM}{FEED_OPTIONAL}')
ctx.rule('FEED_ELEM', b'{AUTHOR}')
ctx.rule('FEED_ELEM', b'{CATEGORY}')
ctx.rule('FEED_ELEM', b'{LINK}')
ctx.rule('FEED_ELEM', b'{GENERATOR}')
ctx.rule('FEED_ELEM', b'{RIGHTS}')
ctx.rule('FEED_ELEM', b'{SUBTITLE}')
ctx.rule('FEED_ELEM', b'{ICON}')
ctx.rule('FEED_ELEM', b'{LOGO}')
ctx.rule('FEED_ELEM', b'{UNKNOWN_ELEMENT}')
ctx.rule('FEED_ELEM', b'{COMMENT}')
ctx.rule('FEED_ELEM', b'{MALFORMED}')
ctx.rule('ID', b'<id>urn:uuid:{UUID}</id>')
ctx.regex('UUID', '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}')
ctx.regex('TITLE_ASCII', '[A-Za-z0-9 .]{1,60}')
ctx.regex('HTML_TEXT', '[A-Za-z0-9 <>&"\']{1,120}')
ctx.rule('TITLE', b'<title type="text">{TITLE_ASCII}</title>')
ctx.rule('TITLE', b'<title type="html"><![CDATA[{HTML_TEXT}]]></title>')
ctx.rule('TITLE', b'<title>{TITLE_ASCII}</title>')
ctx.regex('DT_Z', '[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z')
ctx.rule('UPDATED', b'<updated>{DT_Z}</updated>')
ctx.regex('NAME_ASCII', '[A-Za-z ]{1,30}')
ctx.rule('AUTHOR', b'<author><name>{NAME_ASCII}</name>{AUTHOR_MORE}</author>')
ctx.literal('AUTHOR_MORE', b'')
ctx.rule('AUTHOR_MORE', b'{AUTHOR_EMAIL}{AUTHOR_MORE}')
ctx.rule('AUTHOR_MORE', b'{AUTHOR_URI}{AUTHOR_MORE}')
ctx.regex('EMAIL', '[A-Za-z]{1,10}@[A-Za-z]{1,10}\\.[A-Za-z]{2,3}')
ctx.rule('AUTHOR_EMAIL', b'<email>{EMAIL}</email>')
ctx.rule('AUTHOR_URI', b'<uri>{URL}</uri>')
ctx.rule('LINK', b'<link rel="self" href="{URL}" type="application/atom+xml" />')
ctx.rule('LINK', b'<link rel="{LINK_REL}" href="{URL}" type="{MIME_TYPE}" />')
ctx.rule('LINK', b'<link rel="{LINK_REL}" href="{URL}" hreflang="{LANG_CODE}" title="{TITLE_ASCII}" />')
ctx.literal('LINK_REL', b'alternate')
ctx.literal('LINK_REL', b'enclosure')
ctx.literal('LINK_REL', b'related')
ctx.literal('LINK_REL', b'via')
ctx.literal('LINK_REL', b'self')
ctx.literal('LINK_REL', b'hub')
ctx.literal('MIME_TYPE', b'text/html')
ctx.literal('MIME_TYPE', b'image/png')
ctx.literal('MIME_TYPE', b'application/json')
ctx.regex('CATEGORY_TERM', '[A-Za-z0-9_]{1,20}')
ctx.rule('CATEGORY', b'<category term="{CATEGORY_TERM}" label="{TITLE_ASCII}" scheme="{URL}" />')
ctx.rule('GENERATOR', b'<generator uri="{URL}" version="1.0">{TITLE_ASCII}</generator>')
ctx.rule('RIGHTS', b'<rights type="text">{TITLE_ASCII}</rights>')
ctx.rule('SUBTITLE', b'<subtitle>{TITLE_ASCII}</subtitle>')
ctx.rule('ICON', b'<icon>{URL}</icon>')
ctx.rule('LOGO', b'<logo>{URL}</logo>')
ctx.rule('UNKNOWN_ELEMENT', b'<meta>{TITLE_ASCII}</meta>')
ctx.rule('UNKNOWN_ELEMENT', b'<custom>{TITLE_ASCII}</custom>')
ctx.regex('GEO_PT', '[0-9]{1,2}\\.[0-9]{1,6} [0-9]{1,3}\\.[0-9]{1,6}')
ctx.rule('UNKNOWN_ELEMENT', b'<georss:point xmlns:georss="http://www.georss.org/georss">{GEO_PT}</georss:point>')
ctx.rule('MALFORMED', b'<broken{ATTRIBUTES}>no-close')
ctx.rule('MALFORMED', b'<![CDATA[unterminated')
ctx.literal('ENTRIES', b'')
ctx.rule('ENTRIES', b'{ENTRY}{ENTRIES}')
ctx.rule('ENTRY', b'<entry{ATTRIBUTES}>{ENTRY_DECOR}{ENTRY_MAND}{ENTRY_OPT}</entry>')
ctx.rule('ENTRY_MAND', b'{ID}{ID}{TITLE}{UPDATED}')
ctx.rule('ENTRY_MAND', b'{ID}{TITLE}{UPDATED}')
ctx.literal('ENTRY_OPT', b'')
ctx.rule('ENTRY_OPT', b'{ENTRY_ELEM}{ENTRY_OPT}')
ctx.rule('ENTRY_ELEM', b'{AUTHOR}')
ctx.rule('ENTRY_ELEM', b'{SUMMARY}')
ctx.rule('ENTRY_ELEM', b'{CONTENT}')
ctx.rule('ENTRY_ELEM', b'{LINK}')
ctx.rule('ENTRY_ELEM', b'{CATEGORY}')
ctx.rule('ENTRY_ELEM', b'{PUBLISHED}')
ctx.rule('ENTRY_ELEM', b'{COMMENT}')
ctx.rule('ENTRY_ELEM', b'{UNKNOWN_ELEMENT}')
ctx.rule('ENTRY_ELEM', b'{MALFORMED}')
ctx.rule('SUMMARY', b'<summary type="text">{TITLE_ASCII}</summary>')
ctx.rule('PUBLISHED', b'<published>{DT_Z}</published>')
ctx.regex('TEXT_LONG', '[A-Za-z0-9 ]{1,300}')
ctx.rule('CONTENT', b'<content type="text">{TEXT_LONG}</content>')
ctx.regex('HTML_LONG', '[A-Za-z0-9 <>&"\'/]{1,400}')
ctx.rule('CONTENT', b'<content type="html"><![CDATA[{HTML_LONG}{RAW_BYTES}]]></content>')
ctx.rule('CONTENT', b'<content type="xhtml"><div xmlns="http://www.w3.org/1999/xhtml">{HTML_LONG}</div></content>')
ctx.rule('CONTENT', b'<content type="image/png" src="{URL}" />')
ctx.regex('B64', '[A-Za-z0-9+/]{40,200}==')
ctx.rule('CONTENT', b'<content type="application/octet-stream" mode="base64">{B64}</content>')
ctx.bytes('RAW_BYTES', 16)
ctx.regex('URL_HTTP', 'https?://[A-Za-z0-9./_]{4,30}')
ctx.regex('URL_FILE', 'file:///[A-Za-z0-9/._]{3,30}')
ctx.regex('URL_JS', 'javascript:[A-Za-z0-9./;]{0,40}')
ctx.regex('URL_DATA', 'data:[a-z]+/[a-z+]{0,10};base64,[A-Za-z0-9+/]{20,80}==')
ctx.rule('URL', b'{URL_HTTP}')
ctx.rule('URL', b'{URL_FILE}')
ctx.rule('URL', b'{URL_JS}')
ctx.rule('URL', b'{URL_DATA}')
