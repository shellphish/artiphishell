######################################################################
# Helper Functions
######################################################################

def artiphishell_base64_encode(data: bytes) -> bytes:
    import base64
    return base64.b64encode(data)

######################################################################
# Grammar Rules
######################################################################

ctx.rule('START', b'{ELF_FILE}')
ctx.rule('ELF_FILE', b'{ELF32_PATH}')
ctx.rule('ELF_FILE', b'{ELF64_PATH}')
ctx.rule('ELF32_PATH', b'{ELF_HEADER32}{GAP}{OPT_PH_TABLE32}{GAP}{OPT_SH_TABLE32}{GAP}{OPTIONAL_SHSTRTAB_BLOB}{OPTIONAL_INTERP_STR}{GAP}{PAYLOAD}')
ctx.rule('ELF64_PATH', b'{ELF_HEADER64}{GAP}{OPT_PH_TABLE64}{GAP}{OPT_SH_TABLE64}{GAP}{OPTIONAL_SHSTRTAB_BLOB}{OPTIONAL_INTERP_STR}{GAP}{PAYLOAD}')
ctx.rule('E_IDENT', b'\x7fELF{EI_CLASS}{EI_DATA}{EI_VERSION}{EI_OSABI}{EI_ABIVERSION}{EI_PAD}')
ctx.literal('EI_CLASS', b'\x00')
ctx.literal('EI_CLASS', b'\x01')
ctx.literal('EI_CLASS', b'\x02')
ctx.literal('EI_CLASS', b'\x03')
ctx.literal('EI_DATA', b'\x00')
ctx.literal('EI_DATA', b'\x01')
ctx.literal('EI_DATA', b'\x02')
ctx.literal('EI_DATA', b'\x03')
ctx.literal('EI_VERSION', b'\x01')
ctx.bytes('EI_VERSION', 1)
ctx.literal('EI_OSABI', b'\x00')
ctx.literal('EI_OSABI', b'\x03')
ctx.literal('EI_OSABI', b'\x06')
ctx.literal('EI_OSABI', b'\x07')
ctx.literal('EI_OSABI', b'\x08')
ctx.literal('EI_OSABI', b'\t')
ctx.literal('EI_OSABI', b'\x0c')
ctx.literal('EI_OSABI', b'S')
ctx.bytes('EI_ABIVERSION', 1)
ctx.bytes('EI_PAD', 7)
ctx.bytes('RAND16', 2)
ctx.literal('RAND16', b'\x00\x00')
ctx.literal('RAND16', b'\x01\x00')
ctx.literal('RAND16', b'\xff\xff')
ctx.literal('RAND16', b'\xfe\xff')
ctx.bytes('RAND32', 4)
ctx.literal('RAND32', b'\x00\x00\x00\x00')
ctx.literal('RAND32', b'\x01\x00\x00\x00')
ctx.literal('RAND32', b'\xff\xff\xff\xff')
ctx.literal('RAND32', b'\xfe\xff\xff\xff')
ctx.bytes('RAND64', 8)
ctx.literal('RAND64', b'\x00' * 8)
ctx.literal('RAND64', b'\x01' + b'\x00' * 7)
ctx.literal('RAND64', b'\xff' * 8)
ctx.literal('RAND64', b'\xfe' + b'\xff' * 7)
ctx.literal('E_TYPE', b'\x00\x00')
ctx.literal('E_TYPE', b'\x01\x00')
ctx.literal('E_TYPE', b'\x02\x00')
ctx.literal('E_TYPE', b'\x03\x00')
ctx.literal('E_TYPE', b'\x04\x00')
ctx.bytes('E_TYPE', 2)
ctx.literal('E_MACHINE', b'\x00\x00')
ctx.literal('E_MACHINE', b'\x00\x00')
ctx.literal('E_MACHINE', b'\x03\x00')
ctx.literal('E_MACHINE', b'\x00\x03')
ctx.literal('E_MACHINE', b'>\x00')
ctx.literal('E_MACHINE', b'\x00>')
ctx.literal('E_MACHINE', b'\xb7\x00')
ctx.literal('E_MACHINE', b'\x00\xb7')
ctx.literal('E_MACHINE', b'\xf3\x00')
ctx.literal('E_MACHINE', b'\x00\xf3')
ctx.literal('E_MACHINE', b'\x08\x00')
ctx.literal('E_MACHINE', b'\x00\x08')
ctx.literal('E_MACHINE', b'\x15\x00')
ctx.literal('E_MACHINE', b'\x00\x15')
ctx.bytes('E_MACHINE', 2)
ctx.literal('E_VERSION32', b'\x01\x00\x00\x00')
ctx.bytes('E_VERSION32', 4)
ctx.rule('ELF_HEADER64', b'{E_IDENT}{E_TYPE}{E_MACHINE}{E_VERSION32}{RAND64}{RAND64}{RAND64}{RAND32}{EHDR_SZ64}{PHENT_SZ64}{RAND16}{RAND16}{RAND16}')
ctx.literal('EHDR_SZ64', b'@\x00')
ctx.literal('EHDR_SZ64', b'?\x00')
ctx.literal('EHDR_SZ64', b'A\x00')
ctx.literal('EHDR_SZ64', b'\x00\x00')
ctx.literal('EHDR_SZ64', b'\xff\xff')
ctx.literal('PHENT_SZ64', b'8\x00')
ctx.literal('PHENT_SZ64', b'7\x00')
ctx.literal('PHENT_SZ64', b'9\x00')
ctx.literal('PHENT_SZ64', b'\x00\x00')
ctx.literal('PHENT_SZ64', b'\xff\xff')
ctx.rule('ELF_HEADER32', b'{E_IDENT}{E_TYPE}{E_MACHINE}{E_VERSION32}{RAND32}{RAND32}{RAND32}{RAND32}{EHDR_SZ32}{PHENT_SZ32}{RAND16}{RAND16}{RAND16}')
ctx.literal('EHDR_SZ32', b'4\x00')
ctx.literal('EHDR_SZ32', b'3\x00')
ctx.literal('EHDR_SZ32', b'5\x00')
ctx.literal('EHDR_SZ32', b'\x00\x00')
ctx.literal('EHDR_SZ32', b'\xff\xff')
ctx.literal('PHENT_SZ32', b' \x00')
ctx.literal('PHENT_SZ32', b'\x1f\x00')
ctx.literal('PHENT_SZ32', b'!\x00')
ctx.literal('PHENT_SZ32', b'\x00\x00')
ctx.literal('PHENT_SZ32', b'\xff\xff')
ctx.rule('OPT_PH_TABLE32', b'{PHENTRY32_LONG}{OPT_PH_TABLE32}')
ctx.rule('OPT_PH_TABLE32', b'{PHENTRY32_INTERP}{OPT_PH_TABLE32}')
ctx.rule('OPT_PH_TABLE32', b'{PHENTRY32_SHORT}{OPT_PH_TABLE32}')
ctx.literal('OPT_PH_TABLE32', b'')
ctx.rule('OPT_PH_TABLE64', b'{PHENTRY64_LONG}{OPT_PH_TABLE64}')
ctx.rule('OPT_PH_TABLE64', b'{PHENTRY64_INTERP}{OPT_PH_TABLE64}')
ctx.rule('OPT_PH_TABLE64', b'{PHENTRY64_SHORT}{OPT_PH_TABLE64}')
ctx.literal('OPT_PH_TABLE64', b'')
ctx.literal('PH_KIND_NULL', b'\x00\x00\x00\x00')
ctx.literal('PH_KIND_LOAD', b'\x01\x00\x00\x00')
ctx.literal('PH_KIND_DYNAMIC', b'\x02\x00\x00\x00')
ctx.literal('PH_KIND_INTERP', b'\x03\x00\x00\x00')
ctx.literal('PH_KIND_NOTE', b'\x04\x00\x00\x00')
ctx.literal('PH_KIND_TLS', b'\x06\x00\x00\x00')
ctx.bytes('PH_KIND_RAND', 4)
ctx.rule('PH_KIND', b'{PH_KIND_NULL}')
ctx.rule('PH_KIND', b'{PH_KIND_LOAD}')
ctx.rule('PH_KIND', b'{PH_KIND_DYNAMIC}')
ctx.rule('PH_KIND', b'{PH_KIND_NOTE}')
ctx.rule('PH_KIND', b'{PH_KIND_TLS}')
ctx.rule('PH_KIND', b'{PH_KIND_RAND}')
ctx.rule('PHENTRY32_LONG', b'{PH_KIND}{RAND32}{RAND32}{RAND32}{RAND32}{RAND32}{RAND32}{RAND32}')
ctx.bytes('PHENTRY32_SHORT', 12)
ctx.rule('PHENTRY32_INTERP', b'\x03\x00\x00\x00{RAND32}{RAND32}{RAND32}\x00\x00\x00\x00\x00\x00\x00\x00{RAND32}{RAND32}')
ctx.rule('PHENTRY64_LONG', b'{PH_KIND}{RAND32}{RAND64}{RAND64}{RAND64}{RAND64}{RAND64}{RAND64}')
ctx.bytes('PHENTRY64_SHORT', 24)
ctx.rule('PHENTRY64_INTERP', b'\x03\x00\x00\x00{RAND32}{RAND64}{RAND64}{RAND64}\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00{RAND64}')
ctx.rule('OPT_SH_TABLE32', b'{SH32_LONG}{OPT_SH_TABLE32}')
ctx.rule('OPT_SH_TABLE32', b'{SH32_SHSTRTAB}{OPT_SH_TABLE32}')
ctx.rule('OPT_SH_TABLE32', b'{SH32_SHORT}{OPT_SH_TABLE32}')
ctx.literal('OPT_SH_TABLE32', b'')
ctx.rule('OPT_SH_TABLE64', b'{SH64_LONG}{OPT_SH_TABLE64}')
ctx.rule('OPT_SH_TABLE64', b'{SH64_SHSTRTAB}{OPT_SH_TABLE64}')
ctx.rule('OPT_SH_TABLE64', b'{SH64_SHORT}{OPT_SH_TABLE64}')
ctx.literal('OPT_SH_TABLE64', b'')
ctx.literal('SH_TYPE_NULL', b'\x00\x00\x00\x00')
ctx.literal('SH_TYPE_PROGBITS', b'\x01\x00\x00\x00')
ctx.literal('SH_TYPE_SYMTAB', b'\x02\x00\x00\x00')
ctx.literal('SH_TYPE_STRTAB', b'\x03\x00\x00\x00')
ctx.literal('SH_TYPE_NOTE', b'\x07\x00\x00\x00')
ctx.bytes('SH_TYPE_RAND', 4)
ctx.rule('SH_TYPE', b'{SH_TYPE_NULL}')
ctx.rule('SH_TYPE', b'{SH_TYPE_PROGBITS}')
ctx.rule('SH_TYPE', b'{SH_TYPE_SYMTAB}')
ctx.rule('SH_TYPE', b'{SH_TYPE_STRTAB}')
ctx.rule('SH_TYPE', b'{SH_TYPE_NOTE}')
ctx.rule('SH_TYPE', b'{SH_TYPE_RAND}')
ctx.literal('SH_FLAGS_NONE', b'\x00\x00\x00\x00')
ctx.literal('SH_FLAGS_ALLOC', b'\x02\x00\x00\x00')
ctx.literal('SH_FLAGS_AX', b'\x06\x00\x00\x00')
ctx.bytes('SH_FLAGS_RAND', 4)
ctx.rule('SH_FLAGS', b'{SH_FLAGS_NONE}')
ctx.rule('SH_FLAGS', b'{SH_FLAGS_ALLOC}')
ctx.rule('SH_FLAGS', b'{SH_FLAGS_AX}')
ctx.rule('SH_FLAGS', b'{SH_FLAGS_RAND}')
ctx.rule('SH32_LONG', b'{RAND32}{SH_TYPE}{SH_FLAGS}{RAND32}{RAND32}{RAND32}{RAND32}{RAND32}{RAND32}{RAND32}')
ctx.rule('SH64_LONG', b'{RAND32}{SH_TYPE}{SH_FLAGS}{RAND64}{RAND64}{RAND64}{RAND64}{RAND64}{RAND64}{RAND64}')
ctx.rule('SH32_SHSTRTAB', b'\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00{RAND32}{RAND32}{RAND32}\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00')
ctx.rule('SH64_SHSTRTAB', b'\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00{RAND64}{RAND64}{RAND64}\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')
ctx.bytes('SH32_SHORT', 16)
ctx.bytes('SH64_SHORT', 32)
ctx.literal('OPTIONAL_SHSTRTAB_BLOB', b'')
ctx.literal('OPTIONAL_SHSTRTAB_BLOB', b'.shstrtab\x00.text\x00.data\x00.note\x00')
ctx.literal('OPTIONAL_INTERP_STR', b'')
ctx.literal('OPTIONAL_INTERP_STR', b'/lib/ld-linux.so.2\x00')
ctx.literal('OPTIONAL_INTERP_STR', b'/lib64/ld-linux-x86-64.so.2\x00')
ctx.literal('GAP', b'')
ctx.bytes('GAP', 8)
ctx.bytes('GAP', 64)
ctx.bytes('GAP', 256)
ctx.literal('PAYLOAD', b'')
ctx.bytes('PAYLOAD', 32)
ctx.literal('PAYLOAD', b'\x90' * 128)
ctx.literal('PAYLOAD', b'\xcc' * 64)
ctx.bytes('PAYLOAD', 8192)
