######################################################################
# Helper Functions
######################################################################

def artiphishell_base64_encode(data: bytes) -> bytes:
    import base64
    return base64.b64encode(data)

def calculate_chunk_size(CHUNK_CONTENT: bytes) -> bytes:
    size = len(CHUNK_CONTENT)
    return size.to_bytes(4, byteorder='little')

def calculate_riff_size(CHUNKS: bytes) -> bytes:
    size = len(CHUNKS) + 4
    return size.to_bytes(4, byteorder='little')

######################################################################
# Grammar Rules
######################################################################

ctx.rule('START', b'{RIFF_SIG}{RIFF_SIZE}WAVE{CHUNKS}')
ctx.literal('RIFF_SIG', b'RIFF')
ctx.literal('RIFF_SIG', b'riff')
ctx.literal('RIFF_SIG', b'RIFX')
ctx.regex('RIFF_SIG', '[R][A-Z]{3}')
ctx.rule('CHUNKS', b'{REQUIRED_CHUNKS}')
ctx.rule('CHUNKS', b'{REQUIRED_CHUNKS}{OPTIONAL_CHUNKS}')
ctx.rule('CHUNKS', b'{OPTIONAL_CHUNKS}{REQUIRED_CHUNKS}')
ctx.rule('CHUNKS', b'{REQUIRED_CHUNKS}{REQUIRED_CHUNKS}')
ctx.rule('REQUIRED_CHUNKS', b'{FMT_CHUNK}{DATA_CHUNK}')
ctx.rule('REQUIRED_CHUNKS', b'{DATA_CHUNK}{FMT_CHUNK}')
ctx.rule('FMT_CHUNK', b'fmt {FMT_SIZE}{FMT_CONTENT}')
ctx.literal('FMT_SIZE', b'\x10\x00\x00\x00')
ctx.literal('FMT_SIZE', b'\x12\x00\x00\x00')
ctx.literal('FMT_SIZE', b'(\x00\x00\x00')
ctx.bytes('FMT_SIZE', 4)
ctx.rule('FMT_CONTENT', b'{AUDIO_FORMAT}{CHANNELS}{SAMPLE_RATE}{BYTE_RATE}{BLOCK_ALIGN}{BITS_PER_SAMPLE}')
ctx.rule('FMT_CONTENT', b'{AUDIO_FORMAT}{CHANNELS}{SAMPLE_RATE}{BYTE_RATE}{BLOCK_ALIGN}{BITS_PER_SAMPLE}{EXTRA_BYTES}')
ctx.literal('AUDIO_FORMAT', b'\x01\x00')
ctx.literal('AUDIO_FORMAT', b'\x03\x00')
ctx.literal('AUDIO_FORMAT', b'\x06\x00')
ctx.literal('AUDIO_FORMAT', b'\x07\x00')
ctx.literal('AUDIO_FORMAT', b'\xff\xff')
ctx.bytes('AUDIO_FORMAT', 2)
ctx.literal('CHANNELS', b'\x01\x00')
ctx.literal('CHANNELS', b'\x02\x00')
ctx.literal('CHANNELS', b'\x06\x00')
ctx.literal('CHANNELS', b'\x00\x00')
ctx.literal('CHANNELS', b'\xff\xff')
ctx.bytes('CHANNELS', 2)
ctx.literal('SAMPLE_RATE', b'D\xac\x00\x00')
ctx.literal('SAMPLE_RATE', b'\x80\xbb\x00\x00')
ctx.literal('SAMPLE_RATE', b'\x00\x00\x00\x00')
ctx.literal('SAMPLE_RATE', b'\xff\xff\xff\xff')
ctx.bytes('SAMPLE_RATE', 4)
ctx.bytes('BYTE_RATE', 4)
ctx.literal('BLOCK_ALIGN', b'\x02\x00')
ctx.literal('BLOCK_ALIGN', b'\x04\x00')
ctx.literal('BLOCK_ALIGN', b'\x00\x00')
ctx.bytes('BLOCK_ALIGN', 2)
ctx.literal('BITS_PER_SAMPLE', b'\x08\x00')
ctx.literal('BITS_PER_SAMPLE', b'\x10\x00')
ctx.literal('BITS_PER_SAMPLE', b'\x18\x00')
ctx.literal('BITS_PER_SAMPLE', b' \x00')
ctx.literal('BITS_PER_SAMPLE', b'\x00\x00')
ctx.literal('BITS_PER_SAMPLE', b'\x07\x00')
ctx.bytes('BITS_PER_SAMPLE', 2)
ctx.bytes('EXTRA_BYTES', 2)
ctx.bytes('EXTRA_BYTES', 24)
ctx.rule('DATA_CHUNK', b'data{DATA_SIZE}{DATA_CONTENT}')
ctx.rule('DATA_CHUNK', b'data{DATA_SIZE}{DATA_PATTERNS}')
ctx.literal('DATA_PATTERNS', b'\x00\x00\x00\x00\x00\x00\x00\x00')
ctx.literal('DATA_PATTERNS', b'\x00\x80\xff\x7f\x00\x80\xff\x7f')
ctx.literal('DATA_PATTERNS', b'\xff\xff\xff\xff\xff\xff\xff\xff')
ctx.bytes('DATA_PATTERNS', 1024)
ctx.rule('OPTIONAL_CHUNKS', b'')
ctx.rule('OPTIONAL_CHUNKS', b'{LIST_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{FACT_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{CUSTOM_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{OPTIONAL_CHUNKS}{OPTIONAL_CHUNKS}')
ctx.rule('LIST_CHUNK', b'LIST{LIST_SIZE}{LIST_CONTENT}')
ctx.rule('LIST_CONTENT', b'INFO{LIST_INFO}')
ctx.rule('LIST_CONTENT', b'adtl{LIST_INFO}')
ctx.rule('FACT_CHUNK', b'fact\x04\x00\x00\x00{FACT_CONTENT}')
ctx.bytes('FACT_CONTENT', 4)
ctx.rule('CUSTOM_CHUNK', b'{CUSTOM_ID}{CUSTOM_SIZE}{CUSTOM_CONTENT}')
ctx.regex('CUSTOM_ID', '[A-Z]{4}')
ctx.bytes('CUSTOM_CONTENT', 16)
ctx.rule('LIST_INFO', b'{LIST_ITEM}')
ctx.rule('LIST_INFO', b'{LIST_ITEM}{LIST_INFO}')
ctx.rule('LIST_ITEM', b'{INFO_ID}{ITEM_SIZE}{ITEM_TEXT}')
ctx.regex('INFO_ID', 'I[A-Z]{3}')
ctx.regex('ITEM_TEXT', '[A-Za-z0-9 ]{1,32}')
ctx.script('DATA_SIZE', ['DATA_CONTENT'], calculate_chunk_size)
ctx.bytes('DATA_CONTENT', 44100)
ctx.bytes('DATA_CONTENT', 176400)
ctx.bytes('DATA_CONTENT', 8)
ctx.bytes('DATA_CONTENT', 1024)
ctx.script('LIST_SIZE', ['LIST_CONTENT'], calculate_chunk_size)
ctx.script('CUSTOM_SIZE', ['CUSTOM_CONTENT'], calculate_chunk_size)
ctx.script('ITEM_SIZE', ['ITEM_TEXT'], calculate_chunk_size)
ctx.script('RIFF_SIZE', ['CHUNKS'], calculate_riff_size)
