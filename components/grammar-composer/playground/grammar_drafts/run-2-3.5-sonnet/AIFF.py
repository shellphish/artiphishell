######################################################################
# Helper Functions
######################################################################

def artiphishell_base64_encode(data: bytes) -> bytes:
    import base64
    return base64.b64encode(data)

######################################################################
# Grammar Rules
######################################################################

ctx.regex('DIGITS', '[0-9][0-9]?')
ctx.regex('ASCII_TEXT', '[ -~]{1,32}')
ctx.regex('CHUNK_ID', '[A-Z0-9_-]{4}')
ctx.literal('FORM_ID', b'FORM')
ctx.literal('AIFF_TYPE', b'AIFF')
ctx.literal('AIFC_TYPE', b'AIFC')
ctx.literal('COMM_ID', b'COMM')
ctx.literal('SSND_ID', b'SSND')
ctx.literal('NAME_ID', b'NAME')
ctx.literal('AUTH_ID', b'AUTH')
ctx.literal('COPY_ID', b'(c) ')
ctx.bytes('NUM_CHANNELS', 2)
ctx.literal('NUM_CHANNELS', b'\x00\x01')
ctx.literal('NUM_CHANNELS', b'\x00\x02')
ctx.literal('NUM_CHANNELS', b'\x00\x04')
ctx.literal('NUM_CHANNELS', b'\x00\x06')
ctx.literal('NUM_CHANNELS', b'\x00\x08')
ctx.bytes('SAMPLE_SIZE', 2)
ctx.literal('SAMPLE_SIZE', b'\x00\x08')
ctx.literal('SAMPLE_SIZE', b'\x00\x10')
ctx.literal('SAMPLE_SIZE', b'\x00\x18')
ctx.literal('SAMPLE_SIZE', b'\x00 ')
ctx.bytes('NUM_FRAMES', 4)
ctx.literal('NUM_FRAMES', b'\x00\x00\x00@')
ctx.literal('NUM_FRAMES', b'\x00\x00\x01\x00')
ctx.literal('NUM_FRAMES', b'\x00\x00\x02\x00')
ctx.literal('NUM_FRAMES', b'\x00\x00\x04\x00')
ctx.literal('SAMPLE_RATE', b'@\rV"\x00\x00\x00\x00\x00\x00')
ctx.literal('SAMPLE_RATE', b'@\r\xbb\x80\x00\x00\x00\x00\x00\x00')
ctx.literal('SAMPLE_RATE', b'@\x0eV"\x00\x00\x00\x00\x00\x00')
ctx.literal('SAMPLE_RATE', b'@\x0e\xacD\x00\x00\x00\x00\x00\x00')
ctx.literal('SAMPLE_RATE', b'@\x0e\xbb\x80\x00\x00\x00\x00\x00\x00')
ctx.literal('SAMPLE_RATE', b'@\x0f\xbb\x80\x00\x00\x00\x00\x00\x00')
ctx.bytes('SAMPLE_RATE', 10)
ctx.bytes('SOUND_DATA_SMALL', 64)
ctx.bytes('SOUND_DATA_MEDIUM', 256)
ctx.bytes('SOUND_DATA_LARGE', 1024)
ctx.literal('SOUND_DATA_ZERO', b'\x00' * 256)
ctx.literal('SOUND_DATA_SINE', b'\x00\x80\xff\x80' * 64)
ctx.literal('SOUND_DATA_SAW', b'\x00@\x80\xc0' * 64)
ctx.bytes('OFFSET', 4)
ctx.bytes('BLOCK_SIZE', 4)
ctx.literal('OFFSET', b'\x00\x00\x00\x00')
ctx.literal('BLOCK_SIZE', b'\x00\x00\x00\x00')
ctx.rule('COMM_CHUNK', b'{COMM_ID}{SIZE_FIELD}{NUM_CHANNELS}{NUM_FRAMES}{SAMPLE_SIZE}{SAMPLE_RATE}')
ctx.rule('SSND_CHUNK', b'{SSND_ID}{SIZE_FIELD}{OFFSET}{BLOCK_SIZE}{SOUND_DATA_SMALL}')
ctx.rule('SSND_CHUNK', b'{SSND_ID}{SIZE_FIELD}{OFFSET}{BLOCK_SIZE}{SOUND_DATA_MEDIUM}')
ctx.rule('SSND_CHUNK', b'{SSND_ID}{SIZE_FIELD}{OFFSET}{BLOCK_SIZE}{SOUND_DATA_LARGE}')
ctx.rule('SSND_CHUNK', b'{SSND_ID}{SIZE_FIELD}{OFFSET}{BLOCK_SIZE}{SOUND_DATA_ZERO}')
ctx.rule('SSND_CHUNK', b'{SSND_ID}{SIZE_FIELD}{OFFSET}{BLOCK_SIZE}{SOUND_DATA_SINE}')
ctx.rule('SSND_CHUNK', b'{SSND_ID}{SIZE_FIELD}{OFFSET}{BLOCK_SIZE}{SOUND_DATA_SAW}')
ctx.bytes('SIZE_FIELD', 4)
ctx.literal('SIZE_FIELD', b'\x00\x00\x00\x12')
ctx.literal('SIZE_FIELD', b'\x00\x00\x01\x00')
ctx.literal('SIZE_FIELD', b'\x00\x00\x04\x00')
ctx.literal('SIZE_FIELD', b'\x00\x00\x10\x00')
ctx.rule('NAME_CHUNK', b'{NAME_ID}{SIZE_FIELD}{ASCII_TEXT}')
ctx.rule('AUTH_CHUNK', b'{AUTH_ID}{SIZE_FIELD}{ASCII_TEXT}')
ctx.rule('COPY_CHUNK', b'{COPY_ID}{SIZE_FIELD}{ASCII_TEXT}')
ctx.rule('CUSTOM_CHUNK', b'{CHUNK_ID}{SIZE_FIELD}{SOUND_DATA_SMALL}')
ctx.rule('OPTIONAL_CHUNKS', b'{NAME_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{AUTH_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{COPY_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{CUSTOM_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{NAME_CHUNK}{AUTH_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{NAME_CHUNK}{COPY_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{AUTH_CHUNK}{COPY_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{NAME_CHUNK}{AUTH_CHUNK}{COPY_CHUNK}')
ctx.rule('OPTIONAL_CHUNKS', b'{OPTIONAL_CHUNKS}{CUSTOM_CHUNK}')
ctx.literal('OPTIONAL_CHUNKS', b'')
ctx.rule('CHUNK_CONTENT', b'{COMM_CHUNK}{SSND_CHUNK}')
ctx.rule('CHUNK_CONTENT', b'{COMM_CHUNK}{OPTIONAL_CHUNKS}{SSND_CHUNK}')
ctx.rule('CHUNK_CONTENT', b'{OPTIONAL_CHUNKS}{COMM_CHUNK}{SSND_CHUNK}')
ctx.rule('CHUNK_CONTENT', b'{COMM_CHUNK}{SSND_CHUNK}{OPTIONAL_CHUNKS}')
ctx.rule('FORM_CONTAINER', b'{FORM_ID}{SIZE_FIELD}{AIFF_TYPE}{CHUNK_CONTENT}')
ctx.rule('FORM_CONTAINER', b'{FORM_ID}{SIZE_FIELD}{AIFC_TYPE}{CHUNK_CONTENT}')
ctx.rule('START', b'{FORM_CONTAINER}')
