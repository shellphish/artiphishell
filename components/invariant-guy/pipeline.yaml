repos:
  java_targets_built_with_instrumentation:
    cls: CokeyedJqFilterRepository
    args:
      source: targets_built_with_instrumentation
      filter_source: target_metadata
      filter_query: '.language == "java"'
  c_targets_built_with_instrumentation:
    cls: CokeyedJqFilterRepository
    args:
      source: targets_built_with_instrumentation
      filter_source: target_metadata
      filter_query: '.language == "c"'
  kernel_targets_built_with_instrumentation:
    cls: CokeyedJqFilterRepository
    args:
      source: c_targets_built_with_instrumentation
      filter_source: target_metadata
      filter_query: '(.shellphish.known_sources | has("linux_kernel")) and (.shellphish.known_sources.linux_kernel | length > 0)'
  non_kernel_c_targets_built_with_instrumentation:
    cls: CokeyedJqFilterRepository
    args:
      source: c_targets_built_with_instrumentation
      filter_source: target_metadata
      filter_query: '(.shellphish.known_sources | has("linux_kernel") | not) or (.shellphish.known_sources.linux_kernel | length == 0)'

repo_classes:

  ############################# INPUTS ⬇️ ##############################
  # IMPORTANT: WE DEPEND ON CODEQL TO GIVE IT PRIORITY
  full_functions_indices: BlobRepository
  ##################

  targets_with_sources: FilesystemRepository
  crs_tasks_cancelled: MetadataRepository
  cp_image_ready: MetadataRepository
  target_metadata: MetadataRepository

  # [EVERYTHING ELSE STUFF]
  representative_crashing_harness_inputs: BlobRepository # these are c files that crash the kernel
  similar_harness_inputs_dirs: FilesystemRepository # benign inputs to pass to the program
  
  vulnerability_submissions: MetadataRepository
  crashing_commits: MetadataRepository
  poi_reports: MetadataRepository
  function_by_file_indices: BlobRepository

  ############################# OUTPUTS ⬆️ #############################
  invariant_reports: MetadataRepository

  ############################# INTERMEDIATES ⬇️ #############################

  targets_built_with_instrumentation: # this is the built target directory 
    cls: FilesystemRepository
    required: false

tasks:

  invariant_build:
    job_quota:
      max: 0.45
    links:
      # IMPORTANT: we depend on codeql to give it priority
      full_functions_indices:
        repo: full_functions_indices
        kind: InputId
      ####################################################
      project_id:
        repo: cp_image_ready
        kind: InputId
      project_cancel:
        repo: crs_tasks_cancelled
        kind: Cancel
      target_metadata:
        repo: target_metadata
        kind: InputFilepath
      target_with_sources:
        repo: targets_with_sources
        kind: InputFilepath
      target_built_with_instrumentation:
        repo: targets_built_with_instrumentation
        kind: OutputFilepath

    annotations:
      maturity: inProgress
      authors:
        - degrigis
        - ruaronicola

    executable:
      cls: Container
      args:
        image: "aixcc-invariantguy"
        privileged: true
        host_mounts:
          "/var/run/docker.sock": "/var/run/docker.sock"
          "/shared": "/shared"
        template: |

          set -e
          set -x

          #docker login ghcr.io -u player-c3f09220 -p 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

          # invguy-build.py will do the necessary step to build the target in order to be instrumented
          # by btrace/perf.
          mkdir -p /shared/invguy/
          TMPDIR=$(mktemp -d -p /shared/invguy/)
          cp -ra {{ target_with_sources | shquote }} $TMPDIR/cp-folder

          export TARGET_FOLDER=$TMPDIR/cp-folder
          export TARGET_METADATA={{ target_metadata | shquote }}
          export PROJECT_ID={{ project_id | shquote }}
          export CP_FOLDER_BUILT={{ target_built_with_instrumentation | shquote }}

          /src/run-build.sh

          rm -rf $TMPDIR

  invariant_find_c:
    # perf probes are inserted in parallel (but should be fast), everything else is sequential
    job_quota:
     cpu: "2"
     mem: "4Gi"
    links:
      vulnerability_submission:
        repo: vulnerability_submissions
        kind: InputMetadata
      crashing_commit:
        repo: crashing_commits
        kind: InputMetadata
        key: vulnerability_submission.crashing_commit_id
      poi_report:
        repo: poi_reports
        kind: InputFilepath
        key: crashing_commit.crash_report_id
      poi_report_meta:
        repo: poi_reports
        kind: InputMetadata
        key: crashing_commit.crash_report_id
      functions_by_file_index:
        repo: function_by_file_indices
        kind: InputFilepath
        key: poi_report_meta.project_id
      representative_crashing_harness_input:
        repo: representative_crashing_harness_inputs
        kind: InputFilepath
        key: crashing_commit.crash_report_id
      similar_harness_inputs_dir:
        repo: similar_harness_inputs_dirs
        kind: InputFilepath
      target_metadata:
        repo: target_metadata
        kind: InputFilepath
        key: poi_report_meta.project_id
      non_kernel_c_target_built_with_instrumentation:
        repo: non_kernel_c_targets_built_with_instrumentation
        kind: InputFilepath
        key: poi_report_meta.project_id
      invariant_report:
        repo: invariant_reports
        kind: OutputFilepath

      project_id:
        repo: function_by_file_indices
        kind: InputId
        key: poi_report_meta.project_id
      project_cancel:
        repo: crs_tasks_cancelled
        kind: Cancel
        key: poi_report_meta.project_id

    annotations:
      maturity: inProgress
      authors:
        - ruaronicola
        - degrigis

    executable:
      cls: Container
      args:
        image: "aixcc-invariantguy"
        privileged: true
        host_mounts:
          "/var/run/docker.sock": "/var/run/docker.sock"
          "/shared": "/shared"
        template: |

          set -e
          set -x

          # this is our invguy dispatcher, it will figure out which target we are looking at, and do the necessary steps.
          # NOTE: copy the "cached" built target dir so that we don't pollute the dir with the darpa stderr/stdout stuff
          # create tmpdir in /shared
          mkdir -p /shared/invguy/
          TMPDIR=$(mktemp -d -p /shared/invguy/)
          cp -ra {{ non_kernel_c_target_built_with_instrumentation | shquote }} $TMPDIR/cp-folder

          export TARGET_BUILT_WITH_INSTRUMENTATION=$TMPDIR/cp-folder
          export TARGET_METADATA={{ target_metadata | shquote }}
          export SIMILAR_HARNESS_INPUT_DIR={{ similar_harness_inputs_dir | shquote }}
          export REPRESENTATIVE_CRASHING_HARNESS_INPUT={{ representative_crashing_harness_input | shquote }}
          export CRASHING_COMMIT={{ crashing_commit.crashing_commit | shquote }}
          export POI_REPORT={{ poi_report | shquote }}
          export FUNCTION_BY_FILE_INDEX_REPORT={{ functions_by_file_index | shquote }}
          export OUT_REPORT_AT={{ invariant_report | shquote }}

          /src/run-find.sh

          rm -rf $TMPDIR

  invariant_find_java:
    # everything is sequential
    job_quota:
     cpu: "1"
     mem: "5Gi"
    links:
      vulnerability_submission:
        repo: vulnerability_submissions
        kind: InputMetadata
      crashing_commit:
        repo: crashing_commits
        kind: InputMetadata
        key: vulnerability_submission.crashing_commit_id
      poi_report:
        repo: poi_reports
        kind: InputFilepath
        key: crashing_commit.crash_report_id
      poi_report_meta:
        repo: poi_reports
        kind: InputMetadata
        key: crashing_commit.crash_report_id
      functions_by_file_index:
        repo: function_by_file_indices
        kind: InputFilepath
        key: poi_report_meta.project_id
      representative_crashing_harness_input:
        repo: representative_crashing_harness_inputs
        kind: InputFilepath
        key: crashing_commit.crash_report_id
      similar_harness_inputs_dir:
        repo: similar_harness_inputs_dirs
        kind: InputFilepath
      target_metadata:
        repo: target_metadata
        kind: InputFilepath
        key: poi_report_meta.project_id
      java_target_built_with_instrumentation:
        repo: java_targets_built_with_instrumentation
        kind: InputFilepath
        key: poi_report_meta.project_id
      invariant_report:
        repo: invariant_reports
        kind: OutputFilepath

      project_id:
        repo: target_metadata
        kind: InputId
        key: poi_report_meta.project_id
      project_cancel:
        repo: crs_tasks_cancelled
        kind: Cancel
        key: poi_report_meta.project_id

    annotations:
      maturity: inProgress
      authors:
        - ruaronicola
        - degrigis

    executable:
      cls: Container
      args:
        image: "aixcc-invariantguy"
        privileged: true
        host_mounts:
          "/var/run/docker.sock": "/var/run/docker.sock"
          "/shared": "/shared"
        template: |

          set -e
          set -x

          # this is our invguy dispatcher, it will figure out which target we are looking at, and do the necessary steps.
          # NOTE: copy the "cached" built target dir so that we don't pollute the dir with the darpa stderr/stdout stuff
          # create tmpdir in /shared
          mkdir -p /shared/invguy/
          TMPDIR=$(mktemp -d -p /shared/invguy/)
          cp -ra {{ java_target_built_with_instrumentation | shquote }} $TMPDIR/cp-folder

          export TARGET_BUILT_WITH_INSTRUMENTATION=$TMPDIR/cp-folder
          export TARGET_METADATA={{ target_metadata | shquote }}
          export SIMILAR_HARNESS_INPUT_DIR={{ similar_harness_inputs_dir | shquote }}
          export REPRESENTATIVE_CRASHING_HARNESS_INPUT={{ representative_crashing_harness_input | shquote }}
          export CRASHING_COMMIT={{ crashing_commit.crashing_commit | shquote }}
          export POI_REPORT={{ poi_report | shquote }}
          export FUNCTION_BY_FILE_INDEX_REPORT={{ functions_by_file_index | shquote }}
          export OUT_REPORT_AT={{ invariant_report | shquote }}

          /src/run-find.sh

          rm -rf $TMPDIR

  invariant_find_kernel:
    job_quota:
     cpu: "8"
     mem: "16Gi"
    links:
      vulnerability_submission:
        repo: vulnerability_submissions
        kind: InputMetadata
      crashing_commit:
        repo: crashing_commits
        kind: InputMetadata
        key: vulnerability_submission.crashing_commit_id
      poi_report:
        repo: poi_reports
        kind: InputFilepath
        key: crashing_commit.crash_report_id
      poi_report_meta:
        repo: poi_reports
        kind: InputMetadata
        key: crashing_commit.crash_report_id
      functions_by_file_index:
        repo: function_by_file_indices
        kind: InputFilepath
        key: poi_report_meta.project_id
      representative_crashing_harness_input:
        repo: representative_crashing_harness_inputs
        kind: InputFilepath
        key: crashing_commit.crash_report_id
      similar_harness_inputs_dir:
        repo: similar_harness_inputs_dirs
        kind: InputFilepath
      target_metadata:
        repo: target_metadata
        kind: InputFilepath
        key: poi_report_meta.project_id
      kernel_target_built_with_instrumentation:
        repo: kernel_targets_built_with_instrumentation
        kind: InputFilepath
        key: poi_report_meta.project_id
      invariant_report:
        repo: invariant_reports
        kind: OutputFilepath

      project_id:
        repo: target_metadata
        kind: InputId
        key: poi_report_meta.project_id
      project_cancel:
        repo: crs_tasks_cancelled
        kind: Cancel
        key: poi_report_meta.project_id

    annotations:
      maturity: inProgress
      authors:
        - ruaronicola
        - degrigis

    executable:
      cls: Container
      args:
        image: "aixcc-invariantguy"
        privileged: true
        host_mounts:
          "/var/run/docker.sock": "/var/run/docker.sock"
          "/shared": "/shared"
        template: |

          set -e
          set -x

          # this is our invguy dispatcher, it will figure out which target we are looking at, and do the necessary steps.
          # NOTE: copy the "cached" built target dir so that we don't pollute the dir with the darpa stderr/stdout stuff
          # create tmpdir in /shared
          mkdir -p /shared/invguy/
          TMPDIR=$(mktemp -d -p /shared/invguy/)
          cp -ra {{ kernel_target_built_with_instrumentation | shquote }} $TMPDIR/cp-folder

          export TARGET_BUILT_WITH_INSTRUMENTATION=$TMPDIR/cp-folder
          export TARGET_METADATA={{ target_metadata | shquote }}
          export SIMILAR_HARNESS_INPUT_DIR={{ similar_harness_inputs_dir | shquote }}
          export REPRESENTATIVE_CRASHING_HARNESS_INPUT={{ representative_crashing_harness_input | shquote }}
          export CRASHING_COMMIT={{ crashing_commit.crashing_commit | shquote }}
          export POI_REPORT={{ poi_report | shquote }}
          export FUNCTION_BY_FILE_INDEX_REPORT={{ functions_by_file_index | shquote }}
          export OUT_REPORT_AT={{ invariant_report | shquote }}

          /src/run-find.sh

          rm -rf $TMPDIR
