import agentlib
import argparse
import yaml
import logging
import os 

from scanguy.config import Config


from crs_telemetry.utils import (
    init_otel,
    get_otel_tracer,
    init_llm_otel,
    status_ok,
)


logger = logging.getLogger("scanguy")
logger.setLevel(logging.INFO)
otel_tracer = get_otel_tracer()



def main():
    argparser = argparse.ArgumentParser(description="ScanGuy")
    
    ####### BUDGET #############
    agentlib.enable_event_dumping("/tmp/stats/")
    agentlib.set_global_budget_limit(
        price_in_dollars=Config.scanguy_budget_limit,
        exit_on_over_budget=True,
    )
    ############################
    
    ####### PROJECT INFO #######
    argparser.add_argument("--project_id", required=True)
    # The source of the project pre-built
    argparser.add_argument("--project_source", required=False, default=None)
    # The metadata of the target (we need to know the language, name)
    argparser.add_argument("--target_metadata", required=False, default=None)
    ############################

    ####### FUNCTION RESOLVER #######
    # The report of the functions by file index
    # The function index as generated by clang-indexer/antlr-indexer
    argparser.add_argument("--function_index", required=False, default=None)
    # The directory where the functions jsons are stored
    argparser.add_argument("--target_functions_jsons_dir", required=False, default=None)
    ###################################


    ####### HARNESS INFO #######
    # Aggregated harness info file
    argparser.add_argument("--aggregated_harness_info_file", required=False, default=None)
    #############################

    ####### CODEQL #######
    # The path to the CodeQL database if we are running locally
    argparser.add_argument('--codeql_db_path', required=False, default=None)
    ######################

    ####### OUTPUT   #######
    argparser.add_argument("--output_dir", required=True,
                        help="The output directory where the results will be stored.")

    args = argparser.parse_args()
    
    local_run = os.getenv("LOCAL_RUN")
    if local_run == "True":
        Config.is_local_run = True
    elif local_run == "False":
        Config.is_local_run = False
    else:
        logger.critical(f"[CRITICAL] LOCAL_RUN is set to {local_run}. Please fix it to either True or False.")
        assert False

    new_args = {
        'local_run': local_run,
        'project_id': args.project_id,
        'target_metadata': args.target_metadata,
        'target_functions_jsons_dir': args.target_functions_jsons_dir,
        'aggregated_harness_info_file': args.aggregated_harness_info_file,
        'function_index': args.function_index,
        'codeql_db_path': args.codeql_db_path,
        'output_dir': args.output_dir,
    }

    logger.info(args)
    from scanguy.main import main as main_scan
    main_scan(**new_args)

if __name__ == "__main__":
    with otel_tracer.start_as_current_span("scanguy.main") as span:
        main()
        span.set_status(status_ok())
