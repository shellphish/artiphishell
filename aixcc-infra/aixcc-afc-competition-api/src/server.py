# 99e6bb03e45b2717208d1467162f521f1993afa1
# AUTOGENERATED BY afc-api-schema

from uuid import UUID
import traceback
from flask import Flask, request, jsonify
from shellphish_crs_utils.models.aixcc_api import (
    Error,
    PatchSubmission,
    SarifAssessmentSubmission,
    POVSubmission,
    BundleSubmission,
    SARIFSubmission,
    FreeformSubmission,
    PingResponse,
)
from typing import Tuple
from pydantic import ValidationError
from .server_impl import CompetitionServerImpl

app = Flask(__name__)


def error_response(
    message: str, status_code: int = 400, fields: dict = None
) -> Tuple[dict, int]:
    """Helper to create error responses"""
    error = Error(message=message, fields=fields)
    return jsonify(error.model_dump()), status_code


@app.route("/v1/task/<task_id>/patch/", methods=["POST"])
def submit_patch(task_id: str):
    """Submit a patch for testing

    Args:
        task_id (UUID): Task ID

    Returns:
        200: PatchSubmissionResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        submission = PatchSubmission.model_validate(request.json)
        response = CompetitionServerImpl.submit_patch(task_uuid, submission)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/patch/<patch_id>/", methods=["GET"])
def get_patch_status(task_id: str, patch_id: str):
    """Yield the status of patch testing

    Args:
        task_id (UUID): Task ID
        patch_id (UUID): Patch ID

    Returns:
        200: PatchSubmissionResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task/patch not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        patch_uuid = UUID(patch_id)
        response = CompetitionServerImpl.get_patch_status(task_uuid, patch_uuid)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route(
    "/v1/task/<task_id>/broadcast-sarif-assessment/<broadcast_sarif_id>/",
    methods=["POST"],
)
def submit_sarif_assessment(task_id: str, broadcast_sarif_id: str):
    """Submit a SARIF assessment

    Args:
        task_id (UUID): Task ID
        broadcast_sarif_id (UUID): Broadcast SARIF ID

    Returns:
        200: SarifAssessmentResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task/SARIF not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        sarif_uuid = UUID(broadcast_sarif_id)
        submission = SarifAssessmentSubmission.model_validate(request.json)
        response = CompetitionServerImpl.submit_sarif_assessment(
            task_uuid, sarif_uuid, submission
        )
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/pov/", methods=["POST"])
def submit_pov(task_id: str):
    """Submit a vulnerability for testing

    Args:
        task_id (UUID): Task ID

    Returns:
        200: POVSubmissionResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        submission = POVSubmission.model_validate(request.json)
        response = CompetitionServerImpl.submit_vulnerability(task_uuid, submission)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/pov/<pov_id>/", methods=["GET"])
def get_pov_status(task_id: str, pov_id: str):
    """Yield the status of vuln testing

    Args:
        task_id (UUID): Task ID
        pov_id (UUID): POV ID

    Returns:
        200: POVSubmissionResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task/POV not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        pov_uuid = UUID(pov_id)
        response = CompetitionServerImpl.get_vulnerability_status(task_uuid, pov_uuid)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/bundle/", methods=["POST"])
def submit_bundle(task_id: str):
    """Submit a bundle

    Args:
        task_id (UUID): Task ID

    Returns:
        200: BundleSubmissionResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        submission = BundleSubmission.model_validate(request.json)
        response = CompetitionServerImpl.submit_bundle(task_uuid, submission)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/bundle/<bundle_id>/", methods=["GET"])
def get_bundle(task_id: str, bundle_id: str):
    """Get a bundle

    Args:
        task_id (UUID): Task ID
        bundle_id (UUID): Bundle ID

    Returns:
        200: BundleSubmissionResponseVerbose on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task/bundle not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        bundle_uuid = UUID(bundle_id)
        response = CompetitionServerImpl.get_bundle(task_uuid, bundle_uuid)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/bundle/<bundle_id>/", methods=["PATCH"])
def update_bundle(task_id: str, bundle_id: str):
    """Update a bundle

    Args:
        task_id (UUID): Task ID
        bundle_id (UUID): Bundle ID

    Returns:
        200: BundleSubmissionResponseVerbose on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task/bundle not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        bundle_uuid = UUID(bundle_id)
        submission = BundleSubmission.model_validate(request.json)
        response = CompetitionServerImpl.update_bundle(
            task_uuid, bundle_uuid, submission
        )
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/bundle/<bundle_id>/", methods=["DELETE"])
def delete_bundle(task_id: str, bundle_id: str):
    """Delete a bundle

    Args:
        task_id (UUID): Task ID
        bundle_id (UUID): Bundle ID

    Returns:
        204: No Content on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task/bundle not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        bundle_uuid = UUID(bundle_id)
        CompetitionServerImpl.delete_bundle(task_uuid, bundle_uuid)
        return "", 204
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/submitted-sarif/", methods=["POST"])
def submit_sarif(task_id: str):
    """Submit a CRS generated SARIF

    Args:
        task_id (UUID): Task ID

    Returns:
        200: SARIFSubmissionResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task not found
        500: Error on server error
    """
    try:
        task_uuid = UUID(task_id)
        submission = SARIFSubmission.model_validate(request.json)
        response = CompetitionServerImpl.submit_sarif(task_uuid, submission)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/task/<task_id>/freeform/", methods=["POST"])
def submit_freeform(task_id: str):
    """Submit a freeform pov

    Args:
        task_id (UUID): Task ID

    Returns:
        200: FreeformResponse on success
        400: Error on validation failure
        401: Error on authentication failure
        404: Error if task not found
        500: Erroron server error
    """
    try:
        task_uuid = UUID(task_id)
        submission = FreeformSubmission.model_validate(request.json)
        response = CompetitionServerImpl.submit_freeform(task_uuid, submission)
        return jsonify(response.model_dump())
    except ValueError:
        traceback.print_exc()
        return error_response("Invalid UUID format")
    except ValidationError:
        traceback.print_exc()
        return error_response("Invalid request payload")
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)


@app.route("/v1/ping/", methods=["GET"])
def ping():
    """Test authentication creds and network connectivity

    Returns:
        200: PingResponse on success
    """
    try:
        response = PingResponse(status="OK")
        return jsonify(response.model_dump())
    except Exception as e:
        traceback.print_exc()
        return error_response(str(e), 500)
