# 99e6bb03e45b2717208d1467162f521f1993afa1
# AUTOGENERATED BY afc-api-schema, but you can change the descriptions if you like

from typing import Optional, List, Dict, Any
from pydantic import Field, AliasChoices
from shellphish_crs_utils.models.base import ShellphishBaseModel
from shellphish_crs_utils.models.constraints import PDT_ID
from uuid import UUID
from enum import Enum


class SourceType(str, Enum):
    """Type of source being provided"""

    SourceTypeRepo = "repo"
    SourceTypeFuzzTooling = "fuzz-tooling"
    SourceTypeDiff = "diff"


class TaskType(str, Enum):
    """Type of task being requested"""

    TaskTypeFull = "full"
    TaskTypeDelta = "delta"


class Assessment(str, Enum):
    """Assessment of a SARIF report"""

    AssessmentCorrect = "correct"
    AssessmentIncorrect = "incorrect"


class Architecture(str, Enum):
    """Target architecture"""

    ArchitectureX8664 = "x86_64"


class SubmissionStatus(str, Enum):
    """Status of a submission"""

    SubmissionStatusAccepted = "accepted"  # Successfully submitted
    SubmissionStatusPassed = "passed"  # Successfully evaluated submission
    SubmissionStatusFailed = "failed"  # Submission failed testing
    SubmissionStatusDeadlineExceeded = "deadline_exceeded"  # Task deadline exceeded. All submissions marked accepted before the deadline will be evaluated.
    SubmissionStatusErrored = "errored"  # Server side error when testing submission
    SubmissionInconclusive = "inconclusive"  # Submission was inconclusive


class SourceDetail(ShellphishBaseModel):
    """Details about a source to analyze"""

    sha256: str = Field(description="Integrity hash of the gzipped tarball")
    type: SourceType = Field(description="Type of the source")
    url: str = Field(description="URL to fetch the source gzipped tarball")


class StatusTasksState(ShellphishBaseModel):
    """State counts for tasks"""

    canceled: int = Field(
        description="Number of tasks that competition infrastructure has cancelled"
    )
    errored: int = Field(
        description="Number of tasks that the CRS encountered an unrecoverable issue for"
    )
    failed: int = Field(
        description="Number of submissions that the competition infrastructure marked failed"
    )
    pending: int = Field(
        description="Number of tasks that the CRS has not started work on"
    )
    processing: int = Field(
        description="Number of tasks that the CRS is currently processing"
    )
    succeeded: int = Field(
        description="Number of submissions that the competition infrastructure marked passed"
    )
    waiting: int = Field(
        description="Number of submissions that the competition infrastructure is currently testing"
    )


class StatusState(ShellphishBaseModel):
    """Overall state information"""

    tasks: StatusTasksState = Field(description="Task state information")


class Status(ShellphishBaseModel):
    """Status of the CRS"""

    details: Optional[Dict[str, str]] = Field(
        description="This is optional arbitrary content that may be logged in error cases, but is mainly for interactive troubleshooting.\n\nKeep in mind this endpoint is unauthenticated. Do not place sensitive details in this object.",
        default=None,
    )
    ready: bool = Field(
        description="Boolean indicating if the CRS is prepared to work on tasks. Do not return true unless you have successfully tested connectivity to the Competition API via /v1/ping/"
    )
    since: int = Field(description="Last time task and submission stats were reset")
    state: StatusState = Field(
        description="State of the currently running tasks and submissions"
    )
    version: str = Field(
        description="Version string for verification and reproducibility\n\n- git commit\n\n- SemVer\n\n- etc"
    )


class TaskDetail(ShellphishBaseModel):
    """Details of a specific task"""

    deadline: int = Field(
        description="UNIX timestamp by which any submissions for this task must be in"
    )
    source: List[SourceDetail] = Field(
        description="List of sources needed to evaluate a task"
    )
    task_id: UUID = Field(
        description="Unique identifier for the task",
        validation_alias=AliasChoices("task.id", "task_id"),
    )
    type: TaskType = Field(description="Type of task")
    focus: str = Field(
        description="Because the challenge task may contain multiple repositories, the folder in the type repo source tarball containing the main project.\nIt is still set when there is only one repository.\n\nThis is the project the CRS is meant to submit vulns, patches, and SARIF assessments against."
    )
    project_name: str = Field(description="OSS Fuzz project name")
    metadata: Dict[str, str] = Field(
        description="String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability"
    )
    harnesses_included: bool = Field(description="Indicates if harnesses are included")


class Task(ShellphishBaseModel):
    """Task message from DARPA"""

    message_id: UUID = Field(description="Unique identifier for the message")
    message_time: int = Field(description="Unix timestamp of message creation")
    tasks: List[TaskDetail] = Field(description="List of tasks to perform")


class SARIFBroadcastDetail(ShellphishBaseModel):
    """Details of a SARIF broadcast"""

    metadata: Dict[str, str] = Field(
        description="String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability"
    )
    sarif: Dict[str, Any] = Field(
        description="SARIF Report compliant with provided schema"
    )
    sarif_id: UUID = Field(description="Unique identifier for the SARIF report")
    task_id: UUID = Field(description="ID of task this SARIF report was generated for")

class SARIFMetadata(ShellphishBaseModel):
    """Metadata for a SARIF report"""

    metadata: Dict[str, str] = Field(
        description="String to string map containing data that should be attached to outputs like log messages and OpenTelemetry trace attributes for traceability"
    )
    sarif_id: UUID = Field(description="Unique identifier for the SARIF report")
    task_id: UUID = Field(description="ID of task this SARIF report was generated for")
    pdt_sarif_id: PDT_ID = Field(description="PDT identifier for the SARIF report")
    pdt_task_id: PDT_ID = Field(description="PDT identifier for the task")
    assessment: Assessment = Field(description="Assessment verdict", default=Assessment.AssessmentCorrect)
    description: Optional[str] = Field(description="Optional plain text reasoning for the assessment\n\n128KiB max size", default="")

class SARIFBroadcast(ShellphishBaseModel):
    """SARIF broadcast message"""

    broadcasts: List[SARIFBroadcastDetail] = Field(
        description="List of SARIF broadcasts"
    )
    message_id: UUID = Field(description="Unique identifier for the message")
    message_time: int = Field(description="Unix timestamp of message creation")


class Error(ShellphishBaseModel):
    """Error response"""

    fields: Optional[Dict[str, str]] = Field(
        description="Field-specific error messages", default=None
    )
    message: str = Field(description="Error message")


class PatchSubmission(ShellphishBaseModel):
    """Patch submission for a vulnerability"""

    description: Optional[str] = Field(
        description="Optional plain text reasoning for the assessment\n\n128KiB max size",
        max_length=131072,
        default=None,
    )
    patch: str = Field(
        description="Base64 encoded patch in unified diff format\n\n100KiB max size before Base64 encoding",
        json_schema_extra={"format": "base64"},
    )
    sarif_id: Optional[UUID] = Field(
        description="Optional ID of SARIF Broadcast this patch is associated with",
        default=None,
    )
    vuln_id: Optional[UUID] = Field(
        description="Optional ID of Vuln this patch is associated with", default=None
    )


class PatchSubmissionResponse(ShellphishBaseModel):
    """Response to a patch submission"""

    patch_id: UUID = Field(description="Unique identifier for the patch")
    status: SubmissionStatus = Field(description="Status of the submission")
    functionality_tests_passing: Optional[bool] = Field(
        description="null indicates the tests have not been run", default=None
    )
    project_id: PDT_ID | None = Field(description="PDT identifier for the project", default=None)


class SarifAssessmentSubmission(ShellphishBaseModel):
    """Assessment submission for a SARIF report"""

    assessment: Assessment = Field(description="Assessment verdict")
    description: str = Field(
        description="Plain text reasoning for the assessment\n\n128KiB max size",
        max_length=131072,
    )


class SarifAssessmentResponse(ShellphishBaseModel):
    """Response to a SARIF assessment submission"""

    status: SubmissionStatus = Field(description="Status of the assessment submission")
    project_id: PDT_ID | None = Field(description="PDT identifier for the project", default=None)

class ExtendedSarifAssessmentResponse(SarifAssessmentResponse):
    assessment: Assessment = Field(description="Assessment verdict")


class POVSubmission(ShellphishBaseModel):
    """POV submission"""

    architecture: Architecture = Field(description="Target architecture")
    testcase: str = Field(
        description="Base64 encoded vuln trigger\n\n2MiB max size before Base64 encoding",
        json_schema_extra={"format": "base64"},
    )
    fuzzer_name: str = Field(
        description="Fuzz Tooling fuzzer that exercises this vuln\n\n4KiB max size",
        max_length=4096,
    )
    sanitizer: str = Field(
        description="Fuzz Tooling Sanitizer that exercises this vuln\n\n4KiB max size",
        max_length=4096,
    )
    engine: str = Field(
        description="Fuzz Tooling Engine that exercises this vuln. Allowable engine values are specified in project.yaml.\n\n4KiB max size",
        max_length=4096,
    )


class POVSubmissionResponse(ShellphishBaseModel):
    """Response to a POV submission"""

    status: SubmissionStatus = Field(description="Status of the submission")
    pov_id: UUID = Field(description="Unique identifier for the POV")
    project_id: PDT_ID | None = Field(description="PDT identifier for the project", default=None)


class SARIFSubmission(ShellphishBaseModel):
    """SARIF submission"""

    sarif: Dict[str, Any] = Field(
        description="SARIF object compliant with the provided schema"
    )


class SARIFSubmissionResponse(ShellphishBaseModel):
    """Response to a SARIF submission"""

    status: SubmissionStatus = Field(description="Status of the submission")
    submitted_sarif_id: UUID = Field(
        description="Unique identifier for the submitted SARIF"
    )
    project_id: PDT_ID | None = Field(description="PDT identifier for the project", default=None)


class FreeformSubmission(ShellphishBaseModel):
    """Freeform submission"""

    submission: str = Field(
        description="Base64 encoded arbitrary data\n\n2MiB max size before Base64 encoding"
    )


class FreeformResponse(ShellphishBaseModel):
    """Response to a freeform submission"""

    freeform_id: UUID = Field(
        description="Unique identifier for the freeform submission"
    )
    status: SubmissionStatus = Field(description="Status of the submission")


class BundleSubmission(ShellphishBaseModel):
    """Bundle submission"""

    broadcast_sarif_id: Optional[UUID] = Field(
        description="ID of the broadcast SARIF", default=None
    )
    description: Optional[str] = Field(
        description="optional plaintext description of the components of the bundle, such as would be found in a pull request description or bug report",
        default=None,
    )
    patch_id: Optional[UUID] = Field(description="ID of the patch", default=None)
    pov_id: Optional[UUID] = Field(description="ID of the POV", default=None)
    submitted_sarif_id: Optional[UUID] = Field(
        description="ID of the submitted SARIF", default=None
    )
    freeform_id: Optional[UUID] = Field(
        description="ID of the freeform submission", default=None
    )


class BundleSubmissionResponse(ShellphishBaseModel):
    """Response to a bundle submission"""

    bundle_id: UUID = Field(description="Unique identifier for the bundle")
    status: SubmissionStatus = Field(description="Status of the submission")
    project_id: PDT_ID | None = Field(description="PDT identifier for the project", default=None)


class BundleSubmissionResponseVerbose(ShellphishBaseModel):
    """Verbose response to a bundle submission"""

    broadcast_sarif_id: Optional[UUID] = Field(
        description="ID of the broadcast SARIF", default=None
    )
    bundle_id: UUID = Field(description="Unique identifier for the bundle")
    description: Optional[str] = Field(
        description="Description of the bundle", default=None
    )
    patch_id: Optional[UUID] = Field(description="ID of the patch", default=None)
    pov_id: Optional[UUID] = Field(description="ID of the POV", default=None)
    status: SubmissionStatus = Field(description="Status of the submission")
    submitted_sarif_id: Optional[UUID] = Field(
        description="ID of the submitted SARIF", default=None
    )
    freeform_id: Optional[UUID] = Field(
        description="ID of the freeform submission", default=None
    )
    project_id: PDT_ID | None = Field(description="PDT identifier for the project", default=None)


class PingResponse(ShellphishBaseModel):
    """Response to a ping request"""

    status: str = Field(description="Status of the ping")
