#!/bin/bash -eu
# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################

# Fuzzer runner. Appends .options arguments and seed corpus to users args.
# Usage: $0 <fuzzer_name> <fuzzer_args>

set -x

sysctl -w vm.mmap_rnd_bits=28

export PATH=$OUT:$PATH
cd $OUT

DEBUGGER=${DEBUGGER:-}

FUZZER=$1
shift

DISCOVERY_GUY_CORPUS_DIR=${DISCOVERY_GUY_CORPUS_DIR:-}

# This env var is set by CIFuzz. CIFuzz fills this directory with the corpus
# from ClusterFuzz.
CORPUS_DIR=${CORPUS_DIR:-}
if [ -z "$CORPUS_DIR" ]
then
  CORPUS_DIR="/tmp/${FUZZER}_corpus"
  rm -rf $CORPUS_DIR && mkdir -p $CORPUS_DIR
fi

SANITIZER=${SANITIZER:-}
if [ -z $SANITIZER ]; then
  # If $SANITIZER is not specified (e.g. calling from `reproduce` command), it
  # is not important and can be set to any value.
  SANITIZER="default"
fi

# Setup output/sync dir
if [[ "$RUN_FUZZER_MODE" = interactive ]]; then
  FUZZER_OUT="$OUT/${FUZZER}_${FUZZING_ENGINE}_${SANITIZER}_out"
else
  FUZZER_OUT="/tmp/${FUZZER}_${FUZZING_ENGINE}_${SANITIZER}_out"
fi

# FUZZER_OUT="/shared/fuzzer_sync/${ARTIPHISHELL_PROJECT_NAME}-${ARTIPHISHELL_HARNESS_NAME}-${ARTIPHISHELL_HARNESS_INFO_ID}/"
FUZZER_OUT="$ARTIPHISHELL_FUZZER_SYNC_DIR"

# Setup AFL master/slave name arg
if [ "x${ARTIPHISHELL_FUZZER_INSTANCE_NAME}" = "xmain" ]; then
  AFL_FUZZER_ARGS="${AFL_FUZZER_ARGS:-} -M main"
else
  AFL_FUZZER_ARGS="${AFL_FUZZER_ARGS:-} -S ${ARTIPHISHELL_FUZZER_INSTANCE_NAME}"
fi

function get_dictionary() {
  # first, check SKIP_DICTIONARY
  set -x
  [[ "x${SKIP_DICTIONARY:-}" = "x1" ]] && return
  set +x
  local options_file="$FUZZER.options"
  local dict_file="$FUZZER.dict"
  local dict=""
  if [[ -f "$options_file" ]]; then
    dict=$(sed -n 's/^\s*dict\s*=\s*\(.*\)/\1/p' "$options_file" | tail -1)
  fi
  if [[ -z "$dict" && -f "$dict_file" ]]; then
    dict="$dict_file"
  fi
  [[ -z "$dict" ]] && return
  if [[ "x$FUZZING_ENGINE" = "xshellphish_aflpp" ]]; then
     printf -- "-x %s" "$dict"
  else
     printf "Unexpected FUZZING_ENGINE: $FUZZING_ENGINE, ignoring\n" >&2
  fi
}

rm -rf "$FUZZER_OUT/${ARTIPHISHELL_FUZZER_INSTANCE_NAME}" && mkdir -p "$FUZZER_OUT"

SEED_CORPUS="${FUZZER}_seed_corpus.zip"

# TODO: Investigate why this code block is skipped
# by all default fuzzers in bad_build_check.
# They all set SKIP_SEED_CORPUS=1.
if [ -f $SEED_CORPUS ] && [ -z ${SKIP_SEED_CORPUS:-} ]; then
  echo "Using seed corpus: $SEED_CORPUS"
  unzip -o -d ${CORPUS_DIR}/ $SEED_CORPUS > /dev/null
else
  echo "No seed corpus used."
fi

OPTIONS_FILE="${FUZZER}.options"
CUSTOM_LIBFUZZER_OPTIONS=""

if [ -f $OPTIONS_FILE ]; then
  custom_asan_options=$(parse_options.py $OPTIONS_FILE asan)
  if [ ! -z $custom_asan_options ]; then
    export ASAN_OPTIONS="$ASAN_OPTIONS:$custom_asan_options"
  fi

  custom_msan_options=$(parse_options.py $OPTIONS_FILE msan)
  if [ ! -z $custom_msan_options ]; then
    export MSAN_OPTIONS="$MSAN_OPTIONS:$custom_msan_options"
  fi

  custom_ubsan_options=$(parse_options.py $OPTIONS_FILE ubsan)
  if [ ! -z $custom_ubsan_options ]; then
    export UBSAN_OPTIONS="$UBSAN_OPTIONS:$custom_ubsan_options"
  fi

  CUSTOM_LIBFUZZER_OPTIONS=$(parse_options.py $OPTIONS_FILE libfuzzer)
fi

set -x
if [ "x${ARTIPHISHELL_FUZZER_INSTANCE_NAME}" = "xmain" ]; then
  export RAND_NUM=0
else
  export RAND_MIN=0
  export RAND_MAX=8
  export RAND_NUM=$(( RAND_MIN + ( $(od -An -N2 -tu2 /dev/urandom) % (RAND_MAX - RAND_MIN + 1) ) ))
fi
if [ "x${FORCED_RAND_NUM:-}" != "x" ]; then
  export RAND_NUM=$FORCED_RAND_NUM
fi
set +x

echo "Fuzzing config: $RAND_NUM"
echo "Fuzzing config: $RAND_NUM" >&2

if [ -d "$ARTIPHISHELL_FUZZER_SYNC_DIR/sync-dicts" ]; then
  # choose random dictionary from corpusguy
  export CORPUSGUY_DICT=$(find "$ARTIPHISHELL_FUZZER_SYNC_DIR/sync-dicts" -type f -not -name ".*" | shuf -n1)
else
  export CORPUSGUY_DICT=""
fi

export ARTIPHISHELL_AFL_EXTRA_ARGS="${ARTIPHISHELL_AFL_EXTRA_ARGS:-}"
export ARTIPHISHELL_AFL_TIMEOUT="${ARTIPHISHELL_AFL_TIMEOUT:-}"
export ARTIPHISHELL_NOT_CREATE_INPUT="{ARTIPHISHELL_NOT_CREATE_INPUT:-}"

if [[ "x$FUZZING_ENGINE" = "xshellphish_aijon" ]]; then

  # Set afl++ environment options.
  export ASAN_OPTIONS="$ASAN_OPTIONS:abort_on_error=1:symbolize=0:detect_odr_violation=0:"
  export MSAN_OPTIONS="$MSAN_OPTIONS:exit_code=86:symbolize=0"
  export UBSAN_OPTIONS="$UBSAN_OPTIONS:symbolize=0"
  export AFL_NO_AFFINITY=1
  export AFL_FAST_CAL=1
  export AFL_FORKSRV_INIT_TMOUT=30000
  if [ -n "$DISCOVERY_GUY_CORPUS_DIR" ]; then
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -F $DISCOVERY_GUY_CORPUS_DIR"
  fi

  # RNG Run Options
  # Sparsely introduces cmplog and nautilus mutator into instances
  case $RAND_NUM in
  0)
    # the main instance has to have the longest timeout guaranteed, otherwise it won't be able to even merge inputs that take longer.
    # in that case, running any other instance with a timeout larger than main won't make sense.
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 5000"
    ;;
  1)
    # test -e "$OUT/afl_cmplog.txt" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -c $OUT/$FUZZER"
    test -e "$OUT/shellphish_cmplog/${FUZZER}" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -c $OUT/shellphish_cmplog/${FUZZER}"
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 1000"
    ;;
  2)
    # if $CORPUSGUY_DICT we load it as a dictionary for afl-fuzz.
    test -e "$CORPUSGUY_DICT" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -x $CORPUSGUY_DICT"
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 500"
    ;;
  3)
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 500"
    ;;
  4)
    # if $CORPUSGUY_DICT we load it as a dictionary for afl-fuzz.
    test -e "$CORPUSGUY_DICT" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -x $CORPUSGUY_DICT"
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 1000"
    ;;
  5)
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 1000"
    ;;
  6)
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 2000"
    ;;
  7)
    # If $OUT/afl++.dict we load it as a dictionary for afl-fuzz.
    test -e "$OUT/afl++.dict" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -x $OUT/afl++.dict"
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 1000"
    ;;
  8)
    test -e "$OUT/shellphish_cmplog/${FUZZER}" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -c $OUT/shellphish_cmplog/${FUZZER}"
    test -e "$OUT/afl++.dict" && AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -x $OUT/afl++.dict"
    AFL_FUZZER_ARGS="$AFL_FUZZER_ARGS -t 2000"
    ;;
  esac

  # AFL expects at least 1 file in the input dir.
  if [ "x${ARTIPHISHELL_DO_NOT_CREATE_INPUT:-}" != "x" ]; then
    echo "Not creating input"
  else
    echo input > "${CORPUS_DIR}/input"
  fi

  # construct afl-fuzz cmd
  CMD_LINE="$OUT/afl-fuzz $AFL_FUZZER_ARGS $ARTIPHISHELL_AFL_EXTRA_ARGS -i $CORPUS_DIR -o $FUZZER_OUT $(get_dictionary) $* -- $OUT/$FUZZER"

  # logging
  echo afl++ run cmd:
  echo $CMD_LINE
  echo afl++ run env:
  env|grep AFL_
  echo afl++ build env:
  cat "$OUT/shellphish_aijon_options.txt" || true

else
  exit 1
fi


export LD_LIBRARY_PATH="${LD_LIBRARY_PATH:-}:${OUT}"

# Unset OUT so the fuzz target can't rely on it.
unset OUT

if [ ! -z "$DEBUGGER" ]; then
  CMD_LINE="$DEBUGGER $CMD_LINE"
fi

if [ "x$ARTIPHISHELL_AFL_TIMEOUT" != "x" ]; then
  HARD_TIMEOUT=$((ARTIPHISHELL_AFL_TIMEOUT + 5))
  CMD_LINE="timeout --preserve-status -k $HARD_TIMEOUT -s INT $ARTIPHISHELL_AFL_TIMEOUT $CMD_LINE"
fi

# Fuzz!
bash -c "$CMD_LINE"
