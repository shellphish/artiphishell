# Stage to apply shellphish libfuzzer patch
ARG OSS_FUZZ_BASE_BUILDER_IMAGE=

FROM gcr.io/oss-fuzz-base/base-image AS libfuzzer_builder
ARG arch=x86_64
ENV FUZZINTRO_OUTDIR=$SRC

# Install newer cmake.
# Many projects, as well as recent clang versions, need a newer cmake.
ENV CMAKE_VERSION 3.29.2
RUN apt-get update && apt-get install -y wget sudo && \
    wget -q https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-Linux-$arch.sh && \
    chmod +x cmake-$CMAKE_VERSION-Linux-$arch.sh && \
    ./cmake-$CMAKE_VERSION-Linux-$arch.sh --skip-license --prefix="/usr/local" && \
    rm cmake-$CMAKE_VERSION-Linux-$arch.sh && \
    SUDO_FORCE_REMOVE=yes apt-get autoremove --purge -y wget sudo && \
    rm -rf /usr/local/doc/cmake /usr/local/bin/cmake-gui

RUN apt-get update && apt-get install -y git && \
    git clone https://github.com/ossf/fuzz-introspector.git fuzz-introspector && \
    cd fuzz-introspector && \
    git checkout 332d674f00b8abc4c9ebf10e9c42e5b72b331c63 && \
    git submodule init && \
    git submodule update && \
    apt-get autoremove --purge -y git && \
    rm -rf .git

COPY checkout_build_install_llvm.sh /root/
# Keep all steps in the same script to decrease the number of intermediate
# layes in docker file.
ARG FULL_LLVM_BUILD
ADD shellphish_libfuzzer.diff /root
ADD reload-additional-corpus.patch /root
RUN FULL_LLVM_BUILD=$FULL_LLVM_BUILD /root/checkout_build_install_llvm.sh
RUN rm /root/checkout_build_install_llvm.sh

# Setup the environment.
ENV CC "clang"
ENV CXX "clang++"
ENV CCC "clang++"
ENV CFLAGS -O1 \
  -fno-omit-frame-pointer \
  -gline-tables-only \
  -Wno-error=enum-constexpr-conversion \
  -Wno-error=incompatible-function-pointer-types \
  -Wno-error=int-conversion \
  -Wno-error=deprecated-declarations \
  -Wno-error=implicit-function-declaration \
  -Wno-error=implicit-int \
  -Wno-error=vla-cxx-extension \
  -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION
ENV CXXFLAGS_EXTRA "-stdlib=libc++"
ENV CXXFLAGS "$CFLAGS $CXXFLAGS_EXTRA"



# ================= Second Stage =================


FROM ${OSS_FUZZ_BASE_BUILDER_IMAGE} as base

#RUN apt -y update
RUN apt-get update && apt-get install -y software-properties-common
RUN apt-get update && apt-get install -y curl build-essential python3-dev pigz


# ##### Libfuzzer  #####
COPY --from=libfuzzer_builder /usr/local/bin/llvm-* /usr/local/bin/
COPY --from=libfuzzer_builder /usr/local/bin/clang /usr/local/bin/
COPY --from=libfuzzer_builder /usr/local/bin/clang++ /usr/local/bin/
COPY --from=libfuzzer_builder /usr/local/lib/clang/18/lib/x86_64-unknown-linux-gnu/libclang_rt.fuzzer*.a /usr/local/lib/clang/18/lib/x86_64-unknown-linux-gnu/

