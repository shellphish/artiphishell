
# START rule - entry point for Redis commands
ctx.rule("START", b"{COMMANDS}")
    
# Commands can be empty or contain actual commands with newlines
ctx.rule("COMMANDS", b"{COMMAND}{NEWLINES}")
ctx.rule("COMMANDS", b"{COMMAND}{NEWLINES}{COMMANDS}")
ctx.literal("COMMANDS", b"")
    
# Newlines handling
ctx.rule("NEWLINES", b"{NEWLINE}")
ctx.rule("NEWLINES", b"{NEWLINE}{NEWLINES}")
ctx.literal("NEWLINES", b"")
ctx.literal("NEWLINE", b"\n")
    
# Main command categories
ctx.rule("COMMAND", b"{COMMON_COMMAND}")
ctx.rule("COMMAND", b"{STRING_COMMAND}")
ctx.rule("COMMAND", b"{LIST_COMMAND}")
ctx.rule("COMMAND", b"{SET_COMMAND}")
ctx.rule("COMMAND", b"{SORTED_SET_COMMAND}")
ctx.rule("COMMAND", b"{HASH_COMMAND}")
    
# Common commands
ctx.rule("COMMON_COMMAND", b"{COPY_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{DELETE_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{UNLINK_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{DUMP_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{EXISTS_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{EXPIRE_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{EXPIREAT_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{EXPIRETIME_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{PEXPIRE_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{PEXPIREAT_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{PEXPIRETIME_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{KEYS_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{MOVE_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{OBJECT_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{PERSIST_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{TTL_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{PTTL_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{RANDOMKEY_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{RENAME_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{RENAMENX_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{SCAN_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{TOUCH_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{TYPE_COMMAND}")
ctx.rule("COMMON_COMMAND", b"{WAIT_COMMAND}")
    
# String commands
ctx.rule("STRING_COMMAND", b"{STRING_SET_COMMAND}")
ctx.rule("STRING_COMMAND", b"{GET_COMMAND}")
ctx.rule("STRING_COMMAND", b"{INCREMENT_COMMAND}")
ctx.rule("STRING_COMMAND", b"{INCREMENT_BY_COMMAND}")
ctx.rule("STRING_COMMAND", b"{DECREMENT_COMMAND}")
ctx.rule("STRING_COMMAND", b"{DECREMENT_BY_COMMAND}")
ctx.rule("STRING_COMMAND", b"{APPEND_COMMAND}")
ctx.rule("STRING_COMMAND", b"{GET_DELETE_COMMAND}")
ctx.rule("STRING_COMMAND", b"{GET_EX_COMMAND}")
ctx.rule("STRING_COMMAND", b"{GET_RANGE_COMMAND}")
ctx.rule("STRING_COMMAND", b"{GET_SET_COMMAND}")
ctx.rule("STRING_COMMAND", b"{MGET_COMMAND}")
ctx.rule("STRING_COMMAND", b"{MSET_COMMAND}")
ctx.rule("STRING_COMMAND", b"{MSETNX_COMMAND}")
ctx.rule("STRING_COMMAND", b"{PSETEX_COMMAND}")
ctx.rule("STRING_COMMAND", b"{SETEX_COMMAND}")
ctx.rule("STRING_COMMAND", b"{SETNX_COMMAND}")
ctx.rule("STRING_COMMAND", b"{SETRANGE_COMMAND}")
ctx.rule("STRING_COMMAND", b"{STRLEN_COMMAND}")
ctx.rule("STRING_COMMAND", b"{SUBSTR_COMMAND}")
    
# List commands
ctx.rule("LIST_COMMAND", b"{LMOVE_COMMAND}")
ctx.rule("LIST_COMMAND", b"{BLMOVE_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LMPOP_COMMAND}")
ctx.rule("LIST_COMMAND", b"{BLMPOP_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LPOP_COMMAND}")
ctx.rule("LIST_COMMAND", b"{BLPOP_COMMAND}")
ctx.rule("LIST_COMMAND", b"{RPOP_COMMAND}")
ctx.rule("LIST_COMMAND", b"{BRPOP_COMMAND}")
ctx.rule("LIST_COMMAND", b"{RPOPLPUSH_COMMAND}")
ctx.rule("LIST_COMMAND", b"{BRPOPLPUSH_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LINDEX_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LINSERT_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LLEN_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LPOS_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LPUSH_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LPUSHX_COMMAND}")
ctx.rule("LIST_COMMAND", b"{RPUSH_COMMAND}")
ctx.rule("LIST_COMMAND", b"{RPUSHX_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LRANGE_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LREM_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LSET_COMMAND}")
ctx.rule("LIST_COMMAND", b"{LTRIM_COMMAND}")
    
# Set commands
ctx.rule("SET_COMMAND", b"{SADD_COMMAND}")
ctx.rule("SET_COMMAND", b"{SCARD_COMMAND}")
ctx.rule("SET_COMMAND", b"{SDIFF_COMMAND}")
ctx.rule("SET_COMMAND", b"{SDIFFSTORE_COMMAND}")
ctx.rule("SET_COMMAND", b"{SINTER_COMMAND}")
ctx.rule("SET_COMMAND", b"{SINTERCARD_COMMAND}")
ctx.rule("SET_COMMAND", b"{SINTERSTORE_COMMAND}")
ctx.rule("SET_COMMAND", b"{SISMEMBER_COMMAND}")
ctx.rule("SET_COMMAND", b"{SMISMEMBER_COMMAND}")
ctx.rule("SET_COMMAND", b"{SMEMBERS_COMMAND}")
ctx.rule("SET_COMMAND", b"{SMOVE_COMMAND}")
ctx.rule("SET_COMMAND", b"{SPOP_COMMAND}")
ctx.rule("SET_COMMAND", b"{SRANDMEMBER_COMMAND}")
ctx.rule("SET_COMMAND", b"{SREM_COMMAND}")
ctx.rule("SET_COMMAND", b"{SSCAN_COMMAND}")
ctx.rule("SET_COMMAND", b"{SUNION_COMMAND}")
ctx.rule("SET_COMMAND", b"{SUNIONSTORE_COMMAND}")
    
# Sorted set commands
ctx.rule("SORTED_SET_COMMAND", b"{ZMPOP_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{BZMPOP_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZPOPMAX_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{BZPOPMAX_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZPOPMIN_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{BZPOPMIN_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZADD_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZCARD_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZCOUNT_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZDIFF_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZDIFFSTORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZINCRBY_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZINTER_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZINTERCARD_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZINTERSTORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZLEXCOUNT_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZSCORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZMSCORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZRANDMEMBER_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZRANGE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZRANGEBYLEX_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZRANGEBYSCORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZRANGESTORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZRANK_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREVRANK_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREM_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREMRANGEBYLEX_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREMRANGEBYRANK_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREMRANGEBYSCORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREVRANGE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREVRANGEBYLEX_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZREVRANGEBYSCORE_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZSCAN_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZUNION_COMMAND}")
ctx.rule("SORTED_SET_COMMAND", b"{ZUNIONSTORE_COMMAND}")
    
# Hash commands
ctx.rule("HASH_COMMAND", b"{HDEL_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HEXISTS_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HEXPIRE_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HPEXPIRE_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HEXPIREAT_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HPEXPIREAT_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HEXPIRETIME_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HPEXPIRETIME_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HGET_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HGETALL_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HINCRBY_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HKEYS_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HLEN_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HMGET_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HSET_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HMSET_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HSETNX_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HPERSIST_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HTTL_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HPTTL_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HRANDFIELD_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HSCAN_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HSTRLEN_COMMAND}")
ctx.rule("HASH_COMMAND", b"{HVALS_COMMAND}")
    
# Hash command implementations
ctx.rule("HDEL_COMMAND", b"HDEL {HASH_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("HEXISTS_COMMAND", b"HEXISTS {HASH_KEY_NAME} {IDENTIFIER}")
ctx.rule("HEXPIRE_COMMAND", b"HEXPIRE {HASH_KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT} {FIELDS_CLAUSE}")
ctx.rule("HPEXPIRE_COMMAND", b"HPEXPIRE {HASH_KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT} {FIELDS_CLAUSE}")
ctx.rule("HEXPIREAT_COMMAND", b"HEXPIREAT {HASH_KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT} {FIELDS_CLAUSE}")
ctx.rule("HPEXPIREAT_COMMAND", b"HPEXPIREAT {HASH_KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT} {FIELDS_CLAUSE}")
ctx.rule("HEXPIRETIME_COMMAND", b"HEXPIRETIME {HASH_KEY_NAME} {FIELDS_CLAUSE}")
ctx.rule("HPEXPIRETIME_COMMAND", b"HPEXPIRETIME {HASH_KEY_NAME} {FIELDS_CLAUSE}")
ctx.rule("HGET_COMMAND", b"HGET {HASH_KEY_NAME} {IDENTIFIER}")
ctx.rule("HMGET_COMMAND", b"HMGET {HASH_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("HGETALL_COMMAND", b"HGETALL {HASH_KEY_NAME}")
ctx.rule("HINCRBY_COMMAND", b"HINCRBY {HASH_KEY_NAME} {IDENTIFIER} {DECIMAL}")
ctx.rule("HKEYS_COMMAND", b"HKEYS {HASH_KEY_NAME}")
ctx.rule("HLEN_COMMAND", b"HLEN {HASH_KEY_NAME}")
ctx.rule("HSET_COMMAND", b"HSET {HASH_KEY_NAME} {IDENTIFIER_PAIR_LIST}")
ctx.rule("HMSET_COMMAND", b"HMSET {HASH_KEY_NAME} {IDENTIFIER_PAIR_LIST}")
ctx.rule("HSETNX_COMMAND", b"HSETNX {HASH_KEY_NAME} {IDENTIFIER} {IDENTIFIER}")
ctx.rule("HPERSIST_COMMAND", b"HPERSIST {HASH_KEY_NAME} {FIELDS_CLAUSE}")
ctx.rule("HTTL_COMMAND", b"HTTL {HASH_KEY_NAME} {FIELDS_CLAUSE}")
ctx.rule("HPTTL_COMMAND", b"HPTTL {HASH_KEY_NAME} {FIELDS_CLAUSE}")
ctx.rule("HRANDFIELD_COMMAND", b"HRANDFIELD {HASH_KEY_NAME}{HRANDFIELD_OPTIONS_OPT}")
ctx.rule("HSCAN_COMMAND", b"HSCAN {HASH_KEY_NAME} {DECIMAL}{MATCH_CLAUSE_OPT}{COUNT_CLAUSE_OPT}{NOVALUES_OPT}")
ctx.rule("HSTRLEN_COMMAND", b"HSTRLEN {HASH_KEY_NAME} {IDENTIFIER}")
ctx.rule("HVALS_COMMAND", b"HVALS {HASH_KEY_NAME}")
    
# Fields clause
ctx.rule("FIELDS_CLAUSE", b"FIELDS {POSITIVE_DECIMAL_LITERAL} {IDENTIFIER_LIST}")
    
# Sorted set command implementations
ctx.rule("ZMPOP_COMMAND", b"ZMPOP {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST} {MIN_MAX_CLAUSE}{COUNT_CLAUSE_OPT}")
ctx.rule("BZMPOP_COMMAND", b"BZMPOP {POSITIVE_DECIMAL_LITERAL} {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST} {MIN_MAX_CLAUSE}{COUNT_CLAUSE_OPT}")
ctx.rule("ZPOPMAX_COMMAND", b"ZPOPMAX {SORTED_SET_KEY_NAME}{POSITIVE_DECIMAL_LITERAL_OPT}")
ctx.rule("BZPOPMAX_COMMAND", b"BZPOPMAX {SORTED_SET_KEY_NAME_LIST} {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("ZPOPMIN_COMMAND", b"ZPOPMIN {SORTED_SET_KEY_NAME}{POSITIVE_DECIMAL_LITERAL_OPT}")
ctx.rule("BZPOPMIN_COMMAND", b"BZPOPMIN {SORTED_SET_KEY_NAME_LIST} {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("ZADD_COMMAND", b"ZADD {SORTED_SET_KEY_NAME}{KEY_EXISTENCE_CLAUSE_OPT}{KEY_UPDATE_CLAUSE_OPT}{CH_OPT}{INCR_OPT} {SCORE_MEMBER_CLAUSE_LIST}")
ctx.rule("ZCARD_COMMAND", b"ZCARD {SORTED_SET_KEY_NAME}")
ctx.rule("ZCOUNT_COMMAND", b"ZCOUNT {SORTED_SET_KEY_NAME} {DECIMAL_SCORE} {DECIMAL_SCORE}")
ctx.rule("ZDIFF_COMMAND", b"ZDIFF {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}{WITHSCORES_OPT}")
ctx.rule("ZDIFFSTORE_COMMAND", b"ZDIFFSTORE {IDENTIFIER} {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}")
ctx.rule("ZINCRBY_COMMAND", b"ZINCRBY {SORTED_SET_KEY_NAME} {DECIMAL} {IDENTIFIER}")
ctx.rule("ZINTER_COMMAND", b"ZINTER {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}{WEIGHTS_CLAUSE_OPT}{AGGREGATE_CLAUSE_OPT}{WITHSCORES_OPT}")
ctx.rule("ZINTERCARD_COMMAND", b"ZINTERCARD {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}{LIMIT_CLAUSE_OPT}")
ctx.rule("ZINTERSTORE_COMMAND", b"ZINTERSTORE {IDENTIFIER} {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}{WEIGHTS_CLAUSE_OPT}{AGGREGATE_CLAUSE_OPT}")
ctx.rule("ZLEXCOUNT_COMMAND", b"ZLEXCOUNT {SORTED_SET_KEY_NAME} {LEXICAL_SCORE} {LEXICAL_SCORE}")
ctx.rule("ZSCORE_COMMAND", b"ZSCORE {SORTED_SET_KEY_NAME} {IDENTIFIER}")
ctx.rule("ZMSCORE_COMMAND", b"ZMSCORE {SORTED_SET_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("ZRANDMEMBER_COMMAND", b"ZRANDMEMBER {SORTED_SET_KEY_NAME}{ZRANDMEMBER_OPTIONS_OPT}")
ctx.rule("ZRANGE_COMMAND", b"ZRANGE {SORTED_SET_KEY_NAME} {LEXICAL_SCORE} {LEXICAL_SCORE}{RANGE_TYPE_CLAUSE_OPT}{REV_OPT}{LIMIT_OFFSET_CLAUSE_OPT}{WITHSCORES_OPT}")
ctx.rule("ZRANGEBYLEX_COMMAND", b"ZRANGEBYLEX {SORTED_SET_KEY_NAME} {LEXICAL_SCORE} {LEXICAL_SCORE}{LIMIT_OFFSET_CLAUSE_OPT}")
ctx.rule("ZRANGEBYSCORE_COMMAND", b"ZRANGEBYSCORE {SORTED_SET_KEY_NAME} {DECIMAL_SCORE} {DECIMAL_SCORE}{WITHSCORES_OPT}{LIMIT_OFFSET_CLAUSE_OPT}")
ctx.rule("ZRANGESTORE_COMMAND", b"ZRANGESTORE {IDENTIFIER} {SORTED_SET_KEY_NAME} {LEXICAL_SCORE} {LEXICAL_SCORE}{RANGE_TYPE_CLAUSE_OPT}{REV_OPT}{LIMIT_OFFSET_CLAUSE_OPT}")
ctx.rule("ZRANK_COMMAND", b"ZRANK {SORTED_SET_KEY_NAME} {IDENTIFIER}{WITHSCORE_OPT}")
ctx.rule("ZREVRANK_COMMAND", b"ZREVRANK {SORTED_SET_KEY_NAME} {IDENTIFIER}{WITHSCORE_OPT}")
ctx.rule("ZREM_COMMAND", b"ZREM {SORTED_SET_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("ZREMRANGEBYLEX_COMMAND", b"ZREMRANGEBYLEX {SORTED_SET_KEY_NAME} {LEXICAL_SCORE} {LEXICAL_SCORE}")
ctx.rule("ZREMRANGEBYRANK_COMMAND", b"ZREMRANGEBYRANK {SORTED_SET_KEY_NAME} {DECIMAL} {DECIMAL}")
ctx.rule("ZREMRANGEBYSCORE_COMMAND", b"ZREMRANGEBYSCORE {SORTED_SET_KEY_NAME} {DECIMAL_SCORE} {DECIMAL_SCORE}")
ctx.rule("ZREVRANGE_COMMAND", b"ZREVRANGE {SORTED_SET_KEY_NAME} {DECIMAL} {DECIMAL}{WITHSCORES_OPT}")
ctx.rule("ZREVRANGEBYLEX_COMMAND", b"ZREVRANGEBYLEX {SORTED_SET_KEY_NAME} {LEXICAL_SCORE} {LEXICAL_SCORE}{LIMIT_OFFSET_CLAUSE_OPT}")
ctx.rule("ZREVRANGEBYSCORE_COMMAND", b"ZREVRANGEBYSCORE {SORTED_SET_KEY_NAME} {DECIMAL_SCORE} {DECIMAL_SCORE}{WITHSCORES_OPT}{LIMIT_OFFSET_CLAUSE_OPT}")
ctx.rule("ZSCAN_COMMAND", b"ZSCAN {SORTED_SET_KEY_NAME} {DECIMAL}{MATCH_CLAUSE_OPT}{COUNT_CLAUSE_OPT}")
ctx.rule("ZUNION_COMMAND", b"ZUNION {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}{WEIGHTS_CLAUSE_OPT}{AGGREGATE_CLAUSE_OPT}{WITHSCORES_OPT}")
ctx.rule("ZUNIONSTORE_COMMAND", b"ZUNIONSTORE {IDENTIFIER} {POSITIVE_DECIMAL_LITERAL} {SORTED_SET_KEY_NAME_LIST}{WEIGHTS_CLAUSE_OPT}{AGGREGATE_CLAUSE_OPT}")
    
# Set command implementations
ctx.rule("SADD_COMMAND", b"SADD {SET_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("SCARD_COMMAND", b"SCARD {SET_KEY_NAME}")
ctx.rule("SDIFF_COMMAND", b"SDIFF {SET_KEY_NAME_LIST}")
ctx.rule("SDIFFSTORE_COMMAND", b"SDIFFSTORE {IDENTIFIER} {SET_KEY_NAME_LIST}")
ctx.rule("SINTER_COMMAND", b"SINTER {SET_KEY_NAME_LIST}")
ctx.rule("SINTERCARD_COMMAND", b"SINTERCARD {POSITIVE_DECIMAL_LITERAL} {SET_KEY_NAME_LIST}{LIMIT_CLAUSE_OPT}")
ctx.rule("SINTERSTORE_COMMAND", b"SINTERSTORE {IDENTIFIER} {SET_KEY_NAME_LIST}")
ctx.rule("SISMEMBER_COMMAND", b"SISMEMBER {SET_KEY_NAME} {IDENTIFIER}")
ctx.rule("SMISMEMBER_COMMAND", b"SMISMEMBER {SET_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("SMEMBERS_COMMAND", b"SMEMBERS {SET_KEY_NAME}")
ctx.rule("SMOVE_COMMAND", b"SMOVE {SET_KEY_NAME} {SET_KEY_NAME}")
ctx.rule("SPOP_COMMAND", b"SPOP {SET_KEY_NAME}{POSITIVE_DECIMAL_LITERAL_OPT}")
ctx.rule("SRANDMEMBER_COMMAND", b"SRANDMEMBER {SET_KEY_NAME}{DECIMAL_OPT}")
ctx.rule("SREM_COMMAND", b"SREM {SET_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("SSCAN_COMMAND", b"SSCAN {SET_KEY_NAME} {DECIMAL}{MATCH_CLAUSE_OPT}{COUNT_CLAUSE_OPT}")
ctx.rule("SUNION_COMMAND", b"SUNION {SET_KEY_NAME_LIST}")
ctx.rule("SUNIONSTORE_COMMAND", b"SUNIONSTORE {IDENTIFIER} {SET_KEY_NAME_LIST}")
    
# List command implementations
ctx.rule("LMOVE_COMMAND", b"LMOVE {LIST_KEY_NAME} {LIST_KEY_NAME} {LEFT_OR_RIGHT_CLAUSE} {LEFT_OR_RIGHT_CLAUSE}")
ctx.rule("BLMOVE_COMMAND", b"BLMOVE {LIST_KEY_NAME} {LIST_KEY_NAME} {LEFT_OR_RIGHT_CLAUSE} {LEFT_OR_RIGHT_CLAUSE} {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("LMPOP_COMMAND", b"LMPOP {POSITIVE_DECIMAL_LITERAL} {LIST_KEY_NAME_LIST} {LEFT_OR_RIGHT_CLAUSE}{COUNT_CLAUSE_OPT}")
ctx.rule("BLMPOP_COMMAND", b"BLMPOP {POSITIVE_DECIMAL_LITERAL} {POSITIVE_DECIMAL_LITERAL} {LIST_KEY_NAME_LIST} {LEFT_OR_RIGHT_CLAUSE}{COUNT_CLAUSE_OPT}")
ctx.rule("LPOP_COMMAND", b"LPOP {LIST_KEY_NAME}{POSITIVE_DECIMAL_LITERAL_OPT}")
ctx.rule("BLPOP_COMMAND", b"BLPOP {LIST_KEY_NAME_LIST} {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("RPOP_COMMAND", b"RPOP {LIST_KEY_NAME}{POSITIVE_DECIMAL_LITERAL_OPT}")
ctx.rule("BRPOP_COMMAND", b"BRPOP {LIST_KEY_NAME_LIST} {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("RPOPLPUSH_COMMAND", b"RPOPLPUSH {LIST_KEY_NAME} {LIST_KEY_NAME}")
ctx.rule("BRPOPLPUSH_COMMAND", b"BRPOPLPUSH {LIST_KEY_NAME} {LIST_KEY_NAME} {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("LINDEX_COMMAND", b"LINDEX {LIST_KEY_NAME} {DECIMAL}")
ctx.rule("LINSERT_COMMAND", b"LINSERT {LIST_KEY_NAME} {BEFORE_OR_AFTER_CLAUSE} {IDENTIFIER} {IDENTIFIER}")
ctx.rule("LLEN_COMMAND", b"LLEN {LIST_KEY_NAME}")
ctx.rule("LPOS_COMMAND", b"LPOS {LIST_KEY_NAME} {IDENTIFIER}{RANK_CLAUSE_OPT}{COUNT_CLAUSE_OPT}{MAXLEN_CLAUSE_OPT}")
ctx.rule("LPUSH_COMMAND", b"LPUSH {LIST_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("LPUSHX_COMMAND", b"LPUSHX {LIST_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("RPUSH_COMMAND", b"RPUSH {LIST_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("RPUSHX_COMMAND", b"RPUSHX {LIST_KEY_NAME} {IDENTIFIER_LIST}")
ctx.rule("LRANGE_COMMAND", b"LRANGE {LIST_KEY_NAME} {DECIMAL} {DECIMAL}")
ctx.rule("LREM_COMMAND", b"LREM {LIST_KEY_NAME} {DECIMAL} {IDENTIFIER}")
ctx.rule("LSET_COMMAND", b"LSET {LIST_KEY_NAME} {DECIMAL} {IDENTIFIER}")
ctx.rule("LTRIM_COMMAND", b"LTRIM {LIST_KEY_NAME} {DECIMAL} {DECIMAL}")
    
# String command implementations
ctx.rule("STRING_SET_COMMAND", b"SET {STRING_KEY_NAME} {IDENTIFIER}{KEY_EXISTENCE_CLAUSE_OPT}{GET_OPT}{EXPIRATION_OR_KEEPTTL_OPT}")
ctx.rule("GET_COMMAND", b"GET {STRING_KEY_NAME}")
ctx.rule("INCREMENT_COMMAND", b"INCR {STRING_KEY_NAME}")
ctx.rule("INCREMENT_BY_COMMAND", b"INCRBY {STRING_KEY_NAME} {DECIMAL}")
ctx.rule("DECREMENT_COMMAND", b"DECR {STRING_KEY_NAME}")
ctx.rule("DECREMENT_BY_COMMAND", b"DECRBY {STRING_KEY_NAME} {DECIMAL}")
ctx.rule("APPEND_COMMAND", b"APPEND {STRING_KEY_NAME} {IDENTIFIER}")
ctx.rule("GET_DELETE_COMMAND", b"GETDEL {STRING_KEY_NAME}")
ctx.rule("GET_EX_COMMAND", b"GETEX {STRING_KEY_NAME}{EXPIRATION_OR_PERSIST_OPT}")
ctx.rule("GET_RANGE_COMMAND", b"GETRANGE {STRING_KEY_NAME} {DECIMAL} {DECIMAL}")
ctx.rule("GET_SET_COMMAND", b"GETSET {STRING_KEY_NAME} {IDENTIFIER}")
ctx.rule("MGET_COMMAND", b"MGET {STRING_KEY_NAME_LIST}")
ctx.rule("MSET_COMMAND", b"MSET {STRING_KEY_VALUE_PAIR_LIST}")
ctx.rule("MSETNX_COMMAND", b"MSETNX {STRING_KEY_VALUE_PAIR_LIST}")
ctx.rule("PSETEX_COMMAND", b"PSETEX {STRING_KEY_NAME} {POSITIVE_DECIMAL_LITERAL} {IDENTIFIER}")
ctx.rule("SETEX_COMMAND", b"SETEX {STRING_KEY_NAME} {POSITIVE_DECIMAL_LITERAL} {IDENTIFIER}")
ctx.rule("SETNX_COMMAND", b"SETNX {STRING_KEY_NAME} {IDENTIFIER}")
ctx.rule("SETRANGE_COMMAND", b"SETRANGE {STRING_KEY_NAME} {POSITIVE_DECIMAL_LITERAL} {IDENTIFIER}")
ctx.rule("STRLEN_COMMAND", b"STRLEN {STRING_KEY_NAME}")
ctx.rule("SUBSTR_COMMAND", b"SUBSTR {STRING_KEY_NAME} {DECIMAL} {DECIMAL}")
    
# Common command implementations
ctx.rule("COPY_COMMAND", b"COPY {KEY_NAME} {IDENTIFIER}{DB_CLAUSE_OPT}{REPLACE_OPT}")
ctx.rule("DELETE_COMMAND", b"DEL {KEY_NAME_LIST}")
ctx.rule("UNLINK_COMMAND", b"UNLINK {KEY_NAME_LIST}")
ctx.rule("DUMP_COMMAND", b"DUMP {KEY_NAME}")
ctx.rule("EXISTS_COMMAND", b"EXISTS {KEY_NAME_LIST}")
ctx.rule("EXPIRE_COMMAND", b"EXPIRE {KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT}")
ctx.rule("EXPIREAT_COMMAND", b"EXPIREAT {KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT}")
ctx.rule("PEXPIRE_COMMAND", b"PEXPIRE {KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT}")
ctx.rule("PEXPIREAT_COMMAND", b"PEXPIREAT {KEY_NAME} {DECIMAL}{EXPIRE_OPTIONS_OPT}")
ctx.rule("EXPIRETIME_COMMAND", b"EXPIRETIME {KEY_NAME}")
ctx.rule("PEXPIRETIME_COMMAND", b"PEXPIRETIME {KEY_NAME}")
ctx.rule("KEYS_COMMAND", b"KEYS {KEY_PATTERN}")
ctx.rule("MOVE_COMMAND", b"MOVE {KEY_NAME} {DATABASE_NAME}")
ctx.rule("OBJECT_COMMAND", b"OBJECT {OBJECT_OPTIONS} {KEY_NAME}")
ctx.rule("PERSIST_COMMAND", b"PERSIST {KEY_NAME}")
ctx.rule("TTL_COMMAND", b"TTL {KEY_NAME}")
ctx.rule("PTTL_COMMAND", b"PTTL {KEY_NAME}")
ctx.rule("RANDOMKEY_COMMAND", b"RANDOMKEY")
ctx.rule("RENAME_COMMAND", b"RENAME {KEY_NAME} {IDENTIFIER}")
ctx.rule("RENAMENX_COMMAND", b"RENAMENX {KEY_NAME} {IDENTIFIER}")
ctx.rule("SCAN_COMMAND", b"SCAN {DECIMAL}{MATCH_CLAUSE_OPT}{COUNT_CLAUSE_OPT}{TYPE_CLAUSE_OPT}")
ctx.rule("TOUCH_COMMAND", b"TOUCH {KEY_NAME_LIST}")
ctx.rule("TYPE_COMMAND", b"TYPE {KEY_NAME}")
ctx.rule("WAIT_COMMAND", b"WAIT {POSITIVE_DECIMAL_LITERAL} {POSITIVE_DECIMAL_LITERAL}")
    
# Helper clauses and options
ctx.rule("MIN_MAX_CLAUSE", b"MIN")
ctx.rule("MIN_MAX_CLAUSE", b"MAX")
    
ctx.rule("LEFT_OR_RIGHT_CLAUSE", b"LEFT")
ctx.rule("LEFT_OR_RIGHT_CLAUSE", b"RIGHT")
    
ctx.rule("BEFORE_OR_AFTER_CLAUSE", b"BEFORE")
ctx.rule("BEFORE_OR_AFTER_CLAUSE", b"AFTER")
    
ctx.rule("KEY_EXISTENCE_CLAUSE", b"NX")
ctx.rule("KEY_EXISTENCE_CLAUSE", b"XX")
    
ctx.rule("KEY_UPDATE_CLAUSE", b"GT")
ctx.rule("KEY_UPDATE_CLAUSE", b"LT")
    
ctx.rule("EXPIRE_OPTIONS", b"NX")
ctx.rule("EXPIRE_OPTIONS", b"XX")
ctx.rule("EXPIRE_OPTIONS", b"GT")
ctx.rule("EXPIRE_OPTIONS", b"LT")
    
ctx.rule("OBJECT_OPTIONS", b"ENCODING")
ctx.rule("OBJECT_OPTIONS", b"FREQ")
ctx.rule("OBJECT_OPTIONS", b"IDLETIME")
ctx.rule("OBJECT_OPTIONS", b"REFCOUNT")
    
ctx.rule("EXPIRATION_CLAUSE", b"EX {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("EXPIRATION_CLAUSE", b"PX {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("EXPIRATION_CLAUSE", b"EXAT {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("EXPIRATION_CLAUSE", b"PXAT {POSITIVE_DECIMAL_LITERAL}")
    
ctx.rule("RANGE_TYPE_CLAUSE", b"BYSCORE")
ctx.rule("RANGE_TYPE_CLAUSE", b"BYLEX")
    
ctx.rule("WEIGHTS_CLAUSE", b"WEIGHTS {DECIMAL_LIST}")
    
ctx.rule("AGGREGATE_CLAUSE", b"AGGREGATE MIN")
ctx.rule("AGGREGATE_CLAUSE", b"AGGREGATE MAX")
ctx.rule("AGGREGATE_CLAUSE", b"AGGREGATE SUM")
    
ctx.rule("LIMIT_CLAUSE", b"LIMIT {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("LIMIT_OFFSET_CLAUSE", b"LIMIT {DECIMAL} {DECIMAL}")
    
ctx.rule("MATCH_CLAUSE", b"MATCH {KEY_PATTERN}")
ctx.rule("COUNT_CLAUSE", b"COUNT {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("TYPE_CLAUSE", b"TYPE {IDENTIFIER}")
ctx.rule("RANK_CLAUSE", b"RANK {DECIMAL}")
ctx.rule("MAXLEN_CLAUSE", b"MAXLEN {POSITIVE_DECIMAL_LITERAL}")
ctx.rule("DB_CLAUSE", b"DB {DATABASE_NAME}")
    
ctx.rule("SCORE_MEMBER_CLAUSE", b"{DECIMAL} {IDENTIFIER}")
    
# Optional clauses
ctx.rule("EXPIRE_OPTIONS_OPT", b" {EXPIRE_OPTIONS}")
ctx.literal("EXPIRE_OPTIONS_OPT", b"")
    
ctx.rule("KEY_EXISTENCE_CLAUSE_OPT", b" {KEY_EXISTENCE_CLAUSE}")
ctx.literal("KEY_EXISTENCE_CLAUSE_OPT", b"")
    
ctx.rule("KEY_UPDATE_CLAUSE_OPT", b" {KEY_UPDATE_CLAUSE}")
ctx.literal("KEY_UPDATE_CLAUSE_OPT", b"")
    
ctx.rule("GET_OPT", b" GET")
ctx.literal("GET_OPT", b"")
    
ctx.rule("CH_OPT", b" CH")
ctx.literal("CH_OPT", b"")
    
ctx.rule("INCR_OPT", b" INCR")
ctx.literal("INCR_OPT", b"")
    
ctx.rule("REV_OPT", b" REV")
ctx.literal("REV_OPT", b"")
    
ctx.rule("WITHSCORES_OPT", b" WITHSCORES")
ctx.literal("WITHSCORES_OPT", b"")
    
ctx.rule("WITHSCORE_OPT", b" WITHSCORE")
ctx.literal("WITHSCORE_OPT", b"")
    
ctx.rule("NOVALUES_OPT", b" NOVALUES")
ctx.literal("NOVALUES_OPT", b"")
    
ctx.rule("REPLACE_OPT", b" REPLACE")
ctx.literal("REPLACE_OPT", b"")
    
ctx.rule("POSITIVE_DECIMAL_LITERAL_OPT", b" {POSITIVE_DECIMAL_LITERAL}")
ctx.literal("POSITIVE_DECIMAL_LITERAL_OPT", b"")
    
ctx.rule("DECIMAL_OPT", b" {DECIMAL}")
ctx.literal("DECIMAL_OPT", b"")
    
ctx.rule("MATCH_CLAUSE_OPT", b" {MATCH_CLAUSE}")
ctx.literal("MATCH_CLAUSE_OPT", b"")
    
ctx.rule("COUNT_CLAUSE_OPT", b" {COUNT_CLAUSE}")
ctx.literal("COUNT_CLAUSE_OPT", b"")
    
ctx.rule("TYPE_CLAUSE_OPT", b" {TYPE_CLAUSE}")
ctx.literal("TYPE_CLAUSE_OPT", b"")
    
ctx.rule("LIMIT_CLAUSE_OPT", b" {LIMIT_CLAUSE}")
ctx.literal("LIMIT_CLAUSE_OPT", b"")
    
ctx.rule("LIMIT_OFFSET_CLAUSE_OPT", b" {LIMIT_OFFSET_CLAUSE}")
ctx.literal("LIMIT_OFFSET_CLAUSE_OPT", b"")
    
ctx.rule("RANGE_TYPE_CLAUSE_OPT", b" {RANGE_TYPE_CLAUSE}")
ctx.literal("RANGE_TYPE_CLAUSE_OPT", b"")
    
ctx.rule("WEIGHTS_CLAUSE_OPT", b" {WEIGHTS_CLAUSE}")
ctx.literal("WEIGHTS_CLAUSE_OPT", b"")
    
ctx.rule("AGGREGATE_CLAUSE_OPT", b" {AGGREGATE_CLAUSE}")
ctx.literal("AGGREGATE_CLAUSE_OPT", b"")
    
ctx.rule("RANK_CLAUSE_OPT", b" {RANK_CLAUSE}")
ctx.literal("RANK_CLAUSE_OPT", b"")
    
ctx.rule("MAXLEN_CLAUSE_OPT", b" {MAXLEN_CLAUSE}")
ctx.literal("MAXLEN_CLAUSE_OPT", b"")
    
ctx.rule("DB_CLAUSE_OPT", b" {DB_CLAUSE}")
ctx.literal("DB_CLAUSE_OPT", b"")
    
ctx.rule("EXPIRATION_OR_KEEPTTL_OPT", b" {EXPIRATION_CLAUSE}")
ctx.rule("EXPIRATION_OR_KEEPTTL_OPT", b" KEEPTTL")
ctx.literal("EXPIRATION_OR_KEEPTTL_OPT", b"")
    
ctx.rule("EXPIRATION_OR_PERSIST_OPT", b" {EXPIRATION_CLAUSE}")
ctx.rule("EXPIRATION_OR_PERSIST_OPT", b" PERSIST")
ctx.literal("EXPIRATION_OR_PERSIST_OPT", b"")
    
ctx.rule("HRANDFIELD_OPTIONS_OPT", b" {DECIMAL} WITHVALUES")
ctx.rule("HRANDFIELD_OPTIONS_OPT", b" {DECIMAL}")
ctx.literal("HRANDFIELD_OPTIONS_OPT", b"")
    
ctx.rule("ZRANDMEMBER_OPTIONS_OPT", b" {DECIMAL} WITHSCORES")
ctx.rule("ZRANDMEMBER_OPTIONS_OPT", b" {DECIMAL}")
ctx.literal("ZRANDMEMBER_OPTIONS_OPT", b"")
    
# Lists for multiple items
ctx.rule("IDENTIFIER_LIST", b"{IDENTIFIER}")
ctx.rule("IDENTIFIER_LIST", b"{IDENTIFIER} {IDENTIFIER_LIST}")
    
ctx.rule("IDENTIFIER_PAIR_LIST", b"{IDENTIFIER} {IDENTIFIER}")
ctx.rule("IDENTIFIER_PAIR_LIST", b"{IDENTIFIER} {IDENTIFIER} {IDENTIFIER_PAIR_LIST}")
    
ctx.rule("STRING_KEY_VALUE_PAIR_LIST", b"{STRING_KEY_NAME} {IDENTIFIER}")
ctx.rule("STRING_KEY_VALUE_PAIR_LIST", b"{STRING_KEY_NAME} {IDENTIFIER} {STRING_KEY_VALUE_PAIR_LIST}")
    
ctx.rule("SCORE_MEMBER_CLAUSE_LIST", b"{SCORE_MEMBER_CLAUSE}")
ctx.rule("SCORE_MEMBER_CLAUSE_LIST", b"{SCORE_MEMBER_CLAUSE} {SCORE_MEMBER_CLAUSE_LIST}")
    
ctx.rule("DECIMAL_LIST", b"{DECIMAL}")
ctx.rule("DECIMAL_LIST", b"{DECIMAL} {DECIMAL_LIST}")
    
ctx.rule("KEY_NAME_LIST", b"{KEY_NAME}")
ctx.rule("KEY_NAME_LIST", b"{KEY_NAME} {KEY_NAME_LIST}")
    
ctx.rule("STRING_KEY_NAME_LIST", b"{STRING_KEY_NAME}")
ctx.rule("STRING_KEY_NAME_LIST", b"{STRING_KEY_NAME} {STRING_KEY_NAME_LIST}")
    
ctx.rule("LIST_KEY_NAME_LIST", b"{LIST_KEY_NAME}")
ctx.rule("LIST_KEY_NAME_LIST", b"{LIST_KEY_NAME} {LIST_KEY_NAME_LIST}")
    
ctx.rule("SET_KEY_NAME_LIST", b"{SET_KEY_NAME}")
ctx.rule("SET_KEY_NAME_LIST", b"{SET_KEY_NAME} {SET_KEY_NAME_LIST}")
    
ctx.rule("SORTED_SET_KEY_NAME_LIST", b"{SORTED_SET_KEY_NAME}")
ctx.rule("SORTED_SET_KEY_NAME_LIST", b"{SORTED_SET_KEY_NAME} {SORTED_SET_KEY_NAME_LIST}")
    
# Basic data types
ctx.rule("DECIMAL", b"{POSITIVE_DECIMAL_LITERAL}")
ctx.rule("DECIMAL", b"{DECIMAL_LITERAL}")
    
ctx.rule("DECIMAL_SCORE", b"{POSITIVE_DECIMAL_LITERAL}")
ctx.rule("DECIMAL_SCORE", b"{DECIMAL_LITERAL}")
ctx.rule("DECIMAL_SCORE", b"{DECIMAL_SCORE_LITERAL}")
    
ctx.rule("IDENTIFIER", b"{IDENTIFIER_TOKEN}")
ctx.rule("IDENTIFIER", b"{DECIMAL_LITERAL}")
ctx.rule("IDENTIFIER", b"{POSITIVE_DECIMAL_LITERAL}")
ctx.rule("IDENTIFIER", b"{DECIMAL_SCORE_LITERAL}")
    
ctx.rule("LEXICAL_SCORE", b"{IDENTIFIER}")
    
# Key name aliases
ctx.rule("STRING_KEY_NAME", b"{IDENTIFIER}")
ctx.rule("LIST_KEY_NAME", b"{IDENTIFIER}")
ctx.rule("SET_KEY_NAME", b"{IDENTIFIER}")
ctx.rule("SORTED_SET_KEY_NAME", b"{IDENTIFIER}")
ctx.rule("HASH_KEY_NAME", b"{IDENTIFIER}")
ctx.rule("KEY_NAME", b"{IDENTIFIER}")
ctx.rule("KEY_PATTERN", b"{IDENTIFIER}")
ctx.rule("DATABASE_NAME", b"{POSITIVE_DECIMAL_LITERAL}")
    
# Terminal tokens
ctx.regex("IDENTIFIER_TOKEN", "[a-zA-Z_][a-zA-Z0-9_]*")
ctx.regex("POSITIVE_DECIMAL_LITERAL", "[1-9][0-9]*")
ctx.regex("DECIMAL_LITERAL", "-?[0-9]+")
ctx.regex("DECIMAL_SCORE_LITERAL", "[+-]?[0-9]*\\.?[0-9]+([eE][+-]?[0-9]+)?")

# BAZINGA