import logging

from kumushi.code_parsing import CodeFunction
from kumushi.data import PoI, PoICluster, PoISource

from .analysis import Analysis, AnalysisWeight

_l = logging.getLogger(__name__)

class VariableDependenciesAnalysis(Analysis):
    NAME = "var_deps"
    ANALYSIS_WEIGHT = AnalysisWeight.LIGHT
    TIMEOUT = 60*10
    def __init__(self, *args, static_analyzer=None, **kwargs):
        super().__init__(*args, **kwargs)
        self.static_analyzer = static_analyzer

    def _analyze(self) -> list[PoICluster]:
        # assume only c and java for now
        if self.program.language in ["java", "jvm"]:
            lang = 'java'
        else:
            lang = 'c'
        func_names = self.static_analyzer.retrieve_pois(lang = lang)
        if not func_names:
            _l.info("VariableDepsAnalysis found no PoIs")
            return []
        # TODO: this could have a collision later and maybe should include path?!?!
        code_funcs = []
        for func_name in func_names:
            func = self.program.code.functions_by_name(func_name)
            if not func:
                _l.warning(f"Function %s not found in the code but was generated by VariableDepsAnalysis. Look into it?!?", func_name)
                continue
            code_funcs.extend(func)

        _l.info(f"VariableDepsAnalysis found {len(code_funcs)} functions and {len(func_names)} PoIs {func_names}")
        pois = [PoI(code_func, sources=[PoISource.VAR_DEP]) for code_func in code_funcs if code_func is not None]
        _l.info(f"PoI generated by VariableDepsAnalysis: {pois}")
        clusters = [PoICluster([poi], source=PoISource.VAR_DEP) for poi in pois]
        return clusters
