# 99e6bb03e45b2717208d1467162f521f1993afa1
# AUTOGENERATED BY afc-api-schema, but you can change the descriptions if you like

import logging
import traceback

from uuid import UUID
from shellphish_crs_utils.models.aixcc_api import (
    Task,
    SARIFBroadcast,
)
from crs_api.crs_api_impl import CRSAPI
from crs_api import shellphish_basic_auth, app
from flask import request, jsonify
from pydantic import ValidationError

logger = logging.getLogger(__name__)


@app.route("/status/", methods=["GET"])
@shellphish_basic_auth.login_required
def get_status():
    """
    report the status of the CRS

    Returns:
        Status: Object containing system status information
        200: Status Object
        500: Server error
    """
    try:
        status = CRSAPI.get_status()
        return jsonify(status.model_dump()), 200

    except Exception as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": str(traceback.format_exc())}), 500


@app.route("/status/", methods=["DELETE"])
@shellphish_basic_auth.login_required
def reset_status():
    """
    Reset all stats in the status endpoint.

    Returns:
        200: No Content
        500: Server error
    """
    try:
        raise NotImplementedError(
            "reset_status not implemented"
        )  # TODO XXX MISSING API
        return "", 200
    except Exception as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": str(traceback.format_exc())}), 500


@app.route("/v1/sarif/", methods=["POST"])
@shellphish_basic_auth.login_required
def submit_sarif():
    """
    submit a sarif broadcast

    Args:
        payload (SARIFBroadcast): Vulnerability Broadcast

    Returns:
        200: No Content
        400: Invalid request body
        500: Server error
    """
    try:
        sarif_broadcast = SARIFBroadcast.model_validate(request.json)
        CRSAPI.consume_sarif_broadcast(sarif_broadcast)
        return "", 200
    except ValidationError as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": "Invalid request body", "fields": e.errors()}), 400

    except Exception as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": str(traceback.format_exc())}), 500


@app.route("/v1/task/", methods=["POST"])
@shellphish_basic_auth.login_required
def submit_task():
    """
    submit a task for work

    Args:
        payload (Task): Submission body

    Returns:
        202: No Content
        400: Invalid request body
        500: Server error
    """
    try:
        logger.info("GITHUB ID: %s", request.headers.get("x-github-run-id"))
        task = Task.model_validate(request.json)
        CRSAPI.consume_tasking(task)
        return "", 202
    except ValidationError as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": "Invalid request body", "fields": e.errors()}), 400

    except Exception as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": str(traceback.format_exc())}), 500


@app.route("/v1/task/", methods=["DELETE"])
@shellphish_basic_auth.login_required
def cancel_all_tasks():
    """
    Cancel all previously submitted tasks. This is meant for edge case recovery in case something goes wrong.

    Returns:
        200: No Content
        500: Server error
    """
    try:
        raise NotImplementedError(
            "cancel_all_tasks not implemented"
        )  # TODO XXX MISSING API
        return "", 200
    except Exception as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": str(traceback.format_exc())}), 500


@app.route("/v1/task/<uuid:task_id>/", methods=["DELETE"])
@shellphish_basic_auth.login_required
def cancel_task(task_id: UUID):
    """
    Cancel a task by id. This is meant for edge case recovery in case something goes wrong.

    Args:
        task_id (UUID): Task ID

    Returns:
        200: No Content
        500: Server error
    """
    try:
        CRSAPI.cancel_task(task_id)
        return "", 200
    except Exception as e:
        logger.error(
            "Exception while processing status: %s", e, exc_info=True, stack_info=True
        )
        return jsonify({"message": str(traceback.format_exc())}), 500


def start_server():
    app.run(host="0.0.0.0", port=8000, debug=True)