# 4f31cfce88d4b678246dff00aad67f09db30e146
# AUTOGENERATED BY afc-api-schema

import requests
import logging
import json
import traceback
from uuid import UUID
from urllib3.util.retry import Retry
from shellphish_crs_utils.models.aixcc_api import (
    Error,
    POVSubmission,
    POVSubmissionResponse,
    PatchSubmission,
    PatchSubmissionResponse,
    SarifAssessmentSubmission,
    SarifAssessmentResponse,
    SARIFSubmission,
    SARIFSubmissionResponse,
    BundleSubmission,
    BundleSubmissionResponse,
    BundleSubmissionResponseVerbose,
    PingResponse,
)

logger = logging.getLogger(__name__)


class CompetitionAPIError(Exception):
    """Base exception for Competition API errors"""

    pass


class CompetitionAPI:
    """Client for interacting with the Competition API"""

    def __init__(self, base_url: str, username: str, password: str):
        """Initialize the API client

        Args:
            base_url: Base URL of the competition API
            username: Username for basic auth
            password: Password for basic auth
        """
        self.base_url = base_url.rstrip("/")
        self.session = requests.Session()
        self.session.auth = (username, password)

        # Configure retries
        adapter = requests.adapters.HTTPAdapter(max_retries=0)
        self.session.mount("http://", adapter)
        self.session.mount("https://", adapter)

    def _handle_error_response(self, response: requests.Response) -> None:
        """Handle error responses from the API

        Args:
            response: Response object from request

        Raises:
            CompetitionAPIError with appropriate message
            or ValueError with appropriate message
        """
        try:
            error = Error.model_validate_json(response.content)
            message = error.message
            if error.fields:
                message += f" Fields: {error.fields}"
        except:
            traceback.print_exc()
            message = response.text

        if response.status_code == 400:
            raise CompetitionAPIError(f"Bad request: {message}")
        elif response.status_code == 401:
            raise CompetitionAPIError(f"Unauthorized: {message}")
        elif response.status_code == 404:
            raise CompetitionAPIError(f"Not found: {message}")
        elif response.status_code == 500:
            raise CompetitionAPIError(f"Server error: {message}")
        else:
            raise ValueError(
                f"Unknown error ({response.status_code}): {message}"
            )

    def submit_pov(
        self, task_id: UUID, submission: POVSubmission
    ) -> POVSubmissionResponse:
        """Submit a POV for testing

        Args:
            task_id: UUID of the task
            submission: Vulnerability submission details

        Returns:
            POVSubmissionResponse with status and pov_id

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/pov/"
        logger.info(f"Submitting POV for task {task_id}")

        try:
            logger.info(f"Submitting POV json: {submission.model_dump_json()}")
            print(f"Submitting POV json: {submission.model_dump_json()}")
            response = self.session.post(
                url, json=json.loads(submission.model_dump_json())
            )

            if response.status_code != 200:
                self._handle_error_response(response)

            return POVSubmissionResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error submitting vulnerability: {str(e)}")

    def get_pov_status(self, task_id: UUID, pov_id: UUID) -> POVSubmissionResponse:
        """Get the status of a POV submission

        Args:
            task_id: UUID of the task
            pov_id: UUID of the POV

        Returns:
            POVSubmissionResponse with current status

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/pov/{pov_id}/"
        logger.info(f"Getting POV status for task {task_id}, POV {pov_id}")

        try:
            response = self.session.get(url)

            if response.status_code != 200:
                self._handle_error_response(response)

            return POVSubmissionResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error getting vulnerability status: {str(e)}")

    def submit_patch(
        self, task_id: UUID, submission: PatchSubmission
    ) -> PatchSubmissionResponse:
        """Submit a patch for testing

        Args:
            task_id: UUID of the task
            submission: Patch submission details

        Returns:
            PatchSubmissionResponse with status and patch_id

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/patch/"
        logger.info(f"Submitting patch for task {task_id}")
        logger.info(f"Submitting patch json: {submission.model_dump_json()}")
        print(f"Submitting patch json: {submission.model_dump_json()}")

        try:
            response = self.session.post(
                url, json=json.loads(submission.model_dump_json())
            )

            if response.status_code != 200:
                self._handle_error_response(response)

            return PatchSubmissionResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error submitting patch: {str(e)}")

    def get_patch_status(
        self, task_id: UUID, patch_id: UUID
    ) -> PatchSubmissionResponse:
        """Get the status of a patch submission

        Args:
            task_id: UUID of the task
            patch_id: UUID of the patch

        Returns:
            PatchSubmissionResponse with current status

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/patch/{patch_id}/"
        logger.info(f"Getting patch status for task {task_id}, patch {patch_id}")

        try:
            response = self.session.get(url)

            if response.status_code != 200:
                self._handle_error_response(response)

            return PatchSubmissionResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error getting patch status: {str(e)}")

    def submit_sarif_assessment(
        self,
        task_id: UUID,
        broadcast_sarif_id: UUID,
        submission: SarifAssessmentSubmission,
    ) -> SarifAssessmentResponse:
        """Submit an assessment of a SARIF report

        Args:
            task_id: UUID of the task
            broadcast_sarif_id: UUID of the broadcast SARIF report
            submission: Assessment submission details

        Returns:
            SarifAssessmentResponse with submission status

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/broadcast-sarif-assessment/{broadcast_sarif_id}/"
        logger.info(
            f"Submitting SARIF assessment for task {task_id}, broadcast SARIF {broadcast_sarif_id}"
        )

        logger.info(f"Submitting SARIF assessment json: {submission.model_dump_json()}")
        print(f"Submitting SARIF assessment json: {submission.model_dump_json()}")
        try:
            response = self.session.post(
                url, json=json.loads(submission.model_dump_json())
            )

            if response.status_code != 200:
                self._handle_error_response(response)

            return SarifAssessmentResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error submitting SARIF assessment: {str(e)}")

    def submit_sarif(
        self, task_id: UUID, submission: SARIFSubmission
    ) -> SARIFSubmissionResponse:
        """Submit a CRS generated SARIF

        Args:
            task_id: UUID of the task
            submission: SARIF submission details

        Returns:
            SARIFSubmissionResponse with status and submitted_sarif_id

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/submitted-sarif/"
        logger.info(f"Submitting SARIF for task {task_id}")

        try:
            response = self.session.post(
                url, json=json.loads(submission.model_dump_json())
            )

            if response.status_code != 200:
                self._handle_error_response(response)

            return SARIFSubmissionResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error submitting SARIF: {str(e)}")

    def submit_bundle(
        self, task_id: UUID, submission: BundleSubmission
    ) -> BundleSubmissionResponse:
        """Submit a bundle

        Args:
            task_id: UUID of the task
            submission: Bundle submission details

        Returns:
            BundleSubmissionResponse with status and bundle_id

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/bundle/"
        logger.info(f"Submitting bundle for task {task_id}")

        logger.info(f"Submitting bundle json: {submission.model_dump_json()}")
        print(f"Submitting bundle json: {submission.model_dump_json()}")
        try:
            response = self.session.post(
                url, json=json.loads(submission.model_dump_json())
            )

            if response.status_code != 200:
                self._handle_error_response(response)

            try:
                return BundleSubmissionResponse.model_validate_json(response.content)
            except Exception:
                return BundleSubmissionResponseVerbose.model_validate_json(
                    response.content
                )
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error submitting bundle: {str(e)}")

    def get_bundle(
        self, task_id: UUID, bundle_id: UUID
    ) -> BundleSubmissionResponseVerbose:
        """Get a bundle

        Args:
            task_id: UUID of the task
            bundle_id: UUID of the bundle

        Returns:
            BundleSubmissionResponseVerbose with bundle details

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/bundle/{bundle_id}/"
        logger.info(f"Getting bundle for task {task_id}, bundle {bundle_id}")

        try:
            response = self.session.get(url)

            if response.status_code != 200:
                self._handle_error_response(response)

            return BundleSubmissionResponseVerbose.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error getting bundle: {str(e)}")

    def update_bundle(
        self, task_id: UUID, bundle_id: UUID, submission: BundleSubmission
    ) -> BundleSubmissionResponseVerbose:
        """Update a bundle

        Args:
            task_id: UUID of the task
            bundle_id: UUID of the bundle
            submission: Updated bundle submission details

        Returns:
            BundleSubmissionResponseVerbose with updated bundle details

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/bundle/{bundle_id}/"
        logger.info(f"Updating bundle for task {task_id}, bundle {bundle_id}")

        try:
            response = self.session.patch(
                url, json=json.loads(submission.model_dump_json())
            )

            if response.status_code != 200:
                self._handle_error_response(response)

            return BundleSubmissionResponseVerbose.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error updating bundle: {str(e)}")

    def delete_bundle(self, task_id: UUID, bundle_id: UUID) -> None:
        """Delete a bundle

        Args:
            task_id: UUID of the task
            bundle_id: UUID of the bundle

        Raises:
            CompetitionAPIError if request fails
        """
        url = f"{self.base_url}/v1/task/{task_id}/bundle/{bundle_id}/"
        logger.info(f"Deleting bundle for task {task_id}, bundle {bundle_id}")

        try:
            response = self.session.delete(url)

            if response.status_code != 204:
                self._handle_error_response(response)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error deleting bundle: {str(e)}")

    def ping(self) -> PingResponse:
        """Ping the API

        Returns:
            PingResponse with status
        """
        url = f"{self.base_url}/v1/ping/"
        logger.info("Pinging API")

        try:
            response = self.session.get(url, timeout=2)

            if response.status_code != 200:
                self._handle_error_response(response)

            return PingResponse.model_validate_json(response.content)
        except Exception as e:
            traceback.print_exc()
            raise CompetitionAPIError(f"Error pinging API: {str(e)}")
