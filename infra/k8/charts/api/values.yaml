# Default values for api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: aixcc-crs-api
  tag: latest
  pullPolicy: Always

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: "api"
fullnameOverride: "api"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "api-sa"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
ciservice:
  type: LoadBalancer
  port: 80
  targetPort: 80
tailscaleservice:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 80

ciingress:
  enabled: false
  className: "nginx"
  annotations:
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: api.artiphishell.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

tailscaleingress:
  enabled: true

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 2Gi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
startupProbe:
  httpGet:
    path: /api/v1/health/
    port: http
  failureThreshold: 30
  periodSeconds: 10
livenessProbe: {}
readinessProbe: {}

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
- name: host-shared
  hostPath:
    path: /shared
    type: DirectoryOrCreate

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
- name: host-shared
  mountPath: /shared

nodeSelector:
  support.shellphish.net/only-critical: "true"

tolerations:
  - key: "support.shellphish.net/only-critical"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

affinity: {}

podPacking:
  enabled: true
  group: "critical"
  maxSkew: 4
  weight: 100

env: {}