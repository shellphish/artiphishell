# Default values for api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: telegraf
  # This sets the pull policy for images.
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: 1.32-alpine

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: acr-docker-secret
  - name: ci-acr-pull-secret
# This is to override the chart name.
nameOverride: "telegraf"
fullnameOverride: "telegraf"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations:
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "telegraf-sa"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: true
  port: 4317
  targetPort: 4317

resources:
  limits:
    cpu: 500m
    memory: 2Gi
  requests:
    cpu: 200m
    memory: 1Gi

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector:
  kubernetes.azure.com/mode: user

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
 
tolerations:
  - operator: Exists

affinity: {}

env:
  - name: INFLUX_ORG
    value: "artiphishell"
  - name: INFLUX_BUCKET
    value: "artiphishell"
  - name: INFLUX_URL
    value: "http://telemetrydb:8086"
  - name: INFLUX_TOKEN
    value: "shellphish-influxdb-token"
  - name: DOCKER_HOST
    value: "tcp://docker-builder:2375"

podPacking:
  enabled: true
  group: "critical"
  maxSkew: 4
  weight: 100

rbac:
  create: true
  clusterWide: true
  # Explicitly name the role
  roleName: "telegraf-cluster-role"
  # Explicitly name the binding
  roleBindingName: "telegraf-cluster-binding"
  rules:
    - apiGroups: [""]
      resources: ["pods", "pods/log", "pods/exec", "services", "secrets", "configmaps", "persistentvolumeclaims","nodes", "serviceaccounts"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["apps"]
      resources: ["deployments", "statefulsets","daemonsets"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["get", "list", "watch"]

