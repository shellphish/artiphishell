apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "litellm.fullname" . }}
  labels:
    {{- include "litellm.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "litellm.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: litellm
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "litellm.labels" . | nindent 8 }}
        {{- if .Values.podPacking.enabled }}
        support.shellphish.net/packing-group: {{ .Values.podPacking.group | quote }}
        {{- end }}
        app.kubernetes.io/component: litellm
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.podPacking.enabled }}
      topologySpreadConstraints:
      - maxSkew: {{ .Values.podPacking.maxSkew }}
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            support.shellphish.net/packing-group: {{ .Values.podPacking.group | quote }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: {{ .Values.podPacking.weight }}
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  support.shellphish.net/packing-group: {{ .Values.podPacking.group | quote }}
              topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "litellm.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.postgresql.enabled .Values.redis.enabled }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: wait-for-postgresql
          image: "{{ .Values.global.deployment_registry.value }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          command:
            - sh
            - -c
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until pg_isready -h {{ include "litellm.fullname" . }}-postgresql -p {{ .Values.postgresql.port }} -U {{ .Values.postgresql.username }}; do
                echo "PostgreSQL is not ready yet. Waiting..."
                sleep 2
              done
              echo "PostgreSQL is ready!"
        {{- end }}
        {{- if .Values.redis.enabled }}
        - name: wait-for-redis
          image: "{{ .Values.global.deployment_registry.value }}/{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          command:
            - sh
            - -c
            - |
              echo "Waiting for Redis to be ready..."
              until redis-cli -h {{ include "litellm.fullname" . }}-redis -p {{ .Values.redis.port }} ping; do
                echo "Redis is not ready yet. Waiting..."
                sleep 2
              done
              echo "Redis is ready!"
        {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          command: ["python3", "/usr/bin/litellm", "--port", "4000", "--config", "/app/proxy_server_config.yaml"]
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          image: "{{ .Values.global.deployment_registry.value }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: AGENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: agent-secret
                  key: AGENT_SECRET
            - name: IN_K8S
              value: "true"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: {{ .Values.global.otel_exporter_otlp_endpoint.value }}
            - name: API_COMPONENTS_USE_DUMMY_DATA
              value: "{{ .Values.global.api_components_use_dummy_data.value }}"
            - name: LITELLM_VERIFICATION_TOKEN
              value: "artiphishell!!"
            - name: LITELLM_MASTER_KEY
              value: "sk-artiphishell-da-best!!!"
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: "/etc/google/credentials.json"
            {{- if .Values.postgresql.enabled }}
            - name: DATABASE_URL
              value: "postgresql://{{ .Values.postgresql.username }}:{{ .Values.postgresql.password }}@{{ include "litellm.fullname" . }}-postgresql:{{ .Values.postgresql.port }}/{{ .Values.postgresql.database }}"
            {{- end }}
            {{- if .Values.redis.enabled }}
            - name: REDIS_HOST
              value: "{{ include "litellm.fullname" . }}-redis"
            - name: REDIS_PORT
              value: "{{ .Values.redis.port }}"
            {{- if .Values.redis.password }}
            - name: REDIS_PASSWORD
              value: "{{ .Values.redis.password }}"
            {{- end }}
            {{- end }}
          {{- with .Values.env }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
          envFrom:
            - secretRef:
                name: litellm-secrets
            - configMapRef:
                name: artiphishell-global-env
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            # Only needed for vertex api
            #- name: google-credentials
            #  mountPath: /etc/google
            #  readOnly: true

      volumes:
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        # Only needed for vertex api
        #- name: google-credentials
        #  secret:
        #    secretName: google-credentials

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}