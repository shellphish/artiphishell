# Default values for agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: aixcc-pdt-agent
  tag: latest
  pullPolicy: Always

# Define the container ports
containerPorts:
  - name: http
    containerPort: 8080
    protocol: TCP
  - name: debug
    containerPort: 5555
    protocol: TCP

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets:
  - name: acr-docker-secret
  - name: ci-acr-pull-secret

# This is to override the chart name.
nameOverride: "pydatatask-agent"
fullnameOverride: "pydatatask-agent"

# The agent uses a high priority class (pydatatask-agent-priority) to ensure it gets scheduled before other workloads
# and can preempt lower priority pods if necessary. This helps with autoscaling the critical node pool.

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "pydatatask-agent-sa"

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 8080

# Configuration for the ClusterIP service exposing the nginx upload endpoint
uploadService:
  type: ClusterIP
  # Service port clients will connect to on the ClusterIP
  port: 8080
  # Container port to forward to (nginx)
  targetPort: 8040

resources:
  limits:
    cpu: 20000m
    memory: 70Gi
  requests:
    cpu: 16000m
    memory: 50Gi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe: {}
readinessProbe: {}

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  # TODO this should be a PVC
  - name: pdt
    hostPath:
      path: /pdt
      type: DirectoryOrCreate
  - name: host-shared
    hostPath:
      path: /shared
      type: DirectoryOrCreate

# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - name: pdt
    mountPath: /pdt
    subPath: ""
  - name: backup
    mountPath: /backup
    subPath: ""
  - name: host-shared
    mountPath: /shared
  

# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

tolerations:
  - key: "support.shellphish.net/only-critical"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

affinity: {}

rbac:
  create: true
  clusterWide: true
  # Explicitly name the role
  roleName: "pydatatask-agent-cluster-role"
  # Explicitly name the binding
  roleBindingName: "pydatatask-agent-cluster-binding"
  rules:
    - apiGroups: [""]
      resources: ["pods", "pods/log", "pods/exec", "services", "secrets", "configmaps", "persistentvolumeclaims","nodes", "serviceaccounts"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: [""]
      resources: ["events"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["batch"]
      resources: ["jobs"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: ["apps"]
      resources: ["deployments", "statefulsets","daemonsets"]
      verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["networking.k8s.io"]
      resources: ["ingresses"]
      verbs: ["get", "list", "watch"]
    - apiGroups: [""]
      resources: ["namespaces"]
      verbs: ["get", "list", "watch"]

# TODO(finaldeploy) set these back to 10Ti
persistence:
  enabled: true
  storageClass: "managed-csi-premium"
  size: 15Ti
  accessMode: ReadWriteOnce
  name: pdt-storage

backupPersistence:
  enabled: true
  storageClass: "managed-csi-premium"
  size: 10Ti
  accessMode: ReadWriteOnce
  name: backup-storage

podPacking:
  enabled: true
  group: "critical"
  maxSkew: 4
  weight: 100

env: {}